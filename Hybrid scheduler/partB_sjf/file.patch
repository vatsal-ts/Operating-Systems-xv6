diff -ruN xv6-public/bio.d xv6-public-partB_sjf/bio.d
--- xv6-public/bio.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/bio.d	2022-10-07 20:27:34.743034000 +0530
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/bio.o and xv6-public-partB_sjf/bio.o differ
diff -ruN xv6-public/bootasm.d xv6-public-partB_sjf/bootasm.d
--- xv6-public/bootasm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/bootasm.d	2022-10-07 20:27:34.667034000 +0530
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files xv6-public/bootasm.o and xv6-public-partB_sjf/bootasm.o differ
Binary files xv6-public/bootblock and xv6-public-partB_sjf/bootblock differ
diff -ruN xv6-public/bootblock.asm xv6-public-partB_sjf/bootblock.asm
--- xv6-public/bootblock.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/bootblock.asm	2022-10-07 20:27:34.683034000 +0530
@@ -0,0 +1,361 @@
+
+bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0xe>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 fc 00 00 00       	call   7d49 <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+  entry();
+}
+
+void
+waitdisk(void)
+{
+    7c7e:	f3 0f 1e fb          	endbr32 
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c82:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c87:	ec                   	in     (%dx),%al
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c88:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c8b:	3c 40                	cmp    $0x40,%al
+    7c8d:	75 f8                	jne    7c87 <waitdisk+0x9>
+    ;
+}
+    7c8f:	c3                   	ret    
+
+00007c90 <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c90:	f3 0f 1e fb          	endbr32 
+    7c94:	55                   	push   %ebp
+    7c95:	89 e5                	mov    %esp,%ebp
+    7c97:	57                   	push   %edi
+    7c98:	53                   	push   %ebx
+    7c99:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c9c:	e8 dd ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7ca1:	b8 01 00 00 00       	mov    $0x1,%eax
+    7ca6:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7cab:	ee                   	out    %al,(%dx)
+    7cac:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cb1:	89 d8                	mov    %ebx,%eax
+    7cb3:	ee                   	out    %al,(%dx)
+  outb(0x1F2, 1);   // count = 1
+  outb(0x1F3, offset);
+  outb(0x1F4, offset >> 8);
+    7cb4:	89 d8                	mov    %ebx,%eax
+    7cb6:	c1 e8 08             	shr    $0x8,%eax
+    7cb9:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cbe:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+    7cbf:	89 d8                	mov    %ebx,%eax
+    7cc1:	c1 e8 10             	shr    $0x10,%eax
+    7cc4:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc9:	ee                   	out    %al,(%dx)
+  outb(0x1F6, (offset >> 24) | 0xE0);
+    7cca:	89 d8                	mov    %ebx,%eax
+    7ccc:	c1 e8 18             	shr    $0x18,%eax
+    7ccf:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cd2:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cd7:	ee                   	out    %al,(%dx)
+    7cd8:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cdd:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7ce2:	ee                   	out    %al,(%dx)
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7ce3:	e8 96 ff ff ff       	call   7c7e <waitdisk>
+  asm volatile("cld; rep insl" :
+    7ce8:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ceb:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7cf0:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7cf5:	fc                   	cld    
+    7cf6:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf8:	5b                   	pop    %ebx
+    7cf9:	5f                   	pop    %edi
+    7cfa:	5d                   	pop    %ebp
+    7cfb:	c3                   	ret    
+
+00007cfc <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cfc:	f3 0f 1e fb          	endbr32 
+    7d00:	55                   	push   %ebp
+    7d01:	89 e5                	mov    %esp,%ebp
+    7d03:	57                   	push   %edi
+    7d04:	56                   	push   %esi
+    7d05:	53                   	push   %ebx
+    7d06:	83 ec 0c             	sub    $0xc,%esp
+    7d09:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d0c:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d0f:	89 df                	mov    %ebx,%edi
+    7d11:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d14:	89 f0                	mov    %esi,%eax
+    7d16:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d1b:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d1d:	c1 ee 09             	shr    $0x9,%esi
+    7d20:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d23:	39 df                	cmp    %ebx,%edi
+    7d25:	76 1a                	jbe    7d41 <readseg+0x45>
+    readsect(pa, offset);
+    7d27:	83 ec 08             	sub    $0x8,%esp
+    7d2a:	56                   	push   %esi
+    7d2b:	53                   	push   %ebx
+    7d2c:	e8 5f ff ff ff       	call   7c90 <readsect>
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d31:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d37:	83 c6 01             	add    $0x1,%esi
+    7d3a:	83 c4 10             	add    $0x10,%esp
+    7d3d:	39 df                	cmp    %ebx,%edi
+    7d3f:	77 e6                	ja     7d27 <readseg+0x2b>
+}
+    7d41:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d44:	5b                   	pop    %ebx
+    7d45:	5e                   	pop    %esi
+    7d46:	5f                   	pop    %edi
+    7d47:	5d                   	pop    %ebp
+    7d48:	c3                   	ret    
+
+00007d49 <bootmain>:
+{
+    7d49:	f3 0f 1e fb          	endbr32 
+    7d4d:	55                   	push   %ebp
+    7d4e:	89 e5                	mov    %esp,%ebp
+    7d50:	57                   	push   %edi
+    7d51:	56                   	push   %esi
+    7d52:	53                   	push   %ebx
+    7d53:	83 ec 10             	sub    $0x10,%esp
+  readseg((uchar*)elf, 4096, 0);
+    7d56:	6a 00                	push   $0x0
+    7d58:	68 00 10 00 00       	push   $0x1000
+    7d5d:	68 00 00 01 00       	push   $0x10000
+    7d62:	e8 95 ff ff ff       	call   7cfc <readseg>
+  if(elf->magic != ELF_MAGIC)
+    7d67:	83 c4 10             	add    $0x10,%esp
+    7d6a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d71:	45 4c 46 
+    7d74:	75 21                	jne    7d97 <bootmain+0x4e>
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d76:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d7b:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d81:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d88:	c1 e6 05             	shl    $0x5,%esi
+    7d8b:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d8d:	39 f3                	cmp    %esi,%ebx
+    7d8f:	72 15                	jb     7da6 <bootmain+0x5d>
+  entry();
+    7d91:	ff 15 18 00 01 00    	call   *0x10018
+}
+    7d97:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d9a:	5b                   	pop    %ebx
+    7d9b:	5e                   	pop    %esi
+    7d9c:	5f                   	pop    %edi
+    7d9d:	5d                   	pop    %ebp
+    7d9e:	c3                   	ret    
+  for(; ph < eph; ph++){
+    7d9f:	83 c3 20             	add    $0x20,%ebx
+    7da2:	39 de                	cmp    %ebx,%esi
+    7da4:	76 eb                	jbe    7d91 <bootmain+0x48>
+    pa = (uchar*)ph->paddr;
+    7da6:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7da9:	83 ec 04             	sub    $0x4,%esp
+    7dac:	ff 73 04             	pushl  0x4(%ebx)
+    7daf:	ff 73 10             	pushl  0x10(%ebx)
+    7db2:	57                   	push   %edi
+    7db3:	e8 44 ff ff ff       	call   7cfc <readseg>
+    if(ph->memsz > ph->filesz)
+    7db8:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7dbb:	8b 43 10             	mov    0x10(%ebx),%eax
+    7dbe:	83 c4 10             	add    $0x10,%esp
+    7dc1:	39 c1                	cmp    %eax,%ecx
+    7dc3:	76 da                	jbe    7d9f <bootmain+0x56>
+      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
+    7dc5:	01 c7                	add    %eax,%edi
+    7dc7:	29 c1                	sub    %eax,%ecx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7dc9:	b8 00 00 00 00       	mov    $0x0,%eax
+    7dce:	fc                   	cld    
+    7dcf:	f3 aa                	rep stos %al,%es:(%edi)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+    7dd1:	eb cc                	jmp    7d9f <bootmain+0x56>
Binary files xv6-public/bootblock.o and xv6-public-partB_sjf/bootblock.o differ
Binary files xv6-public/bootblockother.o and xv6-public-partB_sjf/bootblockother.o differ
diff -ruN xv6-public/bootmain.d xv6-public-partB_sjf/bootmain.d
--- xv6-public/bootmain.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/bootmain.d	2022-10-07 20:27:34.655033000 +0530
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files xv6-public/bootmain.o and xv6-public-partB_sjf/bootmain.o differ
Binary files xv6-public/_burstTimeTest and xv6-public-partB_sjf/_burstTimeTest differ
diff -ruN xv6-public/burstTimeTest.asm xv6-public-partB_sjf/burstTimeTest.asm
--- xv6-public/burstTimeTest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/burstTimeTest.asm	2022-10-07 20:27:45.623130000 +0530
@@ -0,0 +1,1488 @@
+
+_burstTimeTest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 0c             	sub    $0xc,%esp
+	printf(1,"Burst time is set to 10\n");
+  15:	68 e0 09 00 00       	push   $0x9e0
+  1a:	6a 01                	push   $0x1
+  1c:	e8 1f 04 00 00       	call   440 <printf>
+	set_burst_time(10);
+  21:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  28:	e8 3e 03 00 00       	call   36b <set_burst_time>
+	printf(1, "Getting the value of burst time %d\n", get_burst_time());
+  2d:	e8 41 03 00 00       	call   373 <get_burst_time>
+  32:	83 c4 0c             	add    $0xc,%esp
+  35:	50                   	push   %eax
+  36:	68 fc 09 00 00       	push   $0x9fc
+  3b:	6a 01                	push   $0x1
+  3d:	e8 fe 03 00 00       	call   440 <printf>
+	exit();
+  42:	e8 6c 02 00 00       	call   2b3 <exit>
+  47:	66 90                	xchg   %ax,%ax
+  49:	66 90                	xchg   %ax,%ax
+  4b:	66 90                	xchg   %ax,%ax
+  4d:	66 90                	xchg   %ax,%ax
+  4f:	90                   	nop
+
+00000050 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  50:	f3 0f 1e fb          	endbr32 
+  54:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  55:	31 c0                	xor    %eax,%eax
+{
+  57:	89 e5                	mov    %esp,%ebp
+  59:	53                   	push   %ebx
+  5a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  5d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  60:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  64:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  67:	83 c0 01             	add    $0x1,%eax
+  6a:	84 d2                	test   %dl,%dl
+  6c:	75 f2                	jne    60 <strcpy+0x10>
+    ;
+  return os;
+}
+  6e:	89 c8                	mov    %ecx,%eax
+  70:	5b                   	pop    %ebx
+  71:	5d                   	pop    %ebp
+  72:	c3                   	ret    
+  73:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000080 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  85:	89 e5                	mov    %esp,%ebp
+  87:	53                   	push   %ebx
+  88:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  8e:	0f b6 01             	movzbl (%ecx),%eax
+  91:	0f b6 1a             	movzbl (%edx),%ebx
+  94:	84 c0                	test   %al,%al
+  96:	75 19                	jne    b1 <strcmp+0x31>
+  98:	eb 26                	jmp    c0 <strcmp+0x40>
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  a4:	83 c1 01             	add    $0x1,%ecx
+  a7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  aa:	0f b6 1a             	movzbl (%edx),%ebx
+  ad:	84 c0                	test   %al,%al
+  af:	74 0f                	je     c0 <strcmp+0x40>
+  b1:	38 d8                	cmp    %bl,%al
+  b3:	74 eb                	je     a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  b5:	29 d8                	sub    %ebx,%eax
+}
+  b7:	5b                   	pop    %ebx
+  b8:	5d                   	pop    %ebp
+  b9:	c3                   	ret    
+  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  c2:	29 d8                	sub    %ebx,%eax
+}
+  c4:	5b                   	pop    %ebx
+  c5:	5d                   	pop    %ebp
+  c6:	c3                   	ret    
+  c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ce:	66 90                	xchg   %ax,%ax
+
+000000d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  d0:	f3 0f 1e fb          	endbr32 
+  d4:	55                   	push   %ebp
+  d5:	89 e5                	mov    %esp,%ebp
+  d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  da:	80 3a 00             	cmpb   $0x0,(%edx)
+  dd:	74 21                	je     100 <strlen+0x30>
+  df:	31 c0                	xor    %eax,%eax
+  e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  e8:	83 c0 01             	add    $0x1,%eax
+  eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  ef:	89 c1                	mov    %eax,%ecx
+  f1:	75 f5                	jne    e8 <strlen+0x18>
+    ;
+  return n;
+}
+  f3:	89 c8                	mov    %ecx,%eax
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 100:	31 c9                	xor    %ecx,%ecx
+}
+ 102:	5d                   	pop    %ebp
+ 103:	89 c8                	mov    %ecx,%eax
+ 105:	c3                   	ret    
+ 106:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	57                   	push   %edi
+ 118:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 11b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 121:	89 d7                	mov    %edx,%edi
+ 123:	fc                   	cld    
+ 124:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 126:	89 d0                	mov    %edx,%eax
+ 128:	5f                   	pop    %edi
+ 129:	5d                   	pop    %ebp
+ 12a:	c3                   	ret    
+ 12b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 12f:	90                   	nop
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	f3 0f 1e fb          	endbr32 
+ 134:	55                   	push   %ebp
+ 135:	89 e5                	mov    %esp,%ebp
+ 137:	8b 45 08             	mov    0x8(%ebp),%eax
+ 13a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 13e:	0f b6 10             	movzbl (%eax),%edx
+ 141:	84 d2                	test   %dl,%dl
+ 143:	75 16                	jne    15b <strchr+0x2b>
+ 145:	eb 21                	jmp    168 <strchr+0x38>
+ 147:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14e:	66 90                	xchg   %ax,%ax
+ 150:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	84 d2                	test   %dl,%dl
+ 159:	74 0d                	je     168 <strchr+0x38>
+    if(*s == c)
+ 15b:	38 d1                	cmp    %dl,%cl
+ 15d:	75 f1                	jne    150 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 15f:	5d                   	pop    %ebp
+ 160:	c3                   	ret    
+ 161:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 168:	31 c0                	xor    %eax,%eax
+}
+ 16a:	5d                   	pop    %ebp
+ 16b:	c3                   	ret    
+ 16c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	57                   	push   %edi
+ 178:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 179:	31 f6                	xor    %esi,%esi
+{
+ 17b:	53                   	push   %ebx
+ 17c:	89 f3                	mov    %esi,%ebx
+ 17e:	83 ec 1c             	sub    $0x1c,%esp
+ 181:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 184:	eb 33                	jmp    1b9 <gets+0x49>
+ 186:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 190:	83 ec 04             	sub    $0x4,%esp
+ 193:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 196:	6a 01                	push   $0x1
+ 198:	50                   	push   %eax
+ 199:	6a 00                	push   $0x0
+ 19b:	e8 2b 01 00 00       	call   2cb <read>
+    if(cc < 1)
+ 1a0:	83 c4 10             	add    $0x10,%esp
+ 1a3:	85 c0                	test   %eax,%eax
+ 1a5:	7e 1c                	jle    1c3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1ab:	83 c7 01             	add    $0x1,%edi
+ 1ae:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1b1:	3c 0a                	cmp    $0xa,%al
+ 1b3:	74 23                	je     1d8 <gets+0x68>
+ 1b5:	3c 0d                	cmp    $0xd,%al
+ 1b7:	74 1f                	je     1d8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1b9:	83 c3 01             	add    $0x1,%ebx
+ 1bc:	89 fe                	mov    %edi,%esi
+ 1be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1c1:	7c cd                	jl     190 <gets+0x20>
+ 1c3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1c5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1c8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ce:	5b                   	pop    %ebx
+ 1cf:	5e                   	pop    %esi
+ 1d0:	5f                   	pop    %edi
+ 1d1:	5d                   	pop    %ebp
+ 1d2:	c3                   	ret    
+ 1d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1d7:	90                   	nop
+ 1d8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1de:	01 de                	add    %ebx,%esi
+ 1e0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1e2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1e8:	5b                   	pop    %ebx
+ 1e9:	5e                   	pop    %esi
+ 1ea:	5f                   	pop    %edi
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	f3 0f 1e fb          	endbr32 
+ 1f4:	55                   	push   %ebp
+ 1f5:	89 e5                	mov    %esp,%ebp
+ 1f7:	56                   	push   %esi
+ 1f8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f9:	83 ec 08             	sub    $0x8,%esp
+ 1fc:	6a 00                	push   $0x0
+ 1fe:	ff 75 08             	pushl  0x8(%ebp)
+ 201:	e8 ed 00 00 00       	call   2f3 <open>
+  if(fd < 0)
+ 206:	83 c4 10             	add    $0x10,%esp
+ 209:	85 c0                	test   %eax,%eax
+ 20b:	78 2b                	js     238 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 20d:	83 ec 08             	sub    $0x8,%esp
+ 210:	ff 75 0c             	pushl  0xc(%ebp)
+ 213:	89 c3                	mov    %eax,%ebx
+ 215:	50                   	push   %eax
+ 216:	e8 f0 00 00 00       	call   30b <fstat>
+  close(fd);
+ 21b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 220:	e8 b6 00 00 00       	call   2db <close>
+  return r;
+ 225:	83 c4 10             	add    $0x10,%esp
+}
+ 228:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 22b:	89 f0                	mov    %esi,%eax
+ 22d:	5b                   	pop    %ebx
+ 22e:	5e                   	pop    %esi
+ 22f:	5d                   	pop    %ebp
+ 230:	c3                   	ret    
+ 231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 238:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 23d:	eb e9                	jmp    228 <stat+0x38>
+ 23f:	90                   	nop
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	f3 0f 1e fb          	endbr32 
+ 244:	55                   	push   %ebp
+ 245:	89 e5                	mov    %esp,%ebp
+ 247:	53                   	push   %ebx
+ 248:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 24b:	0f be 02             	movsbl (%edx),%eax
+ 24e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 251:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 254:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 259:	77 1a                	ja     275 <atoi+0x35>
+ 25b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 25f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 260:	83 c2 01             	add    $0x1,%edx
+ 263:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 266:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 02             	movsbl (%edx),%eax
+ 26d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	89 c8                	mov    %ecx,%eax
+ 277:	5b                   	pop    %ebx
+ 278:	5d                   	pop    %ebp
+ 279:	c3                   	ret    
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	f3 0f 1e fb          	endbr32 
+ 284:	55                   	push   %ebp
+ 285:	89 e5                	mov    %esp,%ebp
+ 287:	57                   	push   %edi
+ 288:	8b 45 10             	mov    0x10(%ebp),%eax
+ 28b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28e:	56                   	push   %esi
+ 28f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 292:	85 c0                	test   %eax,%eax
+ 294:	7e 0f                	jle    2a5 <memmove+0x25>
+ 296:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 298:	89 d7                	mov    %edx,%edi
+ 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 f8                	cmp    %edi,%eax
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	89 d0                	mov    %edx,%eax
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+
+000002ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <exit>:
+SYSCALL(exit)
+ 2b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <wait>:
+SYSCALL(wait)
+ 2bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <pipe>:
+SYSCALL(pipe)
+ 2c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <read>:
+SYSCALL(read)
+ 2cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <write>:
+SYSCALL(write)
+ 2d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <close>:
+SYSCALL(close)
+ 2db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <kill>:
+SYSCALL(kill)
+ 2e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <exec>:
+SYSCALL(exec)
+ 2eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <open>:
+SYSCALL(open)
+ 2f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mknod>:
+SYSCALL(mknod)
+ 2fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <unlink>:
+SYSCALL(unlink)
+ 303:	b8 12 00 00 00       	mov    $0x12,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <fstat>:
+SYSCALL(fstat)
+ 30b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <link>:
+SYSCALL(link)
+ 313:	b8 13 00 00 00       	mov    $0x13,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mkdir>:
+SYSCALL(mkdir)
+ 31b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <chdir>:
+SYSCALL(chdir)
+ 323:	b8 09 00 00 00       	mov    $0x9,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <dup>:
+SYSCALL(dup)
+ 32b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getpid>:
+SYSCALL(getpid)
+ 333:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <sbrk>:
+SYSCALL(sbrk)
+ 33b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <sleep>:
+SYSCALL(sleep)
+ 343:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <uptime>:
+SYSCALL(uptime)
+ 34b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getNumProc>:
+SYSCALL(getNumProc)
+ 353:	b8 16 00 00 00       	mov    $0x16,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 35b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 363:	b8 18 00 00 00       	mov    $0x18,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 36b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 373:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 37b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getCurrentPID>:
+ 383:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+ 38b:	66 90                	xchg   %ax,%ax
+ 38d:	66 90                	xchg   %ax,%ax
+ 38f:	90                   	nop
+
+00000390 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+ 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 39c:	89 d1                	mov    %edx,%ecx
+{
+ 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3a1:	85 d2                	test   %edx,%edx
+ 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
+ 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ad:	74 79                	je     428 <printint+0x98>
+    neg = 1;
+ 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3b6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3b8:	31 db                	xor    %ebx,%ebx
+ 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3c0:	89 c8                	mov    %ecx,%eax
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	89 cf                	mov    %ecx,%edi
+ 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3c9:	0f b6 92 28 0a 00 00 	movzbl 0xa28(%edx),%edx
+ 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3d3:	89 d8                	mov    %ebx,%eax
+ 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+  if(neg)
+ 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3e6:	85 c9                	test   %ecx,%ecx
+ 3e8:	74 0c                	je     3f6 <printint+0x66>
+    buf[i++] = '-';
+ 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ef:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3fd:	eb 07                	jmp    406 <printint+0x76>
+ 3ff:	90                   	nop
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 be fe ff ff       	call   2d3 <write>
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 42f:	eb 87                	jmp    3b8 <printint+0x28>
+ 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	f3 0f 1e fb          	endbr32 
+ 444:	55                   	push   %ebp
+ 445:	89 e5                	mov    %esp,%ebp
+ 447:	57                   	push   %edi
+ 448:	56                   	push   %esi
+ 449:	53                   	push   %ebx
+ 44a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 450:	0f b6 1e             	movzbl (%esi),%ebx
+ 453:	84 db                	test   %bl,%bl
+ 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 45b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 464:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 469:	eb 33                	jmp    49e <printf+0x5e>
+ 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+ 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 473:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 17                	je     494 <printf+0x54>
+  write(fd, &c, 1);
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	ff 75 08             	pushl  0x8(%ebp)
+ 489:	e8 45 fe ff ff       	call   2d3 <write>
+ 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 491:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 494:	0f b6 1e             	movzbl (%esi),%ebx
+ 497:	83 c6 01             	add    $0x1,%esi
+ 49a:	84 db                	test   %bl,%bl
+ 49c:	74 71                	je     50f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 49e:	0f be cb             	movsbl %bl,%ecx
+ 4a1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4a4:	85 d2                	test   %edx,%edx
+ 4a6:	74 c8                	je     470 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4a8:	83 fa 25             	cmp    $0x25,%edx
+ 4ab:	75 e7                	jne    494 <printf+0x54>
+      if(c == 'd'){
+ 4ad:	83 f8 64             	cmp    $0x64,%eax
+ 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4bc:	83 f9 70             	cmp    $0x70,%ecx
+ 4bf:	74 5f                	je     520 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4c1:	83 f8 73             	cmp    $0x73,%eax
+ 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ca:	83 f8 63             	cmp    $0x63,%eax
+ 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4d3:	83 f8 25             	cmp    $0x25,%eax
+ 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+  write(fd, &c, 1);
+ 4dc:	83 ec 04             	sub    $0x4,%esp
+ 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4e3:	6a 01                	push   $0x1
+ 4e5:	57                   	push   %edi
+ 4e6:	ff 75 08             	pushl  0x8(%ebp)
+ 4e9:	e8 e5 fd ff ff       	call   2d3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4f1:	83 c4 0c             	add    $0xc,%esp
+ 4f4:	6a 01                	push   $0x1
+ 4f6:	83 c6 01             	add    $0x1,%esi
+ 4f9:	57                   	push   %edi
+ 4fa:	ff 75 08             	pushl  0x8(%ebp)
+ 4fd:	e8 d1 fd ff ff       	call   2d3 <write>
+  for(i = 0; fmt[i]; i++){
+ 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 506:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 509:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 50b:	84 db                	test   %bl,%bl
+ 50d:	75 8f                	jne    49e <printf+0x5e>
+    }
+  }
+}
+ 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 512:	5b                   	pop    %ebx
+ 513:	5e                   	pop    %esi
+ 514:	5f                   	pop    %edi
+ 515:	5d                   	pop    %ebp
+ 516:	c3                   	ret    
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 52d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 530:	8b 13                	mov    (%ebx),%edx
+ 532:	e8 59 fe ff ff       	call   390 <printint>
+        ap++;
+ 537:	89 d8                	mov    %ebx,%eax
+ 539:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 53c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 53e:	83 c0 04             	add    $0x4,%eax
+ 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	eb ce                	jmp    52a <printf+0xea>
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+        ap++;
+ 56a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 56d:	57                   	push   %edi
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 574:	e8 5a fd ff ff       	call   2d3 <write>
+        ap++;
+ 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 57c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57f:	31 d2                	xor    %edx,%edx
+ 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+        s = (char*)*ap;
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5a5:	83 c0 04             	add    $0x4,%eax
+ 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5ab:	85 db                	test   %ebx,%ebx
+ 5ad:	74 17                	je     5c6 <printf+0x186>
+        while(*s != 0){
+ 5af:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5b2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5b4:	84 c0                	test   %al,%al
+ 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
+ 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5bf:	89 de                	mov    %ebx,%esi
+ 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+          s = "(null)";
+ 5c6:	bb 20 0a 00 00       	mov    $0xa20,%ebx
+        while(*s != 0){
+ 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	89 de                	mov    %ebx,%esi
+ 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5e3:	83 c6 01             	add    $0x1,%esi
+ 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	57                   	push   %edi
+ 5ec:	53                   	push   %ebx
+ 5ed:	e8 e1 fc ff ff       	call   2d3 <write>
+        while(*s != 0){
+ 5f2:	0f b6 06             	movzbl (%esi),%eax
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	84 c0                	test   %al,%al
+ 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
+ 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
+ 606:	66 90                	xchg   %ax,%ax
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	f3 0f 1e fb          	endbr32 
+ 614:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 615:	a1 80 0d 00 00       	mov    0xd80,%eax
+{
+ 61a:	89 e5                	mov    %esp,%ebp
+ 61c:	57                   	push   %edi
+ 61d:	56                   	push   %esi
+ 61e:	53                   	push   %ebx
+ 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 622:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 627:	39 c8                	cmp    %ecx,%eax
+ 629:	73 15                	jae    640 <free+0x30>
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+ 630:	39 d1                	cmp    %edx,%ecx
+ 632:	72 14                	jb     648 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 634:	39 d0                	cmp    %edx,%eax
+ 636:	73 10                	jae    648 <free+0x38>
+{
+ 638:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 63a:	8b 10                	mov    (%eax),%edx
+ 63c:	39 c8                	cmp    %ecx,%eax
+ 63e:	72 f0                	jb     630 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 f4                	jb     638 <free+0x28>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	73 f0                	jae    638 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 fa                	cmp    %edi,%edx
+ 650:	74 1e                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 655:	8b 50 04             	mov    0x4(%eax),%edx
+ 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 28                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 65f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 661:	5b                   	pop    %ebx
+  freep = p;
+ 662:	a3 80 0d 00 00       	mov    %eax,0xd80
+}
+ 667:	5e                   	pop    %esi
+ 668:	5f                   	pop    %edi
+ 669:	5d                   	pop    %ebp
+ 66a:	c3                   	ret    
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 d8                	jne    65f <free+0x4f>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 80 0d 00 00       	mov    %eax,0xd80
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	f3 0f 1e fb          	endbr32 
+ 6a4:	55                   	push   %ebp
+ 6a5:	89 e5                	mov    %esp,%ebp
+ 6a7:	57                   	push   %edi
+ 6a8:	56                   	push   %esi
+ 6a9:	53                   	push   %ebx
+ 6aa:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6b0:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b9:	c1 ee 03             	shr    $0x3,%esi
+ 6bc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6bf:	85 ff                	test   %edi,%edi
+ 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cc:	39 f1                	cmp    %esi,%ecx
+ 6ce:	73 6d                	jae    73d <malloc+0x9d>
+ 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6db:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6e8:	eb 17                	jmp    701 <malloc+0x61>
+ 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	73 4f                	jae    748 <malloc+0xa8>
+ 6f9:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+ 6ff:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 701:	39 c7                	cmp    %eax,%edi
+ 703:	75 eb                	jne    6f0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 705:	83 ec 0c             	sub    $0xc,%esp
+ 708:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 70b:	e8 2b fc ff ff       	call   33b <sbrk>
+  if(p == (char*)-1)
+ 710:	83 c4 10             	add    $0x10,%esp
+ 713:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 716:	74 1b                	je     733 <malloc+0x93>
+  hp->s.size = nu;
+ 718:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	83 c0 08             	add    $0x8,%eax
+ 721:	50                   	push   %eax
+ 722:	e8 e9 fe ff ff       	call   610 <free>
+  return freep;
+ 727:	a1 80 0d 00 00       	mov    0xd80,%eax
+      if((p = morecore(nunits)) == 0)
+ 72c:	83 c4 10             	add    $0x10,%esp
+ 72f:	85 c0                	test   %eax,%eax
+ 731:	75 bd                	jne    6f0 <malloc+0x50>
+        return 0;
+  }
+}
+ 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 736:	31 c0                	xor    %eax,%eax
+}
+ 738:	5b                   	pop    %ebx
+ 739:	5e                   	pop    %esi
+ 73a:	5f                   	pop    %edi
+ 73b:	5d                   	pop    %ebp
+ 73c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 73d:	89 c2                	mov    %eax,%edx
+ 73f:	89 f8                	mov    %edi,%eax
+ 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 748:	39 ce                	cmp    %ecx,%esi
+ 74a:	74 54                	je     7a0 <malloc+0x100>
+        p->s.size -= nunits;
+ 74c:	29 f1                	sub    %esi,%ecx
+ 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 754:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 757:	a3 80 0d 00 00       	mov    %eax,0xd80
+}
+ 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 75f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 762:	5b                   	pop    %ebx
+ 763:	5e                   	pop    %esi
+ 764:	5f                   	pop    %edi
+ 765:	5d                   	pop    %ebp
+ 766:	c3                   	ret    
+ 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 770:	c7 05 80 0d 00 00 84 	movl   $0xd84,0xd80
+ 777:	0d 00 00 
+    base.s.size = 0;
+ 77a:	bf 84 0d 00 00       	mov    $0xd84,%edi
+    base.s.ptr = freep = prevp = &base;
+ 77f:	c7 05 84 0d 00 00 84 	movl   $0xd84,0xd84
+ 786:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 789:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 78b:	c7 05 88 0d 00 00 00 	movl   $0x0,0xd88
+ 792:	00 00 00 
+    if(p->s.size >= nunits){
+ 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 0a                	mov    (%edx),%ecx
+ 7a2:	89 08                	mov    %ecx,(%eax)
+ 7a4:	eb b1                	jmp    757 <malloc+0xb7>
+ 7a6:	66 90                	xchg   %ax,%ax
+ 7a8:	66 90                	xchg   %ax,%ax
+ 7aa:	66 90                	xchg   %ax,%ax
+ 7ac:	66 90                	xchg   %ax,%ax
+ 7ae:	66 90                	xchg   %ax,%ax
+
+000007b0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7b0:	f3 0f 1e fb          	endbr32 
+ 7b4:	55                   	push   %ebp
+ 7b5:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 7ba:	89 e5                	mov    %esp,%ebp
+ 7bc:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7bf:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+    for (mti=1; mti<N; mti++)
+ 7c5:	eb 0c                	jmp    7d3 <sgenrand+0x23>
+ 7c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ce:	66 90                	xchg   %ax,%ax
+ 7d0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7d3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7d9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7db:	3d 5c 17 00 00       	cmp    $0x175c,%eax
+ 7e0:	75 ee                	jne    7d0 <sgenrand+0x20>
+ 7e2:	c7 05 60 0d 00 00 70 	movl   $0x270,0xd60
+ 7e9:	02 00 00 
+}
+ 7ec:	5d                   	pop    %ebp
+ 7ed:	c3                   	ret    
+ 7ee:	66 90                	xchg   %ax,%ax
+
+000007f0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7f0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7f4:	a1 60 0d 00 00       	mov    0xd60,%eax
+ 7f9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7fe:	7f 3c                	jg     83c <genrand+0x4c>
+ 800:	8d 50 01             	lea    0x1(%eax),%edx
+ 803:	8b 04 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 80a:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    y ^= TEMPERING_SHIFT_U(y);
+ 810:	89 c2                	mov    %eax,%edx
+ 812:	c1 ea 0b             	shr    $0xb,%edx
+ 815:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 817:	89 d0                	mov    %edx,%eax
+ 819:	c1 e0 07             	shl    $0x7,%eax
+ 81c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 821:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 823:	89 d0                	mov    %edx,%eax
+ 825:	c1 e0 0f             	shl    $0xf,%eax
+ 828:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 82d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 82f:	89 c2                	mov    %eax,%edx
+ 831:	c1 ea 12             	shr    $0x12,%edx
+ 834:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 836:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 83b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 83c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 841:	0f 84 d2 00 00 00    	je     919 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 847:	31 c0                	xor    %eax,%eax
+ 849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 850:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 857:	83 c0 01             	add    $0x1,%eax
+ 85a:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 861:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 867:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 86d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 86f:	89 d1                	mov    %edx,%ecx
+ 871:	83 e2 01             	and    $0x1,%edx
+ 874:	d1 e9                	shr    %ecx
+ 876:	33 0c 85 d0 13 00 00 	xor    0x13d0(,%eax,4),%ecx
+ 87d:	33 0c 95 3c 0a 00 00 	xor    0xa3c(,%edx,4),%ecx
+ 884:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 88b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 890:	75 be                	jne    850 <genrand+0x60>
+ 892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 898:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 89f:	83 c0 01             	add    $0x1,%eax
+ 8a2:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 8a9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8af:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8b5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8b7:	89 d1                	mov    %edx,%ecx
+ 8b9:	83 e2 01             	and    $0x1,%edx
+ 8bc:	d1 e9                	shr    %ecx
+ 8be:	33 0c 85 10 0a 00 00 	xor    0xa10(,%eax,4),%ecx
+ 8c5:	33 0c 95 3c 0a 00 00 	xor    0xa3c(,%edx,4),%ecx
+ 8cc:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8d3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8d8:	75 be                	jne    898 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8da:	a1 a0 0d 00 00       	mov    0xda0,%eax
+ 8df:	8b 0d 5c 17 00 00    	mov    0x175c,%ecx
+ 8e5:	89 c2                	mov    %eax,%edx
+ 8e7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8ed:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8f3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8f5:	89 ca                	mov    %ecx,%edx
+ 8f7:	83 e1 01             	and    $0x1,%ecx
+ 8fa:	d1 ea                	shr    %edx
+ 8fc:	33 15 d0 13 00 00    	xor    0x13d0,%edx
+ 902:	33 14 8d 3c 0a 00 00 	xor    0xa3c(,%ecx,4),%edx
+ 909:	89 15 5c 17 00 00    	mov    %edx,0x175c
+ 90f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 914:	e9 f1 fe ff ff       	jmp    80a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 919:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 91e:	b9 5c 17 00 00       	mov    $0x175c,%ecx
+ 923:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 928:	c7 05 a0 0d 00 00 05 	movl   $0x1105,0xda0
+ 92f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 932:	eb 07                	jmp    93b <genrand+0x14b>
+ 934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 938:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 93b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 941:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 943:	39 c1                	cmp    %eax,%ecx
+ 945:	75 f1                	jne    938 <genrand+0x148>
+ 947:	e9 fb fe ff ff       	jmp    847 <genrand+0x57>
+ 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000950 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 950:	f3 0f 1e fb          	endbr32 
+ 954:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 955:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 957:	89 e5                	mov    %esp,%ebp
+ 959:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 95a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 95d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 95e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 963:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 966:	89 d8                	mov    %ebx,%eax
+ 968:	f7 f1                	div    %ecx
+ 96a:	89 c6                	mov    %eax,%esi
+ 96c:	29 d3                	sub    %edx,%ebx
+ 96e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 970:	e8 7b fe ff ff       	call   7f0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+}
+ 97b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 97c:	f7 f6                	div    %esi
+}
+ 97e:	5e                   	pop    %esi
+ 97f:	5d                   	pop    %ebp
+ 980:	c3                   	ret    
+ 981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 98f:	90                   	nop
+
+00000990 <randomrange>:
+
+int randomrange(int low, int high){
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 0c             	sub    $0xc,%esp
+ 99d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9a0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9a3:	39 f0                	cmp    %esi,%eax
+ 9a5:	7d 06                	jge    9ad <randomrange+0x1d>
+ 9a7:	89 f2                	mov    %esi,%edx
+ 9a9:	89 c6                	mov    %eax,%esi
+ 9ab:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9ad:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9af:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9b4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9b6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9b9:	89 d8                	mov    %ebx,%eax
+ 9bb:	f7 f1                	div    %ecx
+ 9bd:	89 c7                	mov    %eax,%edi
+ 9bf:	29 d3                	sub    %edx,%ebx
+ 9c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9c8:	e8 23 fe ff ff       	call   7f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9cd:	39 d8                	cmp    %ebx,%eax
+ 9cf:	73 f7                	jae    9c8 <randomrange+0x38>
+  return x/bin_size;
+ 9d1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9d3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9d6:	f7 f7                	div    %edi
+ 9d8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9d9:	01 f0                	add    %esi,%eax
+ 9db:	5e                   	pop    %esi
+ 9dc:	5f                   	pop    %edi
+ 9dd:	5d                   	pop    %ebp
+ 9de:	c3                   	ret    
diff -ruN xv6-public/burstTimeTest.c xv6-public-partB_sjf/burstTimeTest.c
--- xv6-public/burstTimeTest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/burstTimeTest.c	2022-10-07 18:59:10.512676000 +0530
@@ -0,0 +1,11 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void){
+	printf(1,"Burst time is set to 10\n");
+	set_burst_time(10);
+	printf(1, "Getting the value of burst time %d\n", get_burst_time());
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public/burstTimeTest.d xv6-public-partB_sjf/burstTimeTest.d
--- xv6-public/burstTimeTest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/burstTimeTest.d	2022-10-07 20:27:45.599129000 +0530
@@ -0,0 +1,2 @@
+burstTimeTest.o: burstTimeTest.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/burstTimeTest.o and xv6-public-partB_sjf/burstTimeTest.o differ
diff -ruN xv6-public/burstTimeTest.sym xv6-public-partB_sjf/burstTimeTest.sym
--- xv6-public/burstTimeTest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/burstTimeTest.sym	2022-10-07 20:27:45.627130000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+000009e0 .rodata
+00000a44 .eh_frame
+00000d60 .data
+00000d80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 burstTimeTest.c
+00000000 ulib.c
+00000000 printf.c
+00000390 printint
+00000a28 digits.1105
+00000000 umalloc.c
+00000d80 freep
+00000d84 base
+00000000 random.c
+00000da0 mt
+00000d60 mti
+00000a3c mag01.989
+00000050 strcpy
+000007b0 sgenrand
+00000440 printf
+00000280 memmove
+000002fb mknod
+00000170 gets
+00000333 getpid
+000006a0 malloc
+00000343 sleep
+00000373 get_burst_time
+00000950 random_at_most
+0000037b getCurrentInfo
+000002c3 pipe
+000002d3 write
+0000030b fstat
+000002e3 kill
+00000323 chdir
+000002eb exec
+000002bb wait
+000002cb read
+00000303 unlink
+000002ab fork
+0000033b sbrk
+0000034b uptime
+00000d64 __bss_start
+00000110 memset
+00000000 main
+0000036b set_burst_time
+00000080 strcmp
+0000032b dup
+000007f0 genrand
+00000353 getNumProc
+00000363 getProcInfo
+000001f0 stat
+00000d64 _edata
+00001760 _end
+00000313 link
+000002b3 exit
+0000035b getMaxPID
+00000240 atoi
+000000d0 strlen
+000002f3 open
+00000130 strchr
+00000383 getCurrentPID
+00000990 randomrange
+0000031b mkdir
+000002db close
+00000610 free
Binary files xv6-public/_cat and xv6-public-partB_sjf/_cat differ
diff -ruN xv6-public/cat.asm xv6-public-partB_sjf/cat.asm
--- xv6-public/cat.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/cat.asm	2022-10-07 20:27:43.643112000 +0530
@@ -0,0 +1,1593 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	be 01 00 00 00       	mov    $0x1,%esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 18             	sub    $0x18,%esp
+  1d:	8b 01                	mov    (%ecx),%eax
+  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
+  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  25:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  28:	83 f8 01             	cmp    $0x1,%eax
+  2b:	7e 50                	jle    7d <main+0x7d>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 77 03 00 00       	call   3b3 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 3f 03 00 00       	call   39b <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 0a 03 00 00       	call   373 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	pushl  (%ebx)
+  6c:	68 c3 0a 00 00       	push   $0xac3
+  71:	6a 01                	push   $0x1
+  73:	e8 88 04 00 00       	call   500 <printf>
+      exit();
+  78:	e8 f6 02 00 00       	call   373 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 e7 02 00 00       	call   373 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  95:	89 e5                	mov    %esp,%ebp
+  97:	56                   	push   %esi
+  98:	8b 75 08             	mov    0x8(%ebp),%esi
+  9b:	53                   	push   %ebx
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  9c:	eb 19                	jmp    b7 <cat+0x27>
+  9e:	66 90                	xchg   %ax,%ax
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 40 18 00 00       	push   $0x1840
+  a9:	6a 01                	push   $0x1
+  ab:	e8 e3 02 00 00       	call   393 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 25                	jne    dc <cat+0x4c>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 40 18 00 00       	push   $0x1840
+  c4:	56                   	push   %esi
+  c5:	e8 c1 02 00 00       	call   38b <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	89 c3                	mov    %eax,%ebx
+  cf:	85 c0                	test   %eax,%eax
+  d1:	7f cd                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d3:	75 1b                	jne    f0 <cat+0x60>
+}
+  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d8:	5b                   	pop    %ebx
+  d9:	5e                   	pop    %esi
+  da:	5d                   	pop    %ebp
+  db:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dc:	83 ec 08             	sub    $0x8,%esp
+  df:	68 a0 0a 00 00       	push   $0xaa0
+  e4:	6a 01                	push   $0x1
+  e6:	e8 15 04 00 00       	call   500 <printf>
+      exit();
+  eb:	e8 83 02 00 00       	call   373 <exit>
+    printf(1, "cat: read error\n");
+  f0:	50                   	push   %eax
+  f1:	50                   	push   %eax
+  f2:	68 b2 0a 00 00       	push   $0xab2
+  f7:	6a 01                	push   $0x1
+  f9:	e8 02 04 00 00       	call   500 <printf>
+    exit();
+  fe:	e8 70 02 00 00       	call   373 <exit>
+ 103:	66 90                	xchg   %ax,%ax
+ 105:	66 90                	xchg   %ax,%ax
+ 107:	66 90                	xchg   %ax,%ax
+ 109:	66 90                	xchg   %ax,%ax
+ 10b:	66 90                	xchg   %ax,%ax
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 115:	31 c0                	xor    %eax,%eax
+{
+ 117:	89 e5                	mov    %esp,%ebp
+ 119:	53                   	push   %ebx
+ 11a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 11d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 120:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 124:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 127:	83 c0 01             	add    $0x1,%eax
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 12e:	89 c8                	mov    %ecx,%eax
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	53                   	push   %ebx
+ 148:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 14b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 14e:	0f b6 01             	movzbl (%ecx),%eax
+ 151:	0f b6 1a             	movzbl (%edx),%ebx
+ 154:	84 c0                	test   %al,%al
+ 156:	75 19                	jne    171 <strcmp+0x31>
+ 158:	eb 26                	jmp    180 <strcmp+0x40>
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 160:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 164:	83 c1 01             	add    $0x1,%ecx
+ 167:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 16a:	0f b6 1a             	movzbl (%edx),%ebx
+ 16d:	84 c0                	test   %al,%al
+ 16f:	74 0f                	je     180 <strcmp+0x40>
+ 171:	38 d8                	cmp    %bl,%al
+ 173:	74 eb                	je     160 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 175:	29 d8                	sub    %ebx,%eax
+}
+ 177:	5b                   	pop    %ebx
+ 178:	5d                   	pop    %ebp
+ 179:	c3                   	ret    
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 180:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 182:	29 d8                	sub    %ebx,%eax
+}
+ 184:	5b                   	pop    %ebx
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18e:	66 90                	xchg   %ax,%ax
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 19a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 19d:	74 21                	je     1c0 <strlen+0x30>
+ 19f:	31 c0                	xor    %eax,%eax
+ 1a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1a8:	83 c0 01             	add    $0x1,%eax
+ 1ab:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1af:	89 c1                	mov    %eax,%ecx
+ 1b1:	75 f5                	jne    1a8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1b3:	89 c8                	mov    %ecx,%eax
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1c0:	31 c9                	xor    %ecx,%ecx
+}
+ 1c2:	5d                   	pop    %ebp
+ 1c3:	89 c8                	mov    %ecx,%eax
+ 1c5:	c3                   	ret    
+ 1c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	57                   	push   %edi
+ 1d8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1db:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1de:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1e1:	89 d7                	mov    %edx,%edi
+ 1e3:	fc                   	cld    
+ 1e4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1e6:	89 d0                	mov    %edx,%eax
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1f0:	f3 0f 1e fb          	endbr32 
+ 1f4:	55                   	push   %ebp
+ 1f5:	89 e5                	mov    %esp,%ebp
+ 1f7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fa:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1fe:	0f b6 10             	movzbl (%eax),%edx
+ 201:	84 d2                	test   %dl,%dl
+ 203:	75 16                	jne    21b <strchr+0x2b>
+ 205:	eb 21                	jmp    228 <strchr+0x38>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+ 210:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 214:	83 c0 01             	add    $0x1,%eax
+ 217:	84 d2                	test   %dl,%dl
+ 219:	74 0d                	je     228 <strchr+0x38>
+    if(*s == c)
+ 21b:	38 d1                	cmp    %dl,%cl
+ 21d:	75 f1                	jne    210 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 21f:	5d                   	pop    %ebp
+ 220:	c3                   	ret    
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 228:	31 c0                	xor    %eax,%eax
+}
+ 22a:	5d                   	pop    %ebp
+ 22b:	c3                   	ret    
+ 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000230 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	57                   	push   %edi
+ 238:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 239:	31 f6                	xor    %esi,%esi
+{
+ 23b:	53                   	push   %ebx
+ 23c:	89 f3                	mov    %esi,%ebx
+ 23e:	83 ec 1c             	sub    $0x1c,%esp
+ 241:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 244:	eb 33                	jmp    279 <gets+0x49>
+ 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 250:	83 ec 04             	sub    $0x4,%esp
+ 253:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 256:	6a 01                	push   $0x1
+ 258:	50                   	push   %eax
+ 259:	6a 00                	push   $0x0
+ 25b:	e8 2b 01 00 00       	call   38b <read>
+    if(cc < 1)
+ 260:	83 c4 10             	add    $0x10,%esp
+ 263:	85 c0                	test   %eax,%eax
+ 265:	7e 1c                	jle    283 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 267:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 26b:	83 c7 01             	add    $0x1,%edi
+ 26e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 271:	3c 0a                	cmp    $0xa,%al
+ 273:	74 23                	je     298 <gets+0x68>
+ 275:	3c 0d                	cmp    $0xd,%al
+ 277:	74 1f                	je     298 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 279:	83 c3 01             	add    $0x1,%ebx
+ 27c:	89 fe                	mov    %edi,%esi
+ 27e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 281:	7c cd                	jl     250 <gets+0x20>
+ 283:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 285:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 288:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 28b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 28e:	5b                   	pop    %ebx
+ 28f:	5e                   	pop    %esi
+ 290:	5f                   	pop    %edi
+ 291:	5d                   	pop    %ebp
+ 292:	c3                   	ret    
+ 293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 297:	90                   	nop
+ 298:	8b 75 08             	mov    0x8(%ebp),%esi
+ 29b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29e:	01 de                	add    %ebx,%esi
+ 2a0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2a2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2a8:	5b                   	pop    %ebx
+ 2a9:	5e                   	pop    %esi
+ 2aa:	5f                   	pop    %edi
+ 2ab:	5d                   	pop    %ebp
+ 2ac:	c3                   	ret    
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	56                   	push   %esi
+ 2b8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	6a 00                	push   $0x0
+ 2be:	ff 75 08             	pushl  0x8(%ebp)
+ 2c1:	e8 ed 00 00 00       	call   3b3 <open>
+  if(fd < 0)
+ 2c6:	83 c4 10             	add    $0x10,%esp
+ 2c9:	85 c0                	test   %eax,%eax
+ 2cb:	78 2b                	js     2f8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2cd:	83 ec 08             	sub    $0x8,%esp
+ 2d0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2d3:	89 c3                	mov    %eax,%ebx
+ 2d5:	50                   	push   %eax
+ 2d6:	e8 f0 00 00 00       	call   3cb <fstat>
+  close(fd);
+ 2db:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2de:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2e0:	e8 b6 00 00 00       	call   39b <close>
+  return r;
+ 2e5:	83 c4 10             	add    $0x10,%esp
+}
+ 2e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2eb:	89 f0                	mov    %esi,%eax
+ 2ed:	5b                   	pop    %ebx
+ 2ee:	5e                   	pop    %esi
+ 2ef:	5d                   	pop    %ebp
+ 2f0:	c3                   	ret    
+ 2f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2f8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2fd:	eb e9                	jmp    2e8 <stat+0x38>
+ 2ff:	90                   	nop
+
+00000300 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 300:	f3 0f 1e fb          	endbr32 
+ 304:	55                   	push   %ebp
+ 305:	89 e5                	mov    %esp,%ebp
+ 307:	53                   	push   %ebx
+ 308:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 30b:	0f be 02             	movsbl (%edx),%eax
+ 30e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 311:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 314:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 319:	77 1a                	ja     335 <atoi+0x35>
+ 31b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 31f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 320:	83 c2 01             	add    $0x1,%edx
+ 323:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 326:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 32a:	0f be 02             	movsbl (%edx),%eax
+ 32d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 330:	80 fb 09             	cmp    $0x9,%bl
+ 333:	76 eb                	jbe    320 <atoi+0x20>
+  return n;
+}
+ 335:	89 c8                	mov    %ecx,%eax
+ 337:	5b                   	pop    %ebx
+ 338:	5d                   	pop    %ebp
+ 339:	c3                   	ret    
+ 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000340 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	57                   	push   %edi
+ 348:	8b 45 10             	mov    0x10(%ebp),%eax
+ 34b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 34e:	56                   	push   %esi
+ 34f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 352:	85 c0                	test   %eax,%eax
+ 354:	7e 0f                	jle    365 <memmove+0x25>
+ 356:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 358:	89 d7                	mov    %edx,%edi
+ 35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 360:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 361:	39 f8                	cmp    %edi,%eax
+ 363:	75 fb                	jne    360 <memmove+0x20>
+  return vdst;
+}
+ 365:	5e                   	pop    %esi
+ 366:	89 d0                	mov    %edx,%eax
+ 368:	5f                   	pop    %edi
+ 369:	5d                   	pop    %ebp
+ 36a:	c3                   	ret    
+
+0000036b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 36b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <exit>:
+SYSCALL(exit)
+ 373:	b8 02 00 00 00       	mov    $0x2,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <wait>:
+SYSCALL(wait)
+ 37b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <pipe>:
+SYSCALL(pipe)
+ 383:	b8 04 00 00 00       	mov    $0x4,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <read>:
+SYSCALL(read)
+ 38b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <write>:
+SYSCALL(write)
+ 393:	b8 10 00 00 00       	mov    $0x10,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <close>:
+SYSCALL(close)
+ 39b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <kill>:
+SYSCALL(kill)
+ 3a3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <exec>:
+SYSCALL(exec)
+ 3ab:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <open>:
+SYSCALL(open)
+ 3b3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mknod>:
+SYSCALL(mknod)
+ 3bb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <unlink>:
+SYSCALL(unlink)
+ 3c3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <fstat>:
+SYSCALL(fstat)
+ 3cb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <link>:
+SYSCALL(link)
+ 3d3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <mkdir>:
+SYSCALL(mkdir)
+ 3db:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <chdir>:
+SYSCALL(chdir)
+ 3e3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <dup>:
+SYSCALL(dup)
+ 3eb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <getpid>:
+SYSCALL(getpid)
+ 3f3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <sbrk>:
+SYSCALL(sbrk)
+ 3fb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <sleep>:
+SYSCALL(sleep)
+ 403:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <uptime>:
+SYSCALL(uptime)
+ 40b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <getNumProc>:
+SYSCALL(getNumProc)
+ 413:	b8 16 00 00 00       	mov    $0x16,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 41b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 423:	b8 18 00 00 00       	mov    $0x18,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 42b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 433:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 43b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <getCurrentPID>:
+ 443:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+ 44b:	66 90                	xchg   %ax,%ax
+ 44d:	66 90                	xchg   %ax,%ax
+ 44f:	90                   	nop
+
+00000450 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 3c             	sub    $0x3c,%esp
+ 459:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 45c:	89 d1                	mov    %edx,%ecx
+{
+ 45e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 461:	85 d2                	test   %edx,%edx
+ 463:	0f 89 7f 00 00 00    	jns    4e8 <printint+0x98>
+ 469:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 46d:	74 79                	je     4e8 <printint+0x98>
+    neg = 1;
+ 46f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 476:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 478:	31 db                	xor    %ebx,%ebx
+ 47a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 480:	89 c8                	mov    %ecx,%eax
+ 482:	31 d2                	xor    %edx,%edx
+ 484:	89 cf                	mov    %ecx,%edi
+ 486:	f7 75 c4             	divl   -0x3c(%ebp)
+ 489:	0f b6 92 e0 0a 00 00 	movzbl 0xae0(%edx),%edx
+ 490:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 493:	89 d8                	mov    %ebx,%eax
+ 495:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 498:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 49b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 49e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4a1:	76 dd                	jbe    480 <printint+0x30>
+  if(neg)
+ 4a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4a6:	85 c9                	test   %ecx,%ecx
+ 4a8:	74 0c                	je     4b6 <printint+0x66>
+    buf[i++] = '-';
+ 4aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4af:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4bd:	eb 07                	jmp    4c6 <printint+0x76>
+ 4bf:	90                   	nop
+ 4c0:	0f b6 13             	movzbl (%ebx),%edx
+ 4c3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4c6:	83 ec 04             	sub    $0x4,%esp
+ 4c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4cc:	6a 01                	push   $0x1
+ 4ce:	56                   	push   %esi
+ 4cf:	57                   	push   %edi
+ 4d0:	e8 be fe ff ff       	call   393 <write>
+  while(--i >= 0)
+ 4d5:	83 c4 10             	add    $0x10,%esp
+ 4d8:	39 de                	cmp    %ebx,%esi
+ 4da:	75 e4                	jne    4c0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4df:	5b                   	pop    %ebx
+ 4e0:	5e                   	pop    %esi
+ 4e1:	5f                   	pop    %edi
+ 4e2:	5d                   	pop    %ebp
+ 4e3:	c3                   	ret    
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ef:	eb 87                	jmp    478 <printint+0x28>
+ 4f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+
+00000500 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 500:	f3 0f 1e fb          	endbr32 
+ 504:	55                   	push   %ebp
+ 505:	89 e5                	mov    %esp,%ebp
+ 507:	57                   	push   %edi
+ 508:	56                   	push   %esi
+ 509:	53                   	push   %ebx
+ 50a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 50d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 510:	0f b6 1e             	movzbl (%esi),%ebx
+ 513:	84 db                	test   %bl,%bl
+ 515:	0f 84 b4 00 00 00    	je     5cf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 51b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 51e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 521:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 524:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 526:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 529:	eb 33                	jmp    55e <printf+0x5e>
+ 52b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 52f:	90                   	nop
+ 530:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 533:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	74 17                	je     554 <printf+0x54>
+  write(fd, &c, 1);
+ 53d:	83 ec 04             	sub    $0x4,%esp
+ 540:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 543:	6a 01                	push   $0x1
+ 545:	57                   	push   %edi
+ 546:	ff 75 08             	pushl  0x8(%ebp)
+ 549:	e8 45 fe ff ff       	call   393 <write>
+ 54e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 551:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 554:	0f b6 1e             	movzbl (%esi),%ebx
+ 557:	83 c6 01             	add    $0x1,%esi
+ 55a:	84 db                	test   %bl,%bl
+ 55c:	74 71                	je     5cf <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 55e:	0f be cb             	movsbl %bl,%ecx
+ 561:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 564:	85 d2                	test   %edx,%edx
+ 566:	74 c8                	je     530 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 568:	83 fa 25             	cmp    $0x25,%edx
+ 56b:	75 e7                	jne    554 <printf+0x54>
+      if(c == 'd'){
+ 56d:	83 f8 64             	cmp    $0x64,%eax
+ 570:	0f 84 9a 00 00 00    	je     610 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 576:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 57c:	83 f9 70             	cmp    $0x70,%ecx
+ 57f:	74 5f                	je     5e0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 581:	83 f8 73             	cmp    $0x73,%eax
+ 584:	0f 84 d6 00 00 00    	je     660 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 58a:	83 f8 63             	cmp    $0x63,%eax
+ 58d:	0f 84 8d 00 00 00    	je     620 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 593:	83 f8 25             	cmp    $0x25,%eax
+ 596:	0f 84 b4 00 00 00    	je     650 <printf+0x150>
+  write(fd, &c, 1);
+ 59c:	83 ec 04             	sub    $0x4,%esp
+ 59f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5a3:	6a 01                	push   $0x1
+ 5a5:	57                   	push   %edi
+ 5a6:	ff 75 08             	pushl  0x8(%ebp)
+ 5a9:	e8 e5 fd ff ff       	call   393 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 5ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b1:	83 c4 0c             	add    $0xc,%esp
+ 5b4:	6a 01                	push   $0x1
+ 5b6:	83 c6 01             	add    $0x1,%esi
+ 5b9:	57                   	push   %edi
+ 5ba:	ff 75 08             	pushl  0x8(%ebp)
+ 5bd:	e8 d1 fd ff ff       	call   393 <write>
+  for(i = 0; fmt[i]; i++){
+ 5c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5c6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5c9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5cb:	84 db                	test   %bl,%bl
+ 5cd:	75 8f                	jne    55e <printf+0x5e>
+    }
+  }
+}
+ 5cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5d2:	5b                   	pop    %ebx
+ 5d3:	5e                   	pop    %esi
+ 5d4:	5f                   	pop    %edi
+ 5d5:	5d                   	pop    %ebp
+ 5d6:	c3                   	ret    
+ 5d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5de:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5e8:	6a 00                	push   $0x0
+ 5ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5ed:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5f0:	8b 13                	mov    (%ebx),%edx
+ 5f2:	e8 59 fe ff ff       	call   450 <printint>
+        ap++;
+ 5f7:	89 d8                	mov    %ebx,%eax
+ 5f9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5fc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5fe:	83 c0 04             	add    $0x4,%eax
+ 601:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 604:	e9 4b ff ff ff       	jmp    554 <printf+0x54>
+ 609:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 610:	83 ec 0c             	sub    $0xc,%esp
+ 613:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 618:	6a 01                	push   $0x1
+ 61a:	eb ce                	jmp    5ea <printf+0xea>
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 620:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 623:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 626:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 628:	6a 01                	push   $0x1
+        ap++;
+ 62a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 62d:	57                   	push   %edi
+ 62e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 631:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 634:	e8 5a fd ff ff       	call   393 <write>
+        ap++;
+ 639:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 63c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 63f:	31 d2                	xor    %edx,%edx
+ 641:	e9 0e ff ff ff       	jmp    554 <printf+0x54>
+ 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 650:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 653:	83 ec 04             	sub    $0x4,%esp
+ 656:	e9 59 ff ff ff       	jmp    5b4 <printf+0xb4>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+        s = (char*)*ap;
+ 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 663:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 665:	83 c0 04             	add    $0x4,%eax
+ 668:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 66b:	85 db                	test   %ebx,%ebx
+ 66d:	74 17                	je     686 <printf+0x186>
+        while(*s != 0){
+ 66f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 672:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 674:	84 c0                	test   %al,%al
+ 676:	0f 84 d8 fe ff ff    	je     554 <printf+0x54>
+ 67c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 67f:	89 de                	mov    %ebx,%esi
+ 681:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 684:	eb 1a                	jmp    6a0 <printf+0x1a0>
+          s = "(null)";
+ 686:	bb d8 0a 00 00       	mov    $0xad8,%ebx
+        while(*s != 0){
+ 68b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 68e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 693:	89 de                	mov    %ebx,%esi
+ 695:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 698:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+  write(fd, &c, 1);
+ 6a0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6a3:	83 c6 01             	add    $0x1,%esi
+ 6a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6a9:	6a 01                	push   $0x1
+ 6ab:	57                   	push   %edi
+ 6ac:	53                   	push   %ebx
+ 6ad:	e8 e1 fc ff ff       	call   393 <write>
+        while(*s != 0){
+ 6b2:	0f b6 06             	movzbl (%esi),%eax
+ 6b5:	83 c4 10             	add    $0x10,%esp
+ 6b8:	84 c0                	test   %al,%al
+ 6ba:	75 e4                	jne    6a0 <printf+0x1a0>
+ 6bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6bf:	31 d2                	xor    %edx,%edx
+ 6c1:	e9 8e fe ff ff       	jmp    554 <printf+0x54>
+ 6c6:	66 90                	xchg   %ax,%ax
+ 6c8:	66 90                	xchg   %ax,%ax
+ 6ca:	66 90                	xchg   %ax,%ax
+ 6cc:	66 90                	xchg   %ax,%ax
+ 6ce:	66 90                	xchg   %ax,%ax
+
+000006d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d5:	a1 60 0e 00 00       	mov    0xe60,%eax
+{
+ 6da:	89 e5                	mov    %esp,%ebp
+ 6dc:	57                   	push   %edi
+ 6dd:	56                   	push   %esi
+ 6de:	53                   	push   %ebx
+ 6df:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6e2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e7:	39 c8                	cmp    %ecx,%eax
+ 6e9:	73 15                	jae    700 <free+0x30>
+ 6eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ef:	90                   	nop
+ 6f0:	39 d1                	cmp    %edx,%ecx
+ 6f2:	72 14                	jb     708 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f4:	39 d0                	cmp    %edx,%eax
+ 6f6:	73 10                	jae    708 <free+0x38>
+{
+ 6f8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6fa:	8b 10                	mov    (%eax),%edx
+ 6fc:	39 c8                	cmp    %ecx,%eax
+ 6fe:	72 f0                	jb     6f0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 700:	39 d0                	cmp    %edx,%eax
+ 702:	72 f4                	jb     6f8 <free+0x28>
+ 704:	39 d1                	cmp    %edx,%ecx
+ 706:	73 f0                	jae    6f8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70e:	39 fa                	cmp    %edi,%edx
+ 710:	74 1e                	je     730 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 712:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 715:	8b 50 04             	mov    0x4(%eax),%edx
+ 718:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 71b:	39 f1                	cmp    %esi,%ecx
+ 71d:	74 28                	je     747 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 71f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 721:	5b                   	pop    %ebx
+  freep = p;
+ 722:	a3 60 0e 00 00       	mov    %eax,0xe60
+}
+ 727:	5e                   	pop    %esi
+ 728:	5f                   	pop    %edi
+ 729:	5d                   	pop    %ebp
+ 72a:	c3                   	ret    
+ 72b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 72f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 730:	03 72 04             	add    0x4(%edx),%esi
+ 733:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 736:	8b 10                	mov    (%eax),%edx
+ 738:	8b 12                	mov    (%edx),%edx
+ 73a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 73d:	8b 50 04             	mov    0x4(%eax),%edx
+ 740:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 743:	39 f1                	cmp    %esi,%ecx
+ 745:	75 d8                	jne    71f <free+0x4f>
+    p->s.size += bp->s.size;
+ 747:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 74a:	a3 60 0e 00 00       	mov    %eax,0xe60
+    p->s.size += bp->s.size;
+ 74f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 752:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 755:	89 10                	mov    %edx,(%eax)
+}
+ 757:	5b                   	pop    %ebx
+ 758:	5e                   	pop    %esi
+ 759:	5f                   	pop    %edi
+ 75a:	5d                   	pop    %ebp
+ 75b:	c3                   	ret    
+ 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000760 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 760:	f3 0f 1e fb          	endbr32 
+ 764:	55                   	push   %ebp
+ 765:	89 e5                	mov    %esp,%ebp
+ 767:	57                   	push   %edi
+ 768:	56                   	push   %esi
+ 769:	53                   	push   %ebx
+ 76a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 76d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 770:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 776:	8d 70 07             	lea    0x7(%eax),%esi
+ 779:	c1 ee 03             	shr    $0x3,%esi
+ 77c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 77f:	85 ff                	test   %edi,%edi
+ 781:	0f 84 a9 00 00 00    	je     830 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 787:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 789:	8b 48 04             	mov    0x4(%eax),%ecx
+ 78c:	39 f1                	cmp    %esi,%ecx
+ 78e:	73 6d                	jae    7fd <malloc+0x9d>
+ 790:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 796:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 79b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 79e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7a8:	eb 17                	jmp    7c1 <malloc+0x61>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 7b2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7b5:	39 f1                	cmp    %esi,%ecx
+ 7b7:	73 4f                	jae    808 <malloc+0xa8>
+ 7b9:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 7bf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7c1:	39 c7                	cmp    %eax,%edi
+ 7c3:	75 eb                	jne    7b0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7c5:	83 ec 0c             	sub    $0xc,%esp
+ 7c8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7cb:	e8 2b fc ff ff       	call   3fb <sbrk>
+  if(p == (char*)-1)
+ 7d0:	83 c4 10             	add    $0x10,%esp
+ 7d3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7d6:	74 1b                	je     7f3 <malloc+0x93>
+  hp->s.size = nu;
+ 7d8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7db:	83 ec 0c             	sub    $0xc,%esp
+ 7de:	83 c0 08             	add    $0x8,%eax
+ 7e1:	50                   	push   %eax
+ 7e2:	e8 e9 fe ff ff       	call   6d0 <free>
+  return freep;
+ 7e7:	a1 60 0e 00 00       	mov    0xe60,%eax
+      if((p = morecore(nunits)) == 0)
+ 7ec:	83 c4 10             	add    $0x10,%esp
+ 7ef:	85 c0                	test   %eax,%eax
+ 7f1:	75 bd                	jne    7b0 <malloc+0x50>
+        return 0;
+  }
+}
+ 7f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7f6:	31 c0                	xor    %eax,%eax
+}
+ 7f8:	5b                   	pop    %ebx
+ 7f9:	5e                   	pop    %esi
+ 7fa:	5f                   	pop    %edi
+ 7fb:	5d                   	pop    %ebp
+ 7fc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7fd:	89 c2                	mov    %eax,%edx
+ 7ff:	89 f8                	mov    %edi,%eax
+ 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 808:	39 ce                	cmp    %ecx,%esi
+ 80a:	74 54                	je     860 <malloc+0x100>
+        p->s.size -= nunits;
+ 80c:	29 f1                	sub    %esi,%ecx
+ 80e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 811:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 814:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 817:	a3 60 0e 00 00       	mov    %eax,0xe60
+}
+ 81c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 81f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 822:	5b                   	pop    %ebx
+ 823:	5e                   	pop    %esi
+ 824:	5f                   	pop    %edi
+ 825:	5d                   	pop    %ebp
+ 826:	c3                   	ret    
+ 827:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 830:	c7 05 60 0e 00 00 64 	movl   $0xe64,0xe60
+ 837:	0e 00 00 
+    base.s.size = 0;
+ 83a:	bf 64 0e 00 00       	mov    $0xe64,%edi
+    base.s.ptr = freep = prevp = &base;
+ 83f:	c7 05 64 0e 00 00 64 	movl   $0xe64,0xe64
+ 846:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 849:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 84b:	c7 05 68 0e 00 00 00 	movl   $0x0,0xe68
+ 852:	00 00 00 
+    if(p->s.size >= nunits){
+ 855:	e9 36 ff ff ff       	jmp    790 <malloc+0x30>
+ 85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 860:	8b 0a                	mov    (%edx),%ecx
+ 862:	89 08                	mov    %ecx,(%eax)
+ 864:	eb b1                	jmp    817 <malloc+0xb7>
+ 866:	66 90                	xchg   %ax,%ax
+ 868:	66 90                	xchg   %ax,%ax
+ 86a:	66 90                	xchg   %ax,%ax
+ 86c:	66 90                	xchg   %ax,%ax
+ 86e:	66 90                	xchg   %ax,%ax
+
+00000870 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 870:	f3 0f 1e fb          	endbr32 
+ 874:	55                   	push   %ebp
+ 875:	b8 84 0e 00 00       	mov    $0xe84,%eax
+ 87a:	89 e5                	mov    %esp,%ebp
+ 87c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 87f:	89 15 80 0e 00 00    	mov    %edx,0xe80
+    for (mti=1; mti<N; mti++)
+ 885:	eb 0c                	jmp    893 <sgenrand+0x23>
+ 887:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 88e:	66 90                	xchg   %ax,%ax
+ 890:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 893:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 899:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 89b:	3d 3c 18 00 00       	cmp    $0x183c,%eax
+ 8a0:	75 ee                	jne    890 <sgenrand+0x20>
+ 8a2:	c7 05 54 0e 00 00 70 	movl   $0x270,0xe54
+ 8a9:	02 00 00 
+}
+ 8ac:	5d                   	pop    %ebp
+ 8ad:	c3                   	ret    
+ 8ae:	66 90                	xchg   %ax,%ax
+
+000008b0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 8b0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 8b4:	a1 54 0e 00 00       	mov    0xe54,%eax
+ 8b9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8be:	7f 3c                	jg     8fc <genrand+0x4c>
+ 8c0:	8d 50 01             	lea    0x1(%eax),%edx
+ 8c3:	8b 04 85 80 0e 00 00 	mov    0xe80(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 8ca:	89 15 54 0e 00 00    	mov    %edx,0xe54
+    y ^= TEMPERING_SHIFT_U(y);
+ 8d0:	89 c2                	mov    %eax,%edx
+ 8d2:	c1 ea 0b             	shr    $0xb,%edx
+ 8d5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 8d7:	89 d0                	mov    %edx,%eax
+ 8d9:	c1 e0 07             	shl    $0x7,%eax
+ 8dc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 8e1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 8e3:	89 d0                	mov    %edx,%eax
+ 8e5:	c1 e0 0f             	shl    $0xf,%eax
+ 8e8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 8ed:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 8ef:	89 c2                	mov    %eax,%edx
+ 8f1:	c1 ea 12             	shr    $0x12,%edx
+ 8f4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 8f6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 8fb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 8fc:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 901:	0f 84 d2 00 00 00    	je     9d9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 907:	31 c0                	xor    %eax,%eax
+ 909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 910:	8b 0c 85 80 0e 00 00 	mov    0xe80(,%eax,4),%ecx
+ 917:	83 c0 01             	add    $0x1,%eax
+ 91a:	8b 14 85 80 0e 00 00 	mov    0xe80(,%eax,4),%edx
+ 921:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 927:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 92d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 92f:	89 d1                	mov    %edx,%ecx
+ 931:	83 e2 01             	and    $0x1,%edx
+ 934:	d1 e9                	shr    %ecx
+ 936:	33 0c 85 b0 14 00 00 	xor    0x14b0(,%eax,4),%ecx
+ 93d:	33 0c 95 f4 0a 00 00 	xor    0xaf4(,%edx,4),%ecx
+ 944:	89 0c 85 7c 0e 00 00 	mov    %ecx,0xe7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 94b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 950:	75 be                	jne    910 <genrand+0x60>
+ 952:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 958:	8b 0c 85 80 0e 00 00 	mov    0xe80(,%eax,4),%ecx
+ 95f:	83 c0 01             	add    $0x1,%eax
+ 962:	8b 14 85 80 0e 00 00 	mov    0xe80(,%eax,4),%edx
+ 969:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 96f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 975:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 977:	89 d1                	mov    %edx,%ecx
+ 979:	83 e2 01             	and    $0x1,%edx
+ 97c:	d1 e9                	shr    %ecx
+ 97e:	33 0c 85 f0 0a 00 00 	xor    0xaf0(,%eax,4),%ecx
+ 985:	33 0c 95 f4 0a 00 00 	xor    0xaf4(,%edx,4),%ecx
+ 98c:	89 0c 85 7c 0e 00 00 	mov    %ecx,0xe7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 993:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 998:	75 be                	jne    958 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 99a:	a1 80 0e 00 00       	mov    0xe80,%eax
+ 99f:	8b 0d 3c 18 00 00    	mov    0x183c,%ecx
+ 9a5:	89 c2                	mov    %eax,%edx
+ 9a7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9ad:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9b3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9b5:	89 ca                	mov    %ecx,%edx
+ 9b7:	83 e1 01             	and    $0x1,%ecx
+ 9ba:	d1 ea                	shr    %edx
+ 9bc:	33 15 b0 14 00 00    	xor    0x14b0,%edx
+ 9c2:	33 14 8d f4 0a 00 00 	xor    0xaf4(,%ecx,4),%edx
+ 9c9:	89 15 3c 18 00 00    	mov    %edx,0x183c
+ 9cf:	ba 01 00 00 00       	mov    $0x1,%edx
+ 9d4:	e9 f1 fe ff ff       	jmp    8ca <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 9d9:	b8 84 0e 00 00       	mov    $0xe84,%eax
+ 9de:	b9 3c 18 00 00       	mov    $0x183c,%ecx
+ 9e3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 9e8:	c7 05 80 0e 00 00 05 	movl   $0x1105,0xe80
+ 9ef:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 9f2:	eb 07                	jmp    9fb <genrand+0x14b>
+ 9f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9f8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 9fb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a01:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a03:	39 c1                	cmp    %eax,%ecx
+ a05:	75 f1                	jne    9f8 <genrand+0x148>
+ a07:	e9 fb fe ff ff       	jmp    907 <genrand+0x57>
+ a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a10 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a10:	f3 0f 1e fb          	endbr32 
+ a14:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a15:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a17:	89 e5                	mov    %esp,%ebp
+ a19:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a1a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a1d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a1e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a23:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a26:	89 d8                	mov    %ebx,%eax
+ a28:	f7 f1                	div    %ecx
+ a2a:	89 c6                	mov    %eax,%esi
+ a2c:	29 d3                	sub    %edx,%ebx
+ a2e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ a30:	e8 7b fe ff ff       	call   8b0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a35:	39 d8                	cmp    %ebx,%eax
+ a37:	73 f7                	jae    a30 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a39:	31 d2                	xor    %edx,%edx
+}
+ a3b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a3c:	f7 f6                	div    %esi
+}
+ a3e:	5e                   	pop    %esi
+ a3f:	5d                   	pop    %ebp
+ a40:	c3                   	ret    
+ a41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a4f:	90                   	nop
+
+00000a50 <randomrange>:
+
+int randomrange(int low, int high){
+ a50:	f3 0f 1e fb          	endbr32 
+ a54:	55                   	push   %ebp
+ a55:	89 e5                	mov    %esp,%ebp
+ a57:	57                   	push   %edi
+ a58:	56                   	push   %esi
+ a59:	53                   	push   %ebx
+ a5a:	83 ec 0c             	sub    $0xc,%esp
+ a5d:	8b 75 08             	mov    0x8(%ebp),%esi
+ a60:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a63:	39 f0                	cmp    %esi,%eax
+ a65:	7d 06                	jge    a6d <randomrange+0x1d>
+ a67:	89 f2                	mov    %esi,%edx
+ a69:	89 c6                	mov    %eax,%esi
+ a6b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a6d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a6f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a74:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a76:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a79:	89 d8                	mov    %ebx,%eax
+ a7b:	f7 f1                	div    %ecx
+ a7d:	89 c7                	mov    %eax,%edi
+ a7f:	29 d3                	sub    %edx,%ebx
+ a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ a88:	e8 23 fe ff ff       	call   8b0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a8d:	39 d8                	cmp    %ebx,%eax
+ a8f:	73 f7                	jae    a88 <randomrange+0x38>
+  return x/bin_size;
+ a91:	31 d2                	xor    %edx,%edx
+  return val;
+ a93:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a96:	f7 f7                	div    %edi
+ a98:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a99:	01 f0                	add    %esi,%eax
+ a9b:	5e                   	pop    %esi
+ a9c:	5f                   	pop    %edi
+ a9d:	5d                   	pop    %ebp
+ a9e:	c3                   	ret    
diff -ruN xv6-public/cat.d xv6-public-partB_sjf/cat.d
--- xv6-public/cat.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/cat.d	2022-10-07 20:27:43.615112000 +0530
@@ -0,0 +1,2 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/cat.o and xv6-public-partB_sjf/cat.o differ
diff -ruN xv6-public/cat.sym xv6-public-partB_sjf/cat.sym
--- xv6-public/cat.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/cat.sym	2022-10-07 20:27:43.647112000 +0530
@@ -0,0 +1,75 @@
+00000000 .text
+00000aa0 .rodata
+00000afc .eh_frame
+00000e54 .data
+00000e60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000450 printint
+00000ae0 digits.1105
+00000000 umalloc.c
+00000e60 freep
+00000e64 base
+00000000 random.c
+00000e80 mt
+00000e54 mti
+00000af4 mag01.989
+00000110 strcpy
+00000870 sgenrand
+00000500 printf
+00000340 memmove
+000003bb mknod
+00000230 gets
+000003f3 getpid
+00000090 cat
+00000760 malloc
+00000403 sleep
+00000433 get_burst_time
+00000a10 random_at_most
+0000043b getCurrentInfo
+00000383 pipe
+00000393 write
+000003cb fstat
+000003a3 kill
+000003e3 chdir
+000003ab exec
+0000037b wait
+0000038b read
+000003c3 unlink
+0000036b fork
+000003fb sbrk
+0000040b uptime
+00000e58 __bss_start
+000001d0 memset
+00000000 main
+0000042b set_burst_time
+00000140 strcmp
+000003eb dup
+00001840 buf
+000008b0 genrand
+00000413 getNumProc
+00000423 getProcInfo
+000002b0 stat
+00000e58 _edata
+00001a40 _end
+000003d3 link
+00000373 exit
+0000041b getMaxPID
+00000300 atoi
+00000190 strlen
+000003b3 open
+000001f0 strchr
+00000443 getCurrentPID
+00000a50 randomrange
+000003db mkdir
+0000039b close
+000006d0 free
diff -ruN xv6-public/console.d xv6-public-partB_sjf/console.d
--- xv6-public/console.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/console.d	2022-10-07 20:27:34.875035000 +0530
@@ -0,0 +1,3 @@
+console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
+ x86.h
Binary files xv6-public/console.o and xv6-public-partB_sjf/console.o differ
Binary files xv6-public/_cpuProcTester and xv6-public-partB_sjf/_cpuProcTester differ
diff -ruN xv6-public/cpuProcTester.asm xv6-public-partB_sjf/cpuProcTester.asm
--- xv6-public/cpuProcTester.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/cpuProcTester.asm	2022-10-07 21:26:38.541842000 +0530
@@ -0,0 +1,1685 @@
+
+_cpuProcTester:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "user.h"
+
+int var;
+
+int
+main(int argv, char* argc[]){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 28             	sub    $0x28,%esp
+
+	if(argv<2){
+  18:	83 39 01             	cmpl   $0x1,(%ecx)
+main(int argv, char* argc[]){
+  1b:	8b 51 04             	mov    0x4(%ecx),%edx
+	if(argv<2){
+  1e:	7e 3c                	jle    5c <main+0x5c>
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+  20:	83 ec 0c             	sub    $0xc,%esp
+  23:	ff 72 04             	pushl  0x4(%edx)
+  26:	e8 95 03 00 00       	call   3c0 <atoi>
+
+	int burst_times[n];
+  2b:	83 c4 10             	add    $0x10,%esp
+  2e:	8d 14 85 0f 00 00 00 	lea    0xf(,%eax,4),%edx
+	int n=atoi(argc[1]);
+  35:	89 c3                	mov    %eax,%ebx
+	int burst_times[n];
+  37:	89 e7                	mov    %esp,%edi
+  39:	89 d0                	mov    %edx,%eax
+  3b:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+  41:	29 d7                	sub    %edx,%edi
+  43:	83 e0 f0             	and    $0xfffffff0,%eax
+  46:	89 fa                	mov    %edi,%edx
+  48:	39 d4                	cmp    %edx,%esp
+  4a:	74 23                	je     6f <main+0x6f>
+  4c:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  52:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  59:	00 
+  5a:	eb ec                	jmp    48 <main+0x48>
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+  5c:	51                   	push   %ecx
+  5d:	51                   	push   %ecx
+  5e:	68 60 0b 00 00       	push   $0xb60
+  63:	6a 01                	push   $0x1
+  65:	e8 56 05 00 00       	call   5c0 <printf>
+		exit();
+  6a:	e8 c4 03 00 00       	call   433 <exit>
+	int burst_times[n];
+  6f:	25 ff 0f 00 00       	and    $0xfff,%eax
+  74:	29 c4                	sub    %eax,%esp
+  76:	85 c0                	test   %eax,%eax
+  78:	74 05                	je     7f <main+0x7f>
+  7a:	83 4c 04 fc 00       	orl    $0x0,-0x4(%esp,%eax,1)
+  7f:	89 e7                	mov    %esp,%edi
+
+	for(int i=0;i<n;i++){
+  81:	85 db                	test   %ebx,%ebx
+  83:	0f 8e e7 00 00 00    	jle    170 <main+0x170>
+  89:	31 d2                	xor    %edx,%edx
+		burst_times[i] = randomrange(1,1000);
+  8b:	83 ec 08             	sub    $0x8,%esp
+  8e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  91:	68 e8 03 00 00       	push   $0x3e8
+  96:	6a 01                	push   $0x1
+  98:	e8 73 0a 00 00       	call   b10 <randomrange>
+  9d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+	for(int i=0;i<n;i++){
+  a0:	83 c4 10             	add    $0x10,%esp
+		burst_times[i] = randomrange(1,1000);
+  a3:	89 04 97             	mov    %eax,(%edi,%edx,4)
+	for(int i=0;i<n;i++){
+  a6:	89 d6                	mov    %edx,%esi
+  a8:	8d 52 01             	lea    0x1(%edx),%edx
+  ab:	39 d3                	cmp    %edx,%ebx
+  ad:	75 dc                	jne    8b <main+0x8b>
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+  af:	53                   	push   %ebx
+  b0:	53                   	push   %ebx
+  b1:	68 fc 0b 00 00       	push   $0xbfc
+  b6:	6a 01                	push   $0x1
+  b8:	e8 03 05 00 00       	call   5c0 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+  bd:	58                   	pop    %eax
+  be:	5a                   	pop    %edx
+  bf:	68 2c 0c 00 00       	push   $0xc2c
+  c4:	6a 01                	push   $0x1
+  c6:	e8 f5 04 00 00       	call   5c0 <printf>
+  cb:	83 c4 10             	add    $0x10,%esp
+  ce:	31 d2                	xor    %edx,%edx
+  d0:	eb 0d                	jmp    df <main+0xdf>
+	for(int i=0;i<n;i++){
+  d2:	8d 42 01             	lea    0x1(%edx),%eax
+  d5:	39 d6                	cmp    %edx,%esi
+  d7:	0f 84 b2 00 00 00    	je     18f <main+0x18f>
+  dd:	89 c2                	mov    %eax,%edx
+  df:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+			
+		if(!fork()){
+  e2:	e8 44 03 00 00       	call   42b <fork>
+  e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  ea:	85 c0                	test   %eax,%eax
+  ec:	89 c3                	mov    %eax,%ebx
+  ee:	75 e2                	jne    d2 <main+0xd2>
+
+			// CPU Bound process
+			set_burst_time(burst_times[i]);
+  f0:	83 ec 0c             	sub    $0xc,%esp
+  f3:	ff 34 97             	pushl  (%edi,%edx,4)
+
+			int x=0;
+			for(int j=0;j<100;j++){
+  f6:	31 f6                	xor    %esi,%esi
+			set_burst_time(burst_times[i]);
+  f8:	e8 ee 03 00 00       	call   4eb <set_burst_time>
+  fd:	83 c4 10             	add    $0x10,%esp
+ 100:	b9 80 96 98 00       	mov    $0x989680,%ecx
+				for(int k=0;k<10000000;k++){
+ 105:	89 f0                	mov    %esi,%eax
+ 107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10e:	66 90                	xchg   %ax,%ax
+					if((j+k)%2)x++;
+ 110:	8d 53 01             	lea    0x1(%ebx),%edx
+ 113:	83 eb 01             	sub    $0x1,%ebx
+ 116:	a8 01                	test   $0x1,%al
+ 118:	0f 45 da             	cmovne %edx,%ebx
+				for(int k=0;k<10000000;k++){
+ 11b:	83 c0 01             	add    $0x1,%eax
+ 11e:	39 c1                	cmp    %eax,%ecx
+ 120:	75 ee                	jne    110 <main+0x110>
+			for(int j=0;j<100;j++){
+ 122:	83 c6 01             	add    $0x1,%esi
+ 125:	83 c1 01             	add    $0x1,%ecx
+ 128:	83 fe 64             	cmp    $0x64,%esi
+ 12b:	75 d8                	jne    105 <main+0x105>
+					else x--;
+				}
+			}
+			var+=x;
+			struct processInfo info;
+			getCurrentInfo(&info);
+ 12d:	83 ec 0c             	sub    $0xc,%esp
+ 130:	8d 45 dc             	lea    -0x24(%ebp),%eax
+			var+=x;
+ 133:	01 1d a0 19 00 00    	add    %ebx,0x19a0
+			getCurrentInfo(&info);
+ 139:	50                   	push   %eax
+ 13a:	e8 bc 03 00 00       	call   4fb <getCurrentInfo>
+			int bt = get_burst_time();
+ 13f:	e8 af 03 00 00       	call   4f3 <get_burst_time>
+			if(bt<10)
+				printf(1, "\t%d \t CPU         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 144:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+			if(bt<10)
+ 147:	83 c4 10             	add    $0x10,%esp
+			int bt = get_burst_time();
+ 14a:	89 c3                	mov    %eax,%ebx
+			if(bt<10)
+ 14c:	83 f8 09             	cmp    $0x9,%eax
+ 14f:	7f 54                	jg     1a5 <main+0x1a5>
+				printf(1, "\t%d \t CPU         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 151:	e8 ad 03 00 00       	call   503 <getCurrentPID>
+ 156:	83 ec 0c             	sub    $0xc,%esp
+ 159:	56                   	push   %esi
+ 15a:	53                   	push   %ebx
+ 15b:	50                   	push   %eax
+ 15c:	68 a4 0b 00 00       	push   $0xba4
+ 161:	6a 01                	push   $0x1
+ 163:	e8 58 04 00 00       	call   5c0 <printf>
+ 168:	83 c4 20             	add    $0x20,%esp
+			else
+				printf(1, "\t%d \t CPU         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+			exit();	
+ 16b:	e8 c3 02 00 00       	call   433 <exit>
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+ 170:	50                   	push   %eax
+ 171:	50                   	push   %eax
+ 172:	68 fc 0b 00 00       	push   $0xbfc
+ 177:	6a 01                	push   $0x1
+ 179:	e8 42 04 00 00       	call   5c0 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+ 17e:	5a                   	pop    %edx
+ 17f:	59                   	pop    %ecx
+ 180:	68 2c 0c 00 00       	push   $0xc2c
+ 185:	6a 01                	push   $0x1
+ 187:	e8 34 04 00 00       	call   5c0 <printf>
+ 18c:	83 c4 10             	add    $0x10,%esp
+
+		}
+	}
+
+	while(wait()!=-1);
+ 18f:	e8 a7 02 00 00       	call   43b <wait>
+ 194:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 197:	74 d2                	je     16b <main+0x16b>
+ 199:	e8 9d 02 00 00       	call   43b <wait>
+ 19e:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 1a1:	75 ec                	jne    18f <main+0x18f>
+ 1a3:	eb c6                	jmp    16b <main+0x16b>
+				printf(1, "\t%d \t CPU         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 1a5:	e8 59 03 00 00       	call   503 <getCurrentPID>
+ 1aa:	83 ec 0c             	sub    $0xc,%esp
+ 1ad:	56                   	push   %esi
+ 1ae:	53                   	push   %ebx
+ 1af:	50                   	push   %eax
+ 1b0:	68 d0 0b 00 00       	push   $0xbd0
+ 1b5:	6a 01                	push   $0x1
+ 1b7:	e8 04 04 00 00       	call   5c0 <printf>
+ 1bc:	83 c4 20             	add    $0x20,%esp
+ 1bf:	eb aa                	jmp    16b <main+0x16b>
+ 1c1:	66 90                	xchg   %ax,%ax
+ 1c3:	66 90                	xchg   %ax,%ax
+ 1c5:	66 90                	xchg   %ax,%ax
+ 1c7:	66 90                	xchg   %ax,%ax
+ 1c9:	66 90                	xchg   %ax,%ax
+ 1cb:	66 90                	xchg   %ax,%ax
+ 1cd:	66 90                	xchg   %ax,%ax
+ 1cf:	90                   	nop
+
+000001d0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 1d5:	31 c0                	xor    %eax,%eax
+{
+ 1d7:	89 e5                	mov    %esp,%ebp
+ 1d9:	53                   	push   %ebx
+ 1da:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1dd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 1e0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1e4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 1e7:	83 c0 01             	add    $0x1,%eax
+ 1ea:	84 d2                	test   %dl,%dl
+ 1ec:	75 f2                	jne    1e0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1ee:	89 c8                	mov    %ecx,%eax
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000200 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	53                   	push   %ebx
+ 208:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 20b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 20e:	0f b6 01             	movzbl (%ecx),%eax
+ 211:	0f b6 1a             	movzbl (%edx),%ebx
+ 214:	84 c0                	test   %al,%al
+ 216:	75 19                	jne    231 <strcmp+0x31>
+ 218:	eb 26                	jmp    240 <strcmp+0x40>
+ 21a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 220:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 224:	83 c1 01             	add    $0x1,%ecx
+ 227:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 22a:	0f b6 1a             	movzbl (%edx),%ebx
+ 22d:	84 c0                	test   %al,%al
+ 22f:	74 0f                	je     240 <strcmp+0x40>
+ 231:	38 d8                	cmp    %bl,%al
+ 233:	74 eb                	je     220 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 235:	29 d8                	sub    %ebx,%eax
+}
+ 237:	5b                   	pop    %ebx
+ 238:	5d                   	pop    %ebp
+ 239:	c3                   	ret    
+ 23a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 240:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 242:	29 d8                	sub    %ebx,%eax
+}
+ 244:	5b                   	pop    %ebx
+ 245:	5d                   	pop    %ebp
+ 246:	c3                   	ret    
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+
+00000250 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 25a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 25d:	74 21                	je     280 <strlen+0x30>
+ 25f:	31 c0                	xor    %eax,%eax
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 268:	83 c0 01             	add    $0x1,%eax
+ 26b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 26f:	89 c1                	mov    %eax,%ecx
+ 271:	75 f5                	jne    268 <strlen+0x18>
+    ;
+  return n;
+}
+ 273:	89 c8                	mov    %ecx,%eax
+ 275:	5d                   	pop    %ebp
+ 276:	c3                   	ret    
+ 277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 280:	31 c9                	xor    %ecx,%ecx
+}
+ 282:	5d                   	pop    %ebp
+ 283:	89 c8                	mov    %ecx,%eax
+ 285:	c3                   	ret    
+ 286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000290 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	57                   	push   %edi
+ 298:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 29b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 29e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 2a1:	89 d7                	mov    %edx,%edi
+ 2a3:	fc                   	cld    
+ 2a4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 2a6:	89 d0                	mov    %edx,%eax
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+ 2ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2af:	90                   	nop
+
+000002b0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ba:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 2be:	0f b6 10             	movzbl (%eax),%edx
+ 2c1:	84 d2                	test   %dl,%dl
+ 2c3:	75 16                	jne    2db <strchr+0x2b>
+ 2c5:	eb 21                	jmp    2e8 <strchr+0x38>
+ 2c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ce:	66 90                	xchg   %ax,%ax
+ 2d0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 2d4:	83 c0 01             	add    $0x1,%eax
+ 2d7:	84 d2                	test   %dl,%dl
+ 2d9:	74 0d                	je     2e8 <strchr+0x38>
+    if(*s == c)
+ 2db:	38 d1                	cmp    %dl,%cl
+ 2dd:	75 f1                	jne    2d0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 2df:	5d                   	pop    %ebp
+ 2e0:	c3                   	ret    
+ 2e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 2e8:	31 c0                	xor    %eax,%eax
+}
+ 2ea:	5d                   	pop    %ebp
+ 2eb:	c3                   	ret    
+ 2ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002f0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2f0:	f3 0f 1e fb          	endbr32 
+ 2f4:	55                   	push   %ebp
+ 2f5:	89 e5                	mov    %esp,%ebp
+ 2f7:	57                   	push   %edi
+ 2f8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2f9:	31 f6                	xor    %esi,%esi
+{
+ 2fb:	53                   	push   %ebx
+ 2fc:	89 f3                	mov    %esi,%ebx
+ 2fe:	83 ec 1c             	sub    $0x1c,%esp
+ 301:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 304:	eb 33                	jmp    339 <gets+0x49>
+ 306:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 310:	83 ec 04             	sub    $0x4,%esp
+ 313:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 316:	6a 01                	push   $0x1
+ 318:	50                   	push   %eax
+ 319:	6a 00                	push   $0x0
+ 31b:	e8 2b 01 00 00       	call   44b <read>
+    if(cc < 1)
+ 320:	83 c4 10             	add    $0x10,%esp
+ 323:	85 c0                	test   %eax,%eax
+ 325:	7e 1c                	jle    343 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 327:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 32b:	83 c7 01             	add    $0x1,%edi
+ 32e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 331:	3c 0a                	cmp    $0xa,%al
+ 333:	74 23                	je     358 <gets+0x68>
+ 335:	3c 0d                	cmp    $0xd,%al
+ 337:	74 1f                	je     358 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 339:	83 c3 01             	add    $0x1,%ebx
+ 33c:	89 fe                	mov    %edi,%esi
+ 33e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 341:	7c cd                	jl     310 <gets+0x20>
+ 343:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 345:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 348:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 34b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 34e:	5b                   	pop    %ebx
+ 34f:	5e                   	pop    %esi
+ 350:	5f                   	pop    %edi
+ 351:	5d                   	pop    %ebp
+ 352:	c3                   	ret    
+ 353:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 357:	90                   	nop
+ 358:	8b 75 08             	mov    0x8(%ebp),%esi
+ 35b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 35e:	01 de                	add    %ebx,%esi
+ 360:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 362:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 365:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 368:	5b                   	pop    %ebx
+ 369:	5e                   	pop    %esi
+ 36a:	5f                   	pop    %edi
+ 36b:	5d                   	pop    %ebp
+ 36c:	c3                   	ret    
+ 36d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000370 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	56                   	push   %esi
+ 378:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 379:	83 ec 08             	sub    $0x8,%esp
+ 37c:	6a 00                	push   $0x0
+ 37e:	ff 75 08             	pushl  0x8(%ebp)
+ 381:	e8 ed 00 00 00       	call   473 <open>
+  if(fd < 0)
+ 386:	83 c4 10             	add    $0x10,%esp
+ 389:	85 c0                	test   %eax,%eax
+ 38b:	78 2b                	js     3b8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 38d:	83 ec 08             	sub    $0x8,%esp
+ 390:	ff 75 0c             	pushl  0xc(%ebp)
+ 393:	89 c3                	mov    %eax,%ebx
+ 395:	50                   	push   %eax
+ 396:	e8 f0 00 00 00       	call   48b <fstat>
+  close(fd);
+ 39b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 39e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 3a0:	e8 b6 00 00 00       	call   45b <close>
+  return r;
+ 3a5:	83 c4 10             	add    $0x10,%esp
+}
+ 3a8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 3ab:	89 f0                	mov    %esi,%eax
+ 3ad:	5b                   	pop    %ebx
+ 3ae:	5e                   	pop    %esi
+ 3af:	5d                   	pop    %ebp
+ 3b0:	c3                   	ret    
+ 3b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 3b8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 3bd:	eb e9                	jmp    3a8 <stat+0x38>
+ 3bf:	90                   	nop
+
+000003c0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	53                   	push   %ebx
+ 3c8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 3cb:	0f be 02             	movsbl (%edx),%eax
+ 3ce:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 3d1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 3d4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 3d9:	77 1a                	ja     3f5 <atoi+0x35>
+ 3db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3df:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 3e0:	83 c2 01             	add    $0x1,%edx
+ 3e3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 3e6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 3ea:	0f be 02             	movsbl (%edx),%eax
+ 3ed:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 3f0:	80 fb 09             	cmp    $0x9,%bl
+ 3f3:	76 eb                	jbe    3e0 <atoi+0x20>
+  return n;
+}
+ 3f5:	89 c8                	mov    %ecx,%eax
+ 3f7:	5b                   	pop    %ebx
+ 3f8:	5d                   	pop    %ebp
+ 3f9:	c3                   	ret    
+ 3fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000400 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 45 10             	mov    0x10(%ebp),%eax
+ 40b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 40e:	56                   	push   %esi
+ 40f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 412:	85 c0                	test   %eax,%eax
+ 414:	7e 0f                	jle    425 <memmove+0x25>
+ 416:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 418:	89 d7                	mov    %edx,%edi
+ 41a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 420:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 421:	39 f8                	cmp    %edi,%eax
+ 423:	75 fb                	jne    420 <memmove+0x20>
+  return vdst;
+}
+ 425:	5e                   	pop    %esi
+ 426:	89 d0                	mov    %edx,%eax
+ 428:	5f                   	pop    %edi
+ 429:	5d                   	pop    %ebp
+ 42a:	c3                   	ret    
+
+0000042b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 42b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <exit>:
+SYSCALL(exit)
+ 433:	b8 02 00 00 00       	mov    $0x2,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <wait>:
+SYSCALL(wait)
+ 43b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <pipe>:
+SYSCALL(pipe)
+ 443:	b8 04 00 00 00       	mov    $0x4,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <read>:
+SYSCALL(read)
+ 44b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <write>:
+SYSCALL(write)
+ 453:	b8 10 00 00 00       	mov    $0x10,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <close>:
+SYSCALL(close)
+ 45b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <kill>:
+SYSCALL(kill)
+ 463:	b8 06 00 00 00       	mov    $0x6,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <exec>:
+SYSCALL(exec)
+ 46b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <open>:
+SYSCALL(open)
+ 473:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <mknod>:
+SYSCALL(mknod)
+ 47b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <unlink>:
+SYSCALL(unlink)
+ 483:	b8 12 00 00 00       	mov    $0x12,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <fstat>:
+SYSCALL(fstat)
+ 48b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <link>:
+SYSCALL(link)
+ 493:	b8 13 00 00 00       	mov    $0x13,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <mkdir>:
+SYSCALL(mkdir)
+ 49b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <chdir>:
+SYSCALL(chdir)
+ 4a3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <dup>:
+SYSCALL(dup)
+ 4ab:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <getpid>:
+SYSCALL(getpid)
+ 4b3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <sbrk>:
+SYSCALL(sbrk)
+ 4bb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+
+000004c3 <sleep>:
+SYSCALL(sleep)
+ 4c3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 4c8:	cd 40                	int    $0x40
+ 4ca:	c3                   	ret    
+
+000004cb <uptime>:
+SYSCALL(uptime)
+ 4cb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 4d0:	cd 40                	int    $0x40
+ 4d2:	c3                   	ret    
+
+000004d3 <getNumProc>:
+SYSCALL(getNumProc)
+ 4d3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 4d8:	cd 40                	int    $0x40
+ 4da:	c3                   	ret    
+
+000004db <getMaxPID>:
+SYSCALL(getMaxPID)
+ 4db:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4e0:	cd 40                	int    $0x40
+ 4e2:	c3                   	ret    
+
+000004e3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 4e3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4e8:	cd 40                	int    $0x40
+ 4ea:	c3                   	ret    
+
+000004eb <set_burst_time>:
+SYSCALL(set_burst_time)
+ 4eb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 4f0:	cd 40                	int    $0x40
+ 4f2:	c3                   	ret    
+
+000004f3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 4f3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 4f8:	cd 40                	int    $0x40
+ 4fa:	c3                   	ret    
+
+000004fb <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 4fb:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 500:	cd 40                	int    $0x40
+ 502:	c3                   	ret    
+
+00000503 <getCurrentPID>:
+ 503:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 508:	cd 40                	int    $0x40
+ 50a:	c3                   	ret    
+ 50b:	66 90                	xchg   %ax,%ax
+ 50d:	66 90                	xchg   %ax,%ax
+ 50f:	90                   	nop
+
+00000510 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	57                   	push   %edi
+ 514:	56                   	push   %esi
+ 515:	53                   	push   %ebx
+ 516:	83 ec 3c             	sub    $0x3c,%esp
+ 519:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 51c:	89 d1                	mov    %edx,%ecx
+{
+ 51e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 521:	85 d2                	test   %edx,%edx
+ 523:	0f 89 7f 00 00 00    	jns    5a8 <printint+0x98>
+ 529:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 52d:	74 79                	je     5a8 <printint+0x98>
+    neg = 1;
+ 52f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 536:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 538:	31 db                	xor    %ebx,%ebx
+ 53a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 540:	89 c8                	mov    %ecx,%eax
+ 542:	31 d2                	xor    %edx,%edx
+ 544:	89 cf                	mov    %ecx,%edi
+ 546:	f7 75 c4             	divl   -0x3c(%ebp)
+ 549:	0f b6 92 64 0c 00 00 	movzbl 0xc64(%edx),%edx
+ 550:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 553:	89 d8                	mov    %ebx,%eax
+ 555:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 558:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 55b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 55e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 561:	76 dd                	jbe    540 <printint+0x30>
+  if(neg)
+ 563:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 566:	85 c9                	test   %ecx,%ecx
+ 568:	74 0c                	je     576 <printint+0x66>
+    buf[i++] = '-';
+ 56a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 56f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 571:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 576:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 579:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 57d:	eb 07                	jmp    586 <printint+0x76>
+ 57f:	90                   	nop
+ 580:	0f b6 13             	movzbl (%ebx),%edx
+ 583:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 586:	83 ec 04             	sub    $0x4,%esp
+ 589:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 58c:	6a 01                	push   $0x1
+ 58e:	56                   	push   %esi
+ 58f:	57                   	push   %edi
+ 590:	e8 be fe ff ff       	call   453 <write>
+  while(--i >= 0)
+ 595:	83 c4 10             	add    $0x10,%esp
+ 598:	39 de                	cmp    %ebx,%esi
+ 59a:	75 e4                	jne    580 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 59c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 59f:	5b                   	pop    %ebx
+ 5a0:	5e                   	pop    %esi
+ 5a1:	5f                   	pop    %edi
+ 5a2:	5d                   	pop    %ebp
+ 5a3:	c3                   	ret    
+ 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 5a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 5af:	eb 87                	jmp    538 <printint+0x28>
+ 5b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+
+000005c0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 5c0:	f3 0f 1e fb          	endbr32 
+ 5c4:	55                   	push   %ebp
+ 5c5:	89 e5                	mov    %esp,%ebp
+ 5c7:	57                   	push   %edi
+ 5c8:	56                   	push   %esi
+ 5c9:	53                   	push   %ebx
+ 5ca:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5cd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 5d0:	0f b6 1e             	movzbl (%esi),%ebx
+ 5d3:	84 db                	test   %bl,%bl
+ 5d5:	0f 84 b4 00 00 00    	je     68f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 5db:	8d 45 10             	lea    0x10(%ebp),%eax
+ 5de:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 5e1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 5e4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 5e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5e9:	eb 33                	jmp    61e <printf+0x5e>
+ 5eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+ 5f0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 5f3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 5f8:	83 f8 25             	cmp    $0x25,%eax
+ 5fb:	74 17                	je     614 <printf+0x54>
+  write(fd, &c, 1);
+ 5fd:	83 ec 04             	sub    $0x4,%esp
+ 600:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 603:	6a 01                	push   $0x1
+ 605:	57                   	push   %edi
+ 606:	ff 75 08             	pushl  0x8(%ebp)
+ 609:	e8 45 fe ff ff       	call   453 <write>
+ 60e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 611:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 614:	0f b6 1e             	movzbl (%esi),%ebx
+ 617:	83 c6 01             	add    $0x1,%esi
+ 61a:	84 db                	test   %bl,%bl
+ 61c:	74 71                	je     68f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 61e:	0f be cb             	movsbl %bl,%ecx
+ 621:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 624:	85 d2                	test   %edx,%edx
+ 626:	74 c8                	je     5f0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 628:	83 fa 25             	cmp    $0x25,%edx
+ 62b:	75 e7                	jne    614 <printf+0x54>
+      if(c == 'd'){
+ 62d:	83 f8 64             	cmp    $0x64,%eax
+ 630:	0f 84 9a 00 00 00    	je     6d0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 636:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 63c:	83 f9 70             	cmp    $0x70,%ecx
+ 63f:	74 5f                	je     6a0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 641:	83 f8 73             	cmp    $0x73,%eax
+ 644:	0f 84 d6 00 00 00    	je     720 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 64a:	83 f8 63             	cmp    $0x63,%eax
+ 64d:	0f 84 8d 00 00 00    	je     6e0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 653:	83 f8 25             	cmp    $0x25,%eax
+ 656:	0f 84 b4 00 00 00    	je     710 <printf+0x150>
+  write(fd, &c, 1);
+ 65c:	83 ec 04             	sub    $0x4,%esp
+ 65f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 663:	6a 01                	push   $0x1
+ 665:	57                   	push   %edi
+ 666:	ff 75 08             	pushl  0x8(%ebp)
+ 669:	e8 e5 fd ff ff       	call   453 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 66e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 671:	83 c4 0c             	add    $0xc,%esp
+ 674:	6a 01                	push   $0x1
+ 676:	83 c6 01             	add    $0x1,%esi
+ 679:	57                   	push   %edi
+ 67a:	ff 75 08             	pushl  0x8(%ebp)
+ 67d:	e8 d1 fd ff ff       	call   453 <write>
+  for(i = 0; fmt[i]; i++){
+ 682:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 686:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 689:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 68b:	84 db                	test   %bl,%bl
+ 68d:	75 8f                	jne    61e <printf+0x5e>
+    }
+  }
+}
+ 68f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 692:	5b                   	pop    %ebx
+ 693:	5e                   	pop    %esi
+ 694:	5f                   	pop    %edi
+ 695:	5d                   	pop    %ebp
+ 696:	c3                   	ret    
+ 697:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 69e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 6a0:	83 ec 0c             	sub    $0xc,%esp
+ 6a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 6a8:	6a 00                	push   $0x0
+ 6aa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6b0:	8b 13                	mov    (%ebx),%edx
+ 6b2:	e8 59 fe ff ff       	call   510 <printint>
+        ap++;
+ 6b7:	89 d8                	mov    %ebx,%eax
+ 6b9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6bc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 6be:	83 c0 04             	add    $0x4,%eax
+ 6c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 6c4:	e9 4b ff ff ff       	jmp    614 <printf+0x54>
+ 6c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 6d0:	83 ec 0c             	sub    $0xc,%esp
+ 6d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 6d8:	6a 01                	push   $0x1
+ 6da:	eb ce                	jmp    6aa <printf+0xea>
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 6e0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 6e3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6e6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 6e8:	6a 01                	push   $0x1
+        ap++;
+ 6ea:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 6ed:	57                   	push   %edi
+ 6ee:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 6f1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6f4:	e8 5a fd ff ff       	call   453 <write>
+        ap++;
+ 6f9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 6fc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6ff:	31 d2                	xor    %edx,%edx
+ 701:	e9 0e ff ff ff       	jmp    614 <printf+0x54>
+ 706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 710:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 713:	83 ec 04             	sub    $0x4,%esp
+ 716:	e9 59 ff ff ff       	jmp    674 <printf+0xb4>
+ 71b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+        s = (char*)*ap;
+ 720:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 723:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 725:	83 c0 04             	add    $0x4,%eax
+ 728:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 72b:	85 db                	test   %ebx,%ebx
+ 72d:	74 17                	je     746 <printf+0x186>
+        while(*s != 0){
+ 72f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 732:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 734:	84 c0                	test   %al,%al
+ 736:	0f 84 d8 fe ff ff    	je     614 <printf+0x54>
+ 73c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 73f:	89 de                	mov    %ebx,%esi
+ 741:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 744:	eb 1a                	jmp    760 <printf+0x1a0>
+          s = "(null)";
+ 746:	bb 5a 0c 00 00       	mov    $0xc5a,%ebx
+        while(*s != 0){
+ 74b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 74e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 753:	89 de                	mov    %ebx,%esi
+ 755:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+  write(fd, &c, 1);
+ 760:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 763:	83 c6 01             	add    $0x1,%esi
+ 766:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 769:	6a 01                	push   $0x1
+ 76b:	57                   	push   %edi
+ 76c:	53                   	push   %ebx
+ 76d:	e8 e1 fc ff ff       	call   453 <write>
+        while(*s != 0){
+ 772:	0f b6 06             	movzbl (%esi),%eax
+ 775:	83 c4 10             	add    $0x10,%esp
+ 778:	84 c0                	test   %al,%al
+ 77a:	75 e4                	jne    760 <printf+0x1a0>
+ 77c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 77f:	31 d2                	xor    %edx,%edx
+ 781:	e9 8e fe ff ff       	jmp    614 <printf+0x54>
+ 786:	66 90                	xchg   %ax,%ax
+ 788:	66 90                	xchg   %ax,%ax
+ 78a:	66 90                	xchg   %ax,%ax
+ 78c:	66 90                	xchg   %ax,%ax
+ 78e:	66 90                	xchg   %ax,%ax
+
+00000790 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 790:	f3 0f 1e fb          	endbr32 
+ 794:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 795:	a1 c0 0f 00 00       	mov    0xfc0,%eax
+{
+ 79a:	89 e5                	mov    %esp,%ebp
+ 79c:	57                   	push   %edi
+ 79d:	56                   	push   %esi
+ 79e:	53                   	push   %ebx
+ 79f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 7a2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 7a4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7a7:	39 c8                	cmp    %ecx,%eax
+ 7a9:	73 15                	jae    7c0 <free+0x30>
+ 7ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7af:	90                   	nop
+ 7b0:	39 d1                	cmp    %edx,%ecx
+ 7b2:	72 14                	jb     7c8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7b4:	39 d0                	cmp    %edx,%eax
+ 7b6:	73 10                	jae    7c8 <free+0x38>
+{
+ 7b8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7ba:	8b 10                	mov    (%eax),%edx
+ 7bc:	39 c8                	cmp    %ecx,%eax
+ 7be:	72 f0                	jb     7b0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7c0:	39 d0                	cmp    %edx,%eax
+ 7c2:	72 f4                	jb     7b8 <free+0x28>
+ 7c4:	39 d1                	cmp    %edx,%ecx
+ 7c6:	73 f0                	jae    7b8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 7c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 7cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 7ce:	39 fa                	cmp    %edi,%edx
+ 7d0:	74 1e                	je     7f0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 7d2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7d5:	8b 50 04             	mov    0x4(%eax),%edx
+ 7d8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7db:	39 f1                	cmp    %esi,%ecx
+ 7dd:	74 28                	je     807 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 7df:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 7e1:	5b                   	pop    %ebx
+  freep = p;
+ 7e2:	a3 c0 0f 00 00       	mov    %eax,0xfc0
+}
+ 7e7:	5e                   	pop    %esi
+ 7e8:	5f                   	pop    %edi
+ 7e9:	5d                   	pop    %ebp
+ 7ea:	c3                   	ret    
+ 7eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7ef:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 7f0:	03 72 04             	add    0x4(%edx),%esi
+ 7f3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7f6:	8b 10                	mov    (%eax),%edx
+ 7f8:	8b 12                	mov    (%edx),%edx
+ 7fa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7fd:	8b 50 04             	mov    0x4(%eax),%edx
+ 800:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 803:	39 f1                	cmp    %esi,%ecx
+ 805:	75 d8                	jne    7df <free+0x4f>
+    p->s.size += bp->s.size;
+ 807:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 80a:	a3 c0 0f 00 00       	mov    %eax,0xfc0
+    p->s.size += bp->s.size;
+ 80f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 812:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 815:	89 10                	mov    %edx,(%eax)
+}
+ 817:	5b                   	pop    %ebx
+ 818:	5e                   	pop    %esi
+ 819:	5f                   	pop    %edi
+ 81a:	5d                   	pop    %ebp
+ 81b:	c3                   	ret    
+ 81c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000820 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 820:	f3 0f 1e fb          	endbr32 
+ 824:	55                   	push   %ebp
+ 825:	89 e5                	mov    %esp,%ebp
+ 827:	57                   	push   %edi
+ 828:	56                   	push   %esi
+ 829:	53                   	push   %ebx
+ 82a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 82d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 830:	8b 3d c0 0f 00 00    	mov    0xfc0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 836:	8d 70 07             	lea    0x7(%eax),%esi
+ 839:	c1 ee 03             	shr    $0x3,%esi
+ 83c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 83f:	85 ff                	test   %edi,%edi
+ 841:	0f 84 a9 00 00 00    	je     8f0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 847:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 849:	8b 48 04             	mov    0x4(%eax),%ecx
+ 84c:	39 f1                	cmp    %esi,%ecx
+ 84e:	73 6d                	jae    8bd <malloc+0x9d>
+ 850:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 856:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 85b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 85e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 865:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 868:	eb 17                	jmp    881 <malloc+0x61>
+ 86a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 870:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 872:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 875:	39 f1                	cmp    %esi,%ecx
+ 877:	73 4f                	jae    8c8 <malloc+0xa8>
+ 879:	8b 3d c0 0f 00 00    	mov    0xfc0,%edi
+ 87f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 881:	39 c7                	cmp    %eax,%edi
+ 883:	75 eb                	jne    870 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 885:	83 ec 0c             	sub    $0xc,%esp
+ 888:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 88b:	e8 2b fc ff ff       	call   4bb <sbrk>
+  if(p == (char*)-1)
+ 890:	83 c4 10             	add    $0x10,%esp
+ 893:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 896:	74 1b                	je     8b3 <malloc+0x93>
+  hp->s.size = nu;
+ 898:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 89b:	83 ec 0c             	sub    $0xc,%esp
+ 89e:	83 c0 08             	add    $0x8,%eax
+ 8a1:	50                   	push   %eax
+ 8a2:	e8 e9 fe ff ff       	call   790 <free>
+  return freep;
+ 8a7:	a1 c0 0f 00 00       	mov    0xfc0,%eax
+      if((p = morecore(nunits)) == 0)
+ 8ac:	83 c4 10             	add    $0x10,%esp
+ 8af:	85 c0                	test   %eax,%eax
+ 8b1:	75 bd                	jne    870 <malloc+0x50>
+        return 0;
+  }
+}
+ 8b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 8b6:	31 c0                	xor    %eax,%eax
+}
+ 8b8:	5b                   	pop    %ebx
+ 8b9:	5e                   	pop    %esi
+ 8ba:	5f                   	pop    %edi
+ 8bb:	5d                   	pop    %ebp
+ 8bc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 8bd:	89 c2                	mov    %eax,%edx
+ 8bf:	89 f8                	mov    %edi,%eax
+ 8c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 8c8:	39 ce                	cmp    %ecx,%esi
+ 8ca:	74 54                	je     920 <malloc+0x100>
+        p->s.size -= nunits;
+ 8cc:	29 f1                	sub    %esi,%ecx
+ 8ce:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 8d1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 8d4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 8d7:	a3 c0 0f 00 00       	mov    %eax,0xfc0
+}
+ 8dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 8df:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 8e2:	5b                   	pop    %ebx
+ 8e3:	5e                   	pop    %esi
+ 8e4:	5f                   	pop    %edi
+ 8e5:	5d                   	pop    %ebp
+ 8e6:	c3                   	ret    
+ 8e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ee:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 8f0:	c7 05 c0 0f 00 00 c4 	movl   $0xfc4,0xfc0
+ 8f7:	0f 00 00 
+    base.s.size = 0;
+ 8fa:	bf c4 0f 00 00       	mov    $0xfc4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 8ff:	c7 05 c4 0f 00 00 c4 	movl   $0xfc4,0xfc4
+ 906:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 909:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 90b:	c7 05 c8 0f 00 00 00 	movl   $0x0,0xfc8
+ 912:	00 00 00 
+    if(p->s.size >= nunits){
+ 915:	e9 36 ff ff ff       	jmp    850 <malloc+0x30>
+ 91a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 920:	8b 0a                	mov    (%edx),%ecx
+ 922:	89 08                	mov    %ecx,(%eax)
+ 924:	eb b1                	jmp    8d7 <malloc+0xb7>
+ 926:	66 90                	xchg   %ax,%ax
+ 928:	66 90                	xchg   %ax,%ax
+ 92a:	66 90                	xchg   %ax,%ax
+ 92c:	66 90                	xchg   %ax,%ax
+ 92e:	66 90                	xchg   %ax,%ax
+
+00000930 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 930:	f3 0f 1e fb          	endbr32 
+ 934:	55                   	push   %ebp
+ 935:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
+ 93a:	89 e5                	mov    %esp,%ebp
+ 93c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 93f:	89 15 e0 0f 00 00    	mov    %edx,0xfe0
+    for (mti=1; mti<N; mti++)
+ 945:	eb 0c                	jmp    953 <sgenrand+0x23>
+ 947:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 94e:	66 90                	xchg   %ax,%ax
+ 950:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 953:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 959:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 95b:	3d 9c 19 00 00       	cmp    $0x199c,%eax
+ 960:	75 ee                	jne    950 <sgenrand+0x20>
+ 962:	c7 05 a8 0f 00 00 70 	movl   $0x270,0xfa8
+ 969:	02 00 00 
+}
+ 96c:	5d                   	pop    %ebp
+ 96d:	c3                   	ret    
+ 96e:	66 90                	xchg   %ax,%ax
+
+00000970 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 970:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 974:	a1 a8 0f 00 00       	mov    0xfa8,%eax
+ 979:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 97e:	7f 3c                	jg     9bc <genrand+0x4c>
+ 980:	8d 50 01             	lea    0x1(%eax),%edx
+ 983:	8b 04 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 98a:	89 15 a8 0f 00 00    	mov    %edx,0xfa8
+    y ^= TEMPERING_SHIFT_U(y);
+ 990:	89 c2                	mov    %eax,%edx
+ 992:	c1 ea 0b             	shr    $0xb,%edx
+ 995:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 997:	89 d0                	mov    %edx,%eax
+ 999:	c1 e0 07             	shl    $0x7,%eax
+ 99c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 9a1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 9a3:	89 d0                	mov    %edx,%eax
+ 9a5:	c1 e0 0f             	shl    $0xf,%eax
+ 9a8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 9ad:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 9af:	89 c2                	mov    %eax,%edx
+ 9b1:	c1 ea 12             	shr    $0x12,%edx
+ 9b4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 9b6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 9bb:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 9bc:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 9c1:	0f 84 d2 00 00 00    	je     a99 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 9c7:	31 c0                	xor    %eax,%eax
+ 9c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 9d0:	8b 0c 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%ecx
+ 9d7:	83 c0 01             	add    $0x1,%eax
+ 9da:	8b 14 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%edx
+ 9e1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9e7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9ed:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9ef:	89 d1                	mov    %edx,%ecx
+ 9f1:	83 e2 01             	and    $0x1,%edx
+ 9f4:	d1 e9                	shr    %ecx
+ 9f6:	33 0c 85 10 16 00 00 	xor    0x1610(,%eax,4),%ecx
+ 9fd:	33 0c 95 78 0c 00 00 	xor    0xc78(,%edx,4),%ecx
+ a04:	89 0c 85 dc 0f 00 00 	mov    %ecx,0xfdc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ a0b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ a10:	75 be                	jne    9d0 <genrand+0x60>
+ a12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ a18:	8b 0c 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%ecx
+ a1f:	83 c0 01             	add    $0x1,%eax
+ a22:	8b 14 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%edx
+ a29:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a2f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a35:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ a37:	89 d1                	mov    %edx,%ecx
+ a39:	83 e2 01             	and    $0x1,%edx
+ a3c:	d1 e9                	shr    %ecx
+ a3e:	33 0c 85 50 0c 00 00 	xor    0xc50(,%eax,4),%ecx
+ a45:	33 0c 95 78 0c 00 00 	xor    0xc78(,%edx,4),%ecx
+ a4c:	89 0c 85 dc 0f 00 00 	mov    %ecx,0xfdc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ a53:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ a58:	75 be                	jne    a18 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ a5a:	a1 e0 0f 00 00       	mov    0xfe0,%eax
+ a5f:	8b 0d 9c 19 00 00    	mov    0x199c,%ecx
+ a65:	89 c2                	mov    %eax,%edx
+ a67:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a6d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a73:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ a75:	89 ca                	mov    %ecx,%edx
+ a77:	83 e1 01             	and    $0x1,%ecx
+ a7a:	d1 ea                	shr    %edx
+ a7c:	33 15 10 16 00 00    	xor    0x1610,%edx
+ a82:	33 14 8d 78 0c 00 00 	xor    0xc78(,%ecx,4),%edx
+ a89:	89 15 9c 19 00 00    	mov    %edx,0x199c
+ a8f:	ba 01 00 00 00       	mov    $0x1,%edx
+ a94:	e9 f1 fe ff ff       	jmp    98a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ a99:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
+ a9e:	b9 9c 19 00 00       	mov    $0x199c,%ecx
+ aa3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ aa8:	c7 05 e0 0f 00 00 05 	movl   $0x1105,0xfe0
+ aaf:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ ab2:	eb 07                	jmp    abb <genrand+0x14b>
+ ab4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ ab8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ abb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ ac1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ ac3:	39 c1                	cmp    %eax,%ecx
+ ac5:	75 f1                	jne    ab8 <genrand+0x148>
+ ac7:	e9 fb fe ff ff       	jmp    9c7 <genrand+0x57>
+ acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000ad0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ ad0:	f3 0f 1e fb          	endbr32 
+ ad4:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ ad5:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ ad7:	89 e5                	mov    %esp,%ebp
+ ad9:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ ada:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ add:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ ade:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ ae3:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ ae6:	89 d8                	mov    %ebx,%eax
+ ae8:	f7 f1                	div    %ecx
+ aea:	89 c6                	mov    %eax,%esi
+ aec:	29 d3                	sub    %edx,%ebx
+ aee:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ af0:	e8 7b fe ff ff       	call   970 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ af5:	39 d8                	cmp    %ebx,%eax
+ af7:	73 f7                	jae    af0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ af9:	31 d2                	xor    %edx,%edx
+}
+ afb:	5b                   	pop    %ebx
+  return x/bin_size;
+ afc:	f7 f6                	div    %esi
+}
+ afe:	5e                   	pop    %esi
+ aff:	5d                   	pop    %ebp
+ b00:	c3                   	ret    
+ b01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ b0f:	90                   	nop
+
+00000b10 <randomrange>:
+
+int randomrange(int low, int high){
+ b10:	f3 0f 1e fb          	endbr32 
+ b14:	55                   	push   %ebp
+ b15:	89 e5                	mov    %esp,%ebp
+ b17:	57                   	push   %edi
+ b18:	56                   	push   %esi
+ b19:	53                   	push   %ebx
+ b1a:	83 ec 0c             	sub    $0xc,%esp
+ b1d:	8b 75 08             	mov    0x8(%ebp),%esi
+ b20:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ b23:	39 f0                	cmp    %esi,%eax
+ b25:	7d 06                	jge    b2d <randomrange+0x1d>
+ b27:	89 f2                	mov    %esi,%edx
+ b29:	89 c6                	mov    %eax,%esi
+ b2b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ b2d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ b2f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ b34:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ b36:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ b39:	89 d8                	mov    %ebx,%eax
+ b3b:	f7 f1                	div    %ecx
+ b3d:	89 c7                	mov    %eax,%edi
+ b3f:	29 d3                	sub    %edx,%ebx
+ b41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ b48:	e8 23 fe ff ff       	call   970 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ b4d:	39 d8                	cmp    %ebx,%eax
+ b4f:	73 f7                	jae    b48 <randomrange+0x38>
+  return x/bin_size;
+ b51:	31 d2                	xor    %edx,%edx
+  return val;
+ b53:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ b56:	f7 f7                	div    %edi
+ b58:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ b59:	01 f0                	add    %esi,%eax
+ b5b:	5e                   	pop    %esi
+ b5c:	5f                   	pop    %edi
+ b5d:	5d                   	pop    %ebp
+ b5e:	c3                   	ret    
diff -ruN xv6-public/cpuProcTester.d xv6-public-partB_sjf/cpuProcTester.d
--- xv6-public/cpuProcTester.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/cpuProcTester.d	2022-10-07 21:26:38.441841000 +0530
@@ -0,0 +1,2 @@
+cpuProcTester.o: cpuProcTester.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/cpuProcTester.o and xv6-public-partB_sjf/cpuProcTester.o differ
diff -ruN xv6-public/cpuProcTester.sym xv6-public-partB_sjf/cpuProcTester.sym
--- xv6-public/cpuProcTester.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/cpuProcTester.sym	2022-10-07 21:26:38.545842000 +0530
@@ -0,0 +1,74 @@
+00000000 .text
+00000b60 .rodata
+00000c80 .eh_frame
+00000fa8 .data
+00000fc0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cpuProcTester.c
+00000000 ulib.c
+00000000 printf.c
+00000510 printint
+00000c64 digits.1105
+00000000 umalloc.c
+00000fc0 freep
+00000fc4 base
+00000000 random.c
+00000fe0 mt
+00000fa8 mti
+00000c78 mag01.989
+000001d0 strcpy
+00000930 sgenrand
+000005c0 printf
+00000400 memmove
+0000047b mknod
+000002f0 gets
+000004b3 getpid
+00000820 malloc
+000004c3 sleep
+000004f3 get_burst_time
+00000ad0 random_at_most
+000004fb getCurrentInfo
+00000443 pipe
+00000453 write
+0000048b fstat
+00000463 kill
+000004a3 chdir
+0000046b exec
+0000043b wait
+0000044b read
+00000483 unlink
+0000042b fork
+000004bb sbrk
+000004cb uptime
+00000fac __bss_start
+00000290 memset
+00000000 main
+000004eb set_burst_time
+00000200 strcmp
+000004ab dup
+00000970 genrand
+000019a0 var
+000004d3 getNumProc
+000004e3 getProcInfo
+00000370 stat
+00000fac _edata
+000019a4 _end
+00000493 link
+00000433 exit
+000004db getMaxPID
+000003c0 atoi
+00000250 strlen
+00000473 open
+000002b0 strchr
+00000503 getCurrentPID
+00000b10 randomrange
+0000049b mkdir
+0000045b close
+00000790 free
diff -ruN xv6-public/defs.h xv6-public-partB_sjf/defs.h
--- xv6-public/defs.h	2022-10-06 22:50:49.449046000 +0530
+++ xv6-public-partB_sjf/defs.h	2022-10-07 12:42:54.883665000 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -103,6 +104,7 @@
 
 //PAGEBREAK: 16
 // proc.c
+extern int 		quant;
 int             cpuid(void);
 void            exit(void);
 int             fork(void);
@@ -120,6 +122,7 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void 			new_yield(void);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
Binary files xv6-public/_echo and xv6-public-partB_sjf/_echo differ
diff -ruN xv6-public/echo.asm xv6-public-partB_sjf/echo.asm
--- xv6-public/echo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/echo.asm	2022-10-07 20:27:43.699113000 +0530
@@ -0,0 +1,1512 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  for(i = 1; i < argc; i++)
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 4b                	jle    6c <main+0x6c>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  27:	83 c3 04             	add    $0x4,%ebx
+  2a:	8b 43 fc             	mov    -0x4(%ebx),%eax
+  2d:	39 f3                	cmp    %esi,%ebx
+  2f:	74 26                	je     57 <main+0x57>
+  31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  38:	68 10 0a 00 00       	push   $0xa10
+  3d:	83 c3 04             	add    $0x4,%ebx
+  40:	50                   	push   %eax
+  41:	68 12 0a 00 00       	push   $0xa12
+  46:	6a 01                	push   $0x1
+  48:	e8 23 04 00 00       	call   470 <printf>
+  for(i = 1; i < argc; i++)
+  4d:	8b 43 fc             	mov    -0x4(%ebx),%eax
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  50:	83 c4 10             	add    $0x10,%esp
+  53:	39 f3                	cmp    %esi,%ebx
+  55:	75 e1                	jne    38 <main+0x38>
+  57:	68 17 0a 00 00       	push   $0xa17
+  5c:	50                   	push   %eax
+  5d:	68 12 0a 00 00       	push   $0xa12
+  62:	6a 01                	push   $0x1
+  64:	e8 07 04 00 00       	call   470 <printf>
+  69:	83 c4 10             	add    $0x10,%esp
+  exit();
+  6c:	e8 72 02 00 00       	call   2e3 <exit>
+  71:	66 90                	xchg   %ax,%ax
+  73:	66 90                	xchg   %ax,%ax
+  75:	66 90                	xchg   %ax,%ax
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getNumProc>:
+SYSCALL(getNumProc)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 3ab:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <getCurrentPID>:
+ 3b3:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3cc:	89 d1                	mov    %edx,%ecx
+{
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
+    neg = 1;
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3e6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 20 0a 00 00 	movzbl 0xa20(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
+  if(neg)
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
+    buf[i++] = '-';
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 41f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 be fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+
+00000470 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 470:	f3 0f 1e fb          	endbr32 
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	57                   	push   %edi
+ 478:	56                   	push   %esi
+ 479:	53                   	push   %ebx
+ 47a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 47d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 480:	0f b6 1e             	movzbl (%esi),%ebx
+ 483:	84 db                	test   %bl,%bl
+ 485:	0f 84 b4 00 00 00    	je     53f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 48b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 48e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 491:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 494:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 496:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 499:	eb 33                	jmp    4ce <printf+0x5e>
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+ 4a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4a3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 17                	je     4c4 <printf+0x54>
+  write(fd, &c, 1);
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 45 fe ff ff       	call   303 <write>
+ 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4c1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c7:	83 c6 01             	add    $0x1,%esi
+ 4ca:	84 db                	test   %bl,%bl
+ 4cc:	74 71                	je     53f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ce:	0f be cb             	movsbl %bl,%ecx
+ 4d1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4d4:	85 d2                	test   %edx,%edx
+ 4d6:	74 c8                	je     4a0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4d8:	83 fa 25             	cmp    $0x25,%edx
+ 4db:	75 e7                	jne    4c4 <printf+0x54>
+      if(c == 'd'){
+ 4dd:	83 f8 64             	cmp    $0x64,%eax
+ 4e0:	0f 84 9a 00 00 00    	je     580 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ec:	83 f9 70             	cmp    $0x70,%ecx
+ 4ef:	74 5f                	je     550 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4f1:	83 f8 73             	cmp    $0x73,%eax
+ 4f4:	0f 84 d6 00 00 00    	je     5d0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4fa:	83 f8 63             	cmp    $0x63,%eax
+ 4fd:	0f 84 8d 00 00 00    	je     590 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 503:	83 f8 25             	cmp    $0x25,%eax
+ 506:	0f 84 b4 00 00 00    	je     5c0 <printf+0x150>
+  write(fd, &c, 1);
+ 50c:	83 ec 04             	sub    $0x4,%esp
+ 50f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 e5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 51e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 521:	83 c4 0c             	add    $0xc,%esp
+ 524:	6a 01                	push   $0x1
+ 526:	83 c6 01             	add    $0x1,%esi
+ 529:	57                   	push   %edi
+ 52a:	ff 75 08             	pushl  0x8(%ebp)
+ 52d:	e8 d1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 532:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 536:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 539:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 53b:	84 db                	test   %bl,%bl
+ 53d:	75 8f                	jne    4ce <printf+0x5e>
+    }
+  }
+}
+ 53f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 542:	5b                   	pop    %ebx
+ 543:	5e                   	pop    %esi
+ 544:	5f                   	pop    %edi
+ 545:	5d                   	pop    %ebp
+ 546:	c3                   	ret    
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 558:	6a 00                	push   $0x0
+ 55a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 55d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 560:	8b 13                	mov    (%ebx),%edx
+ 562:	e8 59 fe ff ff       	call   3c0 <printint>
+        ap++;
+ 567:	89 d8                	mov    %ebx,%eax
+ 569:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 56e:	83 c0 04             	add    $0x4,%eax
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	e9 4b ff ff ff       	jmp    4c4 <printf+0x54>
+ 579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	eb ce                	jmp    55a <printf+0xea>
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 590:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 596:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 598:	6a 01                	push   $0x1
+        ap++;
+ 59a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 59d:	57                   	push   %edi
+ 59e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5a1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a4:	e8 5a fd ff ff       	call   303 <write>
+        ap++;
+ 5a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ac:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5af:	31 d2                	xor    %edx,%edx
+ 5b1:	e9 0e ff ff ff       	jmp    4c4 <printf+0x54>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+ 5c6:	e9 59 ff ff ff       	jmp    524 <printf+0xb4>
+ 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+        s = (char*)*ap;
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5d5:	83 c0 04             	add    $0x4,%eax
+ 5d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5db:	85 db                	test   %ebx,%ebx
+ 5dd:	74 17                	je     5f6 <printf+0x186>
+        while(*s != 0){
+ 5df:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5e2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5e4:	84 c0                	test   %al,%al
+ 5e6:	0f 84 d8 fe ff ff    	je     4c4 <printf+0x54>
+ 5ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ef:	89 de                	mov    %ebx,%esi
+ 5f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f4:	eb 1a                	jmp    610 <printf+0x1a0>
+          s = "(null)";
+ 5f6:	bb 19 0a 00 00       	mov    $0xa19,%ebx
+        while(*s != 0){
+ 5fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	89 de                	mov    %ebx,%esi
+ 605:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+  write(fd, &c, 1);
+ 610:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 613:	83 c6 01             	add    $0x1,%esi
+ 616:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 619:	6a 01                	push   $0x1
+ 61b:	57                   	push   %edi
+ 61c:	53                   	push   %ebx
+ 61d:	e8 e1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 622:	0f b6 06             	movzbl (%esi),%eax
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 e4                	jne    610 <printf+0x1a0>
+ 62c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 8e fe ff ff       	jmp    4c4 <printf+0x54>
+ 636:	66 90                	xchg   %ax,%ax
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
+
+00000640 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 640:	f3 0f 1e fb          	endbr32 
+ 644:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 645:	a1 80 0d 00 00       	mov    0xd80,%eax
+{
+ 64a:	89 e5                	mov    %esp,%ebp
+ 64c:	57                   	push   %edi
+ 64d:	56                   	push   %esi
+ 64e:	53                   	push   %ebx
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 654:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 657:	39 c8                	cmp    %ecx,%eax
+ 659:	73 15                	jae    670 <free+0x30>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+ 660:	39 d1                	cmp    %edx,%ecx
+ 662:	72 14                	jb     678 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 664:	39 d0                	cmp    %edx,%eax
+ 666:	73 10                	jae    678 <free+0x38>
+{
+ 668:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	39 c8                	cmp    %ecx,%eax
+ 66e:	72 f0                	jb     660 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 670:	39 d0                	cmp    %edx,%eax
+ 672:	72 f4                	jb     668 <free+0x28>
+ 674:	39 d1                	cmp    %edx,%ecx
+ 676:	73 f0                	jae    668 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 fa                	cmp    %edi,%edx
+ 680:	74 1e                	je     6a0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 682:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 685:	8b 50 04             	mov    0x4(%eax),%edx
+ 688:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 68b:	39 f1                	cmp    %esi,%ecx
+ 68d:	74 28                	je     6b7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 68f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 691:	5b                   	pop    %ebx
+  freep = p;
+ 692:	a3 80 0d 00 00       	mov    %eax,0xd80
+}
+ 697:	5e                   	pop    %esi
+ 698:	5f                   	pop    %edi
+ 699:	5d                   	pop    %ebp
+ 69a:	c3                   	ret    
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6a0:	03 72 04             	add    0x4(%edx),%esi
+ 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6a6:	8b 10                	mov    (%eax),%edx
+ 6a8:	8b 12                	mov    (%edx),%edx
+ 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b3:	39 f1                	cmp    %esi,%ecx
+ 6b5:	75 d8                	jne    68f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6ba:	a3 80 0d 00 00       	mov    %eax,0xd80
+    p->s.size += bp->s.size;
+ 6bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6c5:	89 10                	mov    %edx,(%eax)
+}
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
+ 6d5:	89 e5                	mov    %esp,%ebp
+ 6d7:	57                   	push   %edi
+ 6d8:	56                   	push   %esi
+ 6d9:	53                   	push   %ebx
+ 6da:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6e0:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e9:	c1 ee 03             	shr    $0x3,%esi
+ 6ec:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6ef:	85 ff                	test   %edi,%edi
+ 6f1:	0f 84 a9 00 00 00    	je     7a0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fc:	39 f1                	cmp    %esi,%ecx
+ 6fe:	73 6d                	jae    76d <malloc+0x9d>
+ 700:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 706:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 70b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 70e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 715:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 718:	eb 17                	jmp    731 <malloc+0x61>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 720:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 722:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	73 4f                	jae    778 <malloc+0xa8>
+ 729:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+ 72f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 731:	39 c7                	cmp    %eax,%edi
+ 733:	75 eb                	jne    720 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 735:	83 ec 0c             	sub    $0xc,%esp
+ 738:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 73b:	e8 2b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 740:	83 c4 10             	add    $0x10,%esp
+ 743:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 746:	74 1b                	je     763 <malloc+0x93>
+  hp->s.size = nu;
+ 748:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	83 c0 08             	add    $0x8,%eax
+ 751:	50                   	push   %eax
+ 752:	e8 e9 fe ff ff       	call   640 <free>
+  return freep;
+ 757:	a1 80 0d 00 00       	mov    0xd80,%eax
+      if((p = morecore(nunits)) == 0)
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	85 c0                	test   %eax,%eax
+ 761:	75 bd                	jne    720 <malloc+0x50>
+        return 0;
+  }
+}
+ 763:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 766:	31 c0                	xor    %eax,%eax
+}
+ 768:	5b                   	pop    %ebx
+ 769:	5e                   	pop    %esi
+ 76a:	5f                   	pop    %edi
+ 76b:	5d                   	pop    %ebp
+ 76c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 76d:	89 c2                	mov    %eax,%edx
+ 76f:	89 f8                	mov    %edi,%eax
+ 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 778:	39 ce                	cmp    %ecx,%esi
+ 77a:	74 54                	je     7d0 <malloc+0x100>
+        p->s.size -= nunits;
+ 77c:	29 f1                	sub    %esi,%ecx
+ 77e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 781:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 784:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 787:	a3 80 0d 00 00       	mov    %eax,0xd80
+}
+ 78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 78f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 792:	5b                   	pop    %ebx
+ 793:	5e                   	pop    %esi
+ 794:	5f                   	pop    %edi
+ 795:	5d                   	pop    %ebp
+ 796:	c3                   	ret    
+ 797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 7a0:	c7 05 80 0d 00 00 84 	movl   $0xd84,0xd80
+ 7a7:	0d 00 00 
+    base.s.size = 0;
+ 7aa:	bf 84 0d 00 00       	mov    $0xd84,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7af:	c7 05 84 0d 00 00 84 	movl   $0xd84,0xd84
+ 7b6:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7bb:	c7 05 88 0d 00 00 00 	movl   $0x0,0xd88
+ 7c2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7c5:	e9 36 ff ff ff       	jmp    700 <malloc+0x30>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7d0:	8b 0a                	mov    (%edx),%ecx
+ 7d2:	89 08                	mov    %ecx,(%eax)
+ 7d4:	eb b1                	jmp    787 <malloc+0xb7>
+ 7d6:	66 90                	xchg   %ax,%ax
+ 7d8:	66 90                	xchg   %ax,%ax
+ 7da:	66 90                	xchg   %ax,%ax
+ 7dc:	66 90                	xchg   %ax,%ax
+ 7de:	66 90                	xchg   %ax,%ax
+
+000007e0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7e0:	f3 0f 1e fb          	endbr32 
+ 7e4:	55                   	push   %ebp
+ 7e5:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 7ea:	89 e5                	mov    %esp,%ebp
+ 7ec:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7ef:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+    for (mti=1; mti<N; mti++)
+ 7f5:	eb 0c                	jmp    803 <sgenrand+0x23>
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+ 800:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 803:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 809:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 80b:	3d 5c 17 00 00       	cmp    $0x175c,%eax
+ 810:	75 ee                	jne    800 <sgenrand+0x20>
+ 812:	c7 05 60 0d 00 00 70 	movl   $0x270,0xd60
+ 819:	02 00 00 
+}
+ 81c:	5d                   	pop    %ebp
+ 81d:	c3                   	ret    
+ 81e:	66 90                	xchg   %ax,%ax
+
+00000820 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 820:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 824:	a1 60 0d 00 00       	mov    0xd60,%eax
+ 829:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 82e:	7f 3c                	jg     86c <genrand+0x4c>
+ 830:	8d 50 01             	lea    0x1(%eax),%edx
+ 833:	8b 04 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 83a:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    y ^= TEMPERING_SHIFT_U(y);
+ 840:	89 c2                	mov    %eax,%edx
+ 842:	c1 ea 0b             	shr    $0xb,%edx
+ 845:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 847:	89 d0                	mov    %edx,%eax
+ 849:	c1 e0 07             	shl    $0x7,%eax
+ 84c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 851:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 853:	89 d0                	mov    %edx,%eax
+ 855:	c1 e0 0f             	shl    $0xf,%eax
+ 858:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 85d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 85f:	89 c2                	mov    %eax,%edx
+ 861:	c1 ea 12             	shr    $0x12,%edx
+ 864:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 866:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 86b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 86c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 871:	0f 84 d2 00 00 00    	je     949 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 877:	31 c0                	xor    %eax,%eax
+ 879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 880:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 887:	83 c0 01             	add    $0x1,%eax
+ 88a:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 891:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 897:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 89d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 89f:	89 d1                	mov    %edx,%ecx
+ 8a1:	83 e2 01             	and    $0x1,%edx
+ 8a4:	d1 e9                	shr    %ecx
+ 8a6:	33 0c 85 d0 13 00 00 	xor    0x13d0(,%eax,4),%ecx
+ 8ad:	33 0c 95 34 0a 00 00 	xor    0xa34(,%edx,4),%ecx
+ 8b4:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 8bb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 8c0:	75 be                	jne    880 <genrand+0x60>
+ 8c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8c8:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 8cf:	83 c0 01             	add    $0x1,%eax
+ 8d2:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 8d9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8df:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8e5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8e7:	89 d1                	mov    %edx,%ecx
+ 8e9:	83 e2 01             	and    $0x1,%edx
+ 8ec:	d1 e9                	shr    %ecx
+ 8ee:	33 0c 85 10 0a 00 00 	xor    0xa10(,%eax,4),%ecx
+ 8f5:	33 0c 95 34 0a 00 00 	xor    0xa34(,%edx,4),%ecx
+ 8fc:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 903:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 908:	75 be                	jne    8c8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 90a:	a1 a0 0d 00 00       	mov    0xda0,%eax
+ 90f:	8b 0d 5c 17 00 00    	mov    0x175c,%ecx
+ 915:	89 c2                	mov    %eax,%edx
+ 917:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 91d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 923:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 925:	89 ca                	mov    %ecx,%edx
+ 927:	83 e1 01             	and    $0x1,%ecx
+ 92a:	d1 ea                	shr    %edx
+ 92c:	33 15 d0 13 00 00    	xor    0x13d0,%edx
+ 932:	33 14 8d 34 0a 00 00 	xor    0xa34(,%ecx,4),%edx
+ 939:	89 15 5c 17 00 00    	mov    %edx,0x175c
+ 93f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 944:	e9 f1 fe ff ff       	jmp    83a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 949:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 94e:	b9 5c 17 00 00       	mov    $0x175c,%ecx
+ 953:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 958:	c7 05 a0 0d 00 00 05 	movl   $0x1105,0xda0
+ 95f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 962:	eb 07                	jmp    96b <genrand+0x14b>
+ 964:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 968:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 96b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 971:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 973:	39 c1                	cmp    %eax,%ecx
+ 975:	75 f1                	jne    968 <genrand+0x148>
+ 977:	e9 fb fe ff ff       	jmp    877 <genrand+0x57>
+ 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000980 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 980:	f3 0f 1e fb          	endbr32 
+ 984:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 985:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 987:	89 e5                	mov    %esp,%ebp
+ 989:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 98a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 98d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 98e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 993:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 996:	89 d8                	mov    %ebx,%eax
+ 998:	f7 f1                	div    %ecx
+ 99a:	89 c6                	mov    %eax,%esi
+ 99c:	29 d3                	sub    %edx,%ebx
+ 99e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 9a0:	e8 7b fe ff ff       	call   820 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 9a5:	39 d8                	cmp    %ebx,%eax
+ 9a7:	73 f7                	jae    9a0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 9a9:	31 d2                	xor    %edx,%edx
+}
+ 9ab:	5b                   	pop    %ebx
+  return x/bin_size;
+ 9ac:	f7 f6                	div    %esi
+}
+ 9ae:	5e                   	pop    %esi
+ 9af:	5d                   	pop    %ebp
+ 9b0:	c3                   	ret    
+ 9b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9bf:	90                   	nop
+
+000009c0 <randomrange>:
+
+int randomrange(int low, int high){
+ 9c0:	f3 0f 1e fb          	endbr32 
+ 9c4:	55                   	push   %ebp
+ 9c5:	89 e5                	mov    %esp,%ebp
+ 9c7:	57                   	push   %edi
+ 9c8:	56                   	push   %esi
+ 9c9:	53                   	push   %ebx
+ 9ca:	83 ec 0c             	sub    $0xc,%esp
+ 9cd:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9d3:	39 f0                	cmp    %esi,%eax
+ 9d5:	7d 06                	jge    9dd <randomrange+0x1d>
+ 9d7:	89 f2                	mov    %esi,%edx
+ 9d9:	89 c6                	mov    %eax,%esi
+ 9db:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9dd:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9df:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9e4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9e6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9e9:	89 d8                	mov    %ebx,%eax
+ 9eb:	f7 f1                	div    %ecx
+ 9ed:	89 c7                	mov    %eax,%edi
+ 9ef:	29 d3                	sub    %edx,%ebx
+ 9f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9f8:	e8 23 fe ff ff       	call   820 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9fd:	39 d8                	cmp    %ebx,%eax
+ 9ff:	73 f7                	jae    9f8 <randomrange+0x38>
+  return x/bin_size;
+ a01:	31 d2                	xor    %edx,%edx
+  return val;
+ a03:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a06:	f7 f7                	div    %edi
+ a08:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a09:	01 f0                	add    %esi,%eax
+ a0b:	5e                   	pop    %esi
+ a0c:	5f                   	pop    %edi
+ a0d:	5d                   	pop    %ebp
+ a0e:	c3                   	ret    
diff -ruN xv6-public/echo.d xv6-public-partB_sjf/echo.d
--- xv6-public/echo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/echo.d	2022-10-07 20:27:43.675113000 +0530
@@ -0,0 +1,2 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/echo.o and xv6-public-partB_sjf/echo.o differ
diff -ruN xv6-public/echo.sym xv6-public-partB_sjf/echo.sym
--- xv6-public/echo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/echo.sym	2022-10-07 20:27:43.703113000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+00000a10 .rodata
+00000a3c .eh_frame
+00000d60 .data
+00000d80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+000003c0 printint
+00000a20 digits.1105
+00000000 umalloc.c
+00000d80 freep
+00000d84 base
+00000000 random.c
+00000da0 mt
+00000d60 mti
+00000a34 mag01.989
+00000080 strcpy
+000007e0 sgenrand
+00000470 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006d0 malloc
+00000373 sleep
+000003a3 get_burst_time
+00000980 random_at_most
+000003ab getCurrentInfo
+000002f3 pipe
+00000303 write
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000d64 __bss_start
+00000140 memset
+00000000 main
+0000039b set_burst_time
+000000b0 strcmp
+0000035b dup
+00000820 genrand
+00000383 getNumProc
+00000393 getProcInfo
+00000220 stat
+00000d64 _edata
+00001760 _end
+00000343 link
+000002e3 exit
+0000038b getMaxPID
+00000270 atoi
+00000100 strlen
+00000323 open
+00000160 strchr
+000003b3 getCurrentPID
+000009c0 randomrange
+0000034b mkdir
+0000030b close
+00000640 free
Binary files xv6-public/entry.o and xv6-public-partB_sjf/entry.o differ
Binary files xv6-public/entryother and xv6-public-partB_sjf/entryother differ
diff -ruN xv6-public/entryother.asm xv6-public-partB_sjf/entryother.asm
--- xv6-public/entryother.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/entryother.asm	2022-10-07 20:27:37.227056000 +0530
@@ -0,0 +1,125 @@
+
+bootblockother.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007000 <start>:
+# This code combines elements of bootasm.S and entry.S.
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+//PAGEBREAK!
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use entrypgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -ruN xv6-public/entryother.d xv6-public-partB_sjf/entryother.d
--- xv6-public/entryother.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/entryother.d	2022-10-07 20:27:37.211056000 +0530
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files xv6-public/entryother.o and xv6-public-partB_sjf/entryother.o differ
diff -ruN xv6-public/exec.d xv6-public-partB_sjf/exec.d
--- xv6-public/exec.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/exec.d	2022-10-07 20:27:34.951036000 +0530
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Binary files xv6-public/exec.o and xv6-public-partB_sjf/exec.o differ
diff -ruN xv6-public/file.d xv6-public-partB_sjf/file.d
--- xv6-public/file.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/file.d	2022-10-07 20:27:35.031037000 +0530
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ spinlock.h sleeplock.h file.h
Binary files xv6-public/file.o and xv6-public-partB_sjf/file.o differ
Binary files xv6-public/_forktest and xv6-public-partB_sjf/_forktest differ
diff -ruN xv6-public/forktest.asm xv6-public-partB_sjf/forktest.asm
--- xv6-public/forktest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/forktest.asm	2022-10-07 20:27:43.767113000 +0530
@@ -0,0 +1,720 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	55                   	push   %ebp
+   5:	89 e5                	mov    %esp,%ebp
+   7:	83 e4 f0             	and    $0xfffffff0,%esp
+  forktest();
+   a:	e8 41 00 00 00       	call   50 <forktest>
+  exit();
+   f:	e8 9f 03 00 00       	call   3b3 <exit>
+  14:	66 90                	xchg   %ax,%ax
+  16:	66 90                	xchg   %ax,%ax
+  18:	66 90                	xchg   %ax,%ax
+  1a:	66 90                	xchg   %ax,%ax
+  1c:	66 90                	xchg   %ax,%ax
+  1e:	66 90                	xchg   %ax,%ax
+
+00000020 <printf>:
+{
+  20:	f3 0f 1e fb          	endbr32 
+  24:	55                   	push   %ebp
+  25:	89 e5                	mov    %esp,%ebp
+  27:	53                   	push   %ebx
+  28:	83 ec 10             	sub    $0x10,%esp
+  2b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  2e:	53                   	push   %ebx
+  2f:	e8 9c 01 00 00       	call   1d0 <strlen>
+  34:	83 c4 0c             	add    $0xc,%esp
+  37:	50                   	push   %eax
+  38:	53                   	push   %ebx
+  39:	ff 75 08             	pushl  0x8(%ebp)
+  3c:	e8 92 03 00 00       	call   3d3 <write>
+}
+  41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  44:	83 c4 10             	add    $0x10,%esp
+  47:	c9                   	leave  
+  48:	c3                   	ret    
+  49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000050 <forktest>:
+{
+  50:	f3 0f 1e fb          	endbr32 
+  54:	55                   	push   %ebp
+  55:	89 e5                	mov    %esp,%ebp
+  57:	53                   	push   %ebx
+  for(n=0; n<N; n++){
+  58:	31 db                	xor    %ebx,%ebx
+{
+  5a:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  5d:	68 8c 04 00 00       	push   $0x48c
+  62:	e8 69 01 00 00       	call   1d0 <strlen>
+  67:	83 c4 0c             	add    $0xc,%esp
+  6a:	50                   	push   %eax
+  6b:	68 8c 04 00 00       	push   $0x48c
+  70:	6a 01                	push   $0x1
+  72:	e8 5c 03 00 00       	call   3d3 <write>
+  77:	83 c4 10             	add    $0x10,%esp
+  7a:	eb 15                	jmp    91 <forktest+0x41>
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid == 0)
+  80:	74 58                	je     da <forktest+0x8a>
+  for(n=0; n<N; n++){
+  82:	83 c3 01             	add    $0x1,%ebx
+  85:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  8b:	0f 84 92 00 00 00    	je     123 <forktest+0xd3>
+    pid = fork();
+  91:	e8 15 03 00 00       	call   3ab <fork>
+    if(pid < 0)
+  96:	85 c0                	test   %eax,%eax
+  98:	79 e6                	jns    80 <forktest+0x30>
+  for(; n > 0; n--){
+  9a:	85 db                	test   %ebx,%ebx
+  9c:	74 10                	je     ae <forktest+0x5e>
+  9e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  a0:	e8 16 03 00 00       	call   3bb <wait>
+  a5:	85 c0                	test   %eax,%eax
+  a7:	78 36                	js     df <forktest+0x8f>
+  for(; n > 0; n--){
+  a9:	83 eb 01             	sub    $0x1,%ebx
+  ac:	75 f2                	jne    a0 <forktest+0x50>
+  if(wait() != -1){
+  ae:	e8 08 03 00 00       	call   3bb <wait>
+  b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  b6:	75 49                	jne    101 <forktest+0xb1>
+  write(fd, s, strlen(s));
+  b8:	83 ec 0c             	sub    $0xc,%esp
+  bb:	68 be 04 00 00       	push   $0x4be
+  c0:	e8 0b 01 00 00       	call   1d0 <strlen>
+  c5:	83 c4 0c             	add    $0xc,%esp
+  c8:	50                   	push   %eax
+  c9:	68 be 04 00 00       	push   $0x4be
+  ce:	6a 01                	push   $0x1
+  d0:	e8 fe 02 00 00       	call   3d3 <write>
+}
+  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d8:	c9                   	leave  
+  d9:	c3                   	ret    
+      exit();
+  da:	e8 d4 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+  df:	83 ec 0c             	sub    $0xc,%esp
+  e2:	68 97 04 00 00       	push   $0x497
+  e7:	e8 e4 00 00 00       	call   1d0 <strlen>
+  ec:	83 c4 0c             	add    $0xc,%esp
+  ef:	50                   	push   %eax
+  f0:	68 97 04 00 00       	push   $0x497
+  f5:	6a 01                	push   $0x1
+  f7:	e8 d7 02 00 00       	call   3d3 <write>
+      exit();
+  fc:	e8 b2 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+ 101:	83 ec 0c             	sub    $0xc,%esp
+ 104:	68 ab 04 00 00       	push   $0x4ab
+ 109:	e8 c2 00 00 00       	call   1d0 <strlen>
+ 10e:	83 c4 0c             	add    $0xc,%esp
+ 111:	50                   	push   %eax
+ 112:	68 ab 04 00 00       	push   $0x4ab
+ 117:	6a 01                	push   $0x1
+ 119:	e8 b5 02 00 00       	call   3d3 <write>
+    exit();
+ 11e:	e8 90 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+ 123:	83 ec 0c             	sub    $0xc,%esp
+ 126:	68 cc 04 00 00       	push   $0x4cc
+ 12b:	e8 a0 00 00 00       	call   1d0 <strlen>
+ 130:	83 c4 0c             	add    $0xc,%esp
+ 133:	50                   	push   %eax
+ 134:	68 cc 04 00 00       	push   $0x4cc
+ 139:	6a 01                	push   $0x1
+ 13b:	e8 93 02 00 00       	call   3d3 <write>
+    exit();
+ 140:	e8 6e 02 00 00       	call   3b3 <exit>
+ 145:	66 90                	xchg   %ax,%ax
+ 147:	66 90                	xchg   %ax,%ax
+ 149:	66 90                	xchg   %ax,%ax
+ 14b:	66 90                	xchg   %ax,%ax
+ 14d:	66 90                	xchg   %ax,%ax
+ 14f:	90                   	nop
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 155:	31 c0                	xor    %eax,%eax
+{
+ 157:	89 e5                	mov    %esp,%ebp
+ 159:	53                   	push   %ebx
+ 15a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 15d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 160:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 164:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 167:	83 c0 01             	add    $0x1,%eax
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 16e:	89 c8                	mov    %ecx,%eax
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	53                   	push   %ebx
+ 188:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 18b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 18e:	0f b6 01             	movzbl (%ecx),%eax
+ 191:	0f b6 1a             	movzbl (%edx),%ebx
+ 194:	84 c0                	test   %al,%al
+ 196:	75 19                	jne    1b1 <strcmp+0x31>
+ 198:	eb 26                	jmp    1c0 <strcmp+0x40>
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1a4:	83 c1 01             	add    $0x1,%ecx
+ 1a7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1aa:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ad:	84 c0                	test   %al,%al
+ 1af:	74 0f                	je     1c0 <strcmp+0x40>
+ 1b1:	38 d8                	cmp    %bl,%al
+ 1b3:	74 eb                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b5:	29 d8                	sub    %ebx,%eax
+}
+ 1b7:	5b                   	pop    %ebx
+ 1b8:	5d                   	pop    %ebp
+ 1b9:	c3                   	ret    
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ce:	66 90                	xchg   %ax,%ax
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1da:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1dd:	74 21                	je     200 <strlen+0x30>
+ 1df:	31 c0                	xor    %eax,%eax
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	83 c0 01             	add    $0x1,%eax
+ 1eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1ef:	89 c1                	mov    %eax,%ecx
+ 1f1:	75 f5                	jne    1e8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fe:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 200:	31 c9                	xor    %ecx,%ecx
+}
+ 202:	5d                   	pop    %ebp
+ 203:	89 c8                	mov    %ecx,%eax
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 21b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 221:	89 d7                	mov    %edx,%edi
+ 223:	fc                   	cld    
+ 224:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 226:	89 d0                	mov    %edx,%eax
+ 228:	5f                   	pop    %edi
+ 229:	5d                   	pop    %ebp
+ 22a:	c3                   	ret    
+ 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	8b 45 08             	mov    0x8(%ebp),%eax
+ 23a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 23e:	0f b6 10             	movzbl (%eax),%edx
+ 241:	84 d2                	test   %dl,%dl
+ 243:	75 16                	jne    25b <strchr+0x2b>
+ 245:	eb 21                	jmp    268 <strchr+0x38>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+ 250:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 254:	83 c0 01             	add    $0x1,%eax
+ 257:	84 d2                	test   %dl,%dl
+ 259:	74 0d                	je     268 <strchr+0x38>
+    if(*s == c)
+ 25b:	38 d1                	cmp    %dl,%cl
+ 25d:	75 f1                	jne    250 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 268:	31 c0                	xor    %eax,%eax
+}
+ 26a:	5d                   	pop    %ebp
+ 26b:	c3                   	ret    
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	57                   	push   %edi
+ 278:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 279:	31 f6                	xor    %esi,%esi
+{
+ 27b:	53                   	push   %ebx
+ 27c:	89 f3                	mov    %esi,%ebx
+ 27e:	83 ec 1c             	sub    $0x1c,%esp
+ 281:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 284:	eb 33                	jmp    2b9 <gets+0x49>
+ 286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 290:	83 ec 04             	sub    $0x4,%esp
+ 293:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 296:	6a 01                	push   $0x1
+ 298:	50                   	push   %eax
+ 299:	6a 00                	push   $0x0
+ 29b:	e8 2b 01 00 00       	call   3cb <read>
+    if(cc < 1)
+ 2a0:	83 c4 10             	add    $0x10,%esp
+ 2a3:	85 c0                	test   %eax,%eax
+ 2a5:	7e 1c                	jle    2c3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2ab:	83 c7 01             	add    $0x1,%edi
+ 2ae:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2b1:	3c 0a                	cmp    $0xa,%al
+ 2b3:	74 23                	je     2d8 <gets+0x68>
+ 2b5:	3c 0d                	cmp    $0xd,%al
+ 2b7:	74 1f                	je     2d8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2b9:	83 c3 01             	add    $0x1,%ebx
+ 2bc:	89 fe                	mov    %edi,%esi
+ 2be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2c1:	7c cd                	jl     290 <gets+0x20>
+ 2c3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2c5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2c8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ce:	5b                   	pop    %ebx
+ 2cf:	5e                   	pop    %esi
+ 2d0:	5f                   	pop    %edi
+ 2d1:	5d                   	pop    %ebp
+ 2d2:	c3                   	ret    
+ 2d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d7:	90                   	nop
+ 2d8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2de:	01 de                	add    %ebx,%esi
+ 2e0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2e2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e8:	5b                   	pop    %ebx
+ 2e9:	5e                   	pop    %esi
+ 2ea:	5f                   	pop    %edi
+ 2eb:	5d                   	pop    %ebp
+ 2ec:	c3                   	ret    
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2f0:	f3 0f 1e fb          	endbr32 
+ 2f4:	55                   	push   %ebp
+ 2f5:	89 e5                	mov    %esp,%ebp
+ 2f7:	56                   	push   %esi
+ 2f8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	6a 00                	push   $0x0
+ 2fe:	ff 75 08             	pushl  0x8(%ebp)
+ 301:	e8 ed 00 00 00       	call   3f3 <open>
+  if(fd < 0)
+ 306:	83 c4 10             	add    $0x10,%esp
+ 309:	85 c0                	test   %eax,%eax
+ 30b:	78 2b                	js     338 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 30d:	83 ec 08             	sub    $0x8,%esp
+ 310:	ff 75 0c             	pushl  0xc(%ebp)
+ 313:	89 c3                	mov    %eax,%ebx
+ 315:	50                   	push   %eax
+ 316:	e8 f0 00 00 00       	call   40b <fstat>
+  close(fd);
+ 31b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 31e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 320:	e8 b6 00 00 00       	call   3db <close>
+  return r;
+ 325:	83 c4 10             	add    $0x10,%esp
+}
+ 328:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 32b:	89 f0                	mov    %esi,%eax
+ 32d:	5b                   	pop    %ebx
+ 32e:	5e                   	pop    %esi
+ 32f:	5d                   	pop    %ebp
+ 330:	c3                   	ret    
+ 331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 338:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 33d:	eb e9                	jmp    328 <stat+0x38>
+ 33f:	90                   	nop
+
+00000340 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	53                   	push   %ebx
+ 348:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 34b:	0f be 02             	movsbl (%edx),%eax
+ 34e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 351:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 354:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 359:	77 1a                	ja     375 <atoi+0x35>
+ 35b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 35f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 360:	83 c2 01             	add    $0x1,%edx
+ 363:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 366:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 36a:	0f be 02             	movsbl (%edx),%eax
+ 36d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 370:	80 fb 09             	cmp    $0x9,%bl
+ 373:	76 eb                	jbe    360 <atoi+0x20>
+  return n;
+}
+ 375:	89 c8                	mov    %ecx,%eax
+ 377:	5b                   	pop    %ebx
+ 378:	5d                   	pop    %ebp
+ 379:	c3                   	ret    
+ 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000380 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	57                   	push   %edi
+ 388:	8b 45 10             	mov    0x10(%ebp),%eax
+ 38b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 38e:	56                   	push   %esi
+ 38f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 392:	85 c0                	test   %eax,%eax
+ 394:	7e 0f                	jle    3a5 <memmove+0x25>
+ 396:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 398:	89 d7                	mov    %edx,%edi
+ 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3a1:	39 f8                	cmp    %edi,%eax
+ 3a3:	75 fb                	jne    3a0 <memmove+0x20>
+  return vdst;
+}
+ 3a5:	5e                   	pop    %esi
+ 3a6:	89 d0                	mov    %edx,%eax
+ 3a8:	5f                   	pop    %edi
+ 3a9:	5d                   	pop    %ebp
+ 3aa:	c3                   	ret    
+
+000003ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <exit>:
+SYSCALL(exit)
+ 3b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <wait>:
+SYSCALL(wait)
+ 3bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <pipe>:
+SYSCALL(pipe)
+ 3c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <read>:
+SYSCALL(read)
+ 3cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <write>:
+SYSCALL(write)
+ 3d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <close>:
+SYSCALL(close)
+ 3db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <kill>:
+SYSCALL(kill)
+ 3e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <exec>:
+SYSCALL(exec)
+ 3eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <open>:
+SYSCALL(open)
+ 3f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <mknod>:
+SYSCALL(mknod)
+ 3fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <unlink>:
+SYSCALL(unlink)
+ 403:	b8 12 00 00 00       	mov    $0x12,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <fstat>:
+SYSCALL(fstat)
+ 40b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <link>:
+SYSCALL(link)
+ 413:	b8 13 00 00 00       	mov    $0x13,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <mkdir>:
+SYSCALL(mkdir)
+ 41b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <chdir>:
+SYSCALL(chdir)
+ 423:	b8 09 00 00 00       	mov    $0x9,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <dup>:
+SYSCALL(dup)
+ 42b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getpid>:
+SYSCALL(getpid)
+ 433:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <sbrk>:
+SYSCALL(sbrk)
+ 43b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <sleep>:
+SYSCALL(sleep)
+ 443:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <uptime>:
+SYSCALL(uptime)
+ 44b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getNumProc>:
+SYSCALL(getNumProc)
+ 453:	b8 16 00 00 00       	mov    $0x16,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 45b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 463:	b8 18 00 00 00       	mov    $0x18,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 46b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 473:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 47b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <getCurrentPID>:
+ 483:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
diff -ruN xv6-public/forktest.d xv6-public-partB_sjf/forktest.d
--- xv6-public/forktest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/forktest.d	2022-10-07 20:27:43.747113000 +0530
@@ -0,0 +1,2 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/forktest.o and xv6-public-partB_sjf/forktest.o differ
diff -ruN xv6-public/fs.d xv6-public-partB_sjf/fs.d
--- xv6-public/fs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/fs.d	2022-10-07 20:27:35.239039000 +0530
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files xv6-public/fs.img and xv6-public-partB_sjf/fs.img differ
Binary files xv6-public/fs.o and xv6-public-partB_sjf/fs.o differ
Binary files xv6-public/_getMaxPIDTest and xv6-public-partB_sjf/_getMaxPIDTest differ
diff -ruN xv6-public/getMaxPIDTest.asm xv6-public-partB_sjf/getMaxPIDTest.asm
--- xv6-public/getMaxPIDTest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getMaxPIDTest.asm	2022-10-07 20:27:45.259126000 +0530
@@ -0,0 +1,1477 @@
+
+_getMaxPIDTest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 04             	sub    $0x4,%esp
+	printf(1, "Among all active processes in the system maximum PID is %d\n", getMaxPID());
+  15:	e8 21 03 00 00       	call   33b <getMaxPID>
+  1a:	83 ec 04             	sub    $0x4,%esp
+  1d:	50                   	push   %eax
+  1e:	68 c0 09 00 00       	push   $0x9c0
+  23:	6a 01                	push   $0x1
+  25:	e8 f6 03 00 00       	call   420 <printf>
+	exit();
+  2a:	e8 64 02 00 00       	call   293 <exit>
+  2f:	90                   	nop
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	f3 0f 1e fb          	endbr32 
+  34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  35:	31 c0                	xor    %eax,%eax
+{
+  37:	89 e5                	mov    %esp,%ebp
+  39:	53                   	push   %ebx
+  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	89 c8                	mov    %ecx,%eax
+  50:	5b                   	pop    %ebx
+  51:	5d                   	pop    %ebp
+  52:	c3                   	ret    
+  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	53                   	push   %ebx
+  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  6e:	0f b6 01             	movzbl (%ecx),%eax
+  71:	0f b6 1a             	movzbl (%edx),%ebx
+  74:	84 c0                	test   %al,%al
+  76:	75 19                	jne    91 <strcmp+0x31>
+  78:	eb 26                	jmp    a0 <strcmp+0x40>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  84:	83 c1 01             	add    $0x1,%ecx
+  87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  8a:	0f b6 1a             	movzbl (%edx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	38 d8                	cmp    %bl,%al
+  93:	74 eb                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  95:	29 d8                	sub    %ebx,%eax
+}
+  97:	5b                   	pop    %ebx
+  98:	5d                   	pop    %ebp
+  99:	c3                   	ret    
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ae:	66 90                	xchg   %ax,%ax
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ba:	80 3a 00             	cmpb   $0x0,(%edx)
+  bd:	74 21                	je     e0 <strlen+0x30>
+  bf:	31 c0                	xor    %eax,%eax
+  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c8:	83 c0 01             	add    $0x1,%eax
+  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  cf:	89 c1                	mov    %eax,%ecx
+  d1:	75 f5                	jne    c8 <strlen+0x18>
+    ;
+  return n;
+}
+  d3:	89 c8                	mov    %ecx,%eax
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	57                   	push   %edi
+  f8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 101:	89 d7                	mov    %edx,%edi
+ 103:	fc                   	cld    
+ 104:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 106:	89 d0                	mov    %edx,%eax
+ 108:	5f                   	pop    %edi
+ 109:	5d                   	pop    %ebp
+ 10a:	c3                   	ret    
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11e:	0f b6 10             	movzbl (%eax),%edx
+ 121:	84 d2                	test   %dl,%dl
+ 123:	75 16                	jne    13b <strchr+0x2b>
+ 125:	eb 21                	jmp    148 <strchr+0x38>
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+ 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 134:	83 c0 01             	add    $0x1,%eax
+ 137:	84 d2                	test   %dl,%dl
+ 139:	74 0d                	je     148 <strchr+0x38>
+    if(*s == c)
+ 13b:	38 d1                	cmp    %dl,%cl
+ 13d:	75 f1                	jne    130 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 13f:	5d                   	pop    %ebp
+ 140:	c3                   	ret    
+ 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 148:	31 c0                	xor    %eax,%eax
+}
+ 14a:	5d                   	pop    %ebp
+ 14b:	c3                   	ret    
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	57                   	push   %edi
+ 158:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 159:	31 f6                	xor    %esi,%esi
+{
+ 15b:	53                   	push   %ebx
+ 15c:	89 f3                	mov    %esi,%ebx
+ 15e:	83 ec 1c             	sub    $0x1c,%esp
+ 161:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 164:	eb 33                	jmp    199 <gets+0x49>
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 176:	6a 01                	push   $0x1
+ 178:	50                   	push   %eax
+ 179:	6a 00                	push   $0x0
+ 17b:	e8 2b 01 00 00       	call   2ab <read>
+    if(cc < 1)
+ 180:	83 c4 10             	add    $0x10,%esp
+ 183:	85 c0                	test   %eax,%eax
+ 185:	7e 1c                	jle    1a3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 18b:	83 c7 01             	add    $0x1,%edi
+ 18e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 191:	3c 0a                	cmp    $0xa,%al
+ 193:	74 23                	je     1b8 <gets+0x68>
+ 195:	3c 0d                	cmp    $0xd,%al
+ 197:	74 1f                	je     1b8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 199:	83 c3 01             	add    $0x1,%ebx
+ 19c:	89 fe                	mov    %edi,%esi
+ 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a1:	7c cd                	jl     170 <gets+0x20>
+ 1a3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1a8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ae:	5b                   	pop    %ebx
+ 1af:	5e                   	pop    %esi
+ 1b0:	5f                   	pop    %edi
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b7:	90                   	nop
+ 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1be:	01 de                	add    %ebx,%esi
+ 1c0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1c2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c8:	5b                   	pop    %ebx
+ 1c9:	5e                   	pop    %esi
+ 1ca:	5f                   	pop    %edi
+ 1cb:	5d                   	pop    %ebp
+ 1cc:	c3                   	ret    
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	56                   	push   %esi
+ 1d8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	6a 00                	push   $0x0
+ 1de:	ff 75 08             	pushl  0x8(%ebp)
+ 1e1:	e8 ed 00 00 00       	call   2d3 <open>
+  if(fd < 0)
+ 1e6:	83 c4 10             	add    $0x10,%esp
+ 1e9:	85 c0                	test   %eax,%eax
+ 1eb:	78 2b                	js     218 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 1ed:	83 ec 08             	sub    $0x8,%esp
+ 1f0:	ff 75 0c             	pushl  0xc(%ebp)
+ 1f3:	89 c3                	mov    %eax,%ebx
+ 1f5:	50                   	push   %eax
+ 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
+  close(fd);
+ 1fb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1fe:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 200:	e8 b6 00 00 00       	call   2bb <close>
+  return r;
+ 205:	83 c4 10             	add    $0x10,%esp
+}
+ 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20b:	89 f0                	mov    %esi,%eax
+ 20d:	5b                   	pop    %ebx
+ 20e:	5e                   	pop    %esi
+ 20f:	5d                   	pop    %ebp
+ 210:	c3                   	ret    
+ 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 21d:	eb e9                	jmp    208 <stat+0x38>
+ 21f:	90                   	nop
+
+00000220 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	53                   	push   %ebx
+ 228:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22b:	0f be 02             	movsbl (%edx),%eax
+ 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 231:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 234:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 239:	77 1a                	ja     255 <atoi+0x35>
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 240:	83 c2 01             	add    $0x1,%edx
+ 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 24a:	0f be 02             	movsbl (%edx),%eax
+ 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 250:	80 fb 09             	cmp    $0x9,%bl
+ 253:	76 eb                	jbe    240 <atoi+0x20>
+  return n;
+}
+ 255:	89 c8                	mov    %ecx,%eax
+ 257:	5b                   	pop    %ebx
+ 258:	5d                   	pop    %ebp
+ 259:	c3                   	ret    
+ 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000260 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	8b 45 10             	mov    0x10(%ebp),%eax
+ 26b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26e:	56                   	push   %esi
+ 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 272:	85 c0                	test   %eax,%eax
+ 274:	7e 0f                	jle    285 <memmove+0x25>
+ 276:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 278:	89 d7                	mov    %edx,%edi
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 281:	39 f8                	cmp    %edi,%eax
+ 283:	75 fb                	jne    280 <memmove+0x20>
+  return vdst;
+}
+ 285:	5e                   	pop    %esi
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+
+0000028b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <exit>:
+SYSCALL(exit)
+ 293:	b8 02 00 00 00       	mov    $0x2,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <wait>:
+SYSCALL(wait)
+ 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <pipe>:
+SYSCALL(pipe)
+ 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <read>:
+SYSCALL(read)
+ 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <write>:
+SYSCALL(write)
+ 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <close>:
+SYSCALL(close)
+ 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <kill>:
+SYSCALL(kill)
+ 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exec>:
+SYSCALL(exec)
+ 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <open>:
+SYSCALL(open)
+ 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <mknod>:
+SYSCALL(mknod)
+ 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <unlink>:
+SYSCALL(unlink)
+ 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <fstat>:
+SYSCALL(fstat)
+ 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <link>:
+SYSCALL(link)
+ 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mkdir>:
+SYSCALL(mkdir)
+ 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <chdir>:
+SYSCALL(chdir)
+ 303:	b8 09 00 00 00       	mov    $0x9,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <dup>:
+SYSCALL(dup)
+ 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <getpid>:
+SYSCALL(getpid)
+ 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <sbrk>:
+SYSCALL(sbrk)
+ 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <sleep>:
+SYSCALL(sleep)
+ 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <uptime>:
+SYSCALL(uptime)
+ 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getNumProc>:
+SYSCALL(getNumProc)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 343:	b8 18 00 00 00       	mov    $0x18,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 34b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 353:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 35b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getCurrentPID>:
+ 363:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
+ 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 37c:	89 d1                	mov    %edx,%ecx
+{
+ 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 381:	85 d2                	test   %edx,%edx
+ 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
+ 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 38d:	74 79                	je     408 <printint+0x98>
+    neg = 1;
+ 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 396:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 398:	31 db                	xor    %ebx,%ebx
+ 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 39d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a0:	89 c8                	mov    %ecx,%eax
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	89 cf                	mov    %ecx,%edi
+ 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3a9:	0f b6 92 04 0a 00 00 	movzbl 0xa04(%edx),%edx
+ 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3b3:	89 d8                	mov    %ebx,%eax
+ 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3c1:	76 dd                	jbe    3a0 <printint+0x30>
+  if(neg)
+ 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3c6:	85 c9                	test   %ecx,%ecx
+ 3c8:	74 0c                	je     3d6 <printint+0x66>
+    buf[i++] = '-';
+ 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3dd:	eb 07                	jmp    3e6 <printint+0x76>
+ 3df:	90                   	nop
+ 3e0:	0f b6 13             	movzbl (%ebx),%edx
+ 3e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3e6:	83 ec 04             	sub    $0x4,%esp
+ 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ec:	6a 01                	push   $0x1
+ 3ee:	56                   	push   %esi
+ 3ef:	57                   	push   %edi
+ 3f0:	e8 be fe ff ff       	call   2b3 <write>
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 40f:	eb 87                	jmp    398 <printint+0x28>
+ 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	57                   	push   %edi
+ 428:	56                   	push   %esi
+ 429:	53                   	push   %ebx
+ 42a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 42d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 430:	0f b6 1e             	movzbl (%esi),%ebx
+ 433:	84 db                	test   %bl,%bl
+ 435:	0f 84 b4 00 00 00    	je     4ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 43b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 441:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 444:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 449:	eb 33                	jmp    47e <printf+0x5e>
+ 44b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+ 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 453:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	74 17                	je     474 <printf+0x54>
+  write(fd, &c, 1);
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	ff 75 08             	pushl  0x8(%ebp)
+ 469:	e8 45 fe ff ff       	call   2b3 <write>
+ 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 471:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 474:	0f b6 1e             	movzbl (%esi),%ebx
+ 477:	83 c6 01             	add    $0x1,%esi
+ 47a:	84 db                	test   %bl,%bl
+ 47c:	74 71                	je     4ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 47e:	0f be cb             	movsbl %bl,%ecx
+ 481:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 484:	85 d2                	test   %edx,%edx
+ 486:	74 c8                	je     450 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 488:	83 fa 25             	cmp    $0x25,%edx
+ 48b:	75 e7                	jne    474 <printf+0x54>
+      if(c == 'd'){
+ 48d:	83 f8 64             	cmp    $0x64,%eax
+ 490:	0f 84 9a 00 00 00    	je     530 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 496:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49c:	83 f9 70             	cmp    $0x70,%ecx
+ 49f:	74 5f                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a1:	83 f8 73             	cmp    $0x73,%eax
+ 4a4:	0f 84 d6 00 00 00    	je     580 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4aa:	83 f8 63             	cmp    $0x63,%eax
+ 4ad:	0f 84 8d 00 00 00    	je     540 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b3:	83 f8 25             	cmp    $0x25,%eax
+ 4b6:	0f 84 b4 00 00 00    	je     570 <printf+0x150>
+  write(fd, &c, 1);
+ 4bc:	83 ec 04             	sub    $0x4,%esp
+ 4bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c3:	6a 01                	push   $0x1
+ 4c5:	57                   	push   %edi
+ 4c6:	ff 75 08             	pushl  0x8(%ebp)
+ 4c9:	e8 e5 fd ff ff       	call   2b3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4d1:	83 c4 0c             	add    $0xc,%esp
+ 4d4:	6a 01                	push   $0x1
+ 4d6:	83 c6 01             	add    $0x1,%esi
+ 4d9:	57                   	push   %edi
+ 4da:	ff 75 08             	pushl  0x8(%ebp)
+ 4dd:	e8 d1 fd ff ff       	call   2b3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4eb:	84 db                	test   %bl,%bl
+ 4ed:	75 8f                	jne    47e <printf+0x5e>
+    }
+  }
+}
+ 4ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f2:	5b                   	pop    %ebx
+ 4f3:	5e                   	pop    %esi
+ 4f4:	5f                   	pop    %edi
+ 4f5:	5d                   	pop    %ebp
+ 4f6:	c3                   	ret    
+ 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 510:	8b 13                	mov    (%ebx),%edx
+ 512:	e8 59 fe ff ff       	call   370 <printint>
+        ap++;
+ 517:	89 d8                	mov    %ebx,%eax
+ 519:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 51c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 51e:	83 c0 04             	add    $0x4,%eax
+ 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 538:	6a 01                	push   $0x1
+ 53a:	eb ce                	jmp    50a <printf+0xea>
+ 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 543:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 546:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 548:	6a 01                	push   $0x1
+        ap++;
+ 54a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 54d:	57                   	push   %edi
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 551:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 554:	e8 5a fd ff ff       	call   2b3 <write>
+        ap++;
+ 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 55c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55f:	31 d2                	xor    %edx,%edx
+ 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+ 576:	e9 59 ff ff ff       	jmp    4d4 <printf+0xb4>
+ 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+        s = (char*)*ap;
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 583:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 585:	83 c0 04             	add    $0x4,%eax
+ 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 58b:	85 db                	test   %ebx,%ebx
+ 58d:	74 17                	je     5a6 <printf+0x186>
+        while(*s != 0){
+ 58f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 592:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 594:	84 c0                	test   %al,%al
+ 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
+ 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59f:	89 de                	mov    %ebx,%esi
+ 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
+          s = "(null)";
+ 5a6:	bb fc 09 00 00       	mov    $0x9fc,%ebx
+        while(*s != 0){
+ 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	89 de                	mov    %ebx,%esi
+ 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5c3:	83 c6 01             	add    $0x1,%esi
+ 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	57                   	push   %edi
+ 5cc:	53                   	push   %ebx
+ 5cd:	e8 e1 fc ff ff       	call   2b3 <write>
+        while(*s != 0){
+ 5d2:	0f b6 06             	movzbl (%esi),%eax
+ 5d5:	83 c4 10             	add    $0x10,%esp
+ 5d8:	84 c0                	test   %al,%al
+ 5da:	75 e4                	jne    5c0 <printf+0x1a0>
+ 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
+ 5e6:	66 90                	xchg   %ax,%ax
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	f3 0f 1e fb          	endbr32 
+ 5f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f5:	a1 40 0d 00 00       	mov    0xd40,%eax
+{
+ 5fa:	89 e5                	mov    %esp,%ebp
+ 5fc:	57                   	push   %edi
+ 5fd:	56                   	push   %esi
+ 5fe:	53                   	push   %ebx
+ 5ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 602:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 604:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 607:	39 c8                	cmp    %ecx,%eax
+ 609:	73 15                	jae    620 <free+0x30>
+ 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+ 610:	39 d1                	cmp    %edx,%ecx
+ 612:	72 14                	jb     628 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 d0                	cmp    %edx,%eax
+ 616:	73 10                	jae    628 <free+0x38>
+{
+ 618:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 61a:	8b 10                	mov    (%eax),%edx
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 f4                	jb     618 <free+0x28>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	73 f0                	jae    618 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 fa                	cmp    %edi,%edx
+ 630:	74 1e                	je     650 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 635:	8b 50 04             	mov    0x4(%eax),%edx
+ 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 28                	je     667 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 641:	5b                   	pop    %ebx
+  freep = p;
+ 642:	a3 40 0d 00 00       	mov    %eax,0xd40
+}
+ 647:	5e                   	pop    %esi
+ 648:	5f                   	pop    %edi
+ 649:	5d                   	pop    %ebp
+ 64a:	c3                   	ret    
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 d8                	jne    63f <free+0x4f>
+    p->s.size += bp->s.size;
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 66a:	a3 40 0d 00 00       	mov    %eax,0xd40
+    p->s.size += bp->s.size;
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
+}
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	f3 0f 1e fb          	endbr32 
+ 684:	55                   	push   %ebp
+ 685:	89 e5                	mov    %esp,%ebp
+ 687:	57                   	push   %edi
+ 688:	56                   	push   %esi
+ 689:	53                   	push   %ebx
+ 68a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 68d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 690:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 696:	8d 70 07             	lea    0x7(%eax),%esi
+ 699:	c1 ee 03             	shr    $0x3,%esi
+ 69c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69f:	85 ff                	test   %edi,%edi
+ 6a1:	0f 84 a9 00 00 00    	je     750 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ac:	39 f1                	cmp    %esi,%ecx
+ 6ae:	73 6d                	jae    71d <malloc+0x9d>
+ 6b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6c8:	eb 17                	jmp    6e1 <malloc+0x61>
+ 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	73 4f                	jae    728 <malloc+0xa8>
+ 6d9:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
+ 6df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 c7                	cmp    %eax,%edi
+ 6e3:	75 eb                	jne    6d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6e5:	83 ec 0c             	sub    $0xc,%esp
+ 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6eb:	e8 2b fc ff ff       	call   31b <sbrk>
+  if(p == (char*)-1)
+ 6f0:	83 c4 10             	add    $0x10,%esp
+ 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f6:	74 1b                	je     713 <malloc+0x93>
+  hp->s.size = nu;
+ 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	83 c0 08             	add    $0x8,%eax
+ 701:	50                   	push   %eax
+ 702:	e8 e9 fe ff ff       	call   5f0 <free>
+  return freep;
+ 707:	a1 40 0d 00 00       	mov    0xd40,%eax
+      if((p = morecore(nunits)) == 0)
+ 70c:	83 c4 10             	add    $0x10,%esp
+ 70f:	85 c0                	test   %eax,%eax
+ 711:	75 bd                	jne    6d0 <malloc+0x50>
+        return 0;
+  }
+}
+ 713:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 716:	31 c0                	xor    %eax,%eax
+}
+ 718:	5b                   	pop    %ebx
+ 719:	5e                   	pop    %esi
+ 71a:	5f                   	pop    %edi
+ 71b:	5d                   	pop    %ebp
+ 71c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 71d:	89 c2                	mov    %eax,%edx
+ 71f:	89 f8                	mov    %edi,%eax
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 728:	39 ce                	cmp    %ecx,%esi
+ 72a:	74 54                	je     780 <malloc+0x100>
+        p->s.size -= nunits;
+ 72c:	29 f1                	sub    %esi,%ecx
+ 72e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 731:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 734:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 737:	a3 40 0d 00 00       	mov    %eax,0xd40
+}
+ 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 73f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 742:	5b                   	pop    %ebx
+ 743:	5e                   	pop    %esi
+ 744:	5f                   	pop    %edi
+ 745:	5d                   	pop    %ebp
+ 746:	c3                   	ret    
+ 747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 40 0d 00 00 44 	movl   $0xd44,0xd40
+ 757:	0d 00 00 
+    base.s.size = 0;
+ 75a:	bf 44 0d 00 00       	mov    $0xd44,%edi
+    base.s.ptr = freep = prevp = &base;
+ 75f:	c7 05 44 0d 00 00 44 	movl   $0xd44,0xd44
+ 766:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 769:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 76b:	c7 05 48 0d 00 00 00 	movl   $0x0,0xd48
+ 772:	00 00 00 
+    if(p->s.size >= nunits){
+ 775:	e9 36 ff ff ff       	jmp    6b0 <malloc+0x30>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 0a                	mov    (%edx),%ecx
+ 782:	89 08                	mov    %ecx,(%eax)
+ 784:	eb b1                	jmp    737 <malloc+0xb7>
+ 786:	66 90                	xchg   %ax,%ax
+ 788:	66 90                	xchg   %ax,%ax
+ 78a:	66 90                	xchg   %ax,%ax
+ 78c:	66 90                	xchg   %ax,%ax
+ 78e:	66 90                	xchg   %ax,%ax
+
+00000790 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 790:	f3 0f 1e fb          	endbr32 
+ 794:	55                   	push   %ebp
+ 795:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 79a:	89 e5                	mov    %esp,%ebp
+ 79c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 79f:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    for (mti=1; mti<N; mti++)
+ 7a5:	eb 0c                	jmp    7b3 <sgenrand+0x23>
+ 7a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ae:	66 90                	xchg   %ax,%ax
+ 7b0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7b3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7b9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7bb:	3d 1c 17 00 00       	cmp    $0x171c,%eax
+ 7c0:	75 ee                	jne    7b0 <sgenrand+0x20>
+ 7c2:	c7 05 3c 0d 00 00 70 	movl   $0x270,0xd3c
+ 7c9:	02 00 00 
+}
+ 7cc:	5d                   	pop    %ebp
+ 7cd:	c3                   	ret    
+ 7ce:	66 90                	xchg   %ax,%ax
+
+000007d0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7d0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7d4:	a1 3c 0d 00 00       	mov    0xd3c,%eax
+ 7d9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7de:	7f 3c                	jg     81c <genrand+0x4c>
+ 7e0:	8d 50 01             	lea    0x1(%eax),%edx
+ 7e3:	8b 04 85 60 0d 00 00 	mov    0xd60(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ea:	89 15 3c 0d 00 00    	mov    %edx,0xd3c
+    y ^= TEMPERING_SHIFT_U(y);
+ 7f0:	89 c2                	mov    %eax,%edx
+ 7f2:	c1 ea 0b             	shr    $0xb,%edx
+ 7f5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7f7:	89 d0                	mov    %edx,%eax
+ 7f9:	c1 e0 07             	shl    $0x7,%eax
+ 7fc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 801:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 803:	89 d0                	mov    %edx,%eax
+ 805:	c1 e0 0f             	shl    $0xf,%eax
+ 808:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 80d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 80f:	89 c2                	mov    %eax,%edx
+ 811:	c1 ea 12             	shr    $0x12,%edx
+ 814:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 816:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 81b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 81c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 821:	0f 84 d2 00 00 00    	je     8f9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 827:	31 c0                	xor    %eax,%eax
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 830:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 837:	83 c0 01             	add    $0x1,%eax
+ 83a:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 841:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 847:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 84d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 84f:	89 d1                	mov    %edx,%ecx
+ 851:	83 e2 01             	and    $0x1,%edx
+ 854:	d1 e9                	shr    %ecx
+ 856:	33 0c 85 90 13 00 00 	xor    0x1390(,%eax,4),%ecx
+ 85d:	33 0c 95 18 0a 00 00 	xor    0xa18(,%edx,4),%ecx
+ 864:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 86b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 870:	75 be                	jne    830 <genrand+0x60>
+ 872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 878:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 87f:	83 c0 01             	add    $0x1,%eax
+ 882:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 889:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 88f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 895:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 897:	89 d1                	mov    %edx,%ecx
+ 899:	83 e2 01             	and    $0x1,%edx
+ 89c:	d1 e9                	shr    %ecx
+ 89e:	33 0c 85 d0 09 00 00 	xor    0x9d0(,%eax,4),%ecx
+ 8a5:	33 0c 95 18 0a 00 00 	xor    0xa18(,%edx,4),%ecx
+ 8ac:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8b3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8b8:	75 be                	jne    878 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ba:	a1 60 0d 00 00       	mov    0xd60,%eax
+ 8bf:	8b 0d 1c 17 00 00    	mov    0x171c,%ecx
+ 8c5:	89 c2                	mov    %eax,%edx
+ 8c7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8cd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8d3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8d5:	89 ca                	mov    %ecx,%edx
+ 8d7:	83 e1 01             	and    $0x1,%ecx
+ 8da:	d1 ea                	shr    %edx
+ 8dc:	33 15 90 13 00 00    	xor    0x1390,%edx
+ 8e2:	33 14 8d 18 0a 00 00 	xor    0xa18(,%ecx,4),%edx
+ 8e9:	89 15 1c 17 00 00    	mov    %edx,0x171c
+ 8ef:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8f4:	e9 f1 fe ff ff       	jmp    7ea <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 8f9:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 8fe:	b9 1c 17 00 00       	mov    $0x171c,%ecx
+ 903:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 908:	c7 05 60 0d 00 00 05 	movl   $0x1105,0xd60
+ 90f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 912:	eb 07                	jmp    91b <genrand+0x14b>
+ 914:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 918:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 91b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 921:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 923:	39 c1                	cmp    %eax,%ecx
+ 925:	75 f1                	jne    918 <genrand+0x148>
+ 927:	e9 fb fe ff ff       	jmp    827 <genrand+0x57>
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000930 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 930:	f3 0f 1e fb          	endbr32 
+ 934:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 935:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 937:	89 e5                	mov    %esp,%ebp
+ 939:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 93a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 93d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 93e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 943:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 946:	89 d8                	mov    %ebx,%eax
+ 948:	f7 f1                	div    %ecx
+ 94a:	89 c6                	mov    %eax,%esi
+ 94c:	29 d3                	sub    %edx,%ebx
+ 94e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 950:	e8 7b fe ff ff       	call   7d0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 955:	39 d8                	cmp    %ebx,%eax
+ 957:	73 f7                	jae    950 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 959:	31 d2                	xor    %edx,%edx
+}
+ 95b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 95c:	f7 f6                	div    %esi
+}
+ 95e:	5e                   	pop    %esi
+ 95f:	5d                   	pop    %ebp
+ 960:	c3                   	ret    
+ 961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 96f:	90                   	nop
+
+00000970 <randomrange>:
+
+int randomrange(int low, int high){
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	57                   	push   %edi
+ 978:	56                   	push   %esi
+ 979:	53                   	push   %ebx
+ 97a:	83 ec 0c             	sub    $0xc,%esp
+ 97d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 980:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 983:	39 f0                	cmp    %esi,%eax
+ 985:	7d 06                	jge    98d <randomrange+0x1d>
+ 987:	89 f2                	mov    %esi,%edx
+ 989:	89 c6                	mov    %eax,%esi
+ 98b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 98d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 98f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 994:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 996:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 999:	89 d8                	mov    %ebx,%eax
+ 99b:	f7 f1                	div    %ecx
+ 99d:	89 c7                	mov    %eax,%edi
+ 99f:	29 d3                	sub    %edx,%ebx
+ 9a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9a8:	e8 23 fe ff ff       	call   7d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9ad:	39 d8                	cmp    %ebx,%eax
+ 9af:	73 f7                	jae    9a8 <randomrange+0x38>
+  return x/bin_size;
+ 9b1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9b3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9b6:	f7 f7                	div    %edi
+ 9b8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9b9:	01 f0                	add    %esi,%eax
+ 9bb:	5e                   	pop    %esi
+ 9bc:	5f                   	pop    %edi
+ 9bd:	5d                   	pop    %ebp
+ 9be:	c3                   	ret    
diff -ruN xv6-public/getMaxPIDTest.c xv6-public-partB_sjf/getMaxPIDTest.c
--- xv6-public/getMaxPIDTest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getMaxPIDTest.c	2022-10-07 18:56:35.995327000 +0530
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void){
+	printf(1, "Among all active processes in the system maximum PID is %d\n", getMaxPID());
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public/getMaxPIDTest.d xv6-public-partB_sjf/getMaxPIDTest.d
--- xv6-public/getMaxPIDTest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getMaxPIDTest.d	2022-10-07 20:27:45.235126000 +0530
@@ -0,0 +1,2 @@
+getMaxPIDTest.o: getMaxPIDTest.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/getMaxPIDTest.o and xv6-public-partB_sjf/getMaxPIDTest.o differ
diff -ruN xv6-public/getMaxPIDTest.sym xv6-public-partB_sjf/getMaxPIDTest.sym
--- xv6-public/getMaxPIDTest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getMaxPIDTest.sym	2022-10-07 20:27:45.263126000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+000009c0 .rodata
+00000a20 .eh_frame
+00000d3c .data
+00000d40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 getMaxPIDTest.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+00000a04 digits.1105
+00000000 umalloc.c
+00000d40 freep
+00000d44 base
+00000000 random.c
+00000d60 mt
+00000d3c mti
+00000a18 mag01.989
+00000030 strcpy
+00000790 sgenrand
+00000420 printf
+00000260 memmove
+000002db mknod
+00000150 gets
+00000313 getpid
+00000680 malloc
+00000323 sleep
+00000353 get_burst_time
+00000930 random_at_most
+0000035b getCurrentInfo
+000002a3 pipe
+000002b3 write
+000002eb fstat
+000002c3 kill
+00000303 chdir
+000002cb exec
+0000029b wait
+000002ab read
+000002e3 unlink
+0000028b fork
+0000031b sbrk
+0000032b uptime
+00000d40 __bss_start
+000000f0 memset
+00000000 main
+0000034b set_burst_time
+00000060 strcmp
+0000030b dup
+000007d0 genrand
+00000333 getNumProc
+00000343 getProcInfo
+000001d0 stat
+00000d40 _edata
+00001720 _end
+000002f3 link
+00000293 exit
+0000033b getMaxPID
+00000220 atoi
+000000b0 strlen
+000002d3 open
+00000110 strchr
+00000363 getCurrentPID
+00000970 randomrange
+000002fb mkdir
+000002bb close
+000005f0 free
Binary files xv6-public/_getNumProcTest and xv6-public-partB_sjf/_getNumProcTest differ
diff -ruN xv6-public/getNumProcTest.asm xv6-public-partB_sjf/getNumProcTest.asm
--- xv6-public/getNumProcTest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getNumProcTest.asm	2022-10-07 20:27:45.203126000 +0530
@@ -0,0 +1,1477 @@
+
+_getNumProcTest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 04             	sub    $0x4,%esp
+	printf(1, "The total number of active processes in the system is %d\n", getNumProc());
+  15:	e8 19 03 00 00       	call   333 <getNumProc>
+  1a:	83 ec 04             	sub    $0x4,%esp
+  1d:	50                   	push   %eax
+  1e:	68 c0 09 00 00       	push   $0x9c0
+  23:	6a 01                	push   $0x1
+  25:	e8 f6 03 00 00       	call   420 <printf>
+	exit();
+  2a:	e8 64 02 00 00       	call   293 <exit>
+  2f:	90                   	nop
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	f3 0f 1e fb          	endbr32 
+  34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  35:	31 c0                	xor    %eax,%eax
+{
+  37:	89 e5                	mov    %esp,%ebp
+  39:	53                   	push   %ebx
+  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	89 c8                	mov    %ecx,%eax
+  50:	5b                   	pop    %ebx
+  51:	5d                   	pop    %ebp
+  52:	c3                   	ret    
+  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	53                   	push   %ebx
+  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  6e:	0f b6 01             	movzbl (%ecx),%eax
+  71:	0f b6 1a             	movzbl (%edx),%ebx
+  74:	84 c0                	test   %al,%al
+  76:	75 19                	jne    91 <strcmp+0x31>
+  78:	eb 26                	jmp    a0 <strcmp+0x40>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  84:	83 c1 01             	add    $0x1,%ecx
+  87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  8a:	0f b6 1a             	movzbl (%edx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	38 d8                	cmp    %bl,%al
+  93:	74 eb                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  95:	29 d8                	sub    %ebx,%eax
+}
+  97:	5b                   	pop    %ebx
+  98:	5d                   	pop    %ebp
+  99:	c3                   	ret    
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ae:	66 90                	xchg   %ax,%ax
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ba:	80 3a 00             	cmpb   $0x0,(%edx)
+  bd:	74 21                	je     e0 <strlen+0x30>
+  bf:	31 c0                	xor    %eax,%eax
+  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c8:	83 c0 01             	add    $0x1,%eax
+  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  cf:	89 c1                	mov    %eax,%ecx
+  d1:	75 f5                	jne    c8 <strlen+0x18>
+    ;
+  return n;
+}
+  d3:	89 c8                	mov    %ecx,%eax
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	57                   	push   %edi
+  f8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 101:	89 d7                	mov    %edx,%edi
+ 103:	fc                   	cld    
+ 104:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 106:	89 d0                	mov    %edx,%eax
+ 108:	5f                   	pop    %edi
+ 109:	5d                   	pop    %ebp
+ 10a:	c3                   	ret    
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11e:	0f b6 10             	movzbl (%eax),%edx
+ 121:	84 d2                	test   %dl,%dl
+ 123:	75 16                	jne    13b <strchr+0x2b>
+ 125:	eb 21                	jmp    148 <strchr+0x38>
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+ 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 134:	83 c0 01             	add    $0x1,%eax
+ 137:	84 d2                	test   %dl,%dl
+ 139:	74 0d                	je     148 <strchr+0x38>
+    if(*s == c)
+ 13b:	38 d1                	cmp    %dl,%cl
+ 13d:	75 f1                	jne    130 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 13f:	5d                   	pop    %ebp
+ 140:	c3                   	ret    
+ 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 148:	31 c0                	xor    %eax,%eax
+}
+ 14a:	5d                   	pop    %ebp
+ 14b:	c3                   	ret    
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	57                   	push   %edi
+ 158:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 159:	31 f6                	xor    %esi,%esi
+{
+ 15b:	53                   	push   %ebx
+ 15c:	89 f3                	mov    %esi,%ebx
+ 15e:	83 ec 1c             	sub    $0x1c,%esp
+ 161:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 164:	eb 33                	jmp    199 <gets+0x49>
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 176:	6a 01                	push   $0x1
+ 178:	50                   	push   %eax
+ 179:	6a 00                	push   $0x0
+ 17b:	e8 2b 01 00 00       	call   2ab <read>
+    if(cc < 1)
+ 180:	83 c4 10             	add    $0x10,%esp
+ 183:	85 c0                	test   %eax,%eax
+ 185:	7e 1c                	jle    1a3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 18b:	83 c7 01             	add    $0x1,%edi
+ 18e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 191:	3c 0a                	cmp    $0xa,%al
+ 193:	74 23                	je     1b8 <gets+0x68>
+ 195:	3c 0d                	cmp    $0xd,%al
+ 197:	74 1f                	je     1b8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 199:	83 c3 01             	add    $0x1,%ebx
+ 19c:	89 fe                	mov    %edi,%esi
+ 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a1:	7c cd                	jl     170 <gets+0x20>
+ 1a3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1a8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ae:	5b                   	pop    %ebx
+ 1af:	5e                   	pop    %esi
+ 1b0:	5f                   	pop    %edi
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b7:	90                   	nop
+ 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1be:	01 de                	add    %ebx,%esi
+ 1c0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1c2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c8:	5b                   	pop    %ebx
+ 1c9:	5e                   	pop    %esi
+ 1ca:	5f                   	pop    %edi
+ 1cb:	5d                   	pop    %ebp
+ 1cc:	c3                   	ret    
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	56                   	push   %esi
+ 1d8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	6a 00                	push   $0x0
+ 1de:	ff 75 08             	pushl  0x8(%ebp)
+ 1e1:	e8 ed 00 00 00       	call   2d3 <open>
+  if(fd < 0)
+ 1e6:	83 c4 10             	add    $0x10,%esp
+ 1e9:	85 c0                	test   %eax,%eax
+ 1eb:	78 2b                	js     218 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 1ed:	83 ec 08             	sub    $0x8,%esp
+ 1f0:	ff 75 0c             	pushl  0xc(%ebp)
+ 1f3:	89 c3                	mov    %eax,%ebx
+ 1f5:	50                   	push   %eax
+ 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
+  close(fd);
+ 1fb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1fe:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 200:	e8 b6 00 00 00       	call   2bb <close>
+  return r;
+ 205:	83 c4 10             	add    $0x10,%esp
+}
+ 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20b:	89 f0                	mov    %esi,%eax
+ 20d:	5b                   	pop    %ebx
+ 20e:	5e                   	pop    %esi
+ 20f:	5d                   	pop    %ebp
+ 210:	c3                   	ret    
+ 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 21d:	eb e9                	jmp    208 <stat+0x38>
+ 21f:	90                   	nop
+
+00000220 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	53                   	push   %ebx
+ 228:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22b:	0f be 02             	movsbl (%edx),%eax
+ 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 231:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 234:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 239:	77 1a                	ja     255 <atoi+0x35>
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 240:	83 c2 01             	add    $0x1,%edx
+ 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 24a:	0f be 02             	movsbl (%edx),%eax
+ 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 250:	80 fb 09             	cmp    $0x9,%bl
+ 253:	76 eb                	jbe    240 <atoi+0x20>
+  return n;
+}
+ 255:	89 c8                	mov    %ecx,%eax
+ 257:	5b                   	pop    %ebx
+ 258:	5d                   	pop    %ebp
+ 259:	c3                   	ret    
+ 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000260 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	8b 45 10             	mov    0x10(%ebp),%eax
+ 26b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26e:	56                   	push   %esi
+ 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 272:	85 c0                	test   %eax,%eax
+ 274:	7e 0f                	jle    285 <memmove+0x25>
+ 276:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 278:	89 d7                	mov    %edx,%edi
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 281:	39 f8                	cmp    %edi,%eax
+ 283:	75 fb                	jne    280 <memmove+0x20>
+  return vdst;
+}
+ 285:	5e                   	pop    %esi
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+
+0000028b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <exit>:
+SYSCALL(exit)
+ 293:	b8 02 00 00 00       	mov    $0x2,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <wait>:
+SYSCALL(wait)
+ 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <pipe>:
+SYSCALL(pipe)
+ 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <read>:
+SYSCALL(read)
+ 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <write>:
+SYSCALL(write)
+ 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <close>:
+SYSCALL(close)
+ 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <kill>:
+SYSCALL(kill)
+ 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exec>:
+SYSCALL(exec)
+ 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <open>:
+SYSCALL(open)
+ 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <mknod>:
+SYSCALL(mknod)
+ 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <unlink>:
+SYSCALL(unlink)
+ 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <fstat>:
+SYSCALL(fstat)
+ 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <link>:
+SYSCALL(link)
+ 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mkdir>:
+SYSCALL(mkdir)
+ 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <chdir>:
+SYSCALL(chdir)
+ 303:	b8 09 00 00 00       	mov    $0x9,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <dup>:
+SYSCALL(dup)
+ 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <getpid>:
+SYSCALL(getpid)
+ 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <sbrk>:
+SYSCALL(sbrk)
+ 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <sleep>:
+SYSCALL(sleep)
+ 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <uptime>:
+SYSCALL(uptime)
+ 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getNumProc>:
+SYSCALL(getNumProc)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 343:	b8 18 00 00 00       	mov    $0x18,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 34b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 353:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 35b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getCurrentPID>:
+ 363:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
+ 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 37c:	89 d1                	mov    %edx,%ecx
+{
+ 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 381:	85 d2                	test   %edx,%edx
+ 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
+ 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 38d:	74 79                	je     408 <printint+0x98>
+    neg = 1;
+ 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 396:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 398:	31 db                	xor    %ebx,%ebx
+ 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 39d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a0:	89 c8                	mov    %ecx,%eax
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	89 cf                	mov    %ecx,%edi
+ 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3a9:	0f b6 92 04 0a 00 00 	movzbl 0xa04(%edx),%edx
+ 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3b3:	89 d8                	mov    %ebx,%eax
+ 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3c1:	76 dd                	jbe    3a0 <printint+0x30>
+  if(neg)
+ 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3c6:	85 c9                	test   %ecx,%ecx
+ 3c8:	74 0c                	je     3d6 <printint+0x66>
+    buf[i++] = '-';
+ 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3dd:	eb 07                	jmp    3e6 <printint+0x76>
+ 3df:	90                   	nop
+ 3e0:	0f b6 13             	movzbl (%ebx),%edx
+ 3e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3e6:	83 ec 04             	sub    $0x4,%esp
+ 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ec:	6a 01                	push   $0x1
+ 3ee:	56                   	push   %esi
+ 3ef:	57                   	push   %edi
+ 3f0:	e8 be fe ff ff       	call   2b3 <write>
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 40f:	eb 87                	jmp    398 <printint+0x28>
+ 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	57                   	push   %edi
+ 428:	56                   	push   %esi
+ 429:	53                   	push   %ebx
+ 42a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 42d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 430:	0f b6 1e             	movzbl (%esi),%ebx
+ 433:	84 db                	test   %bl,%bl
+ 435:	0f 84 b4 00 00 00    	je     4ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 43b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 441:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 444:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 449:	eb 33                	jmp    47e <printf+0x5e>
+ 44b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+ 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 453:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	74 17                	je     474 <printf+0x54>
+  write(fd, &c, 1);
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	ff 75 08             	pushl  0x8(%ebp)
+ 469:	e8 45 fe ff ff       	call   2b3 <write>
+ 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 471:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 474:	0f b6 1e             	movzbl (%esi),%ebx
+ 477:	83 c6 01             	add    $0x1,%esi
+ 47a:	84 db                	test   %bl,%bl
+ 47c:	74 71                	je     4ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 47e:	0f be cb             	movsbl %bl,%ecx
+ 481:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 484:	85 d2                	test   %edx,%edx
+ 486:	74 c8                	je     450 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 488:	83 fa 25             	cmp    $0x25,%edx
+ 48b:	75 e7                	jne    474 <printf+0x54>
+      if(c == 'd'){
+ 48d:	83 f8 64             	cmp    $0x64,%eax
+ 490:	0f 84 9a 00 00 00    	je     530 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 496:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49c:	83 f9 70             	cmp    $0x70,%ecx
+ 49f:	74 5f                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a1:	83 f8 73             	cmp    $0x73,%eax
+ 4a4:	0f 84 d6 00 00 00    	je     580 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4aa:	83 f8 63             	cmp    $0x63,%eax
+ 4ad:	0f 84 8d 00 00 00    	je     540 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b3:	83 f8 25             	cmp    $0x25,%eax
+ 4b6:	0f 84 b4 00 00 00    	je     570 <printf+0x150>
+  write(fd, &c, 1);
+ 4bc:	83 ec 04             	sub    $0x4,%esp
+ 4bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c3:	6a 01                	push   $0x1
+ 4c5:	57                   	push   %edi
+ 4c6:	ff 75 08             	pushl  0x8(%ebp)
+ 4c9:	e8 e5 fd ff ff       	call   2b3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4d1:	83 c4 0c             	add    $0xc,%esp
+ 4d4:	6a 01                	push   $0x1
+ 4d6:	83 c6 01             	add    $0x1,%esi
+ 4d9:	57                   	push   %edi
+ 4da:	ff 75 08             	pushl  0x8(%ebp)
+ 4dd:	e8 d1 fd ff ff       	call   2b3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4eb:	84 db                	test   %bl,%bl
+ 4ed:	75 8f                	jne    47e <printf+0x5e>
+    }
+  }
+}
+ 4ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f2:	5b                   	pop    %ebx
+ 4f3:	5e                   	pop    %esi
+ 4f4:	5f                   	pop    %edi
+ 4f5:	5d                   	pop    %ebp
+ 4f6:	c3                   	ret    
+ 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 510:	8b 13                	mov    (%ebx),%edx
+ 512:	e8 59 fe ff ff       	call   370 <printint>
+        ap++;
+ 517:	89 d8                	mov    %ebx,%eax
+ 519:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 51c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 51e:	83 c0 04             	add    $0x4,%eax
+ 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 538:	6a 01                	push   $0x1
+ 53a:	eb ce                	jmp    50a <printf+0xea>
+ 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 543:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 546:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 548:	6a 01                	push   $0x1
+        ap++;
+ 54a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 54d:	57                   	push   %edi
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 551:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 554:	e8 5a fd ff ff       	call   2b3 <write>
+        ap++;
+ 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 55c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55f:	31 d2                	xor    %edx,%edx
+ 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+ 576:	e9 59 ff ff ff       	jmp    4d4 <printf+0xb4>
+ 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+        s = (char*)*ap;
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 583:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 585:	83 c0 04             	add    $0x4,%eax
+ 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 58b:	85 db                	test   %ebx,%ebx
+ 58d:	74 17                	je     5a6 <printf+0x186>
+        while(*s != 0){
+ 58f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 592:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 594:	84 c0                	test   %al,%al
+ 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
+ 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59f:	89 de                	mov    %ebx,%esi
+ 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
+          s = "(null)";
+ 5a6:	bb fa 09 00 00       	mov    $0x9fa,%ebx
+        while(*s != 0){
+ 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	89 de                	mov    %ebx,%esi
+ 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5c3:	83 c6 01             	add    $0x1,%esi
+ 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	57                   	push   %edi
+ 5cc:	53                   	push   %ebx
+ 5cd:	e8 e1 fc ff ff       	call   2b3 <write>
+        while(*s != 0){
+ 5d2:	0f b6 06             	movzbl (%esi),%eax
+ 5d5:	83 c4 10             	add    $0x10,%esp
+ 5d8:	84 c0                	test   %al,%al
+ 5da:	75 e4                	jne    5c0 <printf+0x1a0>
+ 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
+ 5e6:	66 90                	xchg   %ax,%ax
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	f3 0f 1e fb          	endbr32 
+ 5f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f5:	a1 40 0d 00 00       	mov    0xd40,%eax
+{
+ 5fa:	89 e5                	mov    %esp,%ebp
+ 5fc:	57                   	push   %edi
+ 5fd:	56                   	push   %esi
+ 5fe:	53                   	push   %ebx
+ 5ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 602:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 604:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 607:	39 c8                	cmp    %ecx,%eax
+ 609:	73 15                	jae    620 <free+0x30>
+ 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+ 610:	39 d1                	cmp    %edx,%ecx
+ 612:	72 14                	jb     628 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 d0                	cmp    %edx,%eax
+ 616:	73 10                	jae    628 <free+0x38>
+{
+ 618:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 61a:	8b 10                	mov    (%eax),%edx
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 f4                	jb     618 <free+0x28>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	73 f0                	jae    618 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 fa                	cmp    %edi,%edx
+ 630:	74 1e                	je     650 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 635:	8b 50 04             	mov    0x4(%eax),%edx
+ 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 28                	je     667 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 641:	5b                   	pop    %ebx
+  freep = p;
+ 642:	a3 40 0d 00 00       	mov    %eax,0xd40
+}
+ 647:	5e                   	pop    %esi
+ 648:	5f                   	pop    %edi
+ 649:	5d                   	pop    %ebp
+ 64a:	c3                   	ret    
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 d8                	jne    63f <free+0x4f>
+    p->s.size += bp->s.size;
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 66a:	a3 40 0d 00 00       	mov    %eax,0xd40
+    p->s.size += bp->s.size;
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
+}
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	f3 0f 1e fb          	endbr32 
+ 684:	55                   	push   %ebp
+ 685:	89 e5                	mov    %esp,%ebp
+ 687:	57                   	push   %edi
+ 688:	56                   	push   %esi
+ 689:	53                   	push   %ebx
+ 68a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 68d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 690:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 696:	8d 70 07             	lea    0x7(%eax),%esi
+ 699:	c1 ee 03             	shr    $0x3,%esi
+ 69c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69f:	85 ff                	test   %edi,%edi
+ 6a1:	0f 84 a9 00 00 00    	je     750 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ac:	39 f1                	cmp    %esi,%ecx
+ 6ae:	73 6d                	jae    71d <malloc+0x9d>
+ 6b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6c8:	eb 17                	jmp    6e1 <malloc+0x61>
+ 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	73 4f                	jae    728 <malloc+0xa8>
+ 6d9:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
+ 6df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 c7                	cmp    %eax,%edi
+ 6e3:	75 eb                	jne    6d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6e5:	83 ec 0c             	sub    $0xc,%esp
+ 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6eb:	e8 2b fc ff ff       	call   31b <sbrk>
+  if(p == (char*)-1)
+ 6f0:	83 c4 10             	add    $0x10,%esp
+ 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f6:	74 1b                	je     713 <malloc+0x93>
+  hp->s.size = nu;
+ 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	83 c0 08             	add    $0x8,%eax
+ 701:	50                   	push   %eax
+ 702:	e8 e9 fe ff ff       	call   5f0 <free>
+  return freep;
+ 707:	a1 40 0d 00 00       	mov    0xd40,%eax
+      if((p = morecore(nunits)) == 0)
+ 70c:	83 c4 10             	add    $0x10,%esp
+ 70f:	85 c0                	test   %eax,%eax
+ 711:	75 bd                	jne    6d0 <malloc+0x50>
+        return 0;
+  }
+}
+ 713:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 716:	31 c0                	xor    %eax,%eax
+}
+ 718:	5b                   	pop    %ebx
+ 719:	5e                   	pop    %esi
+ 71a:	5f                   	pop    %edi
+ 71b:	5d                   	pop    %ebp
+ 71c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 71d:	89 c2                	mov    %eax,%edx
+ 71f:	89 f8                	mov    %edi,%eax
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 728:	39 ce                	cmp    %ecx,%esi
+ 72a:	74 54                	je     780 <malloc+0x100>
+        p->s.size -= nunits;
+ 72c:	29 f1                	sub    %esi,%ecx
+ 72e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 731:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 734:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 737:	a3 40 0d 00 00       	mov    %eax,0xd40
+}
+ 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 73f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 742:	5b                   	pop    %ebx
+ 743:	5e                   	pop    %esi
+ 744:	5f                   	pop    %edi
+ 745:	5d                   	pop    %ebp
+ 746:	c3                   	ret    
+ 747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 40 0d 00 00 44 	movl   $0xd44,0xd40
+ 757:	0d 00 00 
+    base.s.size = 0;
+ 75a:	bf 44 0d 00 00       	mov    $0xd44,%edi
+    base.s.ptr = freep = prevp = &base;
+ 75f:	c7 05 44 0d 00 00 44 	movl   $0xd44,0xd44
+ 766:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 769:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 76b:	c7 05 48 0d 00 00 00 	movl   $0x0,0xd48
+ 772:	00 00 00 
+    if(p->s.size >= nunits){
+ 775:	e9 36 ff ff ff       	jmp    6b0 <malloc+0x30>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 0a                	mov    (%edx),%ecx
+ 782:	89 08                	mov    %ecx,(%eax)
+ 784:	eb b1                	jmp    737 <malloc+0xb7>
+ 786:	66 90                	xchg   %ax,%ax
+ 788:	66 90                	xchg   %ax,%ax
+ 78a:	66 90                	xchg   %ax,%ax
+ 78c:	66 90                	xchg   %ax,%ax
+ 78e:	66 90                	xchg   %ax,%ax
+
+00000790 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 790:	f3 0f 1e fb          	endbr32 
+ 794:	55                   	push   %ebp
+ 795:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 79a:	89 e5                	mov    %esp,%ebp
+ 79c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 79f:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    for (mti=1; mti<N; mti++)
+ 7a5:	eb 0c                	jmp    7b3 <sgenrand+0x23>
+ 7a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ae:	66 90                	xchg   %ax,%ax
+ 7b0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7b3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7b9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7bb:	3d 1c 17 00 00       	cmp    $0x171c,%eax
+ 7c0:	75 ee                	jne    7b0 <sgenrand+0x20>
+ 7c2:	c7 05 3c 0d 00 00 70 	movl   $0x270,0xd3c
+ 7c9:	02 00 00 
+}
+ 7cc:	5d                   	pop    %ebp
+ 7cd:	c3                   	ret    
+ 7ce:	66 90                	xchg   %ax,%ax
+
+000007d0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7d0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7d4:	a1 3c 0d 00 00       	mov    0xd3c,%eax
+ 7d9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7de:	7f 3c                	jg     81c <genrand+0x4c>
+ 7e0:	8d 50 01             	lea    0x1(%eax),%edx
+ 7e3:	8b 04 85 60 0d 00 00 	mov    0xd60(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ea:	89 15 3c 0d 00 00    	mov    %edx,0xd3c
+    y ^= TEMPERING_SHIFT_U(y);
+ 7f0:	89 c2                	mov    %eax,%edx
+ 7f2:	c1 ea 0b             	shr    $0xb,%edx
+ 7f5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7f7:	89 d0                	mov    %edx,%eax
+ 7f9:	c1 e0 07             	shl    $0x7,%eax
+ 7fc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 801:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 803:	89 d0                	mov    %edx,%eax
+ 805:	c1 e0 0f             	shl    $0xf,%eax
+ 808:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 80d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 80f:	89 c2                	mov    %eax,%edx
+ 811:	c1 ea 12             	shr    $0x12,%edx
+ 814:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 816:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 81b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 81c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 821:	0f 84 d2 00 00 00    	je     8f9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 827:	31 c0                	xor    %eax,%eax
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 830:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 837:	83 c0 01             	add    $0x1,%eax
+ 83a:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 841:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 847:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 84d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 84f:	89 d1                	mov    %edx,%ecx
+ 851:	83 e2 01             	and    $0x1,%edx
+ 854:	d1 e9                	shr    %ecx
+ 856:	33 0c 85 90 13 00 00 	xor    0x1390(,%eax,4),%ecx
+ 85d:	33 0c 95 18 0a 00 00 	xor    0xa18(,%edx,4),%ecx
+ 864:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 86b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 870:	75 be                	jne    830 <genrand+0x60>
+ 872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 878:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 87f:	83 c0 01             	add    $0x1,%eax
+ 882:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 889:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 88f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 895:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 897:	89 d1                	mov    %edx,%ecx
+ 899:	83 e2 01             	and    $0x1,%edx
+ 89c:	d1 e9                	shr    %ecx
+ 89e:	33 0c 85 d0 09 00 00 	xor    0x9d0(,%eax,4),%ecx
+ 8a5:	33 0c 95 18 0a 00 00 	xor    0xa18(,%edx,4),%ecx
+ 8ac:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8b3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8b8:	75 be                	jne    878 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ba:	a1 60 0d 00 00       	mov    0xd60,%eax
+ 8bf:	8b 0d 1c 17 00 00    	mov    0x171c,%ecx
+ 8c5:	89 c2                	mov    %eax,%edx
+ 8c7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8cd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8d3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8d5:	89 ca                	mov    %ecx,%edx
+ 8d7:	83 e1 01             	and    $0x1,%ecx
+ 8da:	d1 ea                	shr    %edx
+ 8dc:	33 15 90 13 00 00    	xor    0x1390,%edx
+ 8e2:	33 14 8d 18 0a 00 00 	xor    0xa18(,%ecx,4),%edx
+ 8e9:	89 15 1c 17 00 00    	mov    %edx,0x171c
+ 8ef:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8f4:	e9 f1 fe ff ff       	jmp    7ea <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 8f9:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 8fe:	b9 1c 17 00 00       	mov    $0x171c,%ecx
+ 903:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 908:	c7 05 60 0d 00 00 05 	movl   $0x1105,0xd60
+ 90f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 912:	eb 07                	jmp    91b <genrand+0x14b>
+ 914:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 918:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 91b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 921:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 923:	39 c1                	cmp    %eax,%ecx
+ 925:	75 f1                	jne    918 <genrand+0x148>
+ 927:	e9 fb fe ff ff       	jmp    827 <genrand+0x57>
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000930 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 930:	f3 0f 1e fb          	endbr32 
+ 934:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 935:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 937:	89 e5                	mov    %esp,%ebp
+ 939:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 93a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 93d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 93e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 943:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 946:	89 d8                	mov    %ebx,%eax
+ 948:	f7 f1                	div    %ecx
+ 94a:	89 c6                	mov    %eax,%esi
+ 94c:	29 d3                	sub    %edx,%ebx
+ 94e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 950:	e8 7b fe ff ff       	call   7d0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 955:	39 d8                	cmp    %ebx,%eax
+ 957:	73 f7                	jae    950 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 959:	31 d2                	xor    %edx,%edx
+}
+ 95b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 95c:	f7 f6                	div    %esi
+}
+ 95e:	5e                   	pop    %esi
+ 95f:	5d                   	pop    %ebp
+ 960:	c3                   	ret    
+ 961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 96f:	90                   	nop
+
+00000970 <randomrange>:
+
+int randomrange(int low, int high){
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	57                   	push   %edi
+ 978:	56                   	push   %esi
+ 979:	53                   	push   %ebx
+ 97a:	83 ec 0c             	sub    $0xc,%esp
+ 97d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 980:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 983:	39 f0                	cmp    %esi,%eax
+ 985:	7d 06                	jge    98d <randomrange+0x1d>
+ 987:	89 f2                	mov    %esi,%edx
+ 989:	89 c6                	mov    %eax,%esi
+ 98b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 98d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 98f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 994:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 996:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 999:	89 d8                	mov    %ebx,%eax
+ 99b:	f7 f1                	div    %ecx
+ 99d:	89 c7                	mov    %eax,%edi
+ 99f:	29 d3                	sub    %edx,%ebx
+ 9a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9a8:	e8 23 fe ff ff       	call   7d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9ad:	39 d8                	cmp    %ebx,%eax
+ 9af:	73 f7                	jae    9a8 <randomrange+0x38>
+  return x/bin_size;
+ 9b1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9b3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9b6:	f7 f7                	div    %edi
+ 9b8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9b9:	01 f0                	add    %esi,%eax
+ 9bb:	5e                   	pop    %esi
+ 9bc:	5f                   	pop    %edi
+ 9bd:	5d                   	pop    %ebp
+ 9be:	c3                   	ret    
diff -ruN xv6-public/getNumProcTest.c xv6-public-partB_sjf/getNumProcTest.c
--- xv6-public/getNumProcTest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getNumProcTest.c	2022-10-06 23:16:08.303643000 +0530
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void){
+	printf(1, "The total number of active processes in the system is %d\n", getNumProc());
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public/getNumProcTest.d xv6-public-partB_sjf/getNumProcTest.d
--- xv6-public/getNumProcTest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getNumProcTest.d	2022-10-07 20:27:45.183126000 +0530
@@ -0,0 +1,2 @@
+getNumProcTest.o: getNumProcTest.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/getNumProcTest.o and xv6-public-partB_sjf/getNumProcTest.o differ
diff -ruN xv6-public/getNumProcTest.sym xv6-public-partB_sjf/getNumProcTest.sym
--- xv6-public/getNumProcTest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getNumProcTest.sym	2022-10-07 20:27:45.207126000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+000009c0 .rodata
+00000a20 .eh_frame
+00000d3c .data
+00000d40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 getNumProcTest.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+00000a04 digits.1105
+00000000 umalloc.c
+00000d40 freep
+00000d44 base
+00000000 random.c
+00000d60 mt
+00000d3c mti
+00000a18 mag01.989
+00000030 strcpy
+00000790 sgenrand
+00000420 printf
+00000260 memmove
+000002db mknod
+00000150 gets
+00000313 getpid
+00000680 malloc
+00000323 sleep
+00000353 get_burst_time
+00000930 random_at_most
+0000035b getCurrentInfo
+000002a3 pipe
+000002b3 write
+000002eb fstat
+000002c3 kill
+00000303 chdir
+000002cb exec
+0000029b wait
+000002ab read
+000002e3 unlink
+0000028b fork
+0000031b sbrk
+0000032b uptime
+00000d40 __bss_start
+000000f0 memset
+00000000 main
+0000034b set_burst_time
+00000060 strcmp
+0000030b dup
+000007d0 genrand
+00000333 getNumProc
+00000343 getProcInfo
+000001d0 stat
+00000d40 _edata
+00001720 _end
+000002f3 link
+00000293 exit
+0000033b getMaxPID
+00000220 atoi
+000000b0 strlen
+000002d3 open
+00000110 strchr
+00000363 getCurrentPID
+00000970 randomrange
+000002fb mkdir
+000002bb close
+000005f0 free
Binary files xv6-public/_getProcInfoTest and xv6-public-partB_sjf/_getProcInfoTest differ
diff -ruN xv6-public/getProcInfoTest.asm xv6-public-partB_sjf/getProcInfoTest.asm
--- xv6-public/getProcInfoTest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getProcInfoTest.asm	2022-10-07 20:27:45.315127000 +0530
@@ -0,0 +1,1540 @@
+
+_getProcInfoTest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char* argv[]){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 14             	sub    $0x14,%esp
+
+	if (argc < 2)
+  15:	83 39 01             	cmpl   $0x1,(%ecx)
+main(int argc, char* argv[]){
+  18:	8b 41 04             	mov    0x4(%ecx),%eax
+	if (argc < 2)
+  1b:	7e 47                	jle    64 <main+0x64>
+        printf(1, "Incorrect Format!\nFormat: getProcInfoTest <PID>\n");
+        exit();
+    }
+
+	struct processInfo info;
+	if(getProcInfo(atoi(argv[1]), &info) == -1){
+  1d:	83 ec 0c             	sub    $0xc,%esp
+  20:	ff 70 04             	pushl  0x4(%eax)
+  23:	e8 68 02 00 00       	call   290 <atoi>
+  28:	5a                   	pop    %edx
+  29:	8d 55 ec             	lea    -0x14(%ebp),%edx
+  2c:	59                   	pop    %ecx
+  2d:	52                   	push   %edx
+  2e:	50                   	push   %eax
+  2f:	e8 7f 03 00 00       	call   3b3 <getProcInfo>
+  34:	83 c4 10             	add    $0x10,%esp
+  37:	83 c0 01             	add    $0x1,%eax
+  3a:	74 3b                	je     77 <main+0x77>
+		printf(1, "No process has that PID.\n");
+		exit();
+	}
+	if(info.ppid != -2)
+  3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  3f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+  42:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  45:	83 f8 fe             	cmp    $0xfffffffe,%eax
+  48:	74 40                	je     8a <main+0x8a>
+		printf(1, "PPID: %d\nSize: %d\nNumber of Context Switches: %d\n", info.ppid, info.psize, info.numberContextSwitches);
+  4a:	83 ec 0c             	sub    $0xc,%esp
+  4d:	51                   	push   %ecx
+  4e:	52                   	push   %edx
+  4f:	50                   	push   %eax
+  50:	68 64 0a 00 00       	push   $0xa64
+  55:	6a 01                	push   $0x1
+  57:	e8 34 04 00 00       	call   490 <printf>
+  5c:	83 c4 20             	add    $0x20,%esp
+	else
+		printf(1, "PPID: No Parent Process\nSize: %d\nNumber of Context Switches: %d\n", info.psize, info.numberContextSwitches);
+	exit();
+  5f:	e8 9f 02 00 00       	call   303 <exit>
+        printf(1, "Incorrect Format!\nFormat: getProcInfoTest <PID>\n");
+  64:	50                   	push   %eax
+  65:	50                   	push   %eax
+  66:	68 30 0a 00 00       	push   $0xa30
+  6b:	6a 01                	push   $0x1
+  6d:	e8 1e 04 00 00       	call   490 <printf>
+        exit();
+  72:	e8 8c 02 00 00       	call   303 <exit>
+		printf(1, "No process has that PID.\n");
+  77:	50                   	push   %eax
+  78:	50                   	push   %eax
+  79:	68 d9 0a 00 00       	push   $0xad9
+  7e:	6a 01                	push   $0x1
+  80:	e8 0b 04 00 00       	call   490 <printf>
+		exit();
+  85:	e8 79 02 00 00       	call   303 <exit>
+		printf(1, "PPID: No Parent Process\nSize: %d\nNumber of Context Switches: %d\n", info.psize, info.numberContextSwitches);
+  8a:	51                   	push   %ecx
+  8b:	52                   	push   %edx
+  8c:	68 98 0a 00 00       	push   $0xa98
+  91:	6a 01                	push   $0x1
+  93:	e8 f8 03 00 00       	call   490 <printf>
+  98:	83 c4 10             	add    $0x10,%esp
+  9b:	eb c2                	jmp    5f <main+0x5f>
+  9d:	66 90                	xchg   %ax,%ax
+  9f:	90                   	nop
+
+000000a0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  a5:	31 c0                	xor    %eax,%eax
+{
+  a7:	89 e5                	mov    %esp,%ebp
+  a9:	53                   	push   %ebx
+  aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ad:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  b0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  b4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  b7:	83 c0 01             	add    $0x1,%eax
+  ba:	84 d2                	test   %dl,%dl
+  bc:	75 f2                	jne    b0 <strcpy+0x10>
+    ;
+  return os;
+}
+  be:	89 c8                	mov    %ecx,%eax
+  c0:	5b                   	pop    %ebx
+  c1:	5d                   	pop    %ebp
+  c2:	c3                   	ret    
+  c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000d0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  d0:	f3 0f 1e fb          	endbr32 
+  d4:	55                   	push   %ebp
+  d5:	89 e5                	mov    %esp,%ebp
+  d7:	53                   	push   %ebx
+  d8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  db:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  de:	0f b6 01             	movzbl (%ecx),%eax
+  e1:	0f b6 1a             	movzbl (%edx),%ebx
+  e4:	84 c0                	test   %al,%al
+  e6:	75 19                	jne    101 <strcmp+0x31>
+  e8:	eb 26                	jmp    110 <strcmp+0x40>
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  f4:	83 c1 01             	add    $0x1,%ecx
+  f7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  fa:	0f b6 1a             	movzbl (%edx),%ebx
+  fd:	84 c0                	test   %al,%al
+  ff:	74 0f                	je     110 <strcmp+0x40>
+ 101:	38 d8                	cmp    %bl,%al
+ 103:	74 eb                	je     f0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 105:	29 d8                	sub    %ebx,%eax
+}
+ 107:	5b                   	pop    %ebx
+ 108:	5d                   	pop    %ebp
+ 109:	c3                   	ret    
+ 10a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 110:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 112:	29 d8                	sub    %ebx,%eax
+}
+ 114:	5b                   	pop    %ebx
+ 115:	5d                   	pop    %ebp
+ 116:	c3                   	ret    
+ 117:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11e:	66 90                	xchg   %ax,%ax
+
+00000120 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 12a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 12d:	74 21                	je     150 <strlen+0x30>
+ 12f:	31 c0                	xor    %eax,%eax
+ 131:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 138:	83 c0 01             	add    $0x1,%eax
+ 13b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 13f:	89 c1                	mov    %eax,%ecx
+ 141:	75 f5                	jne    138 <strlen+0x18>
+    ;
+  return n;
+}
+ 143:	89 c8                	mov    %ecx,%eax
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 150:	31 c9                	xor    %ecx,%ecx
+}
+ 152:	5d                   	pop    %ebp
+ 153:	89 c8                	mov    %ecx,%eax
+ 155:	c3                   	ret    
+ 156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000160 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	57                   	push   %edi
+ 168:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 16b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 16e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 171:	89 d7                	mov    %edx,%edi
+ 173:	fc                   	cld    
+ 174:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 176:	89 d0                	mov    %edx,%eax
+ 178:	5f                   	pop    %edi
+ 179:	5d                   	pop    %ebp
+ 17a:	c3                   	ret    
+ 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 17f:	90                   	nop
+
+00000180 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	8b 45 08             	mov    0x8(%ebp),%eax
+ 18a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 18e:	0f b6 10             	movzbl (%eax),%edx
+ 191:	84 d2                	test   %dl,%dl
+ 193:	75 16                	jne    1ab <strchr+0x2b>
+ 195:	eb 21                	jmp    1b8 <strchr+0x38>
+ 197:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19e:	66 90                	xchg   %ax,%ax
+ 1a0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1a4:	83 c0 01             	add    $0x1,%eax
+ 1a7:	84 d2                	test   %dl,%dl
+ 1a9:	74 0d                	je     1b8 <strchr+0x38>
+    if(*s == c)
+ 1ab:	38 d1                	cmp    %dl,%cl
+ 1ad:	75 f1                	jne    1a0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 1af:	5d                   	pop    %ebp
+ 1b0:	c3                   	ret    
+ 1b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 1b8:	31 c0                	xor    %eax,%eax
+}
+ 1ba:	5d                   	pop    %ebp
+ 1bb:	c3                   	ret    
+ 1bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	57                   	push   %edi
+ 1c8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1c9:	31 f6                	xor    %esi,%esi
+{
+ 1cb:	53                   	push   %ebx
+ 1cc:	89 f3                	mov    %esi,%ebx
+ 1ce:	83 ec 1c             	sub    $0x1c,%esp
+ 1d1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1d4:	eb 33                	jmp    209 <gets+0x49>
+ 1d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1e0:	83 ec 04             	sub    $0x4,%esp
+ 1e3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1e6:	6a 01                	push   $0x1
+ 1e8:	50                   	push   %eax
+ 1e9:	6a 00                	push   $0x0
+ 1eb:	e8 2b 01 00 00       	call   31b <read>
+    if(cc < 1)
+ 1f0:	83 c4 10             	add    $0x10,%esp
+ 1f3:	85 c0                	test   %eax,%eax
+ 1f5:	7e 1c                	jle    213 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1f7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1fb:	83 c7 01             	add    $0x1,%edi
+ 1fe:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 201:	3c 0a                	cmp    $0xa,%al
+ 203:	74 23                	je     228 <gets+0x68>
+ 205:	3c 0d                	cmp    $0xd,%al
+ 207:	74 1f                	je     228 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 209:	83 c3 01             	add    $0x1,%ebx
+ 20c:	89 fe                	mov    %edi,%esi
+ 20e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 211:	7c cd                	jl     1e0 <gets+0x20>
+ 213:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 215:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 218:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 21b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 21e:	5b                   	pop    %ebx
+ 21f:	5e                   	pop    %esi
+ 220:	5f                   	pop    %edi
+ 221:	5d                   	pop    %ebp
+ 222:	c3                   	ret    
+ 223:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 227:	90                   	nop
+ 228:	8b 75 08             	mov    0x8(%ebp),%esi
+ 22b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 22e:	01 de                	add    %ebx,%esi
+ 230:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 232:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 235:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 238:	5b                   	pop    %ebx
+ 239:	5e                   	pop    %esi
+ 23a:	5f                   	pop    %edi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000240 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 240:	f3 0f 1e fb          	endbr32 
+ 244:	55                   	push   %ebp
+ 245:	89 e5                	mov    %esp,%ebp
+ 247:	56                   	push   %esi
+ 248:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 249:	83 ec 08             	sub    $0x8,%esp
+ 24c:	6a 00                	push   $0x0
+ 24e:	ff 75 08             	pushl  0x8(%ebp)
+ 251:	e8 ed 00 00 00       	call   343 <open>
+  if(fd < 0)
+ 256:	83 c4 10             	add    $0x10,%esp
+ 259:	85 c0                	test   %eax,%eax
+ 25b:	78 2b                	js     288 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 25d:	83 ec 08             	sub    $0x8,%esp
+ 260:	ff 75 0c             	pushl  0xc(%ebp)
+ 263:	89 c3                	mov    %eax,%ebx
+ 265:	50                   	push   %eax
+ 266:	e8 f0 00 00 00       	call   35b <fstat>
+  close(fd);
+ 26b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 26e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 270:	e8 b6 00 00 00       	call   32b <close>
+  return r;
+ 275:	83 c4 10             	add    $0x10,%esp
+}
+ 278:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 27b:	89 f0                	mov    %esi,%eax
+ 27d:	5b                   	pop    %ebx
+ 27e:	5e                   	pop    %esi
+ 27f:	5d                   	pop    %ebp
+ 280:	c3                   	ret    
+ 281:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 288:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 28d:	eb e9                	jmp    278 <stat+0x38>
+ 28f:	90                   	nop
+
+00000290 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	53                   	push   %ebx
+ 298:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 29b:	0f be 02             	movsbl (%edx),%eax
+ 29e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2a1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2a4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2a9:	77 1a                	ja     2c5 <atoi+0x35>
+ 2ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2af:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 2b0:	83 c2 01             	add    $0x1,%edx
+ 2b3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2b6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2ba:	0f be 02             	movsbl (%edx),%eax
+ 2bd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2c0:	80 fb 09             	cmp    $0x9,%bl
+ 2c3:	76 eb                	jbe    2b0 <atoi+0x20>
+  return n;
+}
+ 2c5:	89 c8                	mov    %ecx,%eax
+ 2c7:	5b                   	pop    %ebx
+ 2c8:	5d                   	pop    %ebp
+ 2c9:	c3                   	ret    
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002d0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2d0:	f3 0f 1e fb          	endbr32 
+ 2d4:	55                   	push   %ebp
+ 2d5:	89 e5                	mov    %esp,%ebp
+ 2d7:	57                   	push   %edi
+ 2d8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2db:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2de:	56                   	push   %esi
+ 2df:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2e2:	85 c0                	test   %eax,%eax
+ 2e4:	7e 0f                	jle    2f5 <memmove+0x25>
+ 2e6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2e8:	89 d7                	mov    %edx,%edi
+ 2ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2f0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2f1:	39 f8                	cmp    %edi,%eax
+ 2f3:	75 fb                	jne    2f0 <memmove+0x20>
+  return vdst;
+}
+ 2f5:	5e                   	pop    %esi
+ 2f6:	89 d0                	mov    %edx,%eax
+ 2f8:	5f                   	pop    %edi
+ 2f9:	5d                   	pop    %ebp
+ 2fa:	c3                   	ret    
+
+000002fb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2fb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <exit>:
+SYSCALL(exit)
+ 303:	b8 02 00 00 00       	mov    $0x2,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <wait>:
+SYSCALL(wait)
+ 30b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <pipe>:
+SYSCALL(pipe)
+ 313:	b8 04 00 00 00       	mov    $0x4,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <read>:
+SYSCALL(read)
+ 31b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <write>:
+SYSCALL(write)
+ 323:	b8 10 00 00 00       	mov    $0x10,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <close>:
+SYSCALL(close)
+ 32b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <kill>:
+SYSCALL(kill)
+ 333:	b8 06 00 00 00       	mov    $0x6,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <exec>:
+SYSCALL(exec)
+ 33b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <open>:
+SYSCALL(open)
+ 343:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mknod>:
+SYSCALL(mknod)
+ 34b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <unlink>:
+SYSCALL(unlink)
+ 353:	b8 12 00 00 00       	mov    $0x12,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <fstat>:
+SYSCALL(fstat)
+ 35b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <link>:
+SYSCALL(link)
+ 363:	b8 13 00 00 00       	mov    $0x13,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <mkdir>:
+SYSCALL(mkdir)
+ 36b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <chdir>:
+SYSCALL(chdir)
+ 373:	b8 09 00 00 00       	mov    $0x9,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <dup>:
+SYSCALL(dup)
+ 37b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getpid>:
+SYSCALL(getpid)
+ 383:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <sbrk>:
+SYSCALL(sbrk)
+ 38b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <sleep>:
+SYSCALL(sleep)
+ 393:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <uptime>:
+SYSCALL(uptime)
+ 39b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <getNumProc>:
+SYSCALL(getNumProc)
+ 3a3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <getMaxPID>:
+SYSCALL(getMaxPID)
+ 3ab:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 3b3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3bb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3c3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 3cb:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <getCurrentPID>:
+ 3d3:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+ 3db:	66 90                	xchg   %ax,%ax
+ 3dd:	66 90                	xchg   %ax,%ax
+ 3df:	90                   	nop
+
+000003e0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	56                   	push   %esi
+ 3e5:	53                   	push   %ebx
+ 3e6:	83 ec 3c             	sub    $0x3c,%esp
+ 3e9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ec:	89 d1                	mov    %edx,%ecx
+{
+ 3ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3f1:	85 d2                	test   %edx,%edx
+ 3f3:	0f 89 7f 00 00 00    	jns    478 <printint+0x98>
+ 3f9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3fd:	74 79                	je     478 <printint+0x98>
+    neg = 1;
+ 3ff:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 406:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 408:	31 db                	xor    %ebx,%ebx
+ 40a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 40d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 410:	89 c8                	mov    %ecx,%eax
+ 412:	31 d2                	xor    %edx,%edx
+ 414:	89 cf                	mov    %ecx,%edi
+ 416:	f7 75 c4             	divl   -0x3c(%ebp)
+ 419:	0f b6 92 fc 0a 00 00 	movzbl 0xafc(%edx),%edx
+ 420:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 423:	89 d8                	mov    %ebx,%eax
+ 425:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 428:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 42b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 42e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 431:	76 dd                	jbe    410 <printint+0x30>
+  if(neg)
+ 433:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 436:	85 c9                	test   %ecx,%ecx
+ 438:	74 0c                	je     446 <printint+0x66>
+    buf[i++] = '-';
+ 43a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 43f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 441:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 446:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 449:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 44d:	eb 07                	jmp    456 <printint+0x76>
+ 44f:	90                   	nop
+ 450:	0f b6 13             	movzbl (%ebx),%edx
+ 453:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 456:	83 ec 04             	sub    $0x4,%esp
+ 459:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 45c:	6a 01                	push   $0x1
+ 45e:	56                   	push   %esi
+ 45f:	57                   	push   %edi
+ 460:	e8 be fe ff ff       	call   323 <write>
+  while(--i >= 0)
+ 465:	83 c4 10             	add    $0x10,%esp
+ 468:	39 de                	cmp    %ebx,%esi
+ 46a:	75 e4                	jne    450 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 46c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 46f:	5b                   	pop    %ebx
+ 470:	5e                   	pop    %esi
+ 471:	5f                   	pop    %edi
+ 472:	5d                   	pop    %ebp
+ 473:	c3                   	ret    
+ 474:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 478:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 47f:	eb 87                	jmp    408 <printint+0x28>
+ 481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 488:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+
+00000490 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 490:	f3 0f 1e fb          	endbr32 
+ 494:	55                   	push   %ebp
+ 495:	89 e5                	mov    %esp,%ebp
+ 497:	57                   	push   %edi
+ 498:	56                   	push   %esi
+ 499:	53                   	push   %ebx
+ 49a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 49d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4a0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a3:	84 db                	test   %bl,%bl
+ 4a5:	0f 84 b4 00 00 00    	je     55f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 4ab:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ae:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4b1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4b4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4b6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4b9:	eb 33                	jmp    4ee <printf+0x5e>
+ 4bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+ 4c0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4c3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4c8:	83 f8 25             	cmp    $0x25,%eax
+ 4cb:	74 17                	je     4e4 <printf+0x54>
+  write(fd, &c, 1);
+ 4cd:	83 ec 04             	sub    $0x4,%esp
+ 4d0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4d3:	6a 01                	push   $0x1
+ 4d5:	57                   	push   %edi
+ 4d6:	ff 75 08             	pushl  0x8(%ebp)
+ 4d9:	e8 45 fe ff ff       	call   323 <write>
+ 4de:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4e1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4e4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4e7:	83 c6 01             	add    $0x1,%esi
+ 4ea:	84 db                	test   %bl,%bl
+ 4ec:	74 71                	je     55f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ee:	0f be cb             	movsbl %bl,%ecx
+ 4f1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4f4:	85 d2                	test   %edx,%edx
+ 4f6:	74 c8                	je     4c0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4f8:	83 fa 25             	cmp    $0x25,%edx
+ 4fb:	75 e7                	jne    4e4 <printf+0x54>
+      if(c == 'd'){
+ 4fd:	83 f8 64             	cmp    $0x64,%eax
+ 500:	0f 84 9a 00 00 00    	je     5a0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 506:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 50c:	83 f9 70             	cmp    $0x70,%ecx
+ 50f:	74 5f                	je     570 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 511:	83 f8 73             	cmp    $0x73,%eax
+ 514:	0f 84 d6 00 00 00    	je     5f0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 51a:	83 f8 63             	cmp    $0x63,%eax
+ 51d:	0f 84 8d 00 00 00    	je     5b0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 523:	83 f8 25             	cmp    $0x25,%eax
+ 526:	0f 84 b4 00 00 00    	je     5e0 <printf+0x150>
+  write(fd, &c, 1);
+ 52c:	83 ec 04             	sub    $0x4,%esp
+ 52f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 533:	6a 01                	push   $0x1
+ 535:	57                   	push   %edi
+ 536:	ff 75 08             	pushl  0x8(%ebp)
+ 539:	e8 e5 fd ff ff       	call   323 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 53e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 541:	83 c4 0c             	add    $0xc,%esp
+ 544:	6a 01                	push   $0x1
+ 546:	83 c6 01             	add    $0x1,%esi
+ 549:	57                   	push   %edi
+ 54a:	ff 75 08             	pushl  0x8(%ebp)
+ 54d:	e8 d1 fd ff ff       	call   323 <write>
+  for(i = 0; fmt[i]; i++){
+ 552:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 556:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 559:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 55b:	84 db                	test   %bl,%bl
+ 55d:	75 8f                	jne    4ee <printf+0x5e>
+    }
+  }
+}
+ 55f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 562:	5b                   	pop    %ebx
+ 563:	5e                   	pop    %esi
+ 564:	5f                   	pop    %edi
+ 565:	5d                   	pop    %ebp
+ 566:	c3                   	ret    
+ 567:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 578:	6a 00                	push   $0x0
+ 57a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 57d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 580:	8b 13                	mov    (%ebx),%edx
+ 582:	e8 59 fe ff ff       	call   3e0 <printint>
+        ap++;
+ 587:	89 d8                	mov    %ebx,%eax
+ 589:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 58e:	83 c0 04             	add    $0x4,%eax
+ 591:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 594:	e9 4b ff ff ff       	jmp    4e4 <printf+0x54>
+ 599:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	eb ce                	jmp    57a <printf+0xea>
+ 5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5b0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5b6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5b8:	6a 01                	push   $0x1
+        ap++;
+ 5ba:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5bd:	57                   	push   %edi
+ 5be:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5c1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c4:	e8 5a fd ff ff       	call   323 <write>
+        ap++;
+ 5c9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5cc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5cf:	31 d2                	xor    %edx,%edx
+ 5d1:	e9 0e ff ff ff       	jmp    4e4 <printf+0x54>
+ 5d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5dd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5e0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e3:	83 ec 04             	sub    $0x4,%esp
+ 5e6:	e9 59 ff ff ff       	jmp    544 <printf+0xb4>
+ 5eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+        s = (char*)*ap;
+ 5f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5f3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5f5:	83 c0 04             	add    $0x4,%eax
+ 5f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5fb:	85 db                	test   %ebx,%ebx
+ 5fd:	74 17                	je     616 <printf+0x186>
+        while(*s != 0){
+ 5ff:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 602:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 604:	84 c0                	test   %al,%al
+ 606:	0f 84 d8 fe ff ff    	je     4e4 <printf+0x54>
+ 60c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 60f:	89 de                	mov    %ebx,%esi
+ 611:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 614:	eb 1a                	jmp    630 <printf+0x1a0>
+          s = "(null)";
+ 616:	bb f3 0a 00 00       	mov    $0xaf3,%ebx
+        while(*s != 0){
+ 61b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 61e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 623:	89 de                	mov    %ebx,%esi
+ 625:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 628:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+  write(fd, &c, 1);
+ 630:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 633:	83 c6 01             	add    $0x1,%esi
+ 636:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 639:	6a 01                	push   $0x1
+ 63b:	57                   	push   %edi
+ 63c:	53                   	push   %ebx
+ 63d:	e8 e1 fc ff ff       	call   323 <write>
+        while(*s != 0){
+ 642:	0f b6 06             	movzbl (%esi),%eax
+ 645:	83 c4 10             	add    $0x10,%esp
+ 648:	84 c0                	test   %al,%al
+ 64a:	75 e4                	jne    630 <printf+0x1a0>
+ 64c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 64f:	31 d2                	xor    %edx,%edx
+ 651:	e9 8e fe ff ff       	jmp    4e4 <printf+0x54>
+ 656:	66 90                	xchg   %ax,%ax
+ 658:	66 90                	xchg   %ax,%ax
+ 65a:	66 90                	xchg   %ax,%ax
+ 65c:	66 90                	xchg   %ax,%ax
+ 65e:	66 90                	xchg   %ax,%ax
+
+00000660 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 660:	f3 0f 1e fb          	endbr32 
+ 664:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 665:	a1 40 0e 00 00       	mov    0xe40,%eax
+{
+ 66a:	89 e5                	mov    %esp,%ebp
+ 66c:	57                   	push   %edi
+ 66d:	56                   	push   %esi
+ 66e:	53                   	push   %ebx
+ 66f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 672:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 674:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 677:	39 c8                	cmp    %ecx,%eax
+ 679:	73 15                	jae    690 <free+0x30>
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+ 680:	39 d1                	cmp    %edx,%ecx
+ 682:	72 14                	jb     698 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 684:	39 d0                	cmp    %edx,%eax
+ 686:	73 10                	jae    698 <free+0x38>
+{
+ 688:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 68a:	8b 10                	mov    (%eax),%edx
+ 68c:	39 c8                	cmp    %ecx,%eax
+ 68e:	72 f0                	jb     680 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 690:	39 d0                	cmp    %edx,%eax
+ 692:	72 f4                	jb     688 <free+0x28>
+ 694:	39 d1                	cmp    %edx,%ecx
+ 696:	73 f0                	jae    688 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 698:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 69b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 69e:	39 fa                	cmp    %edi,%edx
+ 6a0:	74 1e                	je     6c0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6a2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6a5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6ab:	39 f1                	cmp    %esi,%ecx
+ 6ad:	74 28                	je     6d7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6af:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6b1:	5b                   	pop    %ebx
+  freep = p;
+ 6b2:	a3 40 0e 00 00       	mov    %eax,0xe40
+}
+ 6b7:	5e                   	pop    %esi
+ 6b8:	5f                   	pop    %edi
+ 6b9:	5d                   	pop    %ebp
+ 6ba:	c3                   	ret    
+ 6bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6bf:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6c0:	03 72 04             	add    0x4(%edx),%esi
+ 6c3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6c6:	8b 10                	mov    (%eax),%edx
+ 6c8:	8b 12                	mov    (%edx),%edx
+ 6ca:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6cd:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6d3:	39 f1                	cmp    %esi,%ecx
+ 6d5:	75 d8                	jne    6af <free+0x4f>
+    p->s.size += bp->s.size;
+ 6d7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6da:	a3 40 0e 00 00       	mov    %eax,0xe40
+    p->s.size += bp->s.size;
+ 6df:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6e2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6e5:	89 10                	mov    %edx,(%eax)
+}
+ 6e7:	5b                   	pop    %ebx
+ 6e8:	5e                   	pop    %esi
+ 6e9:	5f                   	pop    %edi
+ 6ea:	5d                   	pop    %ebp
+ 6eb:	c3                   	ret    
+ 6ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006f0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6f0:	f3 0f 1e fb          	endbr32 
+ 6f4:	55                   	push   %ebp
+ 6f5:	89 e5                	mov    %esp,%ebp
+ 6f7:	57                   	push   %edi
+ 6f8:	56                   	push   %esi
+ 6f9:	53                   	push   %ebx
+ 6fa:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6fd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 700:	8b 3d 40 0e 00 00    	mov    0xe40,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 706:	8d 70 07             	lea    0x7(%eax),%esi
+ 709:	c1 ee 03             	shr    $0x3,%esi
+ 70c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 70f:	85 ff                	test   %edi,%edi
+ 711:	0f 84 a9 00 00 00    	je     7c0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 717:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 719:	8b 48 04             	mov    0x4(%eax),%ecx
+ 71c:	39 f1                	cmp    %esi,%ecx
+ 71e:	73 6d                	jae    78d <malloc+0x9d>
+ 720:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 726:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 72b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 72e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 735:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 738:	eb 17                	jmp    751 <malloc+0x61>
+ 73a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 740:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 742:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 745:	39 f1                	cmp    %esi,%ecx
+ 747:	73 4f                	jae    798 <malloc+0xa8>
+ 749:	8b 3d 40 0e 00 00    	mov    0xe40,%edi
+ 74f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 751:	39 c7                	cmp    %eax,%edi
+ 753:	75 eb                	jne    740 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 755:	83 ec 0c             	sub    $0xc,%esp
+ 758:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 75b:	e8 2b fc ff ff       	call   38b <sbrk>
+  if(p == (char*)-1)
+ 760:	83 c4 10             	add    $0x10,%esp
+ 763:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 766:	74 1b                	je     783 <malloc+0x93>
+  hp->s.size = nu;
+ 768:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 76b:	83 ec 0c             	sub    $0xc,%esp
+ 76e:	83 c0 08             	add    $0x8,%eax
+ 771:	50                   	push   %eax
+ 772:	e8 e9 fe ff ff       	call   660 <free>
+  return freep;
+ 777:	a1 40 0e 00 00       	mov    0xe40,%eax
+      if((p = morecore(nunits)) == 0)
+ 77c:	83 c4 10             	add    $0x10,%esp
+ 77f:	85 c0                	test   %eax,%eax
+ 781:	75 bd                	jne    740 <malloc+0x50>
+        return 0;
+  }
+}
+ 783:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 786:	31 c0                	xor    %eax,%eax
+}
+ 788:	5b                   	pop    %ebx
+ 789:	5e                   	pop    %esi
+ 78a:	5f                   	pop    %edi
+ 78b:	5d                   	pop    %ebp
+ 78c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 78d:	89 c2                	mov    %eax,%edx
+ 78f:	89 f8                	mov    %edi,%eax
+ 791:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 798:	39 ce                	cmp    %ecx,%esi
+ 79a:	74 54                	je     7f0 <malloc+0x100>
+        p->s.size -= nunits;
+ 79c:	29 f1                	sub    %esi,%ecx
+ 79e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 7a1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 7a4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 7a7:	a3 40 0e 00 00       	mov    %eax,0xe40
+}
+ 7ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7af:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 7b2:	5b                   	pop    %ebx
+ 7b3:	5e                   	pop    %esi
+ 7b4:	5f                   	pop    %edi
+ 7b5:	5d                   	pop    %ebp
+ 7b6:	c3                   	ret    
+ 7b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7be:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 7c0:	c7 05 40 0e 00 00 44 	movl   $0xe44,0xe40
+ 7c7:	0e 00 00 
+    base.s.size = 0;
+ 7ca:	bf 44 0e 00 00       	mov    $0xe44,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7cf:	c7 05 44 0e 00 00 44 	movl   $0xe44,0xe44
+ 7d6:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7d9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7db:	c7 05 48 0e 00 00 00 	movl   $0x0,0xe48
+ 7e2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7e5:	e9 36 ff ff ff       	jmp    720 <malloc+0x30>
+ 7ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7f0:	8b 0a                	mov    (%edx),%ecx
+ 7f2:	89 08                	mov    %ecx,(%eax)
+ 7f4:	eb b1                	jmp    7a7 <malloc+0xb7>
+ 7f6:	66 90                	xchg   %ax,%ax
+ 7f8:	66 90                	xchg   %ax,%ax
+ 7fa:	66 90                	xchg   %ax,%ax
+ 7fc:	66 90                	xchg   %ax,%ax
+ 7fe:	66 90                	xchg   %ax,%ax
+
+00000800 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 800:	f3 0f 1e fb          	endbr32 
+ 804:	55                   	push   %ebp
+ 805:	b8 64 0e 00 00       	mov    $0xe64,%eax
+ 80a:	89 e5                	mov    %esp,%ebp
+ 80c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 80f:	89 15 60 0e 00 00    	mov    %edx,0xe60
+    for (mti=1; mti<N; mti++)
+ 815:	eb 0c                	jmp    823 <sgenrand+0x23>
+ 817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 81e:	66 90                	xchg   %ax,%ax
+ 820:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 823:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 829:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 82b:	3d 1c 18 00 00       	cmp    $0x181c,%eax
+ 830:	75 ee                	jne    820 <sgenrand+0x20>
+ 832:	c7 05 34 0e 00 00 70 	movl   $0x270,0xe34
+ 839:	02 00 00 
+}
+ 83c:	5d                   	pop    %ebp
+ 83d:	c3                   	ret    
+ 83e:	66 90                	xchg   %ax,%ax
+
+00000840 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 840:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 844:	a1 34 0e 00 00       	mov    0xe34,%eax
+ 849:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 84e:	7f 3c                	jg     88c <genrand+0x4c>
+ 850:	8d 50 01             	lea    0x1(%eax),%edx
+ 853:	8b 04 85 60 0e 00 00 	mov    0xe60(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 85a:	89 15 34 0e 00 00    	mov    %edx,0xe34
+    y ^= TEMPERING_SHIFT_U(y);
+ 860:	89 c2                	mov    %eax,%edx
+ 862:	c1 ea 0b             	shr    $0xb,%edx
+ 865:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 867:	89 d0                	mov    %edx,%eax
+ 869:	c1 e0 07             	shl    $0x7,%eax
+ 86c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 871:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 873:	89 d0                	mov    %edx,%eax
+ 875:	c1 e0 0f             	shl    $0xf,%eax
+ 878:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 87d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 87f:	89 c2                	mov    %eax,%edx
+ 881:	c1 ea 12             	shr    $0x12,%edx
+ 884:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 886:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 88b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 88c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 891:	0f 84 d2 00 00 00    	je     969 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 897:	31 c0                	xor    %eax,%eax
+ 899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8a0:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 8a7:	83 c0 01             	add    $0x1,%eax
+ 8aa:	8b 14 85 60 0e 00 00 	mov    0xe60(,%eax,4),%edx
+ 8b1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8b7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8bd:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8bf:	89 d1                	mov    %edx,%ecx
+ 8c1:	83 e2 01             	and    $0x1,%edx
+ 8c4:	d1 e9                	shr    %ecx
+ 8c6:	33 0c 85 90 14 00 00 	xor    0x1490(,%eax,4),%ecx
+ 8cd:	33 0c 95 10 0b 00 00 	xor    0xb10(,%edx,4),%ecx
+ 8d4:	89 0c 85 5c 0e 00 00 	mov    %ecx,0xe5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 8db:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 8e0:	75 be                	jne    8a0 <genrand+0x60>
+ 8e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8e8:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 8ef:	83 c0 01             	add    $0x1,%eax
+ 8f2:	8b 14 85 60 0e 00 00 	mov    0xe60(,%eax,4),%edx
+ 8f9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8ff:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 905:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 907:	89 d1                	mov    %edx,%ecx
+ 909:	83 e2 01             	and    $0x1,%edx
+ 90c:	d1 e9                	shr    %ecx
+ 90e:	33 0c 85 d0 0a 00 00 	xor    0xad0(,%eax,4),%ecx
+ 915:	33 0c 95 10 0b 00 00 	xor    0xb10(,%edx,4),%ecx
+ 91c:	89 0c 85 5c 0e 00 00 	mov    %ecx,0xe5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 923:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 928:	75 be                	jne    8e8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 92a:	a1 60 0e 00 00       	mov    0xe60,%eax
+ 92f:	8b 0d 1c 18 00 00    	mov    0x181c,%ecx
+ 935:	89 c2                	mov    %eax,%edx
+ 937:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 93d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 943:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 945:	89 ca                	mov    %ecx,%edx
+ 947:	83 e1 01             	and    $0x1,%ecx
+ 94a:	d1 ea                	shr    %edx
+ 94c:	33 15 90 14 00 00    	xor    0x1490,%edx
+ 952:	33 14 8d 10 0b 00 00 	xor    0xb10(,%ecx,4),%edx
+ 959:	89 15 1c 18 00 00    	mov    %edx,0x181c
+ 95f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 964:	e9 f1 fe ff ff       	jmp    85a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 969:	b8 64 0e 00 00       	mov    $0xe64,%eax
+ 96e:	b9 1c 18 00 00       	mov    $0x181c,%ecx
+ 973:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 978:	c7 05 60 0e 00 00 05 	movl   $0x1105,0xe60
+ 97f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 982:	eb 07                	jmp    98b <genrand+0x14b>
+ 984:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 988:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 98b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 991:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 993:	39 c1                	cmp    %eax,%ecx
+ 995:	75 f1                	jne    988 <genrand+0x148>
+ 997:	e9 fb fe ff ff       	jmp    897 <genrand+0x57>
+ 99c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000009a0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 9a0:	f3 0f 1e fb          	endbr32 
+ 9a4:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 9a5:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 9a7:	89 e5                	mov    %esp,%ebp
+ 9a9:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 9aa:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 9ad:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 9ae:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 9b3:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9b6:	89 d8                	mov    %ebx,%eax
+ 9b8:	f7 f1                	div    %ecx
+ 9ba:	89 c6                	mov    %eax,%esi
+ 9bc:	29 d3                	sub    %edx,%ebx
+ 9be:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 9c0:	e8 7b fe ff ff       	call   840 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 9c5:	39 d8                	cmp    %ebx,%eax
+ 9c7:	73 f7                	jae    9c0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 9c9:	31 d2                	xor    %edx,%edx
+}
+ 9cb:	5b                   	pop    %ebx
+  return x/bin_size;
+ 9cc:	f7 f6                	div    %esi
+}
+ 9ce:	5e                   	pop    %esi
+ 9cf:	5d                   	pop    %ebp
+ 9d0:	c3                   	ret    
+ 9d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9df:	90                   	nop
+
+000009e0 <randomrange>:
+
+int randomrange(int low, int high){
+ 9e0:	f3 0f 1e fb          	endbr32 
+ 9e4:	55                   	push   %ebp
+ 9e5:	89 e5                	mov    %esp,%ebp
+ 9e7:	57                   	push   %edi
+ 9e8:	56                   	push   %esi
+ 9e9:	53                   	push   %ebx
+ 9ea:	83 ec 0c             	sub    $0xc,%esp
+ 9ed:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9f0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9f3:	39 f0                	cmp    %esi,%eax
+ 9f5:	7d 06                	jge    9fd <randomrange+0x1d>
+ 9f7:	89 f2                	mov    %esi,%edx
+ 9f9:	89 c6                	mov    %eax,%esi
+ 9fb:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9fd:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9ff:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a04:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a06:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a09:	89 d8                	mov    %ebx,%eax
+ a0b:	f7 f1                	div    %ecx
+ a0d:	89 c7                	mov    %eax,%edi
+ a0f:	29 d3                	sub    %edx,%ebx
+ a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ a18:	e8 23 fe ff ff       	call   840 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a1d:	39 d8                	cmp    %ebx,%eax
+ a1f:	73 f7                	jae    a18 <randomrange+0x38>
+  return x/bin_size;
+ a21:	31 d2                	xor    %edx,%edx
+  return val;
+ a23:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a26:	f7 f7                	div    %edi
+ a28:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a29:	01 f0                	add    %esi,%eax
+ a2b:	5e                   	pop    %esi
+ a2c:	5f                   	pop    %edi
+ a2d:	5d                   	pop    %ebp
+ a2e:	c3                   	ret    
diff -ruN xv6-public/getProcInfoTest.c xv6-public-partB_sjf/getProcInfoTest.c
--- xv6-public/getProcInfoTest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getProcInfoTest.c	2022-10-06 23:17:34.656460000 +0530
@@ -0,0 +1,24 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char* argv[]){
+
+	if (argc < 2)
+    {
+        printf(1, "Incorrect Format!\nFormat: getProcInfoTest <PID>\n");
+        exit();
+    }
+
+	struct processInfo info;
+	if(getProcInfo(atoi(argv[1]), &info) == -1){
+		printf(1, "No process has that PID.\n");
+		exit();
+	}
+	if(info.ppid != -2)
+		printf(1, "PPID: %d\nSize: %d\nNumber of Context Switches: %d\n", info.ppid, info.psize, info.numberContextSwitches);
+	else
+		printf(1, "PPID: No Parent Process\nSize: %d\nNumber of Context Switches: %d\n", info.psize, info.numberContextSwitches);
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public/getProcInfoTest.d xv6-public-partB_sjf/getProcInfoTest.d
--- xv6-public/getProcInfoTest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getProcInfoTest.d	2022-10-07 20:27:45.291127000 +0530
@@ -0,0 +1,2 @@
+getProcInfoTest.o: getProcInfoTest.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/getProcInfoTest.o and xv6-public-partB_sjf/getProcInfoTest.o differ
diff -ruN xv6-public/getProcInfoTest.sym xv6-public-partB_sjf/getProcInfoTest.sym
--- xv6-public/getProcInfoTest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/getProcInfoTest.sym	2022-10-07 20:27:45.319127000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+00000a30 .rodata
+00000b18 .eh_frame
+00000e34 .data
+00000e40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 getProcInfoTest.c
+00000000 ulib.c
+00000000 printf.c
+000003e0 printint
+00000afc digits.1105
+00000000 umalloc.c
+00000e40 freep
+00000e44 base
+00000000 random.c
+00000e60 mt
+00000e34 mti
+00000b10 mag01.989
+000000a0 strcpy
+00000800 sgenrand
+00000490 printf
+000002d0 memmove
+0000034b mknod
+000001c0 gets
+00000383 getpid
+000006f0 malloc
+00000393 sleep
+000003c3 get_burst_time
+000009a0 random_at_most
+000003cb getCurrentInfo
+00000313 pipe
+00000323 write
+0000035b fstat
+00000333 kill
+00000373 chdir
+0000033b exec
+0000030b wait
+0000031b read
+00000353 unlink
+000002fb fork
+0000038b sbrk
+0000039b uptime
+00000e38 __bss_start
+00000160 memset
+00000000 main
+000003bb set_burst_time
+000000d0 strcmp
+0000037b dup
+00000840 genrand
+000003a3 getNumProc
+000003b3 getProcInfo
+00000240 stat
+00000e38 _edata
+00001820 _end
+00000363 link
+00000303 exit
+000003ab getMaxPID
+00000290 atoi
+00000120 strlen
+00000343 open
+00000180 strchr
+000003d3 getCurrentPID
+000009e0 randomrange
+0000036b mkdir
+0000032b close
+00000660 free
Binary files xv6-public/_grep and xv6-public-partB_sjf/_grep differ
diff -ruN xv6-public/grep.asm xv6-public-partB_sjf/grep.asm
--- xv6-public/grep.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/grep.asm	2022-10-07 20:27:43.871114000 +0530
@@ -0,0 +1,1878 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 18             	sub    $0x18,%esp
+  18:	8b 01                	mov    (%ecx),%eax
+  1a:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  20:	83 f8 01             	cmp    $0x1,%eax
+  23:	7e 6b                	jle    90 <main+0x90>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  25:	8b 43 04             	mov    0x4(%ebx),%eax
+  28:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  2b:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  2f:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  34:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  37:	75 29                	jne    62 <main+0x62>
+  39:	eb 68                	jmp    a3 <main+0xa3>
+  3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  3f:	90                   	nop
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  40:	83 ec 08             	sub    $0x8,%esp
+  for(i = 2; i < argc; i++){
+  43:	83 c6 01             	add    $0x1,%esi
+  46:	83 c3 04             	add    $0x4,%ebx
+    grep(pattern, fd);
+  49:	50                   	push   %eax
+  4a:	ff 75 e0             	pushl  -0x20(%ebp)
+  4d:	e8 de 01 00 00       	call   230 <grep>
+    close(fd);
+  52:	89 3c 24             	mov    %edi,(%esp)
+  55:	e8 71 05 00 00       	call   5cb <close>
+  for(i = 2; i < argc; i++){
+  5a:	83 c4 10             	add    $0x10,%esp
+  5d:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  60:	7e 29                	jle    8b <main+0x8b>
+    if((fd = open(argv[i], 0)) < 0){
+  62:	83 ec 08             	sub    $0x8,%esp
+  65:	6a 00                	push   $0x0
+  67:	ff 33                	pushl  (%ebx)
+  69:	e8 75 05 00 00       	call   5e3 <open>
+  6e:	83 c4 10             	add    $0x10,%esp
+  71:	89 c7                	mov    %eax,%edi
+  73:	85 c0                	test   %eax,%eax
+  75:	79 c9                	jns    40 <main+0x40>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  77:	50                   	push   %eax
+  78:	ff 33                	pushl  (%ebx)
+  7a:	68 f0 0c 00 00       	push   $0xcf0
+  7f:	6a 01                	push   $0x1
+  81:	e8 aa 06 00 00       	call   730 <printf>
+      exit();
+  86:	e8 18 05 00 00       	call   5a3 <exit>
+  }
+  exit();
+  8b:	e8 13 05 00 00       	call   5a3 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  90:	51                   	push   %ecx
+  91:	51                   	push   %ecx
+  92:	68 d0 0c 00 00       	push   $0xcd0
+  97:	6a 02                	push   $0x2
+  99:	e8 92 06 00 00       	call   730 <printf>
+    exit();
+  9e:	e8 00 05 00 00       	call   5a3 <exit>
+    grep(pattern, 0);
+  a3:	52                   	push   %edx
+  a4:	52                   	push   %edx
+  a5:	6a 00                	push   $0x0
+  a7:	50                   	push   %eax
+  a8:	e8 83 01 00 00       	call   230 <grep>
+    exit();
+  ad:	e8 f1 04 00 00       	call   5a3 <exit>
+  b2:	66 90                	xchg   %ax,%ax
+  b4:	66 90                	xchg   %ax,%ax
+  b6:	66 90                	xchg   %ax,%ax
+  b8:	66 90                	xchg   %ax,%ax
+  ba:	66 90                	xchg   %ax,%ax
+  bc:	66 90                	xchg   %ax,%ax
+  be:	66 90                	xchg   %ax,%ax
+
+000000c0 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  c0:	f3 0f 1e fb          	endbr32 
+  c4:	55                   	push   %ebp
+  c5:	89 e5                	mov    %esp,%ebp
+  c7:	57                   	push   %edi
+  c8:	56                   	push   %esi
+  c9:	53                   	push   %ebx
+  ca:	83 ec 0c             	sub    $0xc,%esp
+  cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  d0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  d3:	8b 7d 10             	mov    0x10(%ebp),%edi
+  d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+  e0:	83 ec 08             	sub    $0x8,%esp
+  e3:	57                   	push   %edi
+  e4:	56                   	push   %esi
+  e5:	e8 36 00 00 00       	call   120 <matchhere>
+  ea:	83 c4 10             	add    $0x10,%esp
+  ed:	85 c0                	test   %eax,%eax
+  ef:	75 1f                	jne    110 <matchstar+0x50>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  f1:	0f be 17             	movsbl (%edi),%edx
+  f4:	84 d2                	test   %dl,%dl
+  f6:	74 0c                	je     104 <matchstar+0x44>
+  f8:	83 c7 01             	add    $0x1,%edi
+  fb:	39 da                	cmp    %ebx,%edx
+  fd:	74 e1                	je     e0 <matchstar+0x20>
+  ff:	83 fb 2e             	cmp    $0x2e,%ebx
+ 102:	74 dc                	je     e0 <matchstar+0x20>
+  return 0;
+}
+ 104:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 107:	5b                   	pop    %ebx
+ 108:	5e                   	pop    %esi
+ 109:	5f                   	pop    %edi
+ 10a:	5d                   	pop    %ebp
+ 10b:	c3                   	ret    
+ 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 110:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+ 113:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 118:	5b                   	pop    %ebx
+ 119:	5e                   	pop    %esi
+ 11a:	5f                   	pop    %edi
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <matchhere>:
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	57                   	push   %edi
+ 128:	56                   	push   %esi
+ 129:	53                   	push   %ebx
+ 12a:	83 ec 0c             	sub    $0xc,%esp
+ 12d:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 130:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+ 133:	0f b6 01             	movzbl (%ecx),%eax
+ 136:	84 c0                	test   %al,%al
+ 138:	75 2b                	jne    165 <matchhere+0x45>
+ 13a:	eb 64                	jmp    1a0 <matchhere+0x80>
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(re[0] == '$' && re[1] == '\0')
+ 140:	0f b6 37             	movzbl (%edi),%esi
+ 143:	80 fa 24             	cmp    $0x24,%dl
+ 146:	75 04                	jne    14c <matchhere+0x2c>
+ 148:	84 c0                	test   %al,%al
+ 14a:	74 61                	je     1ad <matchhere+0x8d>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 14c:	89 f3                	mov    %esi,%ebx
+ 14e:	84 db                	test   %bl,%bl
+ 150:	74 3e                	je     190 <matchhere+0x70>
+ 152:	80 fa 2e             	cmp    $0x2e,%dl
+ 155:	74 04                	je     15b <matchhere+0x3b>
+ 157:	38 d3                	cmp    %dl,%bl
+ 159:	75 35                	jne    190 <matchhere+0x70>
+    return matchhere(re+1, text+1);
+ 15b:	83 c7 01             	add    $0x1,%edi
+ 15e:	83 c1 01             	add    $0x1,%ecx
+  if(re[0] == '\0')
+ 161:	84 c0                	test   %al,%al
+ 163:	74 3b                	je     1a0 <matchhere+0x80>
+  if(re[1] == '*')
+ 165:	0f be d0             	movsbl %al,%edx
+ 168:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+ 16c:	3c 2a                	cmp    $0x2a,%al
+ 16e:	75 d0                	jne    140 <matchhere+0x20>
+    return matchstar(re[0], re+2, text);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	83 c1 02             	add    $0x2,%ecx
+ 176:	57                   	push   %edi
+ 177:	51                   	push   %ecx
+ 178:	52                   	push   %edx
+ 179:	e8 42 ff ff ff       	call   c0 <matchstar>
+ 17e:	83 c4 10             	add    $0x10,%esp
+}
+ 181:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 184:	5b                   	pop    %ebx
+ 185:	5e                   	pop    %esi
+ 186:	5f                   	pop    %edi
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 190:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 193:	31 c0                	xor    %eax,%eax
+}
+ 195:	5b                   	pop    %ebx
+ 196:	5e                   	pop    %esi
+ 197:	5f                   	pop    %edi
+ 198:	5d                   	pop    %ebp
+ 199:	c3                   	ret    
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 1;
+ 1a3:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1a8:	5b                   	pop    %ebx
+ 1a9:	5e                   	pop    %esi
+ 1aa:	5f                   	pop    %edi
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+    return *text == '\0';
+ 1ad:	89 f0                	mov    %esi,%eax
+ 1af:	84 c0                	test   %al,%al
+ 1b1:	0f 94 c0             	sete   %al
+ 1b4:	0f b6 c0             	movzbl %al,%eax
+ 1b7:	eb c8                	jmp    181 <matchhere+0x61>
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <match>:
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	56                   	push   %esi
+ 1c8:	53                   	push   %ebx
+ 1c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 1cc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(re[0] == '^')
+ 1cf:	80 3b 5e             	cmpb   $0x5e,(%ebx)
+ 1d2:	75 15                	jne    1e9 <match+0x29>
+ 1d4:	eb 3a                	jmp    210 <match+0x50>
+ 1d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 1e0:	83 c6 01             	add    $0x1,%esi
+ 1e3:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
+ 1e7:	74 16                	je     1ff <match+0x3f>
+    if(matchhere(re, text))
+ 1e9:	83 ec 08             	sub    $0x8,%esp
+ 1ec:	56                   	push   %esi
+ 1ed:	53                   	push   %ebx
+ 1ee:	e8 2d ff ff ff       	call   120 <matchhere>
+ 1f3:	83 c4 10             	add    $0x10,%esp
+ 1f6:	85 c0                	test   %eax,%eax
+ 1f8:	74 e6                	je     1e0 <match+0x20>
+      return 1;
+ 1fa:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 202:	5b                   	pop    %ebx
+ 203:	5e                   	pop    %esi
+ 204:	5d                   	pop    %ebp
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+    return matchhere(re+1, text);
+ 210:	83 c3 01             	add    $0x1,%ebx
+ 213:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 21c:	e9 ff fe ff ff       	jmp    120 <matchhere>
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <grep>:
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	57                   	push   %edi
+ 238:	56                   	push   %esi
+ 239:	53                   	push   %ebx
+ 23a:	83 ec 1c             	sub    $0x1c,%esp
+  m = 0;
+ 23d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+{
+ 244:	8b 75 08             	mov    0x8(%ebp),%esi
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 250:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 253:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 258:	83 ec 04             	sub    $0x4,%esp
+ 25b:	29 c8                	sub    %ecx,%eax
+ 25d:	50                   	push   %eax
+ 25e:	8d 81 20 1b 00 00    	lea    0x1b20(%ecx),%eax
+ 264:	50                   	push   %eax
+ 265:	ff 75 0c             	pushl  0xc(%ebp)
+ 268:	e8 4e 03 00 00       	call   5bb <read>
+ 26d:	83 c4 10             	add    $0x10,%esp
+ 270:	85 c0                	test   %eax,%eax
+ 272:	0f 8e b8 00 00 00    	jle    330 <grep+0x100>
+    m += n;
+ 278:	01 45 e4             	add    %eax,-0x1c(%ebp)
+ 27b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+    p = buf;
+ 27e:	bb 20 1b 00 00       	mov    $0x1b20,%ebx
+    buf[m] = '\0';
+ 283:	c6 81 20 1b 00 00 00 	movb   $0x0,0x1b20(%ecx)
+    while((q = strchr(p, '\n')) != 0){
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 290:	83 ec 08             	sub    $0x8,%esp
+ 293:	6a 0a                	push   $0xa
+ 295:	53                   	push   %ebx
+ 296:	e8 85 01 00 00       	call   420 <strchr>
+ 29b:	83 c4 10             	add    $0x10,%esp
+ 29e:	89 c7                	mov    %eax,%edi
+ 2a0:	85 c0                	test   %eax,%eax
+ 2a2:	74 3c                	je     2e0 <grep+0xb0>
+      if(match(pattern, p)){
+ 2a4:	83 ec 08             	sub    $0x8,%esp
+      *q = 0;
+ 2a7:	c6 07 00             	movb   $0x0,(%edi)
+      if(match(pattern, p)){
+ 2aa:	53                   	push   %ebx
+ 2ab:	56                   	push   %esi
+ 2ac:	e8 0f ff ff ff       	call   1c0 <match>
+ 2b1:	83 c4 10             	add    $0x10,%esp
+ 2b4:	8d 57 01             	lea    0x1(%edi),%edx
+ 2b7:	85 c0                	test   %eax,%eax
+ 2b9:	75 05                	jne    2c0 <grep+0x90>
+      p = q+1;
+ 2bb:	89 d3                	mov    %edx,%ebx
+ 2bd:	eb d1                	jmp    290 <grep+0x60>
+ 2bf:	90                   	nop
+        write(1, p, q+1 - p);
+ 2c0:	89 d0                	mov    %edx,%eax
+ 2c2:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 2c5:	c6 07 0a             	movb   $0xa,(%edi)
+        write(1, p, q+1 - p);
+ 2c8:	29 d8                	sub    %ebx,%eax
+ 2ca:	89 55 e0             	mov    %edx,-0x20(%ebp)
+ 2cd:	50                   	push   %eax
+ 2ce:	53                   	push   %ebx
+ 2cf:	6a 01                	push   $0x1
+ 2d1:	e8 ed 02 00 00       	call   5c3 <write>
+ 2d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 2d9:	83 c4 10             	add    $0x10,%esp
+      p = q+1;
+ 2dc:	89 d3                	mov    %edx,%ebx
+ 2de:	eb b0                	jmp    290 <grep+0x60>
+    if(p == buf)
+ 2e0:	81 fb 20 1b 00 00    	cmp    $0x1b20,%ebx
+ 2e6:	74 38                	je     320 <grep+0xf0>
+    if(m > 0){
+ 2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 2eb:	85 c9                	test   %ecx,%ecx
+ 2ed:	0f 8e 5d ff ff ff    	jle    250 <grep+0x20>
+      m -= p - buf;
+ 2f3:	89 d8                	mov    %ebx,%eax
+      memmove(buf, p, m);
+ 2f5:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2f8:	2d 20 1b 00 00       	sub    $0x1b20,%eax
+ 2fd:	29 c1                	sub    %eax,%ecx
+      memmove(buf, p, m);
+ 2ff:	51                   	push   %ecx
+ 300:	53                   	push   %ebx
+ 301:	68 20 1b 00 00       	push   $0x1b20
+      m -= p - buf;
+ 306:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+      memmove(buf, p, m);
+ 309:	e8 62 02 00 00       	call   570 <memmove>
+ 30e:	83 c4 10             	add    $0x10,%esp
+ 311:	e9 3a ff ff ff       	jmp    250 <grep+0x20>
+ 316:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 0;
+ 320:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+ 327:	e9 24 ff ff ff       	jmp    250 <grep+0x20>
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+ 330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 333:	5b                   	pop    %ebx
+ 334:	5e                   	pop    %esi
+ 335:	5f                   	pop    %edi
+ 336:	5d                   	pop    %ebp
+ 337:	c3                   	ret    
+ 338:	66 90                	xchg   %ax,%ax
+ 33a:	66 90                	xchg   %ax,%ax
+ 33c:	66 90                	xchg   %ax,%ax
+ 33e:	66 90                	xchg   %ax,%ax
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 345:	31 c0                	xor    %eax,%eax
+{
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	53                   	push   %ebx
+ 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	89 c8                	mov    %ecx,%eax
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	53                   	push   %ebx
+ 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 37e:	0f b6 01             	movzbl (%ecx),%eax
+ 381:	0f b6 1a             	movzbl (%edx),%ebx
+ 384:	84 c0                	test   %al,%al
+ 386:	75 19                	jne    3a1 <strcmp+0x31>
+ 388:	eb 26                	jmp    3b0 <strcmp+0x40>
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 394:	83 c1 01             	add    $0x1,%ecx
+ 397:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 39a:	0f b6 1a             	movzbl (%edx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	38 d8                	cmp    %bl,%al
+ 3a3:	74 eb                	je     390 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3a5:	29 d8                	sub    %ebx,%eax
+}
+ 3a7:	5b                   	pop    %ebx
+ 3a8:	5d                   	pop    %ebp
+ 3a9:	c3                   	ret    
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5d                   	pop    %ebp
+ 3b6:	c3                   	ret    
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3cd:	74 21                	je     3f0 <strlen+0x30>
+ 3cf:	31 c0                	xor    %eax,%eax
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	83 c0 01             	add    $0x1,%eax
+ 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3df:	89 c1                	mov    %eax,%ecx
+ 3e1:	75 f5                	jne    3d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3e3:	89 c8                	mov    %ecx,%eax
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 411:	89 d7                	mov    %edx,%edi
+ 413:	fc                   	cld    
+ 414:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 416:	89 d0                	mov    %edx,%eax
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42e:	0f b6 10             	movzbl (%eax),%edx
+ 431:	84 d2                	test   %dl,%dl
+ 433:	75 16                	jne    44b <strchr+0x2b>
+ 435:	eb 21                	jmp    458 <strchr+0x38>
+ 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43e:	66 90                	xchg   %ax,%ax
+ 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	84 d2                	test   %dl,%dl
+ 449:	74 0d                	je     458 <strchr+0x38>
+    if(*s == c)
+ 44b:	38 d1                	cmp    %dl,%cl
+ 44d:	75 f1                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 44f:	5d                   	pop    %ebp
+ 450:	c3                   	ret    
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 458:	31 c0                	xor    %eax,%eax
+}
+ 45a:	5d                   	pop    %ebp
+ 45b:	c3                   	ret    
+ 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	31 f6                	xor    %esi,%esi
+{
+ 46b:	53                   	push   %ebx
+ 46c:	89 f3                	mov    %esi,%ebx
+ 46e:	83 ec 1c             	sub    $0x1c,%esp
+ 471:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 474:	eb 33                	jmp    4a9 <gets+0x49>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 486:	6a 01                	push   $0x1
+ 488:	50                   	push   %eax
+ 489:	6a 00                	push   $0x0
+ 48b:	e8 2b 01 00 00       	call   5bb <read>
+    if(cc < 1)
+ 490:	83 c4 10             	add    $0x10,%esp
+ 493:	85 c0                	test   %eax,%eax
+ 495:	7e 1c                	jle    4b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 49b:	83 c7 01             	add    $0x1,%edi
+ 49e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4a1:	3c 0a                	cmp    $0xa,%al
+ 4a3:	74 23                	je     4c8 <gets+0x68>
+ 4a5:	3c 0d                	cmp    $0xd,%al
+ 4a7:	74 1f                	je     4c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4a9:	83 c3 01             	add    $0x1,%ebx
+ 4ac:	89 fe                	mov    %edi,%esi
+ 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4b1:	7c cd                	jl     480 <gets+0x20>
+ 4b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4be:	5b                   	pop    %ebx
+ 4bf:	5e                   	pop    %esi
+ 4c0:	5f                   	pop    %edi
+ 4c1:	5d                   	pop    %ebp
+ 4c2:	c3                   	ret    
+ 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c7:	90                   	nop
+ 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ce:	01 de                	add    %ebx,%esi
+ 4d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d8:	5b                   	pop    %ebx
+ 4d9:	5e                   	pop    %esi
+ 4da:	5f                   	pop    %edi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	56                   	push   %esi
+ 4e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	6a 00                	push   $0x0
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ed 00 00 00       	call   5e3 <open>
+  if(fd < 0)
+ 4f6:	83 c4 10             	add    $0x10,%esp
+ 4f9:	85 c0                	test   %eax,%eax
+ 4fb:	78 2b                	js     528 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4fd:	83 ec 08             	sub    $0x8,%esp
+ 500:	ff 75 0c             	pushl  0xc(%ebp)
+ 503:	89 c3                	mov    %eax,%ebx
+ 505:	50                   	push   %eax
+ 506:	e8 f0 00 00 00       	call   5fb <fstat>
+  close(fd);
+ 50b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 510:	e8 b6 00 00 00       	call   5cb <close>
+  return r;
+ 515:	83 c4 10             	add    $0x10,%esp
+}
+ 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 51b:	89 f0                	mov    %esi,%eax
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5d                   	pop    %ebp
+ 520:	c3                   	ret    
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 52d:	eb e9                	jmp    518 <stat+0x38>
+ 52f:	90                   	nop
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	53                   	push   %ebx
+ 538:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53b:	0f be 02             	movsbl (%edx),%eax
+ 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 541:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 544:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 549:	77 1a                	ja     565 <atoi+0x35>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 550:	83 c2 01             	add    $0x1,%edx
+ 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 02             	movsbl (%edx),%eax
+ 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	89 c8                	mov    %ecx,%eax
+ 567:	5b                   	pop    %ebx
+ 568:	5d                   	pop    %ebp
+ 569:	c3                   	ret    
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	8b 45 10             	mov    0x10(%ebp),%eax
+ 57b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 57e:	56                   	push   %esi
+ 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 582:	85 c0                	test   %eax,%eax
+ 584:	7e 0f                	jle    595 <memmove+0x25>
+ 586:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 588:	89 d7                	mov    %edx,%edi
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 f8                	cmp    %edi,%eax
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	89 d0                	mov    %edx,%eax
+ 598:	5f                   	pop    %edi
+ 599:	5d                   	pop    %ebp
+ 59a:	c3                   	ret    
+
+0000059b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 59b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <exit>:
+SYSCALL(exit)
+ 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <wait>:
+SYSCALL(wait)
+ 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <pipe>:
+SYSCALL(pipe)
+ 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <read>:
+SYSCALL(read)
+ 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <write>:
+SYSCALL(write)
+ 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <close>:
+SYSCALL(close)
+ 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <kill>:
+SYSCALL(kill)
+ 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <exec>:
+SYSCALL(exec)
+ 5db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <open>:
+SYSCALL(open)
+ 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <mknod>:
+SYSCALL(mknod)
+ 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <unlink>:
+SYSCALL(unlink)
+ 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <fstat>:
+SYSCALL(fstat)
+ 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <link>:
+SYSCALL(link)
+ 603:	b8 13 00 00 00       	mov    $0x13,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mkdir>:
+SYSCALL(mkdir)
+ 60b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <chdir>:
+SYSCALL(chdir)
+ 613:	b8 09 00 00 00       	mov    $0x9,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <dup>:
+SYSCALL(dup)
+ 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getpid>:
+SYSCALL(getpid)
+ 623:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <sbrk>:
+SYSCALL(sbrk)
+ 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <sleep>:
+SYSCALL(sleep)
+ 633:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <uptime>:
+SYSCALL(uptime)
+ 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <getNumProc>:
+SYSCALL(getNumProc)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 653:	b8 18 00 00 00       	mov    $0x18,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 65b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 663:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 66b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+
+00000673 <getCurrentPID>:
+ 673:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 678:	cd 40                	int    $0x40
+ 67a:	c3                   	ret    
+ 67b:	66 90                	xchg   %ax,%ax
+ 67d:	66 90                	xchg   %ax,%ax
+ 67f:	90                   	nop
+
+00000680 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 3c             	sub    $0x3c,%esp
+ 689:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 68c:	89 d1                	mov    %edx,%ecx
+{
+ 68e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 691:	85 d2                	test   %edx,%edx
+ 693:	0f 89 7f 00 00 00    	jns    718 <printint+0x98>
+ 699:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 69d:	74 79                	je     718 <printint+0x98>
+    neg = 1;
+ 69f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 6a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 6a8:	31 db                	xor    %ebx,%ebx
+ 6aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6b0:	89 c8                	mov    %ecx,%eax
+ 6b2:	31 d2                	xor    %edx,%edx
+ 6b4:	89 cf                	mov    %ecx,%edi
+ 6b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6b9:	0f b6 92 10 0d 00 00 	movzbl 0xd10(%edx),%edx
+ 6c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6c3:	89 d8                	mov    %ebx,%eax
+ 6c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6d1:	76 dd                	jbe    6b0 <printint+0x30>
+  if(neg)
+ 6d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6d6:	85 c9                	test   %ecx,%ecx
+ 6d8:	74 0c                	je     6e6 <printint+0x66>
+    buf[i++] = '-';
+ 6da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6ed:	eb 07                	jmp    6f6 <printint+0x76>
+ 6ef:	90                   	nop
+ 6f0:	0f b6 13             	movzbl (%ebx),%edx
+ 6f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6f6:	83 ec 04             	sub    $0x4,%esp
+ 6f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6fc:	6a 01                	push   $0x1
+ 6fe:	56                   	push   %esi
+ 6ff:	57                   	push   %edi
+ 700:	e8 be fe ff ff       	call   5c3 <write>
+  while(--i >= 0)
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	39 de                	cmp    %ebx,%esi
+ 70a:	75 e4                	jne    6f0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70f:	5b                   	pop    %ebx
+ 710:	5e                   	pop    %esi
+ 711:	5f                   	pop    %edi
+ 712:	5d                   	pop    %ebp
+ 713:	c3                   	ret    
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 718:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 71f:	eb 87                	jmp    6a8 <printint+0x28>
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72f:	90                   	nop
+
+00000730 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
+ 735:	89 e5                	mov    %esp,%ebp
+ 737:	57                   	push   %edi
+ 738:	56                   	push   %esi
+ 739:	53                   	push   %ebx
+ 73a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 73d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 740:	0f b6 1e             	movzbl (%esi),%ebx
+ 743:	84 db                	test   %bl,%bl
+ 745:	0f 84 b4 00 00 00    	je     7ff <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 74b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 74e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 751:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 754:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 756:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 759:	eb 33                	jmp    78e <printf+0x5e>
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+ 760:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 763:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 768:	83 f8 25             	cmp    $0x25,%eax
+ 76b:	74 17                	je     784 <printf+0x54>
+  write(fd, &c, 1);
+ 76d:	83 ec 04             	sub    $0x4,%esp
+ 770:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 773:	6a 01                	push   $0x1
+ 775:	57                   	push   %edi
+ 776:	ff 75 08             	pushl  0x8(%ebp)
+ 779:	e8 45 fe ff ff       	call   5c3 <write>
+ 77e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 781:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 784:	0f b6 1e             	movzbl (%esi),%ebx
+ 787:	83 c6 01             	add    $0x1,%esi
+ 78a:	84 db                	test   %bl,%bl
+ 78c:	74 71                	je     7ff <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 78e:	0f be cb             	movsbl %bl,%ecx
+ 791:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 794:	85 d2                	test   %edx,%edx
+ 796:	74 c8                	je     760 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 798:	83 fa 25             	cmp    $0x25,%edx
+ 79b:	75 e7                	jne    784 <printf+0x54>
+      if(c == 'd'){
+ 79d:	83 f8 64             	cmp    $0x64,%eax
+ 7a0:	0f 84 9a 00 00 00    	je     840 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 7a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 7ac:	83 f9 70             	cmp    $0x70,%ecx
+ 7af:	74 5f                	je     810 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7b1:	83 f8 73             	cmp    $0x73,%eax
+ 7b4:	0f 84 d6 00 00 00    	je     890 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7ba:	83 f8 63             	cmp    $0x63,%eax
+ 7bd:	0f 84 8d 00 00 00    	je     850 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7c3:	83 f8 25             	cmp    $0x25,%eax
+ 7c6:	0f 84 b4 00 00 00    	je     880 <printf+0x150>
+  write(fd, &c, 1);
+ 7cc:	83 ec 04             	sub    $0x4,%esp
+ 7cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7d3:	6a 01                	push   $0x1
+ 7d5:	57                   	push   %edi
+ 7d6:	ff 75 08             	pushl  0x8(%ebp)
+ 7d9:	e8 e5 fd ff ff       	call   5c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7de:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7e1:	83 c4 0c             	add    $0xc,%esp
+ 7e4:	6a 01                	push   $0x1
+ 7e6:	83 c6 01             	add    $0x1,%esi
+ 7e9:	57                   	push   %edi
+ 7ea:	ff 75 08             	pushl  0x8(%ebp)
+ 7ed:	e8 d1 fd ff ff       	call   5c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7f6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7f9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7fb:	84 db                	test   %bl,%bl
+ 7fd:	75 8f                	jne    78e <printf+0x5e>
+    }
+  }
+}
+ 7ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 810:	83 ec 0c             	sub    $0xc,%esp
+ 813:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 818:	6a 00                	push   $0x0
+ 81a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 81d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 820:	8b 13                	mov    (%ebx),%edx
+ 822:	e8 59 fe ff ff       	call   680 <printint>
+        ap++;
+ 827:	89 d8                	mov    %ebx,%eax
+ 829:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 82c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 82e:	83 c0 04             	add    $0x4,%eax
+ 831:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 834:	e9 4b ff ff ff       	jmp    784 <printf+0x54>
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 840:	83 ec 0c             	sub    $0xc,%esp
+ 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 848:	6a 01                	push   $0x1
+ 84a:	eb ce                	jmp    81a <printf+0xea>
+ 84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 850:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 853:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 856:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 858:	6a 01                	push   $0x1
+        ap++;
+ 85a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 85d:	57                   	push   %edi
+ 85e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 861:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 864:	e8 5a fd ff ff       	call   5c3 <write>
+        ap++;
+ 869:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 86c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 86f:	31 d2                	xor    %edx,%edx
+ 871:	e9 0e ff ff ff       	jmp    784 <printf+0x54>
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 880:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 883:	83 ec 04             	sub    $0x4,%esp
+ 886:	e9 59 ff ff ff       	jmp    7e4 <printf+0xb4>
+ 88b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 88f:	90                   	nop
+        s = (char*)*ap;
+ 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 893:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 895:	83 c0 04             	add    $0x4,%eax
+ 898:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 89b:	85 db                	test   %ebx,%ebx
+ 89d:	74 17                	je     8b6 <printf+0x186>
+        while(*s != 0){
+ 89f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 8a2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 8a4:	84 c0                	test   %al,%al
+ 8a6:	0f 84 d8 fe ff ff    	je     784 <printf+0x54>
+ 8ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8af:	89 de                	mov    %ebx,%esi
+ 8b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b4:	eb 1a                	jmp    8d0 <printf+0x1a0>
+          s = "(null)";
+ 8b6:	bb 06 0d 00 00       	mov    $0xd06,%ebx
+        while(*s != 0){
+ 8bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8c3:	89 de                	mov    %ebx,%esi
+ 8c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8cf:	90                   	nop
+  write(fd, &c, 1);
+ 8d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8d3:	83 c6 01             	add    $0x1,%esi
+ 8d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8d9:	6a 01                	push   $0x1
+ 8db:	57                   	push   %edi
+ 8dc:	53                   	push   %ebx
+ 8dd:	e8 e1 fc ff ff       	call   5c3 <write>
+        while(*s != 0){
+ 8e2:	0f b6 06             	movzbl (%esi),%eax
+ 8e5:	83 c4 10             	add    $0x10,%esp
+ 8e8:	84 c0                	test   %al,%al
+ 8ea:	75 e4                	jne    8d0 <printf+0x1a0>
+ 8ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8ef:	31 d2                	xor    %edx,%edx
+ 8f1:	e9 8e fe ff ff       	jmp    784 <printf+0x54>
+ 8f6:	66 90                	xchg   %ax,%ax
+ 8f8:	66 90                	xchg   %ax,%ax
+ 8fa:	66 90                	xchg   %ax,%ax
+ 8fc:	66 90                	xchg   %ax,%ax
+ 8fe:	66 90                	xchg   %ax,%ax
+
+00000900 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 900:	f3 0f 1e fb          	endbr32 
+ 904:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 905:	a1 40 11 00 00       	mov    0x1140,%eax
+{
+ 90a:	89 e5                	mov    %esp,%ebp
+ 90c:	57                   	push   %edi
+ 90d:	56                   	push   %esi
+ 90e:	53                   	push   %ebx
+ 90f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 912:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 914:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 917:	39 c8                	cmp    %ecx,%eax
+ 919:	73 15                	jae    930 <free+0x30>
+ 91b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 91f:	90                   	nop
+ 920:	39 d1                	cmp    %edx,%ecx
+ 922:	72 14                	jb     938 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 924:	39 d0                	cmp    %edx,%eax
+ 926:	73 10                	jae    938 <free+0x38>
+{
+ 928:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 92a:	8b 10                	mov    (%eax),%edx
+ 92c:	39 c8                	cmp    %ecx,%eax
+ 92e:	72 f0                	jb     920 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 930:	39 d0                	cmp    %edx,%eax
+ 932:	72 f4                	jb     928 <free+0x28>
+ 934:	39 d1                	cmp    %edx,%ecx
+ 936:	73 f0                	jae    928 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 fa                	cmp    %edi,%edx
+ 940:	74 1e                	je     960 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 942:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 945:	8b 50 04             	mov    0x4(%eax),%edx
+ 948:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 94b:	39 f1                	cmp    %esi,%ecx
+ 94d:	74 28                	je     977 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 94f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 951:	5b                   	pop    %ebx
+  freep = p;
+ 952:	a3 40 11 00 00       	mov    %eax,0x1140
+}
+ 957:	5e                   	pop    %esi
+ 958:	5f                   	pop    %edi
+ 959:	5d                   	pop    %ebp
+ 95a:	c3                   	ret    
+ 95b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 95f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 960:	03 72 04             	add    0x4(%edx),%esi
+ 963:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 966:	8b 10                	mov    (%eax),%edx
+ 968:	8b 12                	mov    (%edx),%edx
+ 96a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 96d:	8b 50 04             	mov    0x4(%eax),%edx
+ 970:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 973:	39 f1                	cmp    %esi,%ecx
+ 975:	75 d8                	jne    94f <free+0x4f>
+    p->s.size += bp->s.size;
+ 977:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 97a:	a3 40 11 00 00       	mov    %eax,0x1140
+    p->s.size += bp->s.size;
+ 97f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 982:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 985:	89 10                	mov    %edx,(%eax)
+}
+ 987:	5b                   	pop    %ebx
+ 988:	5e                   	pop    %esi
+ 989:	5f                   	pop    %edi
+ 98a:	5d                   	pop    %ebp
+ 98b:	c3                   	ret    
+ 98c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000990 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 99d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 9a0:	8b 3d 40 11 00 00    	mov    0x1140,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 9a9:	c1 ee 03             	shr    $0x3,%esi
+ 9ac:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 9af:	85 ff                	test   %edi,%edi
+ 9b1:	0f 84 a9 00 00 00    	je     a60 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9b7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bc:	39 f1                	cmp    %esi,%ecx
+ 9be:	73 6d                	jae    a2d <malloc+0x9d>
+ 9c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9cb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9d8:	eb 17                	jmp    9f1 <malloc+0x61>
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9e0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9e5:	39 f1                	cmp    %esi,%ecx
+ 9e7:	73 4f                	jae    a38 <malloc+0xa8>
+ 9e9:	8b 3d 40 11 00 00    	mov    0x1140,%edi
+ 9ef:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9f1:	39 c7                	cmp    %eax,%edi
+ 9f3:	75 eb                	jne    9e0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9f5:	83 ec 0c             	sub    $0xc,%esp
+ 9f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9fb:	e8 2b fc ff ff       	call   62b <sbrk>
+  if(p == (char*)-1)
+ a00:	83 c4 10             	add    $0x10,%esp
+ a03:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a06:	74 1b                	je     a23 <malloc+0x93>
+  hp->s.size = nu;
+ a08:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ a0b:	83 ec 0c             	sub    $0xc,%esp
+ a0e:	83 c0 08             	add    $0x8,%eax
+ a11:	50                   	push   %eax
+ a12:	e8 e9 fe ff ff       	call   900 <free>
+  return freep;
+ a17:	a1 40 11 00 00       	mov    0x1140,%eax
+      if((p = morecore(nunits)) == 0)
+ a1c:	83 c4 10             	add    $0x10,%esp
+ a1f:	85 c0                	test   %eax,%eax
+ a21:	75 bd                	jne    9e0 <malloc+0x50>
+        return 0;
+  }
+}
+ a23:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a26:	31 c0                	xor    %eax,%eax
+}
+ a28:	5b                   	pop    %ebx
+ a29:	5e                   	pop    %esi
+ a2a:	5f                   	pop    %edi
+ a2b:	5d                   	pop    %ebp
+ a2c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a2d:	89 c2                	mov    %eax,%edx
+ a2f:	89 f8                	mov    %edi,%eax
+ a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a38:	39 ce                	cmp    %ecx,%esi
+ a3a:	74 54                	je     a90 <malloc+0x100>
+        p->s.size -= nunits;
+ a3c:	29 f1                	sub    %esi,%ecx
+ a3e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a41:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a44:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a47:	a3 40 11 00 00       	mov    %eax,0x1140
+}
+ a4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a4f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a52:	5b                   	pop    %ebx
+ a53:	5e                   	pop    %esi
+ a54:	5f                   	pop    %edi
+ a55:	5d                   	pop    %ebp
+ a56:	c3                   	ret    
+ a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a5e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a60:	c7 05 40 11 00 00 44 	movl   $0x1144,0x1140
+ a67:	11 00 00 
+    base.s.size = 0;
+ a6a:	bf 44 11 00 00       	mov    $0x1144,%edi
+    base.s.ptr = freep = prevp = &base;
+ a6f:	c7 05 44 11 00 00 44 	movl   $0x1144,0x1144
+ a76:	11 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a79:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a7b:	c7 05 48 11 00 00 00 	movl   $0x0,0x1148
+ a82:	00 00 00 
+    if(p->s.size >= nunits){
+ a85:	e9 36 ff ff ff       	jmp    9c0 <malloc+0x30>
+ a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a90:	8b 0a                	mov    (%edx),%ecx
+ a92:	89 08                	mov    %ecx,(%eax)
+ a94:	eb b1                	jmp    a47 <malloc+0xb7>
+ a96:	66 90                	xchg   %ax,%ax
+ a98:	66 90                	xchg   %ax,%ax
+ a9a:	66 90                	xchg   %ax,%ax
+ a9c:	66 90                	xchg   %ax,%ax
+ a9e:	66 90                	xchg   %ax,%ax
+
+00000aa0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ aa0:	f3 0f 1e fb          	endbr32 
+ aa4:	55                   	push   %ebp
+ aa5:	b8 64 11 00 00       	mov    $0x1164,%eax
+ aaa:	89 e5                	mov    %esp,%ebp
+ aac:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ aaf:	89 15 60 11 00 00    	mov    %edx,0x1160
+    for (mti=1; mti<N; mti++)
+ ab5:	eb 0c                	jmp    ac3 <sgenrand+0x23>
+ ab7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ abe:	66 90                	xchg   %ax,%ax
+ ac0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ ac3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ ac9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ acb:	3d 1c 1b 00 00       	cmp    $0x1b1c,%eax
+ ad0:	75 ee                	jne    ac0 <sgenrand+0x20>
+ ad2:	c7 05 3c 11 00 00 70 	movl   $0x270,0x113c
+ ad9:	02 00 00 
+}
+ adc:	5d                   	pop    %ebp
+ add:	c3                   	ret    
+ ade:	66 90                	xchg   %ax,%ax
+
+00000ae0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ ae0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ ae4:	a1 3c 11 00 00       	mov    0x113c,%eax
+ ae9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ aee:	7f 3c                	jg     b2c <genrand+0x4c>
+ af0:	8d 50 01             	lea    0x1(%eax),%edx
+ af3:	8b 04 85 60 11 00 00 	mov    0x1160(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ afa:	89 15 3c 11 00 00    	mov    %edx,0x113c
+    y ^= TEMPERING_SHIFT_U(y);
+ b00:	89 c2                	mov    %eax,%edx
+ b02:	c1 ea 0b             	shr    $0xb,%edx
+ b05:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ b07:	89 d0                	mov    %edx,%eax
+ b09:	c1 e0 07             	shl    $0x7,%eax
+ b0c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ b11:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ b13:	89 d0                	mov    %edx,%eax
+ b15:	c1 e0 0f             	shl    $0xf,%eax
+ b18:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ b1d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ b1f:	89 c2                	mov    %eax,%edx
+ b21:	c1 ea 12             	shr    $0x12,%edx
+ b24:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ b26:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ b2b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ b2c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ b31:	0f 84 d2 00 00 00    	je     c09 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ b37:	31 c0                	xor    %eax,%eax
+ b39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b40:	8b 0c 85 60 11 00 00 	mov    0x1160(,%eax,4),%ecx
+ b47:	83 c0 01             	add    $0x1,%eax
+ b4a:	8b 14 85 60 11 00 00 	mov    0x1160(,%eax,4),%edx
+ b51:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b57:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b5d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ b5f:	89 d1                	mov    %edx,%ecx
+ b61:	83 e2 01             	and    $0x1,%edx
+ b64:	d1 e9                	shr    %ecx
+ b66:	33 0c 85 90 17 00 00 	xor    0x1790(,%eax,4),%ecx
+ b6d:	33 0c 95 24 0d 00 00 	xor    0xd24(,%edx,4),%ecx
+ b74:	89 0c 85 5c 11 00 00 	mov    %ecx,0x115c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ b7b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ b80:	75 be                	jne    b40 <genrand+0x60>
+ b82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b88:	8b 0c 85 60 11 00 00 	mov    0x1160(,%eax,4),%ecx
+ b8f:	83 c0 01             	add    $0x1,%eax
+ b92:	8b 14 85 60 11 00 00 	mov    0x1160(,%eax,4),%edx
+ b99:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b9f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ ba5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ ba7:	89 d1                	mov    %edx,%ecx
+ ba9:	83 e2 01             	and    $0x1,%edx
+ bac:	d1 e9                	shr    %ecx
+ bae:	33 0c 85 d0 0d 00 00 	xor    0xdd0(,%eax,4),%ecx
+ bb5:	33 0c 95 24 0d 00 00 	xor    0xd24(,%edx,4),%ecx
+ bbc:	89 0c 85 5c 11 00 00 	mov    %ecx,0x115c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ bc3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ bc8:	75 be                	jne    b88 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ bca:	a1 60 11 00 00       	mov    0x1160,%eax
+ bcf:	8b 0d 1c 1b 00 00    	mov    0x1b1c,%ecx
+ bd5:	89 c2                	mov    %eax,%edx
+ bd7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ bdd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ be3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ be5:	89 ca                	mov    %ecx,%edx
+ be7:	83 e1 01             	and    $0x1,%ecx
+ bea:	d1 ea                	shr    %edx
+ bec:	33 15 90 17 00 00    	xor    0x1790,%edx
+ bf2:	33 14 8d 24 0d 00 00 	xor    0xd24(,%ecx,4),%edx
+ bf9:	89 15 1c 1b 00 00    	mov    %edx,0x1b1c
+ bff:	ba 01 00 00 00       	mov    $0x1,%edx
+ c04:	e9 f1 fe ff ff       	jmp    afa <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ c09:	b8 64 11 00 00       	mov    $0x1164,%eax
+ c0e:	b9 1c 1b 00 00       	mov    $0x1b1c,%ecx
+ c13:	ba 05 11 00 00       	mov    $0x1105,%edx
+ c18:	c7 05 60 11 00 00 05 	movl   $0x1105,0x1160
+ c1f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ c22:	eb 07                	jmp    c2b <genrand+0x14b>
+ c24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ c28:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ c2b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ c31:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ c33:	39 c1                	cmp    %eax,%ecx
+ c35:	75 f1                	jne    c28 <genrand+0x148>
+ c37:	e9 fb fe ff ff       	jmp    b37 <genrand+0x57>
+ c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c40 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ c40:	f3 0f 1e fb          	endbr32 
+ c44:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ c45:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ c47:	89 e5                	mov    %esp,%ebp
+ c49:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ c4a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ c4d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ c4e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ c53:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c56:	89 d8                	mov    %ebx,%eax
+ c58:	f7 f1                	div    %ecx
+ c5a:	89 c6                	mov    %eax,%esi
+ c5c:	29 d3                	sub    %edx,%ebx
+ c5e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ c60:	e8 7b fe ff ff       	call   ae0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ c65:	39 d8                	cmp    %ebx,%eax
+ c67:	73 f7                	jae    c60 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ c69:	31 d2                	xor    %edx,%edx
+}
+ c6b:	5b                   	pop    %ebx
+  return x/bin_size;
+ c6c:	f7 f6                	div    %esi
+}
+ c6e:	5e                   	pop    %esi
+ c6f:	5d                   	pop    %ebp
+ c70:	c3                   	ret    
+ c71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c7f:	90                   	nop
+
+00000c80 <randomrange>:
+
+int randomrange(int low, int high){
+ c80:	f3 0f 1e fb          	endbr32 
+ c84:	55                   	push   %ebp
+ c85:	89 e5                	mov    %esp,%ebp
+ c87:	57                   	push   %edi
+ c88:	56                   	push   %esi
+ c89:	53                   	push   %ebx
+ c8a:	83 ec 0c             	sub    $0xc,%esp
+ c8d:	8b 75 08             	mov    0x8(%ebp),%esi
+ c90:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ c93:	39 f0                	cmp    %esi,%eax
+ c95:	7d 06                	jge    c9d <randomrange+0x1d>
+ c97:	89 f2                	mov    %esi,%edx
+ c99:	89 c6                	mov    %eax,%esi
+ c9b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ c9d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ c9f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ ca4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ ca6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ ca9:	89 d8                	mov    %ebx,%eax
+ cab:	f7 f1                	div    %ecx
+ cad:	89 c7                	mov    %eax,%edi
+ caf:	29 d3                	sub    %edx,%ebx
+ cb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ cb8:	e8 23 fe ff ff       	call   ae0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ cbd:	39 d8                	cmp    %ebx,%eax
+ cbf:	73 f7                	jae    cb8 <randomrange+0x38>
+  return x/bin_size;
+ cc1:	31 d2                	xor    %edx,%edx
+  return val;
+ cc3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ cc6:	f7 f7                	div    %edi
+ cc8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ cc9:	01 f0                	add    %esi,%eax
+ ccb:	5e                   	pop    %esi
+ ccc:	5f                   	pop    %edi
+ ccd:	5d                   	pop    %ebp
+ cce:	c3                   	ret    
diff -ruN xv6-public/grep.d xv6-public-partB_sjf/grep.d
--- xv6-public/grep.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/grep.d	2022-10-07 20:27:43.843114000 +0530
@@ -0,0 +1,2 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/grep.o and xv6-public-partB_sjf/grep.o differ
diff -ruN xv6-public/grep.sym xv6-public-partB_sjf/grep.sym
--- xv6-public/grep.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/grep.sym	2022-10-07 20:27:43.875114000 +0530
@@ -0,0 +1,78 @@
+00000000 .text
+00000cd0 .rodata
+00000d2c .eh_frame
+0000113c .data
+00001140 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000680 printint
+00000d10 digits.1105
+00000000 umalloc.c
+00001140 freep
+00001144 base
+00000000 random.c
+00001160 mt
+0000113c mti
+00000d24 mag01.989
+00000340 strcpy
+00000aa0 sgenrand
+00000730 printf
+00000570 memmove
+00000120 matchhere
+000005eb mknod
+00000460 gets
+00000623 getpid
+00000230 grep
+00000990 malloc
+00000633 sleep
+00000663 get_burst_time
+00000c40 random_at_most
+0000066b getCurrentInfo
+000005b3 pipe
+000005c3 write
+000005fb fstat
+000005d3 kill
+00000613 chdir
+000005db exec
+000005ab wait
+000005bb read
+000005f3 unlink
+0000059b fork
+0000062b sbrk
+0000063b uptime
+00001140 __bss_start
+00000400 memset
+00000000 main
+0000065b set_burst_time
+000000c0 matchstar
+00000370 strcmp
+0000061b dup
+00001b20 buf
+00000ae0 genrand
+00000643 getNumProc
+00000653 getProcInfo
+000004e0 stat
+00001140 _edata
+00001f20 _end
+000001c0 match
+00000603 link
+000005a3 exit
+0000064b getMaxPID
+00000530 atoi
+000003c0 strlen
+000005e3 open
+00000420 strchr
+00000673 getCurrentPID
+00000c80 randomrange
+0000060b mkdir
+000005cb close
+00000900 free
diff -ruN xv6-public/ide.d xv6-public-partB_sjf/ide.d
--- xv6-public/ide.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ide.d	2022-10-07 20:27:35.407040000 +0530
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files xv6-public/ide.o and xv6-public-partB_sjf/ide.o differ
Binary files xv6-public/_init and xv6-public-partB_sjf/_init differ
diff -ruN xv6-public/init.asm xv6-public-partB_sjf/init.asm
--- xv6-public/init.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/init.asm	2022-10-07 20:27:43.931115000 +0530
@@ -0,0 +1,1567 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	53                   	push   %ebx
+  12:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+  13:	83 ec 08             	sub    $0x8,%esp
+  16:	6a 02                	push   $0x2
+  18:	68 80 0a 00 00       	push   $0xa80
+  1d:	e8 71 03 00 00       	call   393 <open>
+  22:	83 c4 10             	add    $0x10,%esp
+  25:	85 c0                	test   %eax,%eax
+  27:	0f 88 9b 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  2d:	83 ec 0c             	sub    $0xc,%esp
+  30:	6a 00                	push   $0x0
+  32:	e8 94 03 00 00       	call   3cb <dup>
+  dup(0);  // stderr
+  37:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3e:	e8 88 03 00 00       	call   3cb <dup>
+  43:	83 c4 10             	add    $0x10,%esp
+  46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  4d:	8d 76 00             	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  50:	83 ec 08             	sub    $0x8,%esp
+  53:	68 88 0a 00 00       	push   $0xa88
+  58:	6a 01                	push   $0x1
+  5a:	e8 81 04 00 00       	call   4e0 <printf>
+    pid = fork();
+  5f:	e8 e7 02 00 00       	call   34b <fork>
+    if(pid < 0){
+  64:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  67:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  69:	85 c0                	test   %eax,%eax
+  6b:	78 24                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  6d:	74 35                	je     a4 <main+0xa4>
+  6f:	90                   	nop
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 e6 02 00 00       	call   35b <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 d7                	js     50 <main+0x50>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 d3                	je     50 <main+0x50>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 c7 0a 00 00       	push   $0xac7
+  85:	6a 01                	push   $0x1
+  87:	e8 54 04 00 00       	call   4e0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 9b 0a 00 00       	push   $0xa9b
+  98:	6a 01                	push   $0x1
+  9a:	e8 41 04 00 00       	call   4e0 <printf>
+      exit();
+  9f:	e8 af 02 00 00       	call   353 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 14 0e 00 00       	push   $0xe14
+  ab:	68 ae 0a 00 00       	push   $0xaae
+  b0:	e8 d6 02 00 00       	call   38b <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 b1 0a 00 00       	push   $0xab1
+  bc:	6a 01                	push   $0x1
+  be:	e8 1d 04 00 00       	call   4e0 <printf>
+      exit();
+  c3:	e8 8b 02 00 00       	call   353 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 80 0a 00 00       	push   $0xa80
+  d2:	e8 c4 02 00 00       	call   39b <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 80 0a 00 00       	push   $0xa80
+  e0:	e8 ae 02 00 00       	call   393 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 40 ff ff ff       	jmp    2d <main+0x2d>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  f5:	31 c0                	xor    %eax,%eax
+{
+  f7:	89 e5                	mov    %esp,%ebp
+  f9:	53                   	push   %ebx
+  fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  fd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 107:	83 c0 01             	add    $0x1,%eax
+ 10a:	84 d2                	test   %dl,%dl
+ 10c:	75 f2                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 10e:	89 c8                	mov    %ecx,%eax
+ 110:	5b                   	pop    %ebx
+ 111:	5d                   	pop    %ebp
+ 112:	c3                   	ret    
+ 113:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	53                   	push   %ebx
+ 128:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 12b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 12e:	0f b6 01             	movzbl (%ecx),%eax
+ 131:	0f b6 1a             	movzbl (%edx),%ebx
+ 134:	84 c0                	test   %al,%al
+ 136:	75 19                	jne    151 <strcmp+0x31>
+ 138:	eb 26                	jmp    160 <strcmp+0x40>
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 140:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 144:	83 c1 01             	add    $0x1,%ecx
+ 147:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 14a:	0f b6 1a             	movzbl (%edx),%ebx
+ 14d:	84 c0                	test   %al,%al
+ 14f:	74 0f                	je     160 <strcmp+0x40>
+ 151:	38 d8                	cmp    %bl,%al
+ 153:	74 eb                	je     140 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 155:	29 d8                	sub    %ebx,%eax
+}
+ 157:	5b                   	pop    %ebx
+ 158:	5d                   	pop    %ebp
+ 159:	c3                   	ret    
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 160:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 162:	29 d8                	sub    %ebx,%eax
+}
+ 164:	5b                   	pop    %ebx
+ 165:	5d                   	pop    %ebp
+ 166:	c3                   	ret    
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+
+00000170 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 17a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 17d:	74 21                	je     1a0 <strlen+0x30>
+ 17f:	31 c0                	xor    %eax,%eax
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 188:	83 c0 01             	add    $0x1,%eax
+ 18b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 18f:	89 c1                	mov    %eax,%ecx
+ 191:	75 f5                	jne    188 <strlen+0x18>
+    ;
+  return n;
+}
+ 193:	89 c8                	mov    %ecx,%eax
+ 195:	5d                   	pop    %ebp
+ 196:	c3                   	ret    
+ 197:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1a0:	31 c9                	xor    %ecx,%ecx
+}
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	89 c8                	mov    %ecx,%eax
+ 1a5:	c3                   	ret    
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001b0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1b0:	f3 0f 1e fb          	endbr32 
+ 1b4:	55                   	push   %ebp
+ 1b5:	89 e5                	mov    %esp,%ebp
+ 1b7:	57                   	push   %edi
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1bb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1be:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1c1:	89 d7                	mov    %edx,%edi
+ 1c3:	fc                   	cld    
+ 1c4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1c6:	89 d0                	mov    %edx,%eax
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1da:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1de:	0f b6 10             	movzbl (%eax),%edx
+ 1e1:	84 d2                	test   %dl,%dl
+ 1e3:	75 16                	jne    1fb <strchr+0x2b>
+ 1e5:	eb 21                	jmp    208 <strchr+0x38>
+ 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ee:	66 90                	xchg   %ax,%ax
+ 1f0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1f4:	83 c0 01             	add    $0x1,%eax
+ 1f7:	84 d2                	test   %dl,%dl
+ 1f9:	74 0d                	je     208 <strchr+0x38>
+    if(*s == c)
+ 1fb:	38 d1                	cmp    %dl,%cl
+ 1fd:	75 f1                	jne    1f0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 1ff:	5d                   	pop    %ebp
+ 200:	c3                   	ret    
+ 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 208:	31 c0                	xor    %eax,%eax
+}
+ 20a:	5d                   	pop    %ebp
+ 20b:	c3                   	ret    
+ 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000210 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 219:	31 f6                	xor    %esi,%esi
+{
+ 21b:	53                   	push   %ebx
+ 21c:	89 f3                	mov    %esi,%ebx
+ 21e:	83 ec 1c             	sub    $0x1c,%esp
+ 221:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 224:	eb 33                	jmp    259 <gets+0x49>
+ 226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 230:	83 ec 04             	sub    $0x4,%esp
+ 233:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 236:	6a 01                	push   $0x1
+ 238:	50                   	push   %eax
+ 239:	6a 00                	push   $0x0
+ 23b:	e8 2b 01 00 00       	call   36b <read>
+    if(cc < 1)
+ 240:	83 c4 10             	add    $0x10,%esp
+ 243:	85 c0                	test   %eax,%eax
+ 245:	7e 1c                	jle    263 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 247:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 24b:	83 c7 01             	add    $0x1,%edi
+ 24e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 251:	3c 0a                	cmp    $0xa,%al
+ 253:	74 23                	je     278 <gets+0x68>
+ 255:	3c 0d                	cmp    $0xd,%al
+ 257:	74 1f                	je     278 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 259:	83 c3 01             	add    $0x1,%ebx
+ 25c:	89 fe                	mov    %edi,%esi
+ 25e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 261:	7c cd                	jl     230 <gets+0x20>
+ 263:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 265:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 268:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 26b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 26e:	5b                   	pop    %ebx
+ 26f:	5e                   	pop    %esi
+ 270:	5f                   	pop    %edi
+ 271:	5d                   	pop    %ebp
+ 272:	c3                   	ret    
+ 273:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 277:	90                   	nop
+ 278:	8b 75 08             	mov    0x8(%ebp),%esi
+ 27b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27e:	01 de                	add    %ebx,%esi
+ 280:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 282:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 285:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 288:	5b                   	pop    %ebx
+ 289:	5e                   	pop    %esi
+ 28a:	5f                   	pop    %edi
+ 28b:	5d                   	pop    %ebp
+ 28c:	c3                   	ret    
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000290 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	56                   	push   %esi
+ 298:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	6a 00                	push   $0x0
+ 29e:	ff 75 08             	pushl  0x8(%ebp)
+ 2a1:	e8 ed 00 00 00       	call   393 <open>
+  if(fd < 0)
+ 2a6:	83 c4 10             	add    $0x10,%esp
+ 2a9:	85 c0                	test   %eax,%eax
+ 2ab:	78 2b                	js     2d8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2ad:	83 ec 08             	sub    $0x8,%esp
+ 2b0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2b3:	89 c3                	mov    %eax,%ebx
+ 2b5:	50                   	push   %eax
+ 2b6:	e8 f0 00 00 00       	call   3ab <fstat>
+  close(fd);
+ 2bb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2be:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2c0:	e8 b6 00 00 00       	call   37b <close>
+  return r;
+ 2c5:	83 c4 10             	add    $0x10,%esp
+}
+ 2c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2cb:	89 f0                	mov    %esi,%eax
+ 2cd:	5b                   	pop    %ebx
+ 2ce:	5e                   	pop    %esi
+ 2cf:	5d                   	pop    %ebp
+ 2d0:	c3                   	ret    
+ 2d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2d8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2dd:	eb e9                	jmp    2c8 <stat+0x38>
+ 2df:	90                   	nop
+
+000002e0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	53                   	push   %ebx
+ 2e8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2eb:	0f be 02             	movsbl (%edx),%eax
+ 2ee:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2f1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2f4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2f9:	77 1a                	ja     315 <atoi+0x35>
+ 2fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2ff:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 300:	83 c2 01             	add    $0x1,%edx
+ 303:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 306:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 30a:	0f be 02             	movsbl (%edx),%eax
+ 30d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 310:	80 fb 09             	cmp    $0x9,%bl
+ 313:	76 eb                	jbe    300 <atoi+0x20>
+  return n;
+}
+ 315:	89 c8                	mov    %ecx,%eax
+ 317:	5b                   	pop    %ebx
+ 318:	5d                   	pop    %ebp
+ 319:	c3                   	ret    
+ 31a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000320 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 320:	f3 0f 1e fb          	endbr32 
+ 324:	55                   	push   %ebp
+ 325:	89 e5                	mov    %esp,%ebp
+ 327:	57                   	push   %edi
+ 328:	8b 45 10             	mov    0x10(%ebp),%eax
+ 32b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 32e:	56                   	push   %esi
+ 32f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 332:	85 c0                	test   %eax,%eax
+ 334:	7e 0f                	jle    345 <memmove+0x25>
+ 336:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 338:	89 d7                	mov    %edx,%edi
+ 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 340:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 341:	39 f8                	cmp    %edi,%eax
+ 343:	75 fb                	jne    340 <memmove+0x20>
+  return vdst;
+}
+ 345:	5e                   	pop    %esi
+ 346:	89 d0                	mov    %edx,%eax
+ 348:	5f                   	pop    %edi
+ 349:	5d                   	pop    %ebp
+ 34a:	c3                   	ret    
+
+0000034b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 34b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <exit>:
+SYSCALL(exit)
+ 353:	b8 02 00 00 00       	mov    $0x2,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <wait>:
+SYSCALL(wait)
+ 35b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <pipe>:
+SYSCALL(pipe)
+ 363:	b8 04 00 00 00       	mov    $0x4,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <read>:
+SYSCALL(read)
+ 36b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <write>:
+SYSCALL(write)
+ 373:	b8 10 00 00 00       	mov    $0x10,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <close>:
+SYSCALL(close)
+ 37b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <kill>:
+SYSCALL(kill)
+ 383:	b8 06 00 00 00       	mov    $0x6,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <exec>:
+SYSCALL(exec)
+ 38b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <open>:
+SYSCALL(open)
+ 393:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <mknod>:
+SYSCALL(mknod)
+ 39b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <unlink>:
+SYSCALL(unlink)
+ 3a3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <fstat>:
+SYSCALL(fstat)
+ 3ab:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <link>:
+SYSCALL(link)
+ 3b3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mkdir>:
+SYSCALL(mkdir)
+ 3bb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <chdir>:
+SYSCALL(chdir)
+ 3c3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <dup>:
+SYSCALL(dup)
+ 3cb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <getpid>:
+SYSCALL(getpid)
+ 3d3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <sbrk>:
+SYSCALL(sbrk)
+ 3db:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <sleep>:
+SYSCALL(sleep)
+ 3e3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <uptime>:
+SYSCALL(uptime)
+ 3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <getNumProc>:
+SYSCALL(getNumProc)
+ 3f3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <getMaxPID>:
+SYSCALL(getMaxPID)
+ 3fb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 403:	b8 18 00 00 00       	mov    $0x18,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 40b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 413:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 41b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getCurrentPID>:
+ 423:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+ 42b:	66 90                	xchg   %ax,%ax
+ 42d:	66 90                	xchg   %ax,%ax
+ 42f:	90                   	nop
+
+00000430 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 3c             	sub    $0x3c,%esp
+ 439:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 43c:	89 d1                	mov    %edx,%ecx
+{
+ 43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 441:	85 d2                	test   %edx,%edx
+ 443:	0f 89 7f 00 00 00    	jns    4c8 <printint+0x98>
+ 449:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 44d:	74 79                	je     4c8 <printint+0x98>
+    neg = 1;
+ 44f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 456:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 458:	31 db                	xor    %ebx,%ebx
+ 45a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 460:	89 c8                	mov    %ecx,%eax
+ 462:	31 d2                	xor    %edx,%edx
+ 464:	89 cf                	mov    %ecx,%edi
+ 466:	f7 75 c4             	divl   -0x3c(%ebp)
+ 469:	0f b6 92 d8 0a 00 00 	movzbl 0xad8(%edx),%edx
+ 470:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 473:	89 d8                	mov    %ebx,%eax
+ 475:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 478:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 47b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 47e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 481:	76 dd                	jbe    460 <printint+0x30>
+  if(neg)
+ 483:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 486:	85 c9                	test   %ecx,%ecx
+ 488:	74 0c                	je     496 <printint+0x66>
+    buf[i++] = '-';
+ 48a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 48f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 491:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 496:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 499:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 49d:	eb 07                	jmp    4a6 <printint+0x76>
+ 49f:	90                   	nop
+ 4a0:	0f b6 13             	movzbl (%ebx),%edx
+ 4a3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4a6:	83 ec 04             	sub    $0x4,%esp
+ 4a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4ac:	6a 01                	push   $0x1
+ 4ae:	56                   	push   %esi
+ 4af:	57                   	push   %edi
+ 4b0:	e8 be fe ff ff       	call   373 <write>
+  while(--i >= 0)
+ 4b5:	83 c4 10             	add    $0x10,%esp
+ 4b8:	39 de                	cmp    %ebx,%esi
+ 4ba:	75 e4                	jne    4a0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bf:	5b                   	pop    %ebx
+ 4c0:	5e                   	pop    %esi
+ 4c1:	5f                   	pop    %edi
+ 4c2:	5d                   	pop    %ebp
+ 4c3:	c3                   	ret    
+ 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4cf:	eb 87                	jmp    458 <printint+0x28>
+ 4d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
+
+000004e0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	57                   	push   %edi
+ 4e8:	56                   	push   %esi
+ 4e9:	53                   	push   %ebx
+ 4ea:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4ed:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4f0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4f3:	84 db                	test   %bl,%bl
+ 4f5:	0f 84 b4 00 00 00    	je     5af <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 4fb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4fe:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 501:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 504:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 506:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 509:	eb 33                	jmp    53e <printf+0x5e>
+ 50b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+ 510:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 513:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	74 17                	je     534 <printf+0x54>
+  write(fd, &c, 1);
+ 51d:	83 ec 04             	sub    $0x4,%esp
+ 520:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 523:	6a 01                	push   $0x1
+ 525:	57                   	push   %edi
+ 526:	ff 75 08             	pushl  0x8(%ebp)
+ 529:	e8 45 fe ff ff       	call   373 <write>
+ 52e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 531:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 534:	0f b6 1e             	movzbl (%esi),%ebx
+ 537:	83 c6 01             	add    $0x1,%esi
+ 53a:	84 db                	test   %bl,%bl
+ 53c:	74 71                	je     5af <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 53e:	0f be cb             	movsbl %bl,%ecx
+ 541:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 544:	85 d2                	test   %edx,%edx
+ 546:	74 c8                	je     510 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 548:	83 fa 25             	cmp    $0x25,%edx
+ 54b:	75 e7                	jne    534 <printf+0x54>
+      if(c == 'd'){
+ 54d:	83 f8 64             	cmp    $0x64,%eax
+ 550:	0f 84 9a 00 00 00    	je     5f0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 556:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 55c:	83 f9 70             	cmp    $0x70,%ecx
+ 55f:	74 5f                	je     5c0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 561:	83 f8 73             	cmp    $0x73,%eax
+ 564:	0f 84 d6 00 00 00    	je     640 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 56a:	83 f8 63             	cmp    $0x63,%eax
+ 56d:	0f 84 8d 00 00 00    	je     600 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 573:	83 f8 25             	cmp    $0x25,%eax
+ 576:	0f 84 b4 00 00 00    	je     630 <printf+0x150>
+  write(fd, &c, 1);
+ 57c:	83 ec 04             	sub    $0x4,%esp
+ 57f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 583:	6a 01                	push   $0x1
+ 585:	57                   	push   %edi
+ 586:	ff 75 08             	pushl  0x8(%ebp)
+ 589:	e8 e5 fd ff ff       	call   373 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 58e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 591:	83 c4 0c             	add    $0xc,%esp
+ 594:	6a 01                	push   $0x1
+ 596:	83 c6 01             	add    $0x1,%esi
+ 599:	57                   	push   %edi
+ 59a:	ff 75 08             	pushl  0x8(%ebp)
+ 59d:	e8 d1 fd ff ff       	call   373 <write>
+  for(i = 0; fmt[i]; i++){
+ 5a2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5a6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5a9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5ab:	84 db                	test   %bl,%bl
+ 5ad:	75 8f                	jne    53e <printf+0x5e>
+    }
+  }
+}
+ 5af:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5b2:	5b                   	pop    %ebx
+ 5b3:	5e                   	pop    %esi
+ 5b4:	5f                   	pop    %edi
+ 5b5:	5d                   	pop    %ebp
+ 5b6:	c3                   	ret    
+ 5b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5be:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c8:	6a 00                	push   $0x0
+ 5ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5cd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5d0:	8b 13                	mov    (%ebx),%edx
+ 5d2:	e8 59 fe ff ff       	call   430 <printint>
+        ap++;
+ 5d7:	89 d8                	mov    %ebx,%eax
+ 5d9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5dc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5de:	83 c0 04             	add    $0x4,%eax
+ 5e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5e4:	e9 4b ff ff ff       	jmp    534 <printf+0x54>
+ 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5f8:	6a 01                	push   $0x1
+ 5fa:	eb ce                	jmp    5ca <printf+0xea>
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 600:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 603:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 606:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 608:	6a 01                	push   $0x1
+        ap++;
+ 60a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 60d:	57                   	push   %edi
+ 60e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 611:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 614:	e8 5a fd ff ff       	call   373 <write>
+        ap++;
+ 619:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 61c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 0e ff ff ff       	jmp    534 <printf+0x54>
+ 626:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 630:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 633:	83 ec 04             	sub    $0x4,%esp
+ 636:	e9 59 ff ff ff       	jmp    594 <printf+0xb4>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+        s = (char*)*ap;
+ 640:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 643:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 645:	83 c0 04             	add    $0x4,%eax
+ 648:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 64b:	85 db                	test   %ebx,%ebx
+ 64d:	74 17                	je     666 <printf+0x186>
+        while(*s != 0){
+ 64f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 652:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 654:	84 c0                	test   %al,%al
+ 656:	0f 84 d8 fe ff ff    	je     534 <printf+0x54>
+ 65c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 65f:	89 de                	mov    %ebx,%esi
+ 661:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 664:	eb 1a                	jmp    680 <printf+0x1a0>
+          s = "(null)";
+ 666:	bb d0 0a 00 00       	mov    $0xad0,%ebx
+        while(*s != 0){
+ 66b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 66e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 673:	89 de                	mov    %ebx,%esi
+ 675:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+  write(fd, &c, 1);
+ 680:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 683:	83 c6 01             	add    $0x1,%esi
+ 686:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 689:	6a 01                	push   $0x1
+ 68b:	57                   	push   %edi
+ 68c:	53                   	push   %ebx
+ 68d:	e8 e1 fc ff ff       	call   373 <write>
+        while(*s != 0){
+ 692:	0f b6 06             	movzbl (%esi),%eax
+ 695:	83 c4 10             	add    $0x10,%esp
+ 698:	84 c0                	test   %al,%al
+ 69a:	75 e4                	jne    680 <printf+0x1a0>
+ 69c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 69f:	31 d2                	xor    %edx,%edx
+ 6a1:	e9 8e fe ff ff       	jmp    534 <printf+0x54>
+ 6a6:	66 90                	xchg   %ax,%ax
+ 6a8:	66 90                	xchg   %ax,%ax
+ 6aa:	66 90                	xchg   %ax,%ax
+ 6ac:	66 90                	xchg   %ax,%ax
+ 6ae:	66 90                	xchg   %ax,%ax
+
+000006b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b5:	a1 20 0e 00 00       	mov    0xe20,%eax
+{
+ 6ba:	89 e5                	mov    %esp,%ebp
+ 6bc:	57                   	push   %edi
+ 6bd:	56                   	push   %esi
+ 6be:	53                   	push   %ebx
+ 6bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6c2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6c4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c7:	39 c8                	cmp    %ecx,%eax
+ 6c9:	73 15                	jae    6e0 <free+0x30>
+ 6cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
+ 6d0:	39 d1                	cmp    %edx,%ecx
+ 6d2:	72 14                	jb     6e8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d4:	39 d0                	cmp    %edx,%eax
+ 6d6:	73 10                	jae    6e8 <free+0x38>
+{
+ 6d8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6da:	8b 10                	mov    (%eax),%edx
+ 6dc:	39 c8                	cmp    %ecx,%eax
+ 6de:	72 f0                	jb     6d0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e0:	39 d0                	cmp    %edx,%eax
+ 6e2:	72 f4                	jb     6d8 <free+0x28>
+ 6e4:	39 d1                	cmp    %edx,%ecx
+ 6e6:	73 f0                	jae    6d8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ee:	39 fa                	cmp    %edi,%edx
+ 6f0:	74 1e                	je     710 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6f2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6f5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6fb:	39 f1                	cmp    %esi,%ecx
+ 6fd:	74 28                	je     727 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6ff:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 701:	5b                   	pop    %ebx
+  freep = p;
+ 702:	a3 20 0e 00 00       	mov    %eax,0xe20
+}
+ 707:	5e                   	pop    %esi
+ 708:	5f                   	pop    %edi
+ 709:	5d                   	pop    %ebp
+ 70a:	c3                   	ret    
+ 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 710:	03 72 04             	add    0x4(%edx),%esi
+ 713:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 716:	8b 10                	mov    (%eax),%edx
+ 718:	8b 12                	mov    (%edx),%edx
+ 71a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 71d:	8b 50 04             	mov    0x4(%eax),%edx
+ 720:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 723:	39 f1                	cmp    %esi,%ecx
+ 725:	75 d8                	jne    6ff <free+0x4f>
+    p->s.size += bp->s.size;
+ 727:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 72a:	a3 20 0e 00 00       	mov    %eax,0xe20
+    p->s.size += bp->s.size;
+ 72f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 732:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 735:	89 10                	mov    %edx,(%eax)
+}
+ 737:	5b                   	pop    %ebx
+ 738:	5e                   	pop    %esi
+ 739:	5f                   	pop    %edi
+ 73a:	5d                   	pop    %ebp
+ 73b:	c3                   	ret    
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000740 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 740:	f3 0f 1e fb          	endbr32 
+ 744:	55                   	push   %ebp
+ 745:	89 e5                	mov    %esp,%ebp
+ 747:	57                   	push   %edi
+ 748:	56                   	push   %esi
+ 749:	53                   	push   %ebx
+ 74a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 74d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 750:	8b 3d 20 0e 00 00    	mov    0xe20,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 756:	8d 70 07             	lea    0x7(%eax),%esi
+ 759:	c1 ee 03             	shr    $0x3,%esi
+ 75c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 75f:	85 ff                	test   %edi,%edi
+ 761:	0f 84 a9 00 00 00    	je     810 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 767:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 769:	8b 48 04             	mov    0x4(%eax),%ecx
+ 76c:	39 f1                	cmp    %esi,%ecx
+ 76e:	73 6d                	jae    7dd <malloc+0x9d>
+ 770:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 776:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 77b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 77e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 785:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 788:	eb 17                	jmp    7a1 <malloc+0x61>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 790:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 792:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 795:	39 f1                	cmp    %esi,%ecx
+ 797:	73 4f                	jae    7e8 <malloc+0xa8>
+ 799:	8b 3d 20 0e 00 00    	mov    0xe20,%edi
+ 79f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7a1:	39 c7                	cmp    %eax,%edi
+ 7a3:	75 eb                	jne    790 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7a5:	83 ec 0c             	sub    $0xc,%esp
+ 7a8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7ab:	e8 2b fc ff ff       	call   3db <sbrk>
+  if(p == (char*)-1)
+ 7b0:	83 c4 10             	add    $0x10,%esp
+ 7b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7b6:	74 1b                	je     7d3 <malloc+0x93>
+  hp->s.size = nu;
+ 7b8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7bb:	83 ec 0c             	sub    $0xc,%esp
+ 7be:	83 c0 08             	add    $0x8,%eax
+ 7c1:	50                   	push   %eax
+ 7c2:	e8 e9 fe ff ff       	call   6b0 <free>
+  return freep;
+ 7c7:	a1 20 0e 00 00       	mov    0xe20,%eax
+      if((p = morecore(nunits)) == 0)
+ 7cc:	83 c4 10             	add    $0x10,%esp
+ 7cf:	85 c0                	test   %eax,%eax
+ 7d1:	75 bd                	jne    790 <malloc+0x50>
+        return 0;
+  }
+}
+ 7d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7d6:	31 c0                	xor    %eax,%eax
+}
+ 7d8:	5b                   	pop    %ebx
+ 7d9:	5e                   	pop    %esi
+ 7da:	5f                   	pop    %edi
+ 7db:	5d                   	pop    %ebp
+ 7dc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7dd:	89 c2                	mov    %eax,%edx
+ 7df:	89 f8                	mov    %edi,%eax
+ 7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7e8:	39 ce                	cmp    %ecx,%esi
+ 7ea:	74 54                	je     840 <malloc+0x100>
+        p->s.size -= nunits;
+ 7ec:	29 f1                	sub    %esi,%ecx
+ 7ee:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 7f1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 7f4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 7f7:	a3 20 0e 00 00       	mov    %eax,0xe20
+}
+ 7fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7ff:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 810:	c7 05 20 0e 00 00 24 	movl   $0xe24,0xe20
+ 817:	0e 00 00 
+    base.s.size = 0;
+ 81a:	bf 24 0e 00 00       	mov    $0xe24,%edi
+    base.s.ptr = freep = prevp = &base;
+ 81f:	c7 05 24 0e 00 00 24 	movl   $0xe24,0xe24
+ 826:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 829:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 82b:	c7 05 28 0e 00 00 00 	movl   $0x0,0xe28
+ 832:	00 00 00 
+    if(p->s.size >= nunits){
+ 835:	e9 36 ff ff ff       	jmp    770 <malloc+0x30>
+ 83a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 840:	8b 0a                	mov    (%edx),%ecx
+ 842:	89 08                	mov    %ecx,(%eax)
+ 844:	eb b1                	jmp    7f7 <malloc+0xb7>
+ 846:	66 90                	xchg   %ax,%ax
+ 848:	66 90                	xchg   %ax,%ax
+ 84a:	66 90                	xchg   %ax,%ax
+ 84c:	66 90                	xchg   %ax,%ax
+ 84e:	66 90                	xchg   %ax,%ax
+
+00000850 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 850:	f3 0f 1e fb          	endbr32 
+ 854:	55                   	push   %ebp
+ 855:	b8 44 0e 00 00       	mov    $0xe44,%eax
+ 85a:	89 e5                	mov    %esp,%ebp
+ 85c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 85f:	89 15 40 0e 00 00    	mov    %edx,0xe40
+    for (mti=1; mti<N; mti++)
+ 865:	eb 0c                	jmp    873 <sgenrand+0x23>
+ 867:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 86e:	66 90                	xchg   %ax,%ax
+ 870:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 873:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 879:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 87b:	3d fc 17 00 00       	cmp    $0x17fc,%eax
+ 880:	75 ee                	jne    870 <sgenrand+0x20>
+ 882:	c7 05 1c 0e 00 00 70 	movl   $0x270,0xe1c
+ 889:	02 00 00 
+}
+ 88c:	5d                   	pop    %ebp
+ 88d:	c3                   	ret    
+ 88e:	66 90                	xchg   %ax,%ax
+
+00000890 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 890:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 894:	a1 1c 0e 00 00       	mov    0xe1c,%eax
+ 899:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 89e:	7f 3c                	jg     8dc <genrand+0x4c>
+ 8a0:	8d 50 01             	lea    0x1(%eax),%edx
+ 8a3:	8b 04 85 40 0e 00 00 	mov    0xe40(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 8aa:	89 15 1c 0e 00 00    	mov    %edx,0xe1c
+    y ^= TEMPERING_SHIFT_U(y);
+ 8b0:	89 c2                	mov    %eax,%edx
+ 8b2:	c1 ea 0b             	shr    $0xb,%edx
+ 8b5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 8b7:	89 d0                	mov    %edx,%eax
+ 8b9:	c1 e0 07             	shl    $0x7,%eax
+ 8bc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 8c1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 8c3:	89 d0                	mov    %edx,%eax
+ 8c5:	c1 e0 0f             	shl    $0xf,%eax
+ 8c8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 8cd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 8cf:	89 c2                	mov    %eax,%edx
+ 8d1:	c1 ea 12             	shr    $0x12,%edx
+ 8d4:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 8d6:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 8db:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 8dc:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 8e1:	0f 84 d2 00 00 00    	je     9b9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 8e7:	31 c0                	xor    %eax,%eax
+ 8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8f0:	8b 0c 85 40 0e 00 00 	mov    0xe40(,%eax,4),%ecx
+ 8f7:	83 c0 01             	add    $0x1,%eax
+ 8fa:	8b 14 85 40 0e 00 00 	mov    0xe40(,%eax,4),%edx
+ 901:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 907:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 90d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 90f:	89 d1                	mov    %edx,%ecx
+ 911:	83 e2 01             	and    $0x1,%edx
+ 914:	d1 e9                	shr    %ecx
+ 916:	33 0c 85 70 14 00 00 	xor    0x1470(,%eax,4),%ecx
+ 91d:	33 0c 95 ec 0a 00 00 	xor    0xaec(,%edx,4),%ecx
+ 924:	89 0c 85 3c 0e 00 00 	mov    %ecx,0xe3c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 92b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 930:	75 be                	jne    8f0 <genrand+0x60>
+ 932:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 938:	8b 0c 85 40 0e 00 00 	mov    0xe40(,%eax,4),%ecx
+ 93f:	83 c0 01             	add    $0x1,%eax
+ 942:	8b 14 85 40 0e 00 00 	mov    0xe40(,%eax,4),%edx
+ 949:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 94f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 955:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 957:	89 d1                	mov    %edx,%ecx
+ 959:	83 e2 01             	and    $0x1,%edx
+ 95c:	d1 e9                	shr    %ecx
+ 95e:	33 0c 85 b0 0a 00 00 	xor    0xab0(,%eax,4),%ecx
+ 965:	33 0c 95 ec 0a 00 00 	xor    0xaec(,%edx,4),%ecx
+ 96c:	89 0c 85 3c 0e 00 00 	mov    %ecx,0xe3c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 973:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 978:	75 be                	jne    938 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 97a:	a1 40 0e 00 00       	mov    0xe40,%eax
+ 97f:	8b 0d fc 17 00 00    	mov    0x17fc,%ecx
+ 985:	89 c2                	mov    %eax,%edx
+ 987:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 98d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 993:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 995:	89 ca                	mov    %ecx,%edx
+ 997:	83 e1 01             	and    $0x1,%ecx
+ 99a:	d1 ea                	shr    %edx
+ 99c:	33 15 70 14 00 00    	xor    0x1470,%edx
+ 9a2:	33 14 8d ec 0a 00 00 	xor    0xaec(,%ecx,4),%edx
+ 9a9:	89 15 fc 17 00 00    	mov    %edx,0x17fc
+ 9af:	ba 01 00 00 00       	mov    $0x1,%edx
+ 9b4:	e9 f1 fe ff ff       	jmp    8aa <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 9b9:	b8 44 0e 00 00       	mov    $0xe44,%eax
+ 9be:	b9 fc 17 00 00       	mov    $0x17fc,%ecx
+ 9c3:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 9c8:	c7 05 40 0e 00 00 05 	movl   $0x1105,0xe40
+ 9cf:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 9d2:	eb 07                	jmp    9db <genrand+0x14b>
+ 9d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9d8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 9db:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 9e1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 9e3:	39 c1                	cmp    %eax,%ecx
+ 9e5:	75 f1                	jne    9d8 <genrand+0x148>
+ 9e7:	e9 fb fe ff ff       	jmp    8e7 <genrand+0x57>
+ 9ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000009f0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 9f0:	f3 0f 1e fb          	endbr32 
+ 9f4:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 9f5:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 9f7:	89 e5                	mov    %esp,%ebp
+ 9f9:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 9fa:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 9fd:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 9fe:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a03:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a06:	89 d8                	mov    %ebx,%eax
+ a08:	f7 f1                	div    %ecx
+ a0a:	89 c6                	mov    %eax,%esi
+ a0c:	29 d3                	sub    %edx,%ebx
+ a0e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ a10:	e8 7b fe ff ff       	call   890 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a15:	39 d8                	cmp    %ebx,%eax
+ a17:	73 f7                	jae    a10 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a19:	31 d2                	xor    %edx,%edx
+}
+ a1b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a1c:	f7 f6                	div    %esi
+}
+ a1e:	5e                   	pop    %esi
+ a1f:	5d                   	pop    %ebp
+ a20:	c3                   	ret    
+ a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a2f:	90                   	nop
+
+00000a30 <randomrange>:
+
+int randomrange(int low, int high){
+ a30:	f3 0f 1e fb          	endbr32 
+ a34:	55                   	push   %ebp
+ a35:	89 e5                	mov    %esp,%ebp
+ a37:	57                   	push   %edi
+ a38:	56                   	push   %esi
+ a39:	53                   	push   %ebx
+ a3a:	83 ec 0c             	sub    $0xc,%esp
+ a3d:	8b 75 08             	mov    0x8(%ebp),%esi
+ a40:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a43:	39 f0                	cmp    %esi,%eax
+ a45:	7d 06                	jge    a4d <randomrange+0x1d>
+ a47:	89 f2                	mov    %esi,%edx
+ a49:	89 c6                	mov    %eax,%esi
+ a4b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a4d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a4f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a54:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a56:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a59:	89 d8                	mov    %ebx,%eax
+ a5b:	f7 f1                	div    %ecx
+ a5d:	89 c7                	mov    %eax,%edi
+ a5f:	29 d3                	sub    %edx,%ebx
+ a61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ a68:	e8 23 fe ff ff       	call   890 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a6d:	39 d8                	cmp    %ebx,%eax
+ a6f:	73 f7                	jae    a68 <randomrange+0x38>
+  return x/bin_size;
+ a71:	31 d2                	xor    %edx,%edx
+  return val;
+ a73:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a76:	f7 f7                	div    %edi
+ a78:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a79:	01 f0                	add    %esi,%eax
+ a7b:	5e                   	pop    %esi
+ a7c:	5f                   	pop    %edi
+ a7d:	5d                   	pop    %ebp
+ a7e:	c3                   	ret    
Binary files xv6-public/initcode and xv6-public-partB_sjf/initcode differ
diff -ruN xv6-public/initcode.asm xv6-public-partB_sjf/initcode.asm
--- xv6-public/initcode.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/initcode.asm	2022-10-07 20:27:37.255056000 +0530
@@ -0,0 +1,43 @@
+
+initcode.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -ruN xv6-public/initcode.d xv6-public-partB_sjf/initcode.d
--- xv6-public/initcode.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/initcode.d	2022-10-07 20:27:37.239056000 +0530
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Binary files xv6-public/initcode.o and xv6-public-partB_sjf/initcode.o differ
Binary files xv6-public/initcode.out and xv6-public-partB_sjf/initcode.out differ
diff -ruN xv6-public/init.d xv6-public-partB_sjf/init.d
--- xv6-public/init.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/init.d	2022-10-07 20:27:43.907115000 +0530
@@ -0,0 +1,2 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h fcntl.h
Binary files xv6-public/init.o and xv6-public-partB_sjf/init.o differ
diff -ruN xv6-public/init.sym xv6-public-partB_sjf/init.sym
--- xv6-public/init.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/init.sym	2022-10-07 20:27:43.935115000 +0530
@@ -0,0 +1,74 @@
+00000000 .text
+00000a80 .rodata
+00000af4 .eh_frame
+00000e14 .data
+00000e20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+00000430 printint
+00000ad8 digits.1105
+00000000 umalloc.c
+00000e20 freep
+00000e24 base
+00000000 random.c
+00000e40 mt
+00000e1c mti
+00000aec mag01.989
+000000f0 strcpy
+00000850 sgenrand
+000004e0 printf
+00000e14 argv
+00000320 memmove
+0000039b mknod
+00000210 gets
+000003d3 getpid
+00000740 malloc
+000003e3 sleep
+00000413 get_burst_time
+000009f0 random_at_most
+0000041b getCurrentInfo
+00000363 pipe
+00000373 write
+000003ab fstat
+00000383 kill
+000003c3 chdir
+0000038b exec
+0000035b wait
+0000036b read
+000003a3 unlink
+0000034b fork
+000003db sbrk
+000003eb uptime
+00000e20 __bss_start
+000001b0 memset
+00000000 main
+0000040b set_burst_time
+00000120 strcmp
+000003cb dup
+00000890 genrand
+000003f3 getNumProc
+00000403 getProcInfo
+00000290 stat
+00000e20 _edata
+00001800 _end
+000003b3 link
+00000353 exit
+000003fb getMaxPID
+000002e0 atoi
+00000170 strlen
+00000393 open
+000001d0 strchr
+00000423 getCurrentPID
+00000a30 randomrange
+000003bb mkdir
+0000037b close
+000006b0 free
diff -ruN xv6-public/ioapic.d xv6-public-partB_sjf/ioapic.d
--- xv6-public/ioapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ioapic.d	2022-10-07 20:27:35.455040000 +0530
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files xv6-public/ioapic.o and xv6-public-partB_sjf/ioapic.o differ
Binary files xv6-public/_ioProcTester and xv6-public-partB_sjf/_ioProcTester differ
diff -ruN xv6-public/ioProcTester.asm xv6-public-partB_sjf/ioProcTester.asm
--- xv6-public/ioProcTester.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ioProcTester.asm	2022-10-07 20:27:45.395128000 +0530
@@ -0,0 +1,1665 @@
+
+_ioProcTester:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argv, char* argc[]){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 28             	sub    $0x28,%esp
+
+	if(argv<2){
+  18:	83 39 01             	cmpl   $0x1,(%ecx)
+main(int argv, char* argc[]){
+  1b:	8b 41 04             	mov    0x4(%ecx),%eax
+	if(argv<2){
+  1e:	7e 3c                	jle    5c <main+0x5c>
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+  20:	83 ec 0c             	sub    $0xc,%esp
+  23:	ff 70 04             	pushl  0x4(%eax)
+  26:	e8 75 03 00 00       	call   3a0 <atoi>
+
+	int burst_times[n];
+  2b:	83 c4 10             	add    $0x10,%esp
+	int n=atoi(argc[1]);
+  2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+	int burst_times[n];
+  31:	8d 04 85 0f 00 00 00 	lea    0xf(,%eax,4),%eax
+  38:	89 e6                	mov    %esp,%esi
+  3a:	89 c2                	mov    %eax,%edx
+  3c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  41:	29 c6                	sub    %eax,%esi
+  43:	83 e2 f0             	and    $0xfffffff0,%edx
+  46:	89 f0                	mov    %esi,%eax
+  48:	39 c4                	cmp    %eax,%esp
+  4a:	74 23                	je     6f <main+0x6f>
+  4c:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  52:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  59:	00 
+  5a:	eb ec                	jmp    48 <main+0x48>
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+  5c:	51                   	push   %ecx
+  5d:	51                   	push   %ecx
+  5e:	68 40 0b 00 00       	push   $0xb40
+  63:	6a 01                	push   $0x1
+  65:	e8 36 05 00 00       	call   5a0 <printf>
+		exit();
+  6a:	e8 a4 03 00 00       	call   413 <exit>
+	int burst_times[n];
+  6f:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  75:	29 d4                	sub    %edx,%esp
+  77:	85 d2                	test   %edx,%edx
+  79:	74 05                	je     80 <main+0x80>
+  7b:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+
+	for(int i=0;i<n;i++){
+  80:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
+	int burst_times[n];
+  84:	89 e6                	mov    %esp,%esi
+	for(int i=0;i<n;i++){
+  86:	0f 8e cb 00 00 00    	jle    157 <main+0x157>
+  8c:	31 db                	xor    %ebx,%ebx
+  8e:	66 90                	xchg   %ax,%ax
+		burst_times[i] = randomrange(1,1000);
+  90:	83 ec 08             	sub    $0x8,%esp
+  93:	89 df                	mov    %ebx,%edi
+  95:	68 e8 03 00 00       	push   $0x3e8
+  9a:	6a 01                	push   $0x1
+  9c:	e8 4f 0a 00 00       	call   af0 <randomrange>
+	for(int i=0;i<n;i++){
+  a1:	83 c4 10             	add    $0x10,%esp
+		burst_times[i] = randomrange(1,1000);
+  a4:	89 04 9e             	mov    %eax,(%esi,%ebx,4)
+	for(int i=0;i<n;i++){
+  a7:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  aa:	39 5d d4             	cmp    %ebx,-0x2c(%ebp)
+  ad:	75 e1                	jne    90 <main+0x90>
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+  af:	53                   	push   %ebx
+  b0:	53                   	push   %ebx
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+  b1:	31 db                	xor    %ebx,%ebx
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+  b3:	68 dc 0b 00 00       	push   $0xbdc
+  b8:	6a 01                	push   $0x1
+  ba:	e8 e1 04 00 00       	call   5a0 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+  bf:	58                   	pop    %eax
+  c0:	5a                   	pop    %edx
+  c1:	68 0c 0c 00 00       	push   $0xc0c
+  c6:	6a 01                	push   $0x1
+  c8:	e8 d3 04 00 00       	call   5a0 <printf>
+  cd:	83 c4 10             	add    $0x10,%esp
+  d0:	eb 13                	jmp    e5 <main+0xe5>
+  d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+	for(int i=0;i<n;i++){
+  d8:	8d 43 01             	lea    0x1(%ebx),%eax
+  db:	39 df                	cmp    %ebx,%edi
+  dd:	0f 84 93 00 00 00    	je     176 <main+0x176>
+  e3:	89 c3                	mov    %eax,%ebx
+		if(!fork()){
+  e5:	e8 21 03 00 00       	call   40b <fork>
+  ea:	85 c0                	test   %eax,%eax
+  ec:	75 ea                	jne    d8 <main+0xd8>
+
+			// CPU Bound process
+			set_burst_time(burst_times[i]);
+  ee:	83 ec 0c             	sub    $0xc,%esp
+  f1:	ff 34 9e             	pushl  (%esi,%ebx,4)
+  f4:	bb 0a 00 00 00       	mov    $0xa,%ebx
+  f9:	e8 cd 03 00 00       	call   4cb <set_burst_time>
+  fe:	83 c4 10             	add    $0x10,%esp
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+			for(int i=0;i<10;i++){
+				sleep(1);
+ 108:	83 ec 0c             	sub    $0xc,%esp
+ 10b:	6a 01                	push   $0x1
+ 10d:	e8 91 03 00 00       	call   4a3 <sleep>
+			for(int i=0;i<10;i++){
+ 112:	83 c4 10             	add    $0x10,%esp
+ 115:	83 eb 01             	sub    $0x1,%ebx
+ 118:	75 ee                	jne    108 <main+0x108>
+			}
+			
+			struct processInfo info;
+			getCurrentInfo(&info);
+ 11a:	83 ec 0c             	sub    $0xc,%esp
+ 11d:	8d 45 dc             	lea    -0x24(%ebp),%eax
+ 120:	50                   	push   %eax
+ 121:	e8 b5 03 00 00       	call   4db <getCurrentInfo>
+			int bt = get_burst_time();
+ 126:	e8 a8 03 00 00       	call   4d3 <get_burst_time>
+			if(bt<10)
+				printf(1, "\t%d \t I/O         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 12b:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+			if(bt<10)
+ 12e:	83 c4 10             	add    $0x10,%esp
+			int bt = get_burst_time();
+ 131:	89 c3                	mov    %eax,%ebx
+			if(bt<10)
+ 133:	83 f8 09             	cmp    $0x9,%eax
+ 136:	7f 54                	jg     18c <main+0x18c>
+				printf(1, "\t%d \t I/O         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 138:	e8 a6 03 00 00       	call   4e3 <getCurrentPID>
+ 13d:	83 ec 0c             	sub    $0xc,%esp
+ 140:	56                   	push   %esi
+ 141:	53                   	push   %ebx
+ 142:	50                   	push   %eax
+ 143:	68 84 0b 00 00       	push   $0xb84
+ 148:	6a 01                	push   $0x1
+ 14a:	e8 51 04 00 00       	call   5a0 <printf>
+ 14f:	83 c4 20             	add    $0x20,%esp
+			else
+				printf(1, "\t%d \t I/O         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+			exit();
+ 152:	e8 bc 02 00 00       	call   413 <exit>
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+ 157:	50                   	push   %eax
+ 158:	50                   	push   %eax
+ 159:	68 dc 0b 00 00       	push   $0xbdc
+ 15e:	6a 01                	push   $0x1
+ 160:	e8 3b 04 00 00       	call   5a0 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+ 165:	5a                   	pop    %edx
+ 166:	59                   	pop    %ecx
+ 167:	68 0c 0c 00 00       	push   $0xc0c
+ 16c:	6a 01                	push   $0x1
+ 16e:	e8 2d 04 00 00       	call   5a0 <printf>
+ 173:	83 c4 10             	add    $0x10,%esp
+
+
+		}
+	}
+
+	while(wait()!=-1);
+ 176:	e8 a0 02 00 00       	call   41b <wait>
+ 17b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 17e:	74 d2                	je     152 <main+0x152>
+ 180:	e8 96 02 00 00       	call   41b <wait>
+ 185:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 188:	75 ec                	jne    176 <main+0x176>
+ 18a:	eb c6                	jmp    152 <main+0x152>
+				printf(1, "\t%d \t I/O         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 18c:	e8 52 03 00 00       	call   4e3 <getCurrentPID>
+ 191:	83 ec 0c             	sub    $0xc,%esp
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+ 196:	50                   	push   %eax
+ 197:	68 b0 0b 00 00       	push   $0xbb0
+ 19c:	6a 01                	push   $0x1
+ 19e:	e8 fd 03 00 00       	call   5a0 <printf>
+ 1a3:	83 c4 20             	add    $0x20,%esp
+ 1a6:	eb aa                	jmp    152 <main+0x152>
+ 1a8:	66 90                	xchg   %ax,%ax
+ 1aa:	66 90                	xchg   %ax,%ax
+ 1ac:	66 90                	xchg   %ax,%ax
+ 1ae:	66 90                	xchg   %ax,%ax
+
+000001b0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 1b0:	f3 0f 1e fb          	endbr32 
+ 1b4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 1b5:	31 c0                	xor    %eax,%eax
+{
+ 1b7:	89 e5                	mov    %esp,%ebp
+ 1b9:	53                   	push   %ebx
+ 1ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1bd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 1c0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1c4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 1c7:	83 c0 01             	add    $0x1,%eax
+ 1ca:	84 d2                	test   %dl,%dl
+ 1cc:	75 f2                	jne    1c0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1ce:	89 c8                	mov    %ecx,%eax
+ 1d0:	5b                   	pop    %ebx
+ 1d1:	5d                   	pop    %ebp
+ 1d2:	c3                   	ret    
+ 1d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000001e0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1e0:	f3 0f 1e fb          	endbr32 
+ 1e4:	55                   	push   %ebp
+ 1e5:	89 e5                	mov    %esp,%ebp
+ 1e7:	53                   	push   %ebx
+ 1e8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1eb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 1ee:	0f b6 01             	movzbl (%ecx),%eax
+ 1f1:	0f b6 1a             	movzbl (%edx),%ebx
+ 1f4:	84 c0                	test   %al,%al
+ 1f6:	75 19                	jne    211 <strcmp+0x31>
+ 1f8:	eb 26                	jmp    220 <strcmp+0x40>
+ 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 200:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 204:	83 c1 01             	add    $0x1,%ecx
+ 207:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 20a:	0f b6 1a             	movzbl (%edx),%ebx
+ 20d:	84 c0                	test   %al,%al
+ 20f:	74 0f                	je     220 <strcmp+0x40>
+ 211:	38 d8                	cmp    %bl,%al
+ 213:	74 eb                	je     200 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 215:	29 d8                	sub    %ebx,%eax
+}
+ 217:	5b                   	pop    %ebx
+ 218:	5d                   	pop    %ebp
+ 219:	c3                   	ret    
+ 21a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 220:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 222:	29 d8                	sub    %ebx,%eax
+}
+ 224:	5b                   	pop    %ebx
+ 225:	5d                   	pop    %ebp
+ 226:	c3                   	ret    
+ 227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22e:	66 90                	xchg   %ax,%ax
+
+00000230 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 23a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 23d:	74 21                	je     260 <strlen+0x30>
+ 23f:	31 c0                	xor    %eax,%eax
+ 241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 248:	83 c0 01             	add    $0x1,%eax
+ 24b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 24f:	89 c1                	mov    %eax,%ecx
+ 251:	75 f5                	jne    248 <strlen+0x18>
+    ;
+  return n;
+}
+ 253:	89 c8                	mov    %ecx,%eax
+ 255:	5d                   	pop    %ebp
+ 256:	c3                   	ret    
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 260:	31 c9                	xor    %ecx,%ecx
+}
+ 262:	5d                   	pop    %ebp
+ 263:	89 c8                	mov    %ecx,%eax
+ 265:	c3                   	ret    
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000270 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	57                   	push   %edi
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 27b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 27e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 281:	89 d7                	mov    %edx,%edi
+ 283:	fc                   	cld    
+ 284:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+
+00000290 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 29e:	0f b6 10             	movzbl (%eax),%edx
+ 2a1:	84 d2                	test   %dl,%dl
+ 2a3:	75 16                	jne    2bb <strchr+0x2b>
+ 2a5:	eb 21                	jmp    2c8 <strchr+0x38>
+ 2a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ae:	66 90                	xchg   %ax,%ax
+ 2b0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 2b4:	83 c0 01             	add    $0x1,%eax
+ 2b7:	84 d2                	test   %dl,%dl
+ 2b9:	74 0d                	je     2c8 <strchr+0x38>
+    if(*s == c)
+ 2bb:	38 d1                	cmp    %dl,%cl
+ 2bd:	75 f1                	jne    2b0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 2bf:	5d                   	pop    %ebp
+ 2c0:	c3                   	ret    
+ 2c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 2c8:	31 c0                	xor    %eax,%eax
+}
+ 2ca:	5d                   	pop    %ebp
+ 2cb:	c3                   	ret    
+ 2cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002d0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2d0:	f3 0f 1e fb          	endbr32 
+ 2d4:	55                   	push   %ebp
+ 2d5:	89 e5                	mov    %esp,%ebp
+ 2d7:	57                   	push   %edi
+ 2d8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2d9:	31 f6                	xor    %esi,%esi
+{
+ 2db:	53                   	push   %ebx
+ 2dc:	89 f3                	mov    %esi,%ebx
+ 2de:	83 ec 1c             	sub    $0x1c,%esp
+ 2e1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 2e4:	eb 33                	jmp    319 <gets+0x49>
+ 2e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 2f0:	83 ec 04             	sub    $0x4,%esp
+ 2f3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 2f6:	6a 01                	push   $0x1
+ 2f8:	50                   	push   %eax
+ 2f9:	6a 00                	push   $0x0
+ 2fb:	e8 2b 01 00 00       	call   42b <read>
+    if(cc < 1)
+ 300:	83 c4 10             	add    $0x10,%esp
+ 303:	85 c0                	test   %eax,%eax
+ 305:	7e 1c                	jle    323 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 307:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 30b:	83 c7 01             	add    $0x1,%edi
+ 30e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 311:	3c 0a                	cmp    $0xa,%al
+ 313:	74 23                	je     338 <gets+0x68>
+ 315:	3c 0d                	cmp    $0xd,%al
+ 317:	74 1f                	je     338 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 319:	83 c3 01             	add    $0x1,%ebx
+ 31c:	89 fe                	mov    %edi,%esi
+ 31e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 321:	7c cd                	jl     2f0 <gets+0x20>
+ 323:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 325:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 328:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 32b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 32e:	5b                   	pop    %ebx
+ 32f:	5e                   	pop    %esi
+ 330:	5f                   	pop    %edi
+ 331:	5d                   	pop    %ebp
+ 332:	c3                   	ret    
+ 333:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 337:	90                   	nop
+ 338:	8b 75 08             	mov    0x8(%ebp),%esi
+ 33b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 33e:	01 de                	add    %ebx,%esi
+ 340:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 342:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 345:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 348:	5b                   	pop    %ebx
+ 349:	5e                   	pop    %esi
+ 34a:	5f                   	pop    %edi
+ 34b:	5d                   	pop    %ebp
+ 34c:	c3                   	ret    
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000350 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 350:	f3 0f 1e fb          	endbr32 
+ 354:	55                   	push   %ebp
+ 355:	89 e5                	mov    %esp,%ebp
+ 357:	56                   	push   %esi
+ 358:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 359:	83 ec 08             	sub    $0x8,%esp
+ 35c:	6a 00                	push   $0x0
+ 35e:	ff 75 08             	pushl  0x8(%ebp)
+ 361:	e8 ed 00 00 00       	call   453 <open>
+  if(fd < 0)
+ 366:	83 c4 10             	add    $0x10,%esp
+ 369:	85 c0                	test   %eax,%eax
+ 36b:	78 2b                	js     398 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 36d:	83 ec 08             	sub    $0x8,%esp
+ 370:	ff 75 0c             	pushl  0xc(%ebp)
+ 373:	89 c3                	mov    %eax,%ebx
+ 375:	50                   	push   %eax
+ 376:	e8 f0 00 00 00       	call   46b <fstat>
+  close(fd);
+ 37b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 37e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 380:	e8 b6 00 00 00       	call   43b <close>
+  return r;
+ 385:	83 c4 10             	add    $0x10,%esp
+}
+ 388:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 38b:	89 f0                	mov    %esi,%eax
+ 38d:	5b                   	pop    %ebx
+ 38e:	5e                   	pop    %esi
+ 38f:	5d                   	pop    %ebp
+ 390:	c3                   	ret    
+ 391:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 398:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 39d:	eb e9                	jmp    388 <stat+0x38>
+ 39f:	90                   	nop
+
+000003a0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 3a0:	f3 0f 1e fb          	endbr32 
+ 3a4:	55                   	push   %ebp
+ 3a5:	89 e5                	mov    %esp,%ebp
+ 3a7:	53                   	push   %ebx
+ 3a8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 3ab:	0f be 02             	movsbl (%edx),%eax
+ 3ae:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 3b1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 3b4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 3b9:	77 1a                	ja     3d5 <atoi+0x35>
+ 3bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3bf:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 3c0:	83 c2 01             	add    $0x1,%edx
+ 3c3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 3c6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 3ca:	0f be 02             	movsbl (%edx),%eax
+ 3cd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 3d0:	80 fb 09             	cmp    $0x9,%bl
+ 3d3:	76 eb                	jbe    3c0 <atoi+0x20>
+  return n;
+}
+ 3d5:	89 c8                	mov    %ecx,%eax
+ 3d7:	5b                   	pop    %ebx
+ 3d8:	5d                   	pop    %ebp
+ 3d9:	c3                   	ret    
+ 3da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003e0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3e0:	f3 0f 1e fb          	endbr32 
+ 3e4:	55                   	push   %ebp
+ 3e5:	89 e5                	mov    %esp,%ebp
+ 3e7:	57                   	push   %edi
+ 3e8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3eb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3ee:	56                   	push   %esi
+ 3ef:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3f2:	85 c0                	test   %eax,%eax
+ 3f4:	7e 0f                	jle    405 <memmove+0x25>
+ 3f6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3f8:	89 d7                	mov    %edx,%edi
+ 3fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 400:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 401:	39 f8                	cmp    %edi,%eax
+ 403:	75 fb                	jne    400 <memmove+0x20>
+  return vdst;
+}
+ 405:	5e                   	pop    %esi
+ 406:	89 d0                	mov    %edx,%eax
+ 408:	5f                   	pop    %edi
+ 409:	5d                   	pop    %ebp
+ 40a:	c3                   	ret    
+
+0000040b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 40b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <exit>:
+SYSCALL(exit)
+ 413:	b8 02 00 00 00       	mov    $0x2,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <wait>:
+SYSCALL(wait)
+ 41b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <pipe>:
+SYSCALL(pipe)
+ 423:	b8 04 00 00 00       	mov    $0x4,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <read>:
+SYSCALL(read)
+ 42b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <write>:
+SYSCALL(write)
+ 433:	b8 10 00 00 00       	mov    $0x10,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <close>:
+SYSCALL(close)
+ 43b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <kill>:
+SYSCALL(kill)
+ 443:	b8 06 00 00 00       	mov    $0x6,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <exec>:
+SYSCALL(exec)
+ 44b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <open>:
+SYSCALL(open)
+ 453:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <mknod>:
+SYSCALL(mknod)
+ 45b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <unlink>:
+SYSCALL(unlink)
+ 463:	b8 12 00 00 00       	mov    $0x12,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <fstat>:
+SYSCALL(fstat)
+ 46b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <link>:
+SYSCALL(link)
+ 473:	b8 13 00 00 00       	mov    $0x13,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <mkdir>:
+SYSCALL(mkdir)
+ 47b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <chdir>:
+SYSCALL(chdir)
+ 483:	b8 09 00 00 00       	mov    $0x9,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <dup>:
+SYSCALL(dup)
+ 48b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <getpid>:
+SYSCALL(getpid)
+ 493:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <sbrk>:
+SYSCALL(sbrk)
+ 49b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <sleep>:
+SYSCALL(sleep)
+ 4a3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <uptime>:
+SYSCALL(uptime)
+ 4ab:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <getNumProc>:
+SYSCALL(getNumProc)
+ 4b3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <getMaxPID>:
+SYSCALL(getMaxPID)
+ 4bb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+
+000004c3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 4c3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4c8:	cd 40                	int    $0x40
+ 4ca:	c3                   	ret    
+
+000004cb <set_burst_time>:
+SYSCALL(set_burst_time)
+ 4cb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 4d0:	cd 40                	int    $0x40
+ 4d2:	c3                   	ret    
+
+000004d3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 4d3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 4d8:	cd 40                	int    $0x40
+ 4da:	c3                   	ret    
+
+000004db <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 4db:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 4e0:	cd 40                	int    $0x40
+ 4e2:	c3                   	ret    
+
+000004e3 <getCurrentPID>:
+ 4e3:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 4e8:	cd 40                	int    $0x40
+ 4ea:	c3                   	ret    
+ 4eb:	66 90                	xchg   %ax,%ax
+ 4ed:	66 90                	xchg   %ax,%ax
+ 4ef:	90                   	nop
+
+000004f0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4f0:	55                   	push   %ebp
+ 4f1:	89 e5                	mov    %esp,%ebp
+ 4f3:	57                   	push   %edi
+ 4f4:	56                   	push   %esi
+ 4f5:	53                   	push   %ebx
+ 4f6:	83 ec 3c             	sub    $0x3c,%esp
+ 4f9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 4fc:	89 d1                	mov    %edx,%ecx
+{
+ 4fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 501:	85 d2                	test   %edx,%edx
+ 503:	0f 89 7f 00 00 00    	jns    588 <printint+0x98>
+ 509:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 50d:	74 79                	je     588 <printint+0x98>
+    neg = 1;
+ 50f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 516:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 518:	31 db                	xor    %ebx,%ebx
+ 51a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 520:	89 c8                	mov    %ecx,%eax
+ 522:	31 d2                	xor    %edx,%edx
+ 524:	89 cf                	mov    %ecx,%edi
+ 526:	f7 75 c4             	divl   -0x3c(%ebp)
+ 529:	0f b6 92 44 0c 00 00 	movzbl 0xc44(%edx),%edx
+ 530:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 533:	89 d8                	mov    %ebx,%eax
+ 535:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 538:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 53b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 53e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 541:	76 dd                	jbe    520 <printint+0x30>
+  if(neg)
+ 543:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 546:	85 c9                	test   %ecx,%ecx
+ 548:	74 0c                	je     556 <printint+0x66>
+    buf[i++] = '-';
+ 54a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 54f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 551:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 556:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 559:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 55d:	eb 07                	jmp    566 <printint+0x76>
+ 55f:	90                   	nop
+ 560:	0f b6 13             	movzbl (%ebx),%edx
+ 563:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 566:	83 ec 04             	sub    $0x4,%esp
+ 569:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 56c:	6a 01                	push   $0x1
+ 56e:	56                   	push   %esi
+ 56f:	57                   	push   %edi
+ 570:	e8 be fe ff ff       	call   433 <write>
+  while(--i >= 0)
+ 575:	83 c4 10             	add    $0x10,%esp
+ 578:	39 de                	cmp    %ebx,%esi
+ 57a:	75 e4                	jne    560 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 57c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 57f:	5b                   	pop    %ebx
+ 580:	5e                   	pop    %esi
+ 581:	5f                   	pop    %edi
+ 582:	5d                   	pop    %ebp
+ 583:	c3                   	ret    
+ 584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 588:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 58f:	eb 87                	jmp    518 <printint+0x28>
+ 591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+
+000005a0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 5a0:	f3 0f 1e fb          	endbr32 
+ 5a4:	55                   	push   %ebp
+ 5a5:	89 e5                	mov    %esp,%ebp
+ 5a7:	57                   	push   %edi
+ 5a8:	56                   	push   %esi
+ 5a9:	53                   	push   %ebx
+ 5aa:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5ad:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 5b0:	0f b6 1e             	movzbl (%esi),%ebx
+ 5b3:	84 db                	test   %bl,%bl
+ 5b5:	0f 84 b4 00 00 00    	je     66f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 5bb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 5be:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 5c1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 5c4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 5c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5c9:	eb 33                	jmp    5fe <printf+0x5e>
+ 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+ 5d0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 5d3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 5d8:	83 f8 25             	cmp    $0x25,%eax
+ 5db:	74 17                	je     5f4 <printf+0x54>
+  write(fd, &c, 1);
+ 5dd:	83 ec 04             	sub    $0x4,%esp
+ 5e0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5e3:	6a 01                	push   $0x1
+ 5e5:	57                   	push   %edi
+ 5e6:	ff 75 08             	pushl  0x8(%ebp)
+ 5e9:	e8 45 fe ff ff       	call   433 <write>
+ 5ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 5f1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5f4:	0f b6 1e             	movzbl (%esi),%ebx
+ 5f7:	83 c6 01             	add    $0x1,%esi
+ 5fa:	84 db                	test   %bl,%bl
+ 5fc:	74 71                	je     66f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 5fe:	0f be cb             	movsbl %bl,%ecx
+ 601:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 604:	85 d2                	test   %edx,%edx
+ 606:	74 c8                	je     5d0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 608:	83 fa 25             	cmp    $0x25,%edx
+ 60b:	75 e7                	jne    5f4 <printf+0x54>
+      if(c == 'd'){
+ 60d:	83 f8 64             	cmp    $0x64,%eax
+ 610:	0f 84 9a 00 00 00    	je     6b0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 616:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 61c:	83 f9 70             	cmp    $0x70,%ecx
+ 61f:	74 5f                	je     680 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 621:	83 f8 73             	cmp    $0x73,%eax
+ 624:	0f 84 d6 00 00 00    	je     700 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 62a:	83 f8 63             	cmp    $0x63,%eax
+ 62d:	0f 84 8d 00 00 00    	je     6c0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 633:	83 f8 25             	cmp    $0x25,%eax
+ 636:	0f 84 b4 00 00 00    	je     6f0 <printf+0x150>
+  write(fd, &c, 1);
+ 63c:	83 ec 04             	sub    $0x4,%esp
+ 63f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 643:	6a 01                	push   $0x1
+ 645:	57                   	push   %edi
+ 646:	ff 75 08             	pushl  0x8(%ebp)
+ 649:	e8 e5 fd ff ff       	call   433 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 64e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 651:	83 c4 0c             	add    $0xc,%esp
+ 654:	6a 01                	push   $0x1
+ 656:	83 c6 01             	add    $0x1,%esi
+ 659:	57                   	push   %edi
+ 65a:	ff 75 08             	pushl  0x8(%ebp)
+ 65d:	e8 d1 fd ff ff       	call   433 <write>
+  for(i = 0; fmt[i]; i++){
+ 662:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 666:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 669:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 66b:	84 db                	test   %bl,%bl
+ 66d:	75 8f                	jne    5fe <printf+0x5e>
+    }
+  }
+}
+ 66f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 672:	5b                   	pop    %ebx
+ 673:	5e                   	pop    %esi
+ 674:	5f                   	pop    %edi
+ 675:	5d                   	pop    %ebp
+ 676:	c3                   	ret    
+ 677:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 680:	83 ec 0c             	sub    $0xc,%esp
+ 683:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 688:	6a 00                	push   $0x0
+ 68a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 68d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 690:	8b 13                	mov    (%ebx),%edx
+ 692:	e8 59 fe ff ff       	call   4f0 <printint>
+        ap++;
+ 697:	89 d8                	mov    %ebx,%eax
+ 699:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 69c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 69e:	83 c0 04             	add    $0x4,%eax
+ 6a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 6a4:	e9 4b ff ff ff       	jmp    5f4 <printf+0x54>
+ 6a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 6b0:	83 ec 0c             	sub    $0xc,%esp
+ 6b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 6b8:	6a 01                	push   $0x1
+ 6ba:	eb ce                	jmp    68a <printf+0xea>
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 6c0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 6c3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6c6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 6c8:	6a 01                	push   $0x1
+        ap++;
+ 6ca:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 6cd:	57                   	push   %edi
+ 6ce:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 6d1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6d4:	e8 5a fd ff ff       	call   433 <write>
+        ap++;
+ 6d9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 6dc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6df:	31 d2                	xor    %edx,%edx
+ 6e1:	e9 0e ff ff ff       	jmp    5f4 <printf+0x54>
+ 6e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ed:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 6f0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6f3:	83 ec 04             	sub    $0x4,%esp
+ 6f6:	e9 59 ff ff ff       	jmp    654 <printf+0xb4>
+ 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+        s = (char*)*ap;
+ 700:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 703:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 705:	83 c0 04             	add    $0x4,%eax
+ 708:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 70b:	85 db                	test   %ebx,%ebx
+ 70d:	74 17                	je     726 <printf+0x186>
+        while(*s != 0){
+ 70f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 712:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 714:	84 c0                	test   %al,%al
+ 716:	0f 84 d8 fe ff ff    	je     5f4 <printf+0x54>
+ 71c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 71f:	89 de                	mov    %ebx,%esi
+ 721:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 724:	eb 1a                	jmp    740 <printf+0x1a0>
+          s = "(null)";
+ 726:	bb 3a 0c 00 00       	mov    $0xc3a,%ebx
+        while(*s != 0){
+ 72b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 72e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 733:	89 de                	mov    %ebx,%esi
+ 735:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+  write(fd, &c, 1);
+ 740:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 743:	83 c6 01             	add    $0x1,%esi
+ 746:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 749:	6a 01                	push   $0x1
+ 74b:	57                   	push   %edi
+ 74c:	53                   	push   %ebx
+ 74d:	e8 e1 fc ff ff       	call   433 <write>
+        while(*s != 0){
+ 752:	0f b6 06             	movzbl (%esi),%eax
+ 755:	83 c4 10             	add    $0x10,%esp
+ 758:	84 c0                	test   %al,%al
+ 75a:	75 e4                	jne    740 <printf+0x1a0>
+ 75c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 75f:	31 d2                	xor    %edx,%edx
+ 761:	e9 8e fe ff ff       	jmp    5f4 <printf+0x54>
+ 766:	66 90                	xchg   %ax,%ax
+ 768:	66 90                	xchg   %ax,%ax
+ 76a:	66 90                	xchg   %ax,%ax
+ 76c:	66 90                	xchg   %ax,%ax
+ 76e:	66 90                	xchg   %ax,%ax
+
+00000770 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 770:	f3 0f 1e fb          	endbr32 
+ 774:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 775:	a1 a0 0f 00 00       	mov    0xfa0,%eax
+{
+ 77a:	89 e5                	mov    %esp,%ebp
+ 77c:	57                   	push   %edi
+ 77d:	56                   	push   %esi
+ 77e:	53                   	push   %ebx
+ 77f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 782:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 784:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 787:	39 c8                	cmp    %ecx,%eax
+ 789:	73 15                	jae    7a0 <free+0x30>
+ 78b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 78f:	90                   	nop
+ 790:	39 d1                	cmp    %edx,%ecx
+ 792:	72 14                	jb     7a8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 794:	39 d0                	cmp    %edx,%eax
+ 796:	73 10                	jae    7a8 <free+0x38>
+{
+ 798:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 79a:	8b 10                	mov    (%eax),%edx
+ 79c:	39 c8                	cmp    %ecx,%eax
+ 79e:	72 f0                	jb     790 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7a0:	39 d0                	cmp    %edx,%eax
+ 7a2:	72 f4                	jb     798 <free+0x28>
+ 7a4:	39 d1                	cmp    %edx,%ecx
+ 7a6:	73 f0                	jae    798 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 7a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 7ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 7ae:	39 fa                	cmp    %edi,%edx
+ 7b0:	74 1e                	je     7d0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 7b2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7b5:	8b 50 04             	mov    0x4(%eax),%edx
+ 7b8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7bb:	39 f1                	cmp    %esi,%ecx
+ 7bd:	74 28                	je     7e7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 7bf:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 7c1:	5b                   	pop    %ebx
+  freep = p;
+ 7c2:	a3 a0 0f 00 00       	mov    %eax,0xfa0
+}
+ 7c7:	5e                   	pop    %esi
+ 7c8:	5f                   	pop    %edi
+ 7c9:	5d                   	pop    %ebp
+ 7ca:	c3                   	ret    
+ 7cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7cf:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 7d0:	03 72 04             	add    0x4(%edx),%esi
+ 7d3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7d6:	8b 10                	mov    (%eax),%edx
+ 7d8:	8b 12                	mov    (%edx),%edx
+ 7da:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7dd:	8b 50 04             	mov    0x4(%eax),%edx
+ 7e0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7e3:	39 f1                	cmp    %esi,%ecx
+ 7e5:	75 d8                	jne    7bf <free+0x4f>
+    p->s.size += bp->s.size;
+ 7e7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 7ea:	a3 a0 0f 00 00       	mov    %eax,0xfa0
+    p->s.size += bp->s.size;
+ 7ef:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 7f2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 7f5:	89 10                	mov    %edx,(%eax)
+}
+ 7f7:	5b                   	pop    %ebx
+ 7f8:	5e                   	pop    %esi
+ 7f9:	5f                   	pop    %edi
+ 7fa:	5d                   	pop    %ebp
+ 7fb:	c3                   	ret    
+ 7fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000800 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 800:	f3 0f 1e fb          	endbr32 
+ 804:	55                   	push   %ebp
+ 805:	89 e5                	mov    %esp,%ebp
+ 807:	57                   	push   %edi
+ 808:	56                   	push   %esi
+ 809:	53                   	push   %ebx
+ 80a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 80d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 810:	8b 3d a0 0f 00 00    	mov    0xfa0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 816:	8d 70 07             	lea    0x7(%eax),%esi
+ 819:	c1 ee 03             	shr    $0x3,%esi
+ 81c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 81f:	85 ff                	test   %edi,%edi
+ 821:	0f 84 a9 00 00 00    	je     8d0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 827:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 829:	8b 48 04             	mov    0x4(%eax),%ecx
+ 82c:	39 f1                	cmp    %esi,%ecx
+ 82e:	73 6d                	jae    89d <malloc+0x9d>
+ 830:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 836:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 83b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 83e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 845:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 848:	eb 17                	jmp    861 <malloc+0x61>
+ 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 850:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 852:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 855:	39 f1                	cmp    %esi,%ecx
+ 857:	73 4f                	jae    8a8 <malloc+0xa8>
+ 859:	8b 3d a0 0f 00 00    	mov    0xfa0,%edi
+ 85f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 861:	39 c7                	cmp    %eax,%edi
+ 863:	75 eb                	jne    850 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 865:	83 ec 0c             	sub    $0xc,%esp
+ 868:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 86b:	e8 2b fc ff ff       	call   49b <sbrk>
+  if(p == (char*)-1)
+ 870:	83 c4 10             	add    $0x10,%esp
+ 873:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 876:	74 1b                	je     893 <malloc+0x93>
+  hp->s.size = nu;
+ 878:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 87b:	83 ec 0c             	sub    $0xc,%esp
+ 87e:	83 c0 08             	add    $0x8,%eax
+ 881:	50                   	push   %eax
+ 882:	e8 e9 fe ff ff       	call   770 <free>
+  return freep;
+ 887:	a1 a0 0f 00 00       	mov    0xfa0,%eax
+      if((p = morecore(nunits)) == 0)
+ 88c:	83 c4 10             	add    $0x10,%esp
+ 88f:	85 c0                	test   %eax,%eax
+ 891:	75 bd                	jne    850 <malloc+0x50>
+        return 0;
+  }
+}
+ 893:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 896:	31 c0                	xor    %eax,%eax
+}
+ 898:	5b                   	pop    %ebx
+ 899:	5e                   	pop    %esi
+ 89a:	5f                   	pop    %edi
+ 89b:	5d                   	pop    %ebp
+ 89c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 89d:	89 c2                	mov    %eax,%edx
+ 89f:	89 f8                	mov    %edi,%eax
+ 8a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 8a8:	39 ce                	cmp    %ecx,%esi
+ 8aa:	74 54                	je     900 <malloc+0x100>
+        p->s.size -= nunits;
+ 8ac:	29 f1                	sub    %esi,%ecx
+ 8ae:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 8b1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 8b4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 8b7:	a3 a0 0f 00 00       	mov    %eax,0xfa0
+}
+ 8bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 8bf:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 8c2:	5b                   	pop    %ebx
+ 8c3:	5e                   	pop    %esi
+ 8c4:	5f                   	pop    %edi
+ 8c5:	5d                   	pop    %ebp
+ 8c6:	c3                   	ret    
+ 8c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ce:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 8d0:	c7 05 a0 0f 00 00 a4 	movl   $0xfa4,0xfa0
+ 8d7:	0f 00 00 
+    base.s.size = 0;
+ 8da:	bf a4 0f 00 00       	mov    $0xfa4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 8df:	c7 05 a4 0f 00 00 a4 	movl   $0xfa4,0xfa4
+ 8e6:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8e9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 8eb:	c7 05 a8 0f 00 00 00 	movl   $0x0,0xfa8
+ 8f2:	00 00 00 
+    if(p->s.size >= nunits){
+ 8f5:	e9 36 ff ff ff       	jmp    830 <malloc+0x30>
+ 8fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 900:	8b 0a                	mov    (%edx),%ecx
+ 902:	89 08                	mov    %ecx,(%eax)
+ 904:	eb b1                	jmp    8b7 <malloc+0xb7>
+ 906:	66 90                	xchg   %ax,%ax
+ 908:	66 90                	xchg   %ax,%ax
+ 90a:	66 90                	xchg   %ax,%ax
+ 90c:	66 90                	xchg   %ax,%ax
+ 90e:	66 90                	xchg   %ax,%ax
+
+00000910 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 910:	f3 0f 1e fb          	endbr32 
+ 914:	55                   	push   %ebp
+ 915:	b8 c4 0f 00 00       	mov    $0xfc4,%eax
+ 91a:	89 e5                	mov    %esp,%ebp
+ 91c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 91f:	89 15 c0 0f 00 00    	mov    %edx,0xfc0
+    for (mti=1; mti<N; mti++)
+ 925:	eb 0c                	jmp    933 <sgenrand+0x23>
+ 927:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 92e:	66 90                	xchg   %ax,%ax
+ 930:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 933:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 939:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 93b:	3d 7c 19 00 00       	cmp    $0x197c,%eax
+ 940:	75 ee                	jne    930 <sgenrand+0x20>
+ 942:	c7 05 88 0f 00 00 70 	movl   $0x270,0xf88
+ 949:	02 00 00 
+}
+ 94c:	5d                   	pop    %ebp
+ 94d:	c3                   	ret    
+ 94e:	66 90                	xchg   %ax,%ax
+
+00000950 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 950:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 954:	a1 88 0f 00 00       	mov    0xf88,%eax
+ 959:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 95e:	7f 3c                	jg     99c <genrand+0x4c>
+ 960:	8d 50 01             	lea    0x1(%eax),%edx
+ 963:	8b 04 85 c0 0f 00 00 	mov    0xfc0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 96a:	89 15 88 0f 00 00    	mov    %edx,0xf88
+    y ^= TEMPERING_SHIFT_U(y);
+ 970:	89 c2                	mov    %eax,%edx
+ 972:	c1 ea 0b             	shr    $0xb,%edx
+ 975:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 977:	89 d0                	mov    %edx,%eax
+ 979:	c1 e0 07             	shl    $0x7,%eax
+ 97c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 981:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 983:	89 d0                	mov    %edx,%eax
+ 985:	c1 e0 0f             	shl    $0xf,%eax
+ 988:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 98d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 98f:	89 c2                	mov    %eax,%edx
+ 991:	c1 ea 12             	shr    $0x12,%edx
+ 994:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 996:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 99b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 99c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 9a1:	0f 84 d2 00 00 00    	je     a79 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 9a7:	31 c0                	xor    %eax,%eax
+ 9a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 9b0:	8b 0c 85 c0 0f 00 00 	mov    0xfc0(,%eax,4),%ecx
+ 9b7:	83 c0 01             	add    $0x1,%eax
+ 9ba:	8b 14 85 c0 0f 00 00 	mov    0xfc0(,%eax,4),%edx
+ 9c1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9c7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9cd:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9cf:	89 d1                	mov    %edx,%ecx
+ 9d1:	83 e2 01             	and    $0x1,%edx
+ 9d4:	d1 e9                	shr    %ecx
+ 9d6:	33 0c 85 f0 15 00 00 	xor    0x15f0(,%eax,4),%ecx
+ 9dd:	33 0c 95 58 0c 00 00 	xor    0xc58(,%edx,4),%ecx
+ 9e4:	89 0c 85 bc 0f 00 00 	mov    %ecx,0xfbc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 9eb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 9f0:	75 be                	jne    9b0 <genrand+0x60>
+ 9f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 9f8:	8b 0c 85 c0 0f 00 00 	mov    0xfc0(,%eax,4),%ecx
+ 9ff:	83 c0 01             	add    $0x1,%eax
+ a02:	8b 14 85 c0 0f 00 00 	mov    0xfc0(,%eax,4),%edx
+ a09:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a0f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a15:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ a17:	89 d1                	mov    %edx,%ecx
+ a19:	83 e2 01             	and    $0x1,%edx
+ a1c:	d1 e9                	shr    %ecx
+ a1e:	33 0c 85 30 0c 00 00 	xor    0xc30(,%eax,4),%ecx
+ a25:	33 0c 95 58 0c 00 00 	xor    0xc58(,%edx,4),%ecx
+ a2c:	89 0c 85 bc 0f 00 00 	mov    %ecx,0xfbc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ a33:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ a38:	75 be                	jne    9f8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ a3a:	a1 c0 0f 00 00       	mov    0xfc0,%eax
+ a3f:	8b 0d 7c 19 00 00    	mov    0x197c,%ecx
+ a45:	89 c2                	mov    %eax,%edx
+ a47:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a4d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a53:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ a55:	89 ca                	mov    %ecx,%edx
+ a57:	83 e1 01             	and    $0x1,%ecx
+ a5a:	d1 ea                	shr    %edx
+ a5c:	33 15 f0 15 00 00    	xor    0x15f0,%edx
+ a62:	33 14 8d 58 0c 00 00 	xor    0xc58(,%ecx,4),%edx
+ a69:	89 15 7c 19 00 00    	mov    %edx,0x197c
+ a6f:	ba 01 00 00 00       	mov    $0x1,%edx
+ a74:	e9 f1 fe ff ff       	jmp    96a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ a79:	b8 c4 0f 00 00       	mov    $0xfc4,%eax
+ a7e:	b9 7c 19 00 00       	mov    $0x197c,%ecx
+ a83:	ba 05 11 00 00       	mov    $0x1105,%edx
+ a88:	c7 05 c0 0f 00 00 05 	movl   $0x1105,0xfc0
+ a8f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ a92:	eb 07                	jmp    a9b <genrand+0x14b>
+ a94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a98:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a9b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ aa1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ aa3:	39 c1                	cmp    %eax,%ecx
+ aa5:	75 f1                	jne    a98 <genrand+0x148>
+ aa7:	e9 fb fe ff ff       	jmp    9a7 <genrand+0x57>
+ aac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000ab0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ ab0:	f3 0f 1e fb          	endbr32 
+ ab4:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ ab5:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ ab7:	89 e5                	mov    %esp,%ebp
+ ab9:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ aba:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ abd:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ abe:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ ac3:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ ac6:	89 d8                	mov    %ebx,%eax
+ ac8:	f7 f1                	div    %ecx
+ aca:	89 c6                	mov    %eax,%esi
+ acc:	29 d3                	sub    %edx,%ebx
+ ace:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ ad0:	e8 7b fe ff ff       	call   950 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ ad5:	39 d8                	cmp    %ebx,%eax
+ ad7:	73 f7                	jae    ad0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ ad9:	31 d2                	xor    %edx,%edx
+}
+ adb:	5b                   	pop    %ebx
+  return x/bin_size;
+ adc:	f7 f6                	div    %esi
+}
+ ade:	5e                   	pop    %esi
+ adf:	5d                   	pop    %ebp
+ ae0:	c3                   	ret    
+ ae1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ ae8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ aef:	90                   	nop
+
+00000af0 <randomrange>:
+
+int randomrange(int low, int high){
+ af0:	f3 0f 1e fb          	endbr32 
+ af4:	55                   	push   %ebp
+ af5:	89 e5                	mov    %esp,%ebp
+ af7:	57                   	push   %edi
+ af8:	56                   	push   %esi
+ af9:	53                   	push   %ebx
+ afa:	83 ec 0c             	sub    $0xc,%esp
+ afd:	8b 75 08             	mov    0x8(%ebp),%esi
+ b00:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ b03:	39 f0                	cmp    %esi,%eax
+ b05:	7d 06                	jge    b0d <randomrange+0x1d>
+ b07:	89 f2                	mov    %esi,%edx
+ b09:	89 c6                	mov    %eax,%esi
+ b0b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ b0d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ b0f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ b14:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ b16:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ b19:	89 d8                	mov    %ebx,%eax
+ b1b:	f7 f1                	div    %ecx
+ b1d:	89 c7                	mov    %eax,%edi
+ b1f:	29 d3                	sub    %edx,%ebx
+ b21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ b28:	e8 23 fe ff ff       	call   950 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ b2d:	39 d8                	cmp    %ebx,%eax
+ b2f:	73 f7                	jae    b28 <randomrange+0x38>
+  return x/bin_size;
+ b31:	31 d2                	xor    %edx,%edx
+  return val;
+ b33:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ b36:	f7 f7                	div    %edi
+ b38:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ b39:	01 f0                	add    %esi,%eax
+ b3b:	5e                   	pop    %esi
+ b3c:	5f                   	pop    %edi
+ b3d:	5d                   	pop    %ebp
+ b3e:	c3                   	ret    
diff -ruN xv6-public/ioProcTester.d xv6-public-partB_sjf/ioProcTester.d
--- xv6-public/ioProcTester.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ioProcTester.d	2022-10-07 20:27:45.367127000 +0530
@@ -0,0 +1,2 @@
+ioProcTester.o: ioProcTester.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h processInfo.h
Binary files xv6-public/ioProcTester.o and xv6-public-partB_sjf/ioProcTester.o differ
diff -ruN xv6-public/ioProcTester.sym xv6-public-partB_sjf/ioProcTester.sym
--- xv6-public/ioProcTester.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ioProcTester.sym	2022-10-07 20:27:45.399128000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+00000b40 .rodata
+00000c60 .eh_frame
+00000f88 .data
+00000fa0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ioProcTester.c
+00000000 ulib.c
+00000000 printf.c
+000004f0 printint
+00000c44 digits.1105
+00000000 umalloc.c
+00000fa0 freep
+00000fa4 base
+00000000 random.c
+00000fc0 mt
+00000f88 mti
+00000c58 mag01.989
+000001b0 strcpy
+00000910 sgenrand
+000005a0 printf
+000003e0 memmove
+0000045b mknod
+000002d0 gets
+00000493 getpid
+00000800 malloc
+000004a3 sleep
+000004d3 get_burst_time
+00000ab0 random_at_most
+000004db getCurrentInfo
+00000423 pipe
+00000433 write
+0000046b fstat
+00000443 kill
+00000483 chdir
+0000044b exec
+0000041b wait
+0000042b read
+00000463 unlink
+0000040b fork
+0000049b sbrk
+000004ab uptime
+00000f8c __bss_start
+00000270 memset
+00000000 main
+000004cb set_burst_time
+000001e0 strcmp
+0000048b dup
+00000950 genrand
+000004b3 getNumProc
+000004c3 getProcInfo
+00000350 stat
+00000f8c _edata
+00001980 _end
+00000473 link
+00000413 exit
+000004bb getMaxPID
+000003a0 atoi
+00000230 strlen
+00000453 open
+00000290 strchr
+000004e3 getCurrentPID
+00000af0 randomrange
+0000047b mkdir
+0000043b close
+00000770 free
diff -ruN xv6-public/kalloc.d xv6-public-partB_sjf/kalloc.d
--- xv6-public/kalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/kalloc.d	2022-10-07 20:27:35.519041000 +0530
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Binary files xv6-public/kalloc.o and xv6-public-partB_sjf/kalloc.o differ
diff -ruN xv6-public/kbd.d xv6-public-partB_sjf/kbd.d
--- xv6-public/kbd.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/kbd.d	2022-10-07 20:27:35.571042000 +0530
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Binary files xv6-public/kbd.o and xv6-public-partB_sjf/kbd.o differ
Binary files xv6-public/kernel and xv6-public-partB_sjf/kernel differ
diff -ruN xv6-public/kernel.asm xv6-public-partB_sjf/kernel.asm
--- xv6-public/kernel.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/kernel.asm	2022-10-07 23:09:15.814924429 +0530
@@ -0,0 +1,11675 @@
+
+kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+80100012:	0f 22 e0             	mov    %eax,%cr4
+80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+80100025:	0f 22 c0             	mov    %eax,%cr0
+80100028:	bc c0 c5 10 80       	mov    $0x8010c5c0,%esp
+8010002d:	b8 40 30 10 80       	mov    $0x80103040,%eax
+80100032:	ff e0                	jmp    *%eax
+80100034:	66 90                	xchg   %ax,%ax
+80100036:	66 90                	xchg   %ax,%ax
+80100038:	66 90                	xchg   %ax,%ax
+8010003a:	66 90                	xchg   %ax,%ax
+8010003c:	66 90                	xchg   %ax,%ax
+8010003e:	66 90                	xchg   %ax,%ax
+
+80100040 <binit>:
+80100040:	f3 0f 1e fb          	endbr32 
+80100044:	55                   	push   %ebp
+80100045:	89 e5                	mov    %esp,%ebp
+80100047:	53                   	push   %ebx
+80100048:	bb f4 c5 10 80       	mov    $0x8010c5f4,%ebx
+8010004d:	83 ec 0c             	sub    $0xc,%esp
+80100050:	68 80 79 10 80       	push   $0x80107980
+80100055:	68 c0 c5 10 80       	push   $0x8010c5c0
+8010005a:	e8 21 4b 00 00       	call   80104b80 <initlock>
+8010005f:	83 c4 10             	add    $0x10,%esp
+80100062:	b8 bc 0c 11 80       	mov    $0x80110cbc,%eax
+80100067:	c7 05 0c 0d 11 80 bc 	movl   $0x80110cbc,0x80110d0c
+8010006e:	0c 11 80 
+80100071:	c7 05 10 0d 11 80 bc 	movl   $0x80110cbc,0x80110d10
+80100078:	0c 11 80 
+8010007b:	eb 05                	jmp    80100082 <binit+0x42>
+8010007d:	8d 76 00             	lea    0x0(%esi),%esi
+80100080:	89 d3                	mov    %edx,%ebx
+80100082:	89 43 54             	mov    %eax,0x54(%ebx)
+80100085:	83 ec 08             	sub    $0x8,%esp
+80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010008b:	c7 43 50 bc 0c 11 80 	movl   $0x80110cbc,0x50(%ebx)
+80100092:	68 87 79 10 80       	push   $0x80107987
+80100097:	50                   	push   %eax
+80100098:	e8 a3 49 00 00       	call   80104a40 <initsleeplock>
+8010009d:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
+801000a8:	83 c4 10             	add    $0x10,%esp
+801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
+801000ae:	89 d8                	mov    %ebx,%eax
+801000b0:	89 1d 10 0d 11 80    	mov    %ebx,0x80110d10
+801000b6:	81 fb 60 0a 11 80    	cmp    $0x80110a60,%ebx
+801000bc:	75 c2                	jne    80100080 <binit+0x40>
+801000be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801000c1:	c9                   	leave  
+801000c2:	c3                   	ret    
+801000c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801000ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801000d0 <bread>:
+801000d0:	f3 0f 1e fb          	endbr32 
+801000d4:	55                   	push   %ebp
+801000d5:	89 e5                	mov    %esp,%ebp
+801000d7:	57                   	push   %edi
+801000d8:	56                   	push   %esi
+801000d9:	53                   	push   %ebx
+801000da:	83 ec 18             	sub    $0x18,%esp
+801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
+801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
+801000e3:	68 c0 c5 10 80       	push   $0x8010c5c0
+801000e8:	e8 13 4c 00 00       	call   80104d00 <acquire>
+801000ed:	8b 1d 10 0d 11 80    	mov    0x80110d10,%ebx
+801000f3:	83 c4 10             	add    $0x10,%esp
+801000f6:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+801000fc:	75 0d                	jne    8010010b <bread+0x3b>
+801000fe:	eb 20                	jmp    80100120 <bread+0x50>
+80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
+80100103:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+80100109:	74 15                	je     80100120 <bread+0x50>
+8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
+8010010e:	75 f0                	jne    80100100 <bread+0x30>
+80100110:	3b 73 08             	cmp    0x8(%ebx),%esi
+80100113:	75 eb                	jne    80100100 <bread+0x30>
+80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
+80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
+8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010011f:	90                   	nop
+80100120:	8b 1d 0c 0d 11 80    	mov    0x80110d0c,%ebx
+80100126:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+8010012c:	75 0d                	jne    8010013b <bread+0x6b>
+8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
+80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
+80100133:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+80100139:	74 65                	je     801001a0 <bread+0xd0>
+8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010013e:	85 c0                	test   %eax,%eax
+80100140:	75 ee                	jne    80100130 <bread+0x60>
+80100142:	f6 03 04             	testb  $0x4,(%ebx)
+80100145:	75 e9                	jne    80100130 <bread+0x60>
+80100147:	89 7b 04             	mov    %edi,0x4(%ebx)
+8010014a:	89 73 08             	mov    %esi,0x8(%ebx)
+8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+8010015a:	83 ec 0c             	sub    $0xc,%esp
+8010015d:	68 c0 c5 10 80       	push   $0x8010c5c0
+80100162:	e8 59 4c 00 00       	call   80104dc0 <release>
+80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010016a:	89 04 24             	mov    %eax,(%esp)
+8010016d:	e8 0e 49 00 00       	call   80104a80 <acquiresleep>
+80100172:	83 c4 10             	add    $0x10,%esp
+80100175:	f6 03 02             	testb  $0x2,(%ebx)
+80100178:	74 0e                	je     80100188 <bread+0xb8>
+8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010017d:	89 d8                	mov    %ebx,%eax
+8010017f:	5b                   	pop    %ebx
+80100180:	5e                   	pop    %esi
+80100181:	5f                   	pop    %edi
+80100182:	5d                   	pop    %ebp
+80100183:	c3                   	ret    
+80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100188:	83 ec 0c             	sub    $0xc,%esp
+8010018b:	53                   	push   %ebx
+8010018c:	e8 ef 20 00 00       	call   80102280 <iderw>
+80100191:	83 c4 10             	add    $0x10,%esp
+80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100197:	89 d8                	mov    %ebx,%eax
+80100199:	5b                   	pop    %ebx
+8010019a:	5e                   	pop    %esi
+8010019b:	5f                   	pop    %edi
+8010019c:	5d                   	pop    %ebp
+8010019d:	c3                   	ret    
+8010019e:	66 90                	xchg   %ax,%ax
+801001a0:	83 ec 0c             	sub    $0xc,%esp
+801001a3:	68 8e 79 10 80       	push   $0x8010798e
+801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
+801001ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001b0 <bwrite>:
+801001b0:	f3 0f 1e fb          	endbr32 
+801001b4:	55                   	push   %ebp
+801001b5:	89 e5                	mov    %esp,%ebp
+801001b7:	53                   	push   %ebx
+801001b8:	83 ec 10             	sub    $0x10,%esp
+801001bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
+801001c1:	50                   	push   %eax
+801001c2:	e8 59 49 00 00       	call   80104b20 <holdingsleep>
+801001c7:	83 c4 10             	add    $0x10,%esp
+801001ca:	85 c0                	test   %eax,%eax
+801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
+801001ce:	83 0b 04             	orl    $0x4,(%ebx)
+801001d1:	89 5d 08             	mov    %ebx,0x8(%ebp)
+801001d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801001d7:	c9                   	leave  
+801001d8:	e9 a3 20 00 00       	jmp    80102280 <iderw>
+801001dd:	83 ec 0c             	sub    $0xc,%esp
+801001e0:	68 9f 79 10 80       	push   $0x8010799f
+801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
+801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801001f0 <brelse>:
+801001f0:	f3 0f 1e fb          	endbr32 
+801001f4:	55                   	push   %ebp
+801001f5:	89 e5                	mov    %esp,%ebp
+801001f7:	56                   	push   %esi
+801001f8:	53                   	push   %ebx
+801001f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
+801001ff:	83 ec 0c             	sub    $0xc,%esp
+80100202:	56                   	push   %esi
+80100203:	e8 18 49 00 00       	call   80104b20 <holdingsleep>
+80100208:	83 c4 10             	add    $0x10,%esp
+8010020b:	85 c0                	test   %eax,%eax
+8010020d:	74 66                	je     80100275 <brelse+0x85>
+8010020f:	83 ec 0c             	sub    $0xc,%esp
+80100212:	56                   	push   %esi
+80100213:	e8 c8 48 00 00       	call   80104ae0 <releasesleep>
+80100218:	c7 04 24 c0 c5 10 80 	movl   $0x8010c5c0,(%esp)
+8010021f:	e8 dc 4a 00 00       	call   80104d00 <acquire>
+80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
+80100227:	83 c4 10             	add    $0x10,%esp
+8010022a:	83 e8 01             	sub    $0x1,%eax
+8010022d:	89 43 4c             	mov    %eax,0x4c(%ebx)
+80100230:	85 c0                	test   %eax,%eax
+80100232:	75 2f                	jne    80100263 <brelse+0x73>
+80100234:	8b 43 54             	mov    0x54(%ebx),%eax
+80100237:	8b 53 50             	mov    0x50(%ebx),%edx
+8010023a:	89 50 50             	mov    %edx,0x50(%eax)
+8010023d:	8b 43 50             	mov    0x50(%ebx),%eax
+80100240:	8b 53 54             	mov    0x54(%ebx),%edx
+80100243:	89 50 54             	mov    %edx,0x54(%eax)
+80100246:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+8010024b:	c7 43 50 bc 0c 11 80 	movl   $0x80110cbc,0x50(%ebx)
+80100252:	89 43 54             	mov    %eax,0x54(%ebx)
+80100255:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
+8010025d:	89 1d 10 0d 11 80    	mov    %ebx,0x80110d10
+80100263:	c7 45 08 c0 c5 10 80 	movl   $0x8010c5c0,0x8(%ebp)
+8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010026d:	5b                   	pop    %ebx
+8010026e:	5e                   	pop    %esi
+8010026f:	5d                   	pop    %ebp
+80100270:	e9 4b 4b 00 00       	jmp    80104dc0 <release>
+80100275:	83 ec 0c             	sub    $0xc,%esp
+80100278:	68 a6 79 10 80       	push   $0x801079a6
+8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
+80100282:	66 90                	xchg   %ax,%ax
+80100284:	66 90                	xchg   %ax,%ax
+80100286:	66 90                	xchg   %ax,%ax
+80100288:	66 90                	xchg   %ax,%ax
+8010028a:	66 90                	xchg   %ax,%ax
+8010028c:	66 90                	xchg   %ax,%ax
+8010028e:	66 90                	xchg   %ax,%ax
+
+80100290 <consoleread>:
+80100290:	f3 0f 1e fb          	endbr32 
+80100294:	55                   	push   %ebp
+80100295:	89 e5                	mov    %esp,%ebp
+80100297:	57                   	push   %edi
+80100298:	56                   	push   %esi
+80100299:	53                   	push   %ebx
+8010029a:	83 ec 18             	sub    $0x18,%esp
+8010029d:	ff 75 08             	pushl  0x8(%ebp)
+801002a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
+801002a3:	89 de                	mov    %ebx,%esi
+801002a5:	e8 96 15 00 00       	call   80101840 <iunlock>
+801002aa:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+801002b1:	e8 4a 4a 00 00       	call   80104d00 <acquire>
+801002b6:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801002b9:	83 c4 10             	add    $0x10,%esp
+801002bc:	01 df                	add    %ebx,%edi
+801002be:	85 db                	test   %ebx,%ebx
+801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
+801002c6:	a1 a0 0f 11 80       	mov    0x80110fa0,%eax
+801002cb:	3b 05 a4 0f 11 80    	cmp    0x80110fa4,%eax
+801002d1:	74 27                	je     801002fa <consoleread+0x6a>
+801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
+801002d5:	8d 76 00             	lea    0x0(%esi),%esi
+801002d8:	83 ec 08             	sub    $0x8,%esp
+801002db:	68 20 b5 10 80       	push   $0x8010b520
+801002e0:	68 a0 0f 11 80       	push   $0x80110fa0
+801002e5:	e8 c6 40 00 00       	call   801043b0 <sleep>
+801002ea:	a1 a0 0f 11 80       	mov    0x80110fa0,%eax
+801002ef:	83 c4 10             	add    $0x10,%esp
+801002f2:	3b 05 a4 0f 11 80    	cmp    0x80110fa4,%eax
+801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
+801002fa:	e8 71 3a 00 00       	call   80103d70 <myproc>
+801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
+80100302:	85 c9                	test   %ecx,%ecx
+80100304:	74 d2                	je     801002d8 <consoleread+0x48>
+80100306:	83 ec 0c             	sub    $0xc,%esp
+80100309:	68 20 b5 10 80       	push   $0x8010b520
+8010030e:	e8 ad 4a 00 00       	call   80104dc0 <release>
+80100313:	5a                   	pop    %edx
+80100314:	ff 75 08             	pushl  0x8(%ebp)
+80100317:	e8 44 14 00 00       	call   80101760 <ilock>
+8010031c:	83 c4 10             	add    $0x10,%esp
+8010031f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100327:	5b                   	pop    %ebx
+80100328:	5e                   	pop    %esi
+80100329:	5f                   	pop    %edi
+8010032a:	5d                   	pop    %ebp
+8010032b:	c3                   	ret    
+8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100330:	8d 50 01             	lea    0x1(%eax),%edx
+80100333:	89 15 a0 0f 11 80    	mov    %edx,0x80110fa0
+80100339:	89 c2                	mov    %eax,%edx
+8010033b:	83 e2 7f             	and    $0x7f,%edx
+8010033e:	0f be 8a 20 0f 11 80 	movsbl -0x7feef0e0(%edx),%ecx
+80100345:	80 f9 04             	cmp    $0x4,%cl
+80100348:	74 38                	je     80100382 <consoleread+0xf2>
+8010034a:	89 d8                	mov    %ebx,%eax
+8010034c:	83 eb 01             	sub    $0x1,%ebx
+8010034f:	f7 d8                	neg    %eax
+80100351:	88 0c 07             	mov    %cl,(%edi,%eax,1)
+80100354:	83 f9 0a             	cmp    $0xa,%ecx
+80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
+8010035d:	83 ec 0c             	sub    $0xc,%esp
+80100360:	68 20 b5 10 80       	push   $0x8010b520
+80100365:	e8 56 4a 00 00       	call   80104dc0 <release>
+8010036a:	58                   	pop    %eax
+8010036b:	ff 75 08             	pushl  0x8(%ebp)
+8010036e:	e8 ed 13 00 00       	call   80101760 <ilock>
+80100373:	89 f0                	mov    %esi,%eax
+80100375:	83 c4 10             	add    $0x10,%esp
+80100378:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010037b:	29 d8                	sub    %ebx,%eax
+8010037d:	5b                   	pop    %ebx
+8010037e:	5e                   	pop    %esi
+8010037f:	5f                   	pop    %edi
+80100380:	5d                   	pop    %ebp
+80100381:	c3                   	ret    
+80100382:	39 f3                	cmp    %esi,%ebx
+80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
+80100386:	a3 a0 0f 11 80       	mov    %eax,0x80110fa0
+8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
+8010038d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100390 <panic>:
+80100390:	f3 0f 1e fb          	endbr32 
+80100394:	55                   	push   %ebp
+80100395:	89 e5                	mov    %esp,%ebp
+80100397:	56                   	push   %esi
+80100398:	53                   	push   %ebx
+80100399:	83 ec 30             	sub    $0x30,%esp
+8010039c:	fa                   	cli    
+8010039d:	c7 05 54 b5 10 80 00 	movl   $0x0,0x8010b554
+801003a4:	00 00 00 
+801003a7:	8d 5d d0             	lea    -0x30(%ebp),%ebx
+801003aa:	8d 75 f8             	lea    -0x8(%ebp),%esi
+801003ad:	e8 ee 24 00 00       	call   801028a0 <lapicid>
+801003b2:	83 ec 08             	sub    $0x8,%esp
+801003b5:	50                   	push   %eax
+801003b6:	68 ad 79 10 80       	push   $0x801079ad
+801003bb:	e8 f0 02 00 00       	call   801006b0 <cprintf>
+801003c0:	58                   	pop    %eax
+801003c1:	ff 75 08             	pushl  0x8(%ebp)
+801003c4:	e8 e7 02 00 00       	call   801006b0 <cprintf>
+801003c9:	c7 04 24 17 83 10 80 	movl   $0x80108317,(%esp)
+801003d0:	e8 db 02 00 00       	call   801006b0 <cprintf>
+801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
+801003d8:	5a                   	pop    %edx
+801003d9:	59                   	pop    %ecx
+801003da:	53                   	push   %ebx
+801003db:	50                   	push   %eax
+801003dc:	e8 bf 47 00 00       	call   80104ba0 <getcallerpcs>
+801003e1:	83 c4 10             	add    $0x10,%esp
+801003e4:	83 ec 08             	sub    $0x8,%esp
+801003e7:	ff 33                	pushl  (%ebx)
+801003e9:	83 c3 04             	add    $0x4,%ebx
+801003ec:	68 c1 79 10 80       	push   $0x801079c1
+801003f1:	e8 ba 02 00 00       	call   801006b0 <cprintf>
+801003f6:	83 c4 10             	add    $0x10,%esp
+801003f9:	39 f3                	cmp    %esi,%ebx
+801003fb:	75 e7                	jne    801003e4 <panic+0x54>
+801003fd:	c7 05 58 b5 10 80 01 	movl   $0x1,0x8010b558
+80100404:	00 00 00 
+80100407:	eb fe                	jmp    80100407 <panic+0x77>
+80100409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100410 <consputc.part.0>:
+80100410:	55                   	push   %ebp
+80100411:	89 e5                	mov    %esp,%ebp
+80100413:	57                   	push   %edi
+80100414:	56                   	push   %esi
+80100415:	53                   	push   %ebx
+80100416:	89 c3                	mov    %eax,%ebx
+80100418:	83 ec 1c             	sub    $0x1c,%esp
+8010041b:	3d 00 01 00 00       	cmp    $0x100,%eax
+80100420:	0f 84 ea 00 00 00    	je     80100510 <consputc.part.0+0x100>
+80100426:	83 ec 0c             	sub    $0xc,%esp
+80100429:	50                   	push   %eax
+8010042a:	e8 41 61 00 00       	call   80106570 <uartputc>
+8010042f:	83 c4 10             	add    $0x10,%esp
+80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
+80100437:	b8 0e 00 00 00       	mov    $0xe,%eax
+8010043c:	89 fa                	mov    %edi,%edx
+8010043e:	ee                   	out    %al,(%dx)
+8010043f:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+80100444:	89 ca                	mov    %ecx,%edx
+80100446:	ec                   	in     (%dx),%al
+80100447:	0f b6 c0             	movzbl %al,%eax
+8010044a:	89 fa                	mov    %edi,%edx
+8010044c:	c1 e0 08             	shl    $0x8,%eax
+8010044f:	89 c6                	mov    %eax,%esi
+80100451:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100456:	ee                   	out    %al,(%dx)
+80100457:	89 ca                	mov    %ecx,%edx
+80100459:	ec                   	in     (%dx),%al
+8010045a:	0f b6 c0             	movzbl %al,%eax
+8010045d:	09 f0                	or     %esi,%eax
+8010045f:	83 fb 0a             	cmp    $0xa,%ebx
+80100462:	0f 84 90 00 00 00    	je     801004f8 <consputc.part.0+0xe8>
+80100468:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
+8010046e:	74 70                	je     801004e0 <consputc.part.0+0xd0>
+80100470:	0f b6 db             	movzbl %bl,%ebx
+80100473:	8d 70 01             	lea    0x1(%eax),%esi
+80100476:	80 cf 07             	or     $0x7,%bh
+80100479:	66 89 9c 00 00 80 0b 	mov    %bx,-0x7ff48000(%eax,%eax,1)
+80100480:	80 
+80100481:	81 fe d0 07 00 00    	cmp    $0x7d0,%esi
+80100487:	0f 8f f9 00 00 00    	jg     80100586 <consputc.part.0+0x176>
+8010048d:	81 fe 7f 07 00 00    	cmp    $0x77f,%esi
+80100493:	0f 8f a7 00 00 00    	jg     80100540 <consputc.part.0+0x130>
+80100499:	89 f0                	mov    %esi,%eax
+8010049b:	8d b4 36 00 80 0b 80 	lea    -0x7ff48000(%esi,%esi,1),%esi
+801004a2:	88 45 e7             	mov    %al,-0x19(%ebp)
+801004a5:	0f b6 fc             	movzbl %ah,%edi
+801004a8:	bb d4 03 00 00       	mov    $0x3d4,%ebx
+801004ad:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004b2:	89 da                	mov    %ebx,%edx
+801004b4:	ee                   	out    %al,(%dx)
+801004b5:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+801004ba:	89 f8                	mov    %edi,%eax
+801004bc:	89 ca                	mov    %ecx,%edx
+801004be:	ee                   	out    %al,(%dx)
+801004bf:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004c4:	89 da                	mov    %ebx,%edx
+801004c6:	ee                   	out    %al,(%dx)
+801004c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+801004cb:	89 ca                	mov    %ecx,%edx
+801004cd:	ee                   	out    %al,(%dx)
+801004ce:	b8 20 07 00 00       	mov    $0x720,%eax
+801004d3:	66 89 06             	mov    %ax,(%esi)
+801004d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801004d9:	5b                   	pop    %ebx
+801004da:	5e                   	pop    %esi
+801004db:	5f                   	pop    %edi
+801004dc:	5d                   	pop    %ebp
+801004dd:	c3                   	ret    
+801004de:	66 90                	xchg   %ax,%ax
+801004e0:	8d 70 ff             	lea    -0x1(%eax),%esi
+801004e3:	85 c0                	test   %eax,%eax
+801004e5:	75 9a                	jne    80100481 <consputc.part.0+0x71>
+801004e7:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
+801004eb:	be 00 80 0b 80       	mov    $0x800b8000,%esi
+801004f0:	31 ff                	xor    %edi,%edi
+801004f2:	eb b4                	jmp    801004a8 <consputc.part.0+0x98>
+801004f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801004f8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+801004fd:	f7 e2                	mul    %edx
+801004ff:	c1 ea 06             	shr    $0x6,%edx
+80100502:	8d 04 92             	lea    (%edx,%edx,4),%eax
+80100505:	c1 e0 04             	shl    $0x4,%eax
+80100508:	8d 70 50             	lea    0x50(%eax),%esi
+8010050b:	e9 71 ff ff ff       	jmp    80100481 <consputc.part.0+0x71>
+80100510:	83 ec 0c             	sub    $0xc,%esp
+80100513:	6a 08                	push   $0x8
+80100515:	e8 56 60 00 00       	call   80106570 <uartputc>
+8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+80100521:	e8 4a 60 00 00       	call   80106570 <uartputc>
+80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+8010052d:	e8 3e 60 00 00       	call   80106570 <uartputc>
+80100532:	83 c4 10             	add    $0x10,%esp
+80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
+8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100540:	83 ec 04             	sub    $0x4,%esp
+80100543:	8d 5e b0             	lea    -0x50(%esi),%ebx
+80100546:	8d b4 36 60 7f 0b 80 	lea    -0x7ff480a0(%esi,%esi,1),%esi
+8010054d:	bf 07 00 00 00       	mov    $0x7,%edi
+80100552:	68 60 0e 00 00       	push   $0xe60
+80100557:	68 a0 80 0b 80       	push   $0x800b80a0
+8010055c:	68 00 80 0b 80       	push   $0x800b8000
+80100561:	e8 4a 49 00 00       	call   80104eb0 <memmove>
+80100566:	b8 80 07 00 00       	mov    $0x780,%eax
+8010056b:	83 c4 0c             	add    $0xc,%esp
+8010056e:	29 d8                	sub    %ebx,%eax
+80100570:	01 c0                	add    %eax,%eax
+80100572:	50                   	push   %eax
+80100573:	6a 00                	push   $0x0
+80100575:	56                   	push   %esi
+80100576:	e8 95 48 00 00       	call   80104e10 <memset>
+8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
+8010057e:	83 c4 10             	add    $0x10,%esp
+80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
+80100586:	83 ec 0c             	sub    $0xc,%esp
+80100589:	68 c5 79 10 80       	push   $0x801079c5
+8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
+80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801005a0 <printint>:
+801005a0:	55                   	push   %ebp
+801005a1:	89 e5                	mov    %esp,%ebp
+801005a3:	57                   	push   %edi
+801005a4:	56                   	push   %esi
+801005a5:	53                   	push   %ebx
+801005a6:	83 ec 2c             	sub    $0x2c,%esp
+801005a9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+801005ac:	85 c9                	test   %ecx,%ecx
+801005ae:	74 04                	je     801005b4 <printint+0x14>
+801005b0:	85 c0                	test   %eax,%eax
+801005b2:	78 6d                	js     80100621 <printint+0x81>
+801005b4:	89 c1                	mov    %eax,%ecx
+801005b6:	31 f6                	xor    %esi,%esi
+801005b8:	89 75 cc             	mov    %esi,-0x34(%ebp)
+801005bb:	31 db                	xor    %ebx,%ebx
+801005bd:	8d 7d d7             	lea    -0x29(%ebp),%edi
+801005c0:	89 c8                	mov    %ecx,%eax
+801005c2:	31 d2                	xor    %edx,%edx
+801005c4:	89 ce                	mov    %ecx,%esi
+801005c6:	f7 75 d4             	divl   -0x2c(%ebp)
+801005c9:	0f b6 92 f0 79 10 80 	movzbl -0x7fef8610(%edx),%edx
+801005d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+801005d3:	89 d8                	mov    %ebx,%eax
+801005d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+801005d8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+801005db:	89 75 d0             	mov    %esi,-0x30(%ebp)
+801005de:	88 14 1f             	mov    %dl,(%edi,%ebx,1)
+801005e1:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+801005e4:	39 75 d0             	cmp    %esi,-0x30(%ebp)
+801005e7:	73 d7                	jae    801005c0 <printint+0x20>
+801005e9:	8b 75 cc             	mov    -0x34(%ebp),%esi
+801005ec:	85 f6                	test   %esi,%esi
+801005ee:	74 0c                	je     801005fc <printint+0x5c>
+801005f0:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+801005f5:	89 d8                	mov    %ebx,%eax
+801005f7:	ba 2d 00 00 00       	mov    $0x2d,%edx
+801005fc:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+80100600:	0f be c2             	movsbl %dl,%eax
+80100603:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+80100609:	85 d2                	test   %edx,%edx
+8010060b:	74 03                	je     80100610 <printint+0x70>
+8010060d:	fa                   	cli    
+8010060e:	eb fe                	jmp    8010060e <printint+0x6e>
+80100610:	e8 fb fd ff ff       	call   80100410 <consputc.part.0>
+80100615:	39 fb                	cmp    %edi,%ebx
+80100617:	74 10                	je     80100629 <printint+0x89>
+80100619:	0f be 03             	movsbl (%ebx),%eax
+8010061c:	83 eb 01             	sub    $0x1,%ebx
+8010061f:	eb e2                	jmp    80100603 <printint+0x63>
+80100621:	f7 d8                	neg    %eax
+80100623:	89 ce                	mov    %ecx,%esi
+80100625:	89 c1                	mov    %eax,%ecx
+80100627:	eb 8f                	jmp    801005b8 <printint+0x18>
+80100629:	83 c4 2c             	add    $0x2c,%esp
+8010062c:	5b                   	pop    %ebx
+8010062d:	5e                   	pop    %esi
+8010062e:	5f                   	pop    %edi
+8010062f:	5d                   	pop    %ebp
+80100630:	c3                   	ret    
+80100631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100638:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010063f:	90                   	nop
+
+80100640 <consolewrite>:
+80100640:	f3 0f 1e fb          	endbr32 
+80100644:	55                   	push   %ebp
+80100645:	89 e5                	mov    %esp,%ebp
+80100647:	57                   	push   %edi
+80100648:	56                   	push   %esi
+80100649:	53                   	push   %ebx
+8010064a:	83 ec 18             	sub    $0x18,%esp
+8010064d:	ff 75 08             	pushl  0x8(%ebp)
+80100650:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80100653:	e8 e8 11 00 00       	call   80101840 <iunlock>
+80100658:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+8010065f:	e8 9c 46 00 00       	call   80104d00 <acquire>
+80100664:	83 c4 10             	add    $0x10,%esp
+80100667:	85 db                	test   %ebx,%ebx
+80100669:	7e 24                	jle    8010068f <consolewrite+0x4f>
+8010066b:	8b 7d 0c             	mov    0xc(%ebp),%edi
+8010066e:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
+80100671:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+80100677:	85 d2                	test   %edx,%edx
+80100679:	74 05                	je     80100680 <consolewrite+0x40>
+8010067b:	fa                   	cli    
+8010067c:	eb fe                	jmp    8010067c <consolewrite+0x3c>
+8010067e:	66 90                	xchg   %ax,%ax
+80100680:	0f b6 07             	movzbl (%edi),%eax
+80100683:	83 c7 01             	add    $0x1,%edi
+80100686:	e8 85 fd ff ff       	call   80100410 <consputc.part.0>
+8010068b:	39 fe                	cmp    %edi,%esi
+8010068d:	75 e2                	jne    80100671 <consolewrite+0x31>
+8010068f:	83 ec 0c             	sub    $0xc,%esp
+80100692:	68 20 b5 10 80       	push   $0x8010b520
+80100697:	e8 24 47 00 00       	call   80104dc0 <release>
+8010069c:	58                   	pop    %eax
+8010069d:	ff 75 08             	pushl  0x8(%ebp)
+801006a0:	e8 bb 10 00 00       	call   80101760 <ilock>
+801006a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801006a8:	89 d8                	mov    %ebx,%eax
+801006aa:	5b                   	pop    %ebx
+801006ab:	5e                   	pop    %esi
+801006ac:	5f                   	pop    %edi
+801006ad:	5d                   	pop    %ebp
+801006ae:	c3                   	ret    
+801006af:	90                   	nop
+
+801006b0 <cprintf>:
+801006b0:	f3 0f 1e fb          	endbr32 
+801006b4:	55                   	push   %ebp
+801006b5:	89 e5                	mov    %esp,%ebp
+801006b7:	57                   	push   %edi
+801006b8:	56                   	push   %esi
+801006b9:	53                   	push   %ebx
+801006ba:	83 ec 1c             	sub    $0x1c,%esp
+801006bd:	a1 54 b5 10 80       	mov    0x8010b554,%eax
+801006c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801006c5:	85 c0                	test   %eax,%eax
+801006c7:	0f 85 e8 00 00 00    	jne    801007b5 <cprintf+0x105>
+801006cd:	8b 45 08             	mov    0x8(%ebp),%eax
+801006d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801006d3:	85 c0                	test   %eax,%eax
+801006d5:	0f 84 5a 01 00 00    	je     80100835 <cprintf+0x185>
+801006db:	0f b6 00             	movzbl (%eax),%eax
+801006de:	85 c0                	test   %eax,%eax
+801006e0:	74 36                	je     80100718 <cprintf+0x68>
+801006e2:	8d 5d 0c             	lea    0xc(%ebp),%ebx
+801006e5:	31 f6                	xor    %esi,%esi
+801006e7:	83 f8 25             	cmp    $0x25,%eax
+801006ea:	74 44                	je     80100730 <cprintf+0x80>
+801006ec:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
+801006f2:	85 c9                	test   %ecx,%ecx
+801006f4:	74 0f                	je     80100705 <cprintf+0x55>
+801006f6:	fa                   	cli    
+801006f7:	eb fe                	jmp    801006f7 <cprintf+0x47>
+801006f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100700:	b8 25 00 00 00       	mov    $0x25,%eax
+80100705:	e8 06 fd ff ff       	call   80100410 <consputc.part.0>
+8010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010070d:	83 c6 01             	add    $0x1,%esi
+80100710:	0f b6 04 30          	movzbl (%eax,%esi,1),%eax
+80100714:	85 c0                	test   %eax,%eax
+80100716:	75 cf                	jne    801006e7 <cprintf+0x37>
+80100718:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010071b:	85 c0                	test   %eax,%eax
+8010071d:	0f 85 fd 00 00 00    	jne    80100820 <cprintf+0x170>
+80100723:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100726:	5b                   	pop    %ebx
+80100727:	5e                   	pop    %esi
+80100728:	5f                   	pop    %edi
+80100729:	5d                   	pop    %ebp
+8010072a:	c3                   	ret    
+8010072b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010072f:	90                   	nop
+80100730:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100733:	83 c6 01             	add    $0x1,%esi
+80100736:	0f b6 3c 30          	movzbl (%eax,%esi,1),%edi
+8010073a:	85 ff                	test   %edi,%edi
+8010073c:	74 da                	je     80100718 <cprintf+0x68>
+8010073e:	83 ff 70             	cmp    $0x70,%edi
+80100741:	74 5a                	je     8010079d <cprintf+0xed>
+80100743:	7f 2a                	jg     8010076f <cprintf+0xbf>
+80100745:	83 ff 25             	cmp    $0x25,%edi
+80100748:	0f 84 92 00 00 00    	je     801007e0 <cprintf+0x130>
+8010074e:	83 ff 64             	cmp    $0x64,%edi
+80100751:	0f 85 a1 00 00 00    	jne    801007f8 <cprintf+0x148>
+80100757:	8b 03                	mov    (%ebx),%eax
+80100759:	8d 7b 04             	lea    0x4(%ebx),%edi
+8010075c:	b9 01 00 00 00       	mov    $0x1,%ecx
+80100761:	ba 0a 00 00 00       	mov    $0xa,%edx
+80100766:	89 fb                	mov    %edi,%ebx
+80100768:	e8 33 fe ff ff       	call   801005a0 <printint>
+8010076d:	eb 9b                	jmp    8010070a <cprintf+0x5a>
+8010076f:	83 ff 73             	cmp    $0x73,%edi
+80100772:	75 24                	jne    80100798 <cprintf+0xe8>
+80100774:	8d 7b 04             	lea    0x4(%ebx),%edi
+80100777:	8b 1b                	mov    (%ebx),%ebx
+80100779:	85 db                	test   %ebx,%ebx
+8010077b:	75 55                	jne    801007d2 <cprintf+0x122>
+8010077d:	bb d8 79 10 80       	mov    $0x801079d8,%ebx
+80100782:	b8 28 00 00 00       	mov    $0x28,%eax
+80100787:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+8010078d:	85 d2                	test   %edx,%edx
+8010078f:	74 39                	je     801007ca <cprintf+0x11a>
+80100791:	fa                   	cli    
+80100792:	eb fe                	jmp    80100792 <cprintf+0xe2>
+80100794:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100798:	83 ff 78             	cmp    $0x78,%edi
+8010079b:	75 5b                	jne    801007f8 <cprintf+0x148>
+8010079d:	8b 03                	mov    (%ebx),%eax
+8010079f:	8d 7b 04             	lea    0x4(%ebx),%edi
+801007a2:	31 c9                	xor    %ecx,%ecx
+801007a4:	ba 10 00 00 00       	mov    $0x10,%edx
+801007a9:	89 fb                	mov    %edi,%ebx
+801007ab:	e8 f0 fd ff ff       	call   801005a0 <printint>
+801007b0:	e9 55 ff ff ff       	jmp    8010070a <cprintf+0x5a>
+801007b5:	83 ec 0c             	sub    $0xc,%esp
+801007b8:	68 20 b5 10 80       	push   $0x8010b520
+801007bd:	e8 3e 45 00 00       	call   80104d00 <acquire>
+801007c2:	83 c4 10             	add    $0x10,%esp
+801007c5:	e9 03 ff ff ff       	jmp    801006cd <cprintf+0x1d>
+801007ca:	e8 41 fc ff ff       	call   80100410 <consputc.part.0>
+801007cf:	83 c3 01             	add    $0x1,%ebx
+801007d2:	0f be 03             	movsbl (%ebx),%eax
+801007d5:	84 c0                	test   %al,%al
+801007d7:	75 ae                	jne    80100787 <cprintf+0xd7>
+801007d9:	89 fb                	mov    %edi,%ebx
+801007db:	e9 2a ff ff ff       	jmp    8010070a <cprintf+0x5a>
+801007e0:	8b 3d 58 b5 10 80    	mov    0x8010b558,%edi
+801007e6:	85 ff                	test   %edi,%edi
+801007e8:	0f 84 12 ff ff ff    	je     80100700 <cprintf+0x50>
+801007ee:	fa                   	cli    
+801007ef:	eb fe                	jmp    801007ef <cprintf+0x13f>
+801007f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801007f8:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
+801007fe:	85 c9                	test   %ecx,%ecx
+80100800:	74 06                	je     80100808 <cprintf+0x158>
+80100802:	fa                   	cli    
+80100803:	eb fe                	jmp    80100803 <cprintf+0x153>
+80100805:	8d 76 00             	lea    0x0(%esi),%esi
+80100808:	b8 25 00 00 00       	mov    $0x25,%eax
+8010080d:	e8 fe fb ff ff       	call   80100410 <consputc.part.0>
+80100812:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+80100818:	85 d2                	test   %edx,%edx
+8010081a:	74 2c                	je     80100848 <cprintf+0x198>
+8010081c:	fa                   	cli    
+8010081d:	eb fe                	jmp    8010081d <cprintf+0x16d>
+8010081f:	90                   	nop
+80100820:	83 ec 0c             	sub    $0xc,%esp
+80100823:	68 20 b5 10 80       	push   $0x8010b520
+80100828:	e8 93 45 00 00       	call   80104dc0 <release>
+8010082d:	83 c4 10             	add    $0x10,%esp
+80100830:	e9 ee fe ff ff       	jmp    80100723 <cprintf+0x73>
+80100835:	83 ec 0c             	sub    $0xc,%esp
+80100838:	68 df 79 10 80       	push   $0x801079df
+8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
+80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100848:	89 f8                	mov    %edi,%eax
+8010084a:	e8 c1 fb ff ff       	call   80100410 <consputc.part.0>
+8010084f:	e9 b6 fe ff ff       	jmp    8010070a <cprintf+0x5a>
+80100854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010085b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010085f:	90                   	nop
+
+80100860 <consoleintr>:
+80100860:	f3 0f 1e fb          	endbr32 
+80100864:	55                   	push   %ebp
+80100865:	89 e5                	mov    %esp,%ebp
+80100867:	57                   	push   %edi
+80100868:	56                   	push   %esi
+80100869:	31 f6                	xor    %esi,%esi
+8010086b:	53                   	push   %ebx
+8010086c:	83 ec 18             	sub    $0x18,%esp
+8010086f:	8b 7d 08             	mov    0x8(%ebp),%edi
+80100872:	68 20 b5 10 80       	push   $0x8010b520
+80100877:	e8 84 44 00 00       	call   80104d00 <acquire>
+8010087c:	83 c4 10             	add    $0x10,%esp
+8010087f:	eb 17                	jmp    80100898 <consoleintr+0x38>
+80100881:	83 fb 08             	cmp    $0x8,%ebx
+80100884:	0f 84 f6 00 00 00    	je     80100980 <consoleintr+0x120>
+8010088a:	83 fb 10             	cmp    $0x10,%ebx
+8010088d:	0f 85 15 01 00 00    	jne    801009a8 <consoleintr+0x148>
+80100893:	be 01 00 00 00       	mov    $0x1,%esi
+80100898:	ff d7                	call   *%edi
+8010089a:	89 c3                	mov    %eax,%ebx
+8010089c:	85 c0                	test   %eax,%eax
+8010089e:	0f 88 23 01 00 00    	js     801009c7 <consoleintr+0x167>
+801008a4:	83 fb 15             	cmp    $0x15,%ebx
+801008a7:	74 77                	je     80100920 <consoleintr+0xc0>
+801008a9:	7e d6                	jle    80100881 <consoleintr+0x21>
+801008ab:	83 fb 7f             	cmp    $0x7f,%ebx
+801008ae:	0f 84 cc 00 00 00    	je     80100980 <consoleintr+0x120>
+801008b4:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
+801008b9:	89 c2                	mov    %eax,%edx
+801008bb:	2b 15 a0 0f 11 80    	sub    0x80110fa0,%edx
+801008c1:	83 fa 7f             	cmp    $0x7f,%edx
+801008c4:	77 d2                	ja     80100898 <consoleintr+0x38>
+801008c6:	8d 48 01             	lea    0x1(%eax),%ecx
+801008c9:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+801008cf:	83 e0 7f             	and    $0x7f,%eax
+801008d2:	89 0d a8 0f 11 80    	mov    %ecx,0x80110fa8
+801008d8:	83 fb 0d             	cmp    $0xd,%ebx
+801008db:	0f 84 02 01 00 00    	je     801009e3 <consoleintr+0x183>
+801008e1:	88 98 20 0f 11 80    	mov    %bl,-0x7feef0e0(%eax)
+801008e7:	85 d2                	test   %edx,%edx
+801008e9:	0f 85 ff 00 00 00    	jne    801009ee <consoleintr+0x18e>
+801008ef:	89 d8                	mov    %ebx,%eax
+801008f1:	e8 1a fb ff ff       	call   80100410 <consputc.part.0>
+801008f6:	83 fb 0a             	cmp    $0xa,%ebx
+801008f9:	0f 84 0f 01 00 00    	je     80100a0e <consoleintr+0x1ae>
+801008ff:	83 fb 04             	cmp    $0x4,%ebx
+80100902:	0f 84 06 01 00 00    	je     80100a0e <consoleintr+0x1ae>
+80100908:	a1 a0 0f 11 80       	mov    0x80110fa0,%eax
+8010090d:	83 e8 80             	sub    $0xffffff80,%eax
+80100910:	39 05 a8 0f 11 80    	cmp    %eax,0x80110fa8
+80100916:	75 80                	jne    80100898 <consoleintr+0x38>
+80100918:	e9 f6 00 00 00       	jmp    80100a13 <consoleintr+0x1b3>
+8010091d:	8d 76 00             	lea    0x0(%esi),%esi
+80100920:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
+80100925:	39 05 a4 0f 11 80    	cmp    %eax,0x80110fa4
+8010092b:	0f 84 67 ff ff ff    	je     80100898 <consoleintr+0x38>
+80100931:	83 e8 01             	sub    $0x1,%eax
+80100934:	89 c2                	mov    %eax,%edx
+80100936:	83 e2 7f             	and    $0x7f,%edx
+80100939:	80 ba 20 0f 11 80 0a 	cmpb   $0xa,-0x7feef0e0(%edx)
+80100940:	0f 84 52 ff ff ff    	je     80100898 <consoleintr+0x38>
+80100946:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+8010094c:	a3 a8 0f 11 80       	mov    %eax,0x80110fa8
+80100951:	85 d2                	test   %edx,%edx
+80100953:	74 0b                	je     80100960 <consoleintr+0x100>
+80100955:	fa                   	cli    
+80100956:	eb fe                	jmp    80100956 <consoleintr+0xf6>
+80100958:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010095f:	90                   	nop
+80100960:	b8 00 01 00 00       	mov    $0x100,%eax
+80100965:	e8 a6 fa ff ff       	call   80100410 <consputc.part.0>
+8010096a:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
+8010096f:	3b 05 a4 0f 11 80    	cmp    0x80110fa4,%eax
+80100975:	75 ba                	jne    80100931 <consoleintr+0xd1>
+80100977:	e9 1c ff ff ff       	jmp    80100898 <consoleintr+0x38>
+8010097c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100980:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
+80100985:	3b 05 a4 0f 11 80    	cmp    0x80110fa4,%eax
+8010098b:	0f 84 07 ff ff ff    	je     80100898 <consoleintr+0x38>
+80100991:	83 e8 01             	sub    $0x1,%eax
+80100994:	a3 a8 0f 11 80       	mov    %eax,0x80110fa8
+80100999:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+8010099e:	85 c0                	test   %eax,%eax
+801009a0:	74 16                	je     801009b8 <consoleintr+0x158>
+801009a2:	fa                   	cli    
+801009a3:	eb fe                	jmp    801009a3 <consoleintr+0x143>
+801009a5:	8d 76 00             	lea    0x0(%esi),%esi
+801009a8:	85 db                	test   %ebx,%ebx
+801009aa:	0f 84 e8 fe ff ff    	je     80100898 <consoleintr+0x38>
+801009b0:	e9 ff fe ff ff       	jmp    801008b4 <consoleintr+0x54>
+801009b5:	8d 76 00             	lea    0x0(%esi),%esi
+801009b8:	b8 00 01 00 00       	mov    $0x100,%eax
+801009bd:	e8 4e fa ff ff       	call   80100410 <consputc.part.0>
+801009c2:	e9 d1 fe ff ff       	jmp    80100898 <consoleintr+0x38>
+801009c7:	83 ec 0c             	sub    $0xc,%esp
+801009ca:	68 20 b5 10 80       	push   $0x8010b520
+801009cf:	e8 ec 43 00 00       	call   80104dc0 <release>
+801009d4:	83 c4 10             	add    $0x10,%esp
+801009d7:	85 f6                	test   %esi,%esi
+801009d9:	75 1d                	jne    801009f8 <consoleintr+0x198>
+801009db:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801009de:	5b                   	pop    %ebx
+801009df:	5e                   	pop    %esi
+801009e0:	5f                   	pop    %edi
+801009e1:	5d                   	pop    %ebp
+801009e2:	c3                   	ret    
+801009e3:	c6 80 20 0f 11 80 0a 	movb   $0xa,-0x7feef0e0(%eax)
+801009ea:	85 d2                	test   %edx,%edx
+801009ec:	74 16                	je     80100a04 <consoleintr+0x1a4>
+801009ee:	fa                   	cli    
+801009ef:	eb fe                	jmp    801009ef <consoleintr+0x18f>
+801009f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801009f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801009fb:	5b                   	pop    %ebx
+801009fc:	5e                   	pop    %esi
+801009fd:	5f                   	pop    %edi
+801009fe:	5d                   	pop    %ebp
+801009ff:	e9 8c 3c 00 00       	jmp    80104690 <procdump>
+80100a04:	b8 0a 00 00 00       	mov    $0xa,%eax
+80100a09:	e8 02 fa ff ff       	call   80100410 <consputc.part.0>
+80100a0e:	a1 a8 0f 11 80       	mov    0x80110fa8,%eax
+80100a13:	83 ec 0c             	sub    $0xc,%esp
+80100a16:	a3 a4 0f 11 80       	mov    %eax,0x80110fa4
+80100a1b:	68 a0 0f 11 80       	push   $0x80110fa0
+80100a20:	e8 8b 3b 00 00       	call   801045b0 <wakeup>
+80100a25:	83 c4 10             	add    $0x10,%esp
+80100a28:	e9 6b fe ff ff       	jmp    80100898 <consoleintr+0x38>
+80100a2d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100a30 <consoleinit>:
+80100a30:	f3 0f 1e fb          	endbr32 
+80100a34:	55                   	push   %ebp
+80100a35:	89 e5                	mov    %esp,%ebp
+80100a37:	83 ec 10             	sub    $0x10,%esp
+80100a3a:	68 e8 79 10 80       	push   $0x801079e8
+80100a3f:	68 20 b5 10 80       	push   $0x8010b520
+80100a44:	e8 37 41 00 00       	call   80104b80 <initlock>
+80100a49:	58                   	pop    %eax
+80100a4a:	5a                   	pop    %edx
+80100a4b:	6a 00                	push   $0x0
+80100a4d:	6a 01                	push   $0x1
+80100a4f:	c7 05 6c 19 11 80 40 	movl   $0x80100640,0x8011196c
+80100a56:	06 10 80 
+80100a59:	c7 05 68 19 11 80 90 	movl   $0x80100290,0x80111968
+80100a60:	02 10 80 
+80100a63:	c7 05 54 b5 10 80 01 	movl   $0x1,0x8010b554
+80100a6a:	00 00 00 
+80100a6d:	e8 be 19 00 00       	call   80102430 <ioapicenable>
+80100a72:	83 c4 10             	add    $0x10,%esp
+80100a75:	c9                   	leave  
+80100a76:	c3                   	ret    
+80100a77:	66 90                	xchg   %ax,%ax
+80100a79:	66 90                	xchg   %ax,%ax
+80100a7b:	66 90                	xchg   %ax,%ax
+80100a7d:	66 90                	xchg   %ax,%ax
+80100a7f:	90                   	nop
+
+80100a80 <exec>:
+80100a80:	f3 0f 1e fb          	endbr32 
+80100a84:	55                   	push   %ebp
+80100a85:	89 e5                	mov    %esp,%ebp
+80100a87:	57                   	push   %edi
+80100a88:	56                   	push   %esi
+80100a89:	53                   	push   %ebx
+80100a8a:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+80100a90:	e8 db 32 00 00       	call   80103d70 <myproc>
+80100a95:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+80100a9b:	e8 90 22 00 00       	call   80102d30 <begin_op>
+80100aa0:	83 ec 0c             	sub    $0xc,%esp
+80100aa3:	ff 75 08             	pushl  0x8(%ebp)
+80100aa6:	e8 85 15 00 00       	call   80102030 <namei>
+80100aab:	83 c4 10             	add    $0x10,%esp
+80100aae:	85 c0                	test   %eax,%eax
+80100ab0:	0f 84 fe 02 00 00    	je     80100db4 <exec+0x334>
+80100ab6:	83 ec 0c             	sub    $0xc,%esp
+80100ab9:	89 c3                	mov    %eax,%ebx
+80100abb:	50                   	push   %eax
+80100abc:	e8 9f 0c 00 00       	call   80101760 <ilock>
+80100ac1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+80100ac7:	6a 34                	push   $0x34
+80100ac9:	6a 00                	push   $0x0
+80100acb:	50                   	push   %eax
+80100acc:	53                   	push   %ebx
+80100acd:	e8 8e 0f 00 00       	call   80101a60 <readi>
+80100ad2:	83 c4 20             	add    $0x20,%esp
+80100ad5:	83 f8 34             	cmp    $0x34,%eax
+80100ad8:	74 26                	je     80100b00 <exec+0x80>
+80100ada:	83 ec 0c             	sub    $0xc,%esp
+80100add:	53                   	push   %ebx
+80100ade:	e8 1d 0f 00 00       	call   80101a00 <iunlockput>
+80100ae3:	e8 b8 22 00 00       	call   80102da0 <end_op>
+80100ae8:	83 c4 10             	add    $0x10,%esp
+80100aeb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100af0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100af3:	5b                   	pop    %ebx
+80100af4:	5e                   	pop    %esi
+80100af5:	5f                   	pop    %edi
+80100af6:	5d                   	pop    %ebp
+80100af7:	c3                   	ret    
+80100af8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100aff:	90                   	nop
+80100b00:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+80100b07:	45 4c 46 
+80100b0a:	75 ce                	jne    80100ada <exec+0x5a>
+80100b0c:	e8 cf 6b 00 00       	call   801076e0 <setupkvm>
+80100b11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+80100b17:	85 c0                	test   %eax,%eax
+80100b19:	74 bf                	je     80100ada <exec+0x5a>
+80100b1b:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80100b22:	00 
+80100b23:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
+80100b29:	0f 84 a4 02 00 00    	je     80100dd3 <exec+0x353>
+80100b2f:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
+80100b36:	00 00 00 
+80100b39:	31 ff                	xor    %edi,%edi
+80100b3b:	e9 86 00 00 00       	jmp    80100bc6 <exec+0x146>
+80100b40:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80100b47:	75 6c                	jne    80100bb5 <exec+0x135>
+80100b49:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+80100b4f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80100b55:	0f 82 87 00 00 00    	jb     80100be2 <exec+0x162>
+80100b5b:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80100b61:	72 7f                	jb     80100be2 <exec+0x162>
+80100b63:	83 ec 04             	sub    $0x4,%esp
+80100b66:	50                   	push   %eax
+80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100b73:	e8 88 69 00 00       	call   80107500 <allocuvm>
+80100b78:	83 c4 10             	add    $0x10,%esp
+80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80100b81:	85 c0                	test   %eax,%eax
+80100b83:	74 5d                	je     80100be2 <exec+0x162>
+80100b85:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+80100b8b:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80100b90:	75 50                	jne    80100be2 <exec+0x162>
+80100b92:	83 ec 0c             	sub    $0xc,%esp
+80100b95:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
+80100b9b:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
+80100ba1:	53                   	push   %ebx
+80100ba2:	50                   	push   %eax
+80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100ba9:	e8 82 68 00 00       	call   80107430 <loaduvm>
+80100bae:	83 c4 20             	add    $0x20,%esp
+80100bb1:	85 c0                	test   %eax,%eax
+80100bb3:	78 2d                	js     80100be2 <exec+0x162>
+80100bb5:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+80100bbc:	83 c7 01             	add    $0x1,%edi
+80100bbf:	83 c6 20             	add    $0x20,%esi
+80100bc2:	39 f8                	cmp    %edi,%eax
+80100bc4:	7e 3a                	jle    80100c00 <exec+0x180>
+80100bc6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+80100bcc:	6a 20                	push   $0x20
+80100bce:	56                   	push   %esi
+80100bcf:	50                   	push   %eax
+80100bd0:	53                   	push   %ebx
+80100bd1:	e8 8a 0e 00 00       	call   80101a60 <readi>
+80100bd6:	83 c4 10             	add    $0x10,%esp
+80100bd9:	83 f8 20             	cmp    $0x20,%eax
+80100bdc:	0f 84 5e ff ff ff    	je     80100b40 <exec+0xc0>
+80100be2:	83 ec 0c             	sub    $0xc,%esp
+80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100beb:	e8 70 6a 00 00       	call   80107660 <freevm>
+80100bf0:	83 c4 10             	add    $0x10,%esp
+80100bf3:	e9 e2 fe ff ff       	jmp    80100ada <exec+0x5a>
+80100bf8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100bff:	90                   	nop
+80100c00:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
+80100c06:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
+80100c0c:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80100c12:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
+80100c18:	83 ec 0c             	sub    $0xc,%esp
+80100c1b:	53                   	push   %ebx
+80100c1c:	e8 df 0d 00 00       	call   80101a00 <iunlockput>
+80100c21:	e8 7a 21 00 00       	call   80102da0 <end_op>
+80100c26:	83 c4 0c             	add    $0xc,%esp
+80100c29:	56                   	push   %esi
+80100c2a:	57                   	push   %edi
+80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80100c31:	57                   	push   %edi
+80100c32:	e8 c9 68 00 00       	call   80107500 <allocuvm>
+80100c37:	83 c4 10             	add    $0x10,%esp
+80100c3a:	89 c6                	mov    %eax,%esi
+80100c3c:	85 c0                	test   %eax,%eax
+80100c3e:	0f 84 94 00 00 00    	je     80100cd8 <exec+0x258>
+80100c44:	83 ec 08             	sub    $0x8,%esp
+80100c47:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+80100c4d:	89 f3                	mov    %esi,%ebx
+80100c4f:	50                   	push   %eax
+80100c50:	57                   	push   %edi
+80100c51:	31 ff                	xor    %edi,%edi
+80100c53:	e8 28 6b 00 00       	call   80107780 <clearpteu>
+80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c5b:	83 c4 10             	add    $0x10,%esp
+80100c5e:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c64:	8b 00                	mov    (%eax),%eax
+80100c66:	85 c0                	test   %eax,%eax
+80100c68:	0f 84 8b 00 00 00    	je     80100cf9 <exec+0x279>
+80100c6e:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
+80100c74:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
+80100c7a:	eb 23                	jmp    80100c9f <exec+0x21f>
+80100c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100c80:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c83:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+80100c8a:	83 c7 01             	add    $0x1,%edi
+80100c8d:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c93:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80100c96:	85 c0                	test   %eax,%eax
+80100c98:	74 59                	je     80100cf3 <exec+0x273>
+80100c9a:	83 ff 20             	cmp    $0x20,%edi
+80100c9d:	74 39                	je     80100cd8 <exec+0x258>
+80100c9f:	83 ec 0c             	sub    $0xc,%esp
+80100ca2:	50                   	push   %eax
+80100ca3:	e8 68 43 00 00       	call   80105010 <strlen>
+80100ca8:	f7 d0                	not    %eax
+80100caa:	01 c3                	add    %eax,%ebx
+80100cac:	58                   	pop    %eax
+80100cad:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
+80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100cb6:	e8 55 43 00 00       	call   80105010 <strlen>
+80100cbb:	83 c0 01             	add    $0x1,%eax
+80100cbe:	50                   	push   %eax
+80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100cc5:	53                   	push   %ebx
+80100cc6:	56                   	push   %esi
+80100cc7:	e8 14 6c 00 00       	call   801078e0 <copyout>
+80100ccc:	83 c4 20             	add    $0x20,%esp
+80100ccf:	85 c0                	test   %eax,%eax
+80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
+80100cd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100cd7:	90                   	nop
+80100cd8:	83 ec 0c             	sub    $0xc,%esp
+80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100ce1:	e8 7a 69 00 00       	call   80107660 <freevm>
+80100ce6:	83 c4 10             	add    $0x10,%esp
+80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100cee:	e9 fd fd ff ff       	jmp    80100af0 <exec+0x70>
+80100cf3:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+80100cf9:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+80100d00:	89 d9                	mov    %ebx,%ecx
+80100d02:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+80100d09:	00 00 00 00 
+80100d0d:	29 c1                	sub    %eax,%ecx
+80100d0f:	83 c0 0c             	add    $0xc,%eax
+80100d12:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+80100d18:	29 c3                	sub    %eax,%ebx
+80100d1a:	50                   	push   %eax
+80100d1b:	52                   	push   %edx
+80100d1c:	53                   	push   %ebx
+80100d1d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100d23:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+80100d2a:	ff ff ff 
+80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+80100d33:	e8 a8 6b 00 00       	call   801078e0 <copyout>
+80100d38:	83 c4 10             	add    $0x10,%esp
+80100d3b:	85 c0                	test   %eax,%eax
+80100d3d:	78 99                	js     80100cd8 <exec+0x258>
+80100d3f:	8b 45 08             	mov    0x8(%ebp),%eax
+80100d42:	8b 55 08             	mov    0x8(%ebp),%edx
+80100d45:	0f b6 00             	movzbl (%eax),%eax
+80100d48:	84 c0                	test   %al,%al
+80100d4a:	74 13                	je     80100d5f <exec+0x2df>
+80100d4c:	89 d1                	mov    %edx,%ecx
+80100d4e:	66 90                	xchg   %ax,%ax
+80100d50:	83 c1 01             	add    $0x1,%ecx
+80100d53:	3c 2f                	cmp    $0x2f,%al
+80100d55:	0f b6 01             	movzbl (%ecx),%eax
+80100d58:	0f 44 d1             	cmove  %ecx,%edx
+80100d5b:	84 c0                	test   %al,%al
+80100d5d:	75 f1                	jne    80100d50 <exec+0x2d0>
+80100d5f:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
+80100d65:	83 ec 04             	sub    $0x4,%esp
+80100d68:	6a 10                	push   $0x10
+80100d6a:	89 f8                	mov    %edi,%eax
+80100d6c:	52                   	push   %edx
+80100d6d:	83 c0 6c             	add    $0x6c,%eax
+80100d70:	50                   	push   %eax
+80100d71:	e8 5a 42 00 00       	call   80104fd0 <safestrcpy>
+80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
+80100d7c:	89 f8                	mov    %edi,%eax
+80100d7e:	8b 7f 04             	mov    0x4(%edi),%edi
+80100d81:	89 30                	mov    %esi,(%eax)
+80100d83:	89 48 04             	mov    %ecx,0x4(%eax)
+80100d86:	89 c1                	mov    %eax,%ecx
+80100d88:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+80100d8e:	8b 40 18             	mov    0x18(%eax),%eax
+80100d91:	89 50 38             	mov    %edx,0x38(%eax)
+80100d94:	8b 41 18             	mov    0x18(%ecx),%eax
+80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
+80100d9a:	89 0c 24             	mov    %ecx,(%esp)
+80100d9d:	e8 fe 64 00 00       	call   801072a0 <switchuvm>
+80100da2:	89 3c 24             	mov    %edi,(%esp)
+80100da5:	e8 b6 68 00 00       	call   80107660 <freevm>
+80100daa:	83 c4 10             	add    $0x10,%esp
+80100dad:	31 c0                	xor    %eax,%eax
+80100daf:	e9 3c fd ff ff       	jmp    80100af0 <exec+0x70>
+80100db4:	e8 e7 1f 00 00       	call   80102da0 <end_op>
+80100db9:	83 ec 0c             	sub    $0xc,%esp
+80100dbc:	68 01 7a 10 80       	push   $0x80107a01
+80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
+80100dc6:	83 c4 10             	add    $0x10,%esp
+80100dc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100dce:	e9 1d fd ff ff       	jmp    80100af0 <exec+0x70>
+80100dd3:	31 ff                	xor    %edi,%edi
+80100dd5:	be 00 20 00 00       	mov    $0x2000,%esi
+80100dda:	e9 39 fe ff ff       	jmp    80100c18 <exec+0x198>
+80100ddf:	90                   	nop
+
+80100de0 <fileinit>:
+80100de0:	f3 0f 1e fb          	endbr32 
+80100de4:	55                   	push   %ebp
+80100de5:	89 e5                	mov    %esp,%ebp
+80100de7:	83 ec 10             	sub    $0x10,%esp
+80100dea:	68 0d 7a 10 80       	push   $0x80107a0d
+80100def:	68 c0 0f 11 80       	push   $0x80110fc0
+80100df4:	e8 87 3d 00 00       	call   80104b80 <initlock>
+80100df9:	83 c4 10             	add    $0x10,%esp
+80100dfc:	c9                   	leave  
+80100dfd:	c3                   	ret    
+80100dfe:	66 90                	xchg   %ax,%ax
+
+80100e00 <filealloc>:
+80100e00:	f3 0f 1e fb          	endbr32 
+80100e04:	55                   	push   %ebp
+80100e05:	89 e5                	mov    %esp,%ebp
+80100e07:	53                   	push   %ebx
+80100e08:	bb f4 0f 11 80       	mov    $0x80110ff4,%ebx
+80100e0d:	83 ec 10             	sub    $0x10,%esp
+80100e10:	68 c0 0f 11 80       	push   $0x80110fc0
+80100e15:	e8 e6 3e 00 00       	call   80104d00 <acquire>
+80100e1a:	83 c4 10             	add    $0x10,%esp
+80100e1d:	eb 0c                	jmp    80100e2b <filealloc+0x2b>
+80100e1f:	90                   	nop
+80100e20:	83 c3 18             	add    $0x18,%ebx
+80100e23:	81 fb 54 19 11 80    	cmp    $0x80111954,%ebx
+80100e29:	74 25                	je     80100e50 <filealloc+0x50>
+80100e2b:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e2e:	85 c0                	test   %eax,%eax
+80100e30:	75 ee                	jne    80100e20 <filealloc+0x20>
+80100e32:	83 ec 0c             	sub    $0xc,%esp
+80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+80100e3c:	68 c0 0f 11 80       	push   $0x80110fc0
+80100e41:	e8 7a 3f 00 00       	call   80104dc0 <release>
+80100e46:	89 d8                	mov    %ebx,%eax
+80100e48:	83 c4 10             	add    $0x10,%esp
+80100e4b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e4e:	c9                   	leave  
+80100e4f:	c3                   	ret    
+80100e50:	83 ec 0c             	sub    $0xc,%esp
+80100e53:	31 db                	xor    %ebx,%ebx
+80100e55:	68 c0 0f 11 80       	push   $0x80110fc0
+80100e5a:	e8 61 3f 00 00       	call   80104dc0 <release>
+80100e5f:	89 d8                	mov    %ebx,%eax
+80100e61:	83 c4 10             	add    $0x10,%esp
+80100e64:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e67:	c9                   	leave  
+80100e68:	c3                   	ret    
+80100e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100e70 <filedup>:
+80100e70:	f3 0f 1e fb          	endbr32 
+80100e74:	55                   	push   %ebp
+80100e75:	89 e5                	mov    %esp,%ebp
+80100e77:	53                   	push   %ebx
+80100e78:	83 ec 10             	sub    $0x10,%esp
+80100e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100e7e:	68 c0 0f 11 80       	push   $0x80110fc0
+80100e83:	e8 78 3e 00 00       	call   80104d00 <acquire>
+80100e88:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e8b:	83 c4 10             	add    $0x10,%esp
+80100e8e:	85 c0                	test   %eax,%eax
+80100e90:	7e 1a                	jle    80100eac <filedup+0x3c>
+80100e92:	83 c0 01             	add    $0x1,%eax
+80100e95:	83 ec 0c             	sub    $0xc,%esp
+80100e98:	89 43 04             	mov    %eax,0x4(%ebx)
+80100e9b:	68 c0 0f 11 80       	push   $0x80110fc0
+80100ea0:	e8 1b 3f 00 00       	call   80104dc0 <release>
+80100ea5:	89 d8                	mov    %ebx,%eax
+80100ea7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100eaa:	c9                   	leave  
+80100eab:	c3                   	ret    
+80100eac:	83 ec 0c             	sub    $0xc,%esp
+80100eaf:	68 14 7a 10 80       	push   $0x80107a14
+80100eb4:	e8 d7 f4 ff ff       	call   80100390 <panic>
+80100eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100ec0 <fileclose>:
+80100ec0:	f3 0f 1e fb          	endbr32 
+80100ec4:	55                   	push   %ebp
+80100ec5:	89 e5                	mov    %esp,%ebp
+80100ec7:	57                   	push   %edi
+80100ec8:	56                   	push   %esi
+80100ec9:	53                   	push   %ebx
+80100eca:	83 ec 28             	sub    $0x28,%esp
+80100ecd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100ed0:	68 c0 0f 11 80       	push   $0x80110fc0
+80100ed5:	e8 26 3e 00 00       	call   80104d00 <acquire>
+80100eda:	8b 53 04             	mov    0x4(%ebx),%edx
+80100edd:	83 c4 10             	add    $0x10,%esp
+80100ee0:	85 d2                	test   %edx,%edx
+80100ee2:	0f 8e a1 00 00 00    	jle    80100f89 <fileclose+0xc9>
+80100ee8:	83 ea 01             	sub    $0x1,%edx
+80100eeb:	89 53 04             	mov    %edx,0x4(%ebx)
+80100eee:	75 40                	jne    80100f30 <fileclose+0x70>
+80100ef0:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
+80100ef4:	83 ec 0c             	sub    $0xc,%esp
+80100ef7:	8b 3b                	mov    (%ebx),%edi
+80100ef9:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80100eff:	8b 73 0c             	mov    0xc(%ebx),%esi
+80100f02:	88 45 e7             	mov    %al,-0x19(%ebp)
+80100f05:	8b 43 10             	mov    0x10(%ebx),%eax
+80100f08:	68 c0 0f 11 80       	push   $0x80110fc0
+80100f0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80100f10:	e8 ab 3e 00 00       	call   80104dc0 <release>
+80100f15:	83 c4 10             	add    $0x10,%esp
+80100f18:	83 ff 01             	cmp    $0x1,%edi
+80100f1b:	74 53                	je     80100f70 <fileclose+0xb0>
+80100f1d:	83 ff 02             	cmp    $0x2,%edi
+80100f20:	74 26                	je     80100f48 <fileclose+0x88>
+80100f22:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f25:	5b                   	pop    %ebx
+80100f26:	5e                   	pop    %esi
+80100f27:	5f                   	pop    %edi
+80100f28:	5d                   	pop    %ebp
+80100f29:	c3                   	ret    
+80100f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100f30:	c7 45 08 c0 0f 11 80 	movl   $0x80110fc0,0x8(%ebp)
+80100f37:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f3a:	5b                   	pop    %ebx
+80100f3b:	5e                   	pop    %esi
+80100f3c:	5f                   	pop    %edi
+80100f3d:	5d                   	pop    %ebp
+80100f3e:	e9 7d 3e 00 00       	jmp    80104dc0 <release>
+80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100f47:	90                   	nop
+80100f48:	e8 e3 1d 00 00       	call   80102d30 <begin_op>
+80100f4d:	83 ec 0c             	sub    $0xc,%esp
+80100f50:	ff 75 e0             	pushl  -0x20(%ebp)
+80100f53:	e8 38 09 00 00       	call   80101890 <iput>
+80100f58:	83 c4 10             	add    $0x10,%esp
+80100f5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f5e:	5b                   	pop    %ebx
+80100f5f:	5e                   	pop    %esi
+80100f60:	5f                   	pop    %edi
+80100f61:	5d                   	pop    %ebp
+80100f62:	e9 39 1e 00 00       	jmp    80102da0 <end_op>
+80100f67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100f6e:	66 90                	xchg   %ax,%ax
+80100f70:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80100f74:	83 ec 08             	sub    $0x8,%esp
+80100f77:	53                   	push   %ebx
+80100f78:	56                   	push   %esi
+80100f79:	e8 82 25 00 00       	call   80103500 <pipeclose>
+80100f7e:	83 c4 10             	add    $0x10,%esp
+80100f81:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f84:	5b                   	pop    %ebx
+80100f85:	5e                   	pop    %esi
+80100f86:	5f                   	pop    %edi
+80100f87:	5d                   	pop    %ebp
+80100f88:	c3                   	ret    
+80100f89:	83 ec 0c             	sub    $0xc,%esp
+80100f8c:	68 1c 7a 10 80       	push   $0x80107a1c
+80100f91:	e8 fa f3 ff ff       	call   80100390 <panic>
+80100f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100f9d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100fa0 <filestat>:
+80100fa0:	f3 0f 1e fb          	endbr32 
+80100fa4:	55                   	push   %ebp
+80100fa5:	89 e5                	mov    %esp,%ebp
+80100fa7:	53                   	push   %ebx
+80100fa8:	83 ec 04             	sub    $0x4,%esp
+80100fab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100fae:	83 3b 02             	cmpl   $0x2,(%ebx)
+80100fb1:	75 2d                	jne    80100fe0 <filestat+0x40>
+80100fb3:	83 ec 0c             	sub    $0xc,%esp
+80100fb6:	ff 73 10             	pushl  0x10(%ebx)
+80100fb9:	e8 a2 07 00 00       	call   80101760 <ilock>
+80100fbe:	58                   	pop    %eax
+80100fbf:	5a                   	pop    %edx
+80100fc0:	ff 75 0c             	pushl  0xc(%ebp)
+80100fc3:	ff 73 10             	pushl  0x10(%ebx)
+80100fc6:	e8 65 0a 00 00       	call   80101a30 <stati>
+80100fcb:	59                   	pop    %ecx
+80100fcc:	ff 73 10             	pushl  0x10(%ebx)
+80100fcf:	e8 6c 08 00 00       	call   80101840 <iunlock>
+80100fd4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100fd7:	83 c4 10             	add    $0x10,%esp
+80100fda:	31 c0                	xor    %eax,%eax
+80100fdc:	c9                   	leave  
+80100fdd:	c3                   	ret    
+80100fde:	66 90                	xchg   %ax,%ax
+80100fe0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100fe3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100fe8:	c9                   	leave  
+80100fe9:	c3                   	ret    
+80100fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100ff0 <fileread>:
+80100ff0:	f3 0f 1e fb          	endbr32 
+80100ff4:	55                   	push   %ebp
+80100ff5:	89 e5                	mov    %esp,%ebp
+80100ff7:	57                   	push   %edi
+80100ff8:	56                   	push   %esi
+80100ff9:	53                   	push   %ebx
+80100ffa:	83 ec 0c             	sub    $0xc,%esp
+80100ffd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101000:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101003:	8b 7d 10             	mov    0x10(%ebp),%edi
+80101006:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+8010100a:	74 64                	je     80101070 <fileread+0x80>
+8010100c:	8b 03                	mov    (%ebx),%eax
+8010100e:	83 f8 01             	cmp    $0x1,%eax
+80101011:	74 45                	je     80101058 <fileread+0x68>
+80101013:	83 f8 02             	cmp    $0x2,%eax
+80101016:	75 5f                	jne    80101077 <fileread+0x87>
+80101018:	83 ec 0c             	sub    $0xc,%esp
+8010101b:	ff 73 10             	pushl  0x10(%ebx)
+8010101e:	e8 3d 07 00 00       	call   80101760 <ilock>
+80101023:	57                   	push   %edi
+80101024:	ff 73 14             	pushl  0x14(%ebx)
+80101027:	56                   	push   %esi
+80101028:	ff 73 10             	pushl  0x10(%ebx)
+8010102b:	e8 30 0a 00 00       	call   80101a60 <readi>
+80101030:	83 c4 20             	add    $0x20,%esp
+80101033:	89 c6                	mov    %eax,%esi
+80101035:	85 c0                	test   %eax,%eax
+80101037:	7e 03                	jle    8010103c <fileread+0x4c>
+80101039:	01 43 14             	add    %eax,0x14(%ebx)
+8010103c:	83 ec 0c             	sub    $0xc,%esp
+8010103f:	ff 73 10             	pushl  0x10(%ebx)
+80101042:	e8 f9 07 00 00       	call   80101840 <iunlock>
+80101047:	83 c4 10             	add    $0x10,%esp
+8010104a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010104d:	89 f0                	mov    %esi,%eax
+8010104f:	5b                   	pop    %ebx
+80101050:	5e                   	pop    %esi
+80101051:	5f                   	pop    %edi
+80101052:	5d                   	pop    %ebp
+80101053:	c3                   	ret    
+80101054:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101058:	8b 43 0c             	mov    0xc(%ebx),%eax
+8010105b:	89 45 08             	mov    %eax,0x8(%ebp)
+8010105e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101061:	5b                   	pop    %ebx
+80101062:	5e                   	pop    %esi
+80101063:	5f                   	pop    %edi
+80101064:	5d                   	pop    %ebp
+80101065:	e9 36 26 00 00       	jmp    801036a0 <piperead>
+8010106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101070:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80101075:	eb d3                	jmp    8010104a <fileread+0x5a>
+80101077:	83 ec 0c             	sub    $0xc,%esp
+8010107a:	68 26 7a 10 80       	push   $0x80107a26
+8010107f:	e8 0c f3 ff ff       	call   80100390 <panic>
+80101084:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010108b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010108f:	90                   	nop
+
+80101090 <filewrite>:
+80101090:	f3 0f 1e fb          	endbr32 
+80101094:	55                   	push   %ebp
+80101095:	89 e5                	mov    %esp,%ebp
+80101097:	57                   	push   %edi
+80101098:	56                   	push   %esi
+80101099:	53                   	push   %ebx
+8010109a:	83 ec 1c             	sub    $0x1c,%esp
+8010109d:	8b 45 0c             	mov    0xc(%ebp),%eax
+801010a0:	8b 75 08             	mov    0x8(%ebp),%esi
+801010a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801010a6:	8b 45 10             	mov    0x10(%ebp),%eax
+801010a9:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
+801010ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801010b0:	0f 84 c1 00 00 00    	je     80101177 <filewrite+0xe7>
+801010b6:	8b 06                	mov    (%esi),%eax
+801010b8:	83 f8 01             	cmp    $0x1,%eax
+801010bb:	0f 84 c3 00 00 00    	je     80101184 <filewrite+0xf4>
+801010c1:	83 f8 02             	cmp    $0x2,%eax
+801010c4:	0f 85 cc 00 00 00    	jne    80101196 <filewrite+0x106>
+801010ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801010cd:	31 ff                	xor    %edi,%edi
+801010cf:	85 c0                	test   %eax,%eax
+801010d1:	7f 34                	jg     80101107 <filewrite+0x77>
+801010d3:	e9 98 00 00 00       	jmp    80101170 <filewrite+0xe0>
+801010d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801010df:	90                   	nop
+801010e0:	01 46 14             	add    %eax,0x14(%esi)
+801010e3:	83 ec 0c             	sub    $0xc,%esp
+801010e6:	ff 76 10             	pushl  0x10(%esi)
+801010e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801010ec:	e8 4f 07 00 00       	call   80101840 <iunlock>
+801010f1:	e8 aa 1c 00 00       	call   80102da0 <end_op>
+801010f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801010f9:	83 c4 10             	add    $0x10,%esp
+801010fc:	39 c3                	cmp    %eax,%ebx
+801010fe:	75 60                	jne    80101160 <filewrite+0xd0>
+80101100:	01 df                	add    %ebx,%edi
+80101102:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101105:	7e 69                	jle    80101170 <filewrite+0xe0>
+80101107:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+8010110a:	b8 00 06 00 00       	mov    $0x600,%eax
+8010110f:	29 fb                	sub    %edi,%ebx
+80101111:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
+80101117:	0f 4f d8             	cmovg  %eax,%ebx
+8010111a:	e8 11 1c 00 00       	call   80102d30 <begin_op>
+8010111f:	83 ec 0c             	sub    $0xc,%esp
+80101122:	ff 76 10             	pushl  0x10(%esi)
+80101125:	e8 36 06 00 00       	call   80101760 <ilock>
+8010112a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010112d:	53                   	push   %ebx
+8010112e:	ff 76 14             	pushl  0x14(%esi)
+80101131:	01 f8                	add    %edi,%eax
+80101133:	50                   	push   %eax
+80101134:	ff 76 10             	pushl  0x10(%esi)
+80101137:	e8 24 0a 00 00       	call   80101b60 <writei>
+8010113c:	83 c4 20             	add    $0x20,%esp
+8010113f:	85 c0                	test   %eax,%eax
+80101141:	7f 9d                	jg     801010e0 <filewrite+0x50>
+80101143:	83 ec 0c             	sub    $0xc,%esp
+80101146:	ff 76 10             	pushl  0x10(%esi)
+80101149:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010114c:	e8 ef 06 00 00       	call   80101840 <iunlock>
+80101151:	e8 4a 1c 00 00       	call   80102da0 <end_op>
+80101156:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101159:	83 c4 10             	add    $0x10,%esp
+8010115c:	85 c0                	test   %eax,%eax
+8010115e:	75 17                	jne    80101177 <filewrite+0xe7>
+80101160:	83 ec 0c             	sub    $0xc,%esp
+80101163:	68 2f 7a 10 80       	push   $0x80107a2f
+80101168:	e8 23 f2 ff ff       	call   80100390 <panic>
+8010116d:	8d 76 00             	lea    0x0(%esi),%esi
+80101170:	89 f8                	mov    %edi,%eax
+80101172:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+80101175:	74 05                	je     8010117c <filewrite+0xec>
+80101177:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010117c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010117f:	5b                   	pop    %ebx
+80101180:	5e                   	pop    %esi
+80101181:	5f                   	pop    %edi
+80101182:	5d                   	pop    %ebp
+80101183:	c3                   	ret    
+80101184:	8b 46 0c             	mov    0xc(%esi),%eax
+80101187:	89 45 08             	mov    %eax,0x8(%ebp)
+8010118a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010118d:	5b                   	pop    %ebx
+8010118e:	5e                   	pop    %esi
+8010118f:	5f                   	pop    %edi
+80101190:	5d                   	pop    %ebp
+80101191:	e9 0a 24 00 00       	jmp    801035a0 <pipewrite>
+80101196:	83 ec 0c             	sub    $0xc,%esp
+80101199:	68 35 7a 10 80       	push   $0x80107a35
+8010119e:	e8 ed f1 ff ff       	call   80100390 <panic>
+801011a3:	66 90                	xchg   %ax,%ax
+801011a5:	66 90                	xchg   %ax,%ax
+801011a7:	66 90                	xchg   %ax,%ax
+801011a9:	66 90                	xchg   %ax,%ax
+801011ab:	66 90                	xchg   %ax,%ax
+801011ad:	66 90                	xchg   %ax,%ax
+801011af:	90                   	nop
+
+801011b0 <bfree>:
+801011b0:	55                   	push   %ebp
+801011b1:	89 c1                	mov    %eax,%ecx
+801011b3:	89 d0                	mov    %edx,%eax
+801011b5:	c1 e8 0c             	shr    $0xc,%eax
+801011b8:	03 05 d8 19 11 80    	add    0x801119d8,%eax
+801011be:	89 e5                	mov    %esp,%ebp
+801011c0:	56                   	push   %esi
+801011c1:	53                   	push   %ebx
+801011c2:	89 d3                	mov    %edx,%ebx
+801011c4:	83 ec 08             	sub    $0x8,%esp
+801011c7:	50                   	push   %eax
+801011c8:	51                   	push   %ecx
+801011c9:	e8 02 ef ff ff       	call   801000d0 <bread>
+801011ce:	89 d9                	mov    %ebx,%ecx
+801011d0:	c1 fb 03             	sar    $0x3,%ebx
+801011d3:	ba 01 00 00 00       	mov    $0x1,%edx
+801011d8:	83 e1 07             	and    $0x7,%ecx
+801011db:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
+801011e1:	83 c4 10             	add    $0x10,%esp
+801011e4:	d3 e2                	shl    %cl,%edx
+801011e6:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
+801011eb:	85 d1                	test   %edx,%ecx
+801011ed:	74 25                	je     80101214 <bfree+0x64>
+801011ef:	f7 d2                	not    %edx
+801011f1:	83 ec 0c             	sub    $0xc,%esp
+801011f4:	89 c6                	mov    %eax,%esi
+801011f6:	21 ca                	and    %ecx,%edx
+801011f8:	88 54 18 5c          	mov    %dl,0x5c(%eax,%ebx,1)
+801011fc:	50                   	push   %eax
+801011fd:	e8 0e 1d 00 00       	call   80102f10 <log_write>
+80101202:	89 34 24             	mov    %esi,(%esp)
+80101205:	e8 e6 ef ff ff       	call   801001f0 <brelse>
+8010120a:	83 c4 10             	add    $0x10,%esp
+8010120d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101210:	5b                   	pop    %ebx
+80101211:	5e                   	pop    %esi
+80101212:	5d                   	pop    %ebp
+80101213:	c3                   	ret    
+80101214:	83 ec 0c             	sub    $0xc,%esp
+80101217:	68 3f 7a 10 80       	push   $0x80107a3f
+8010121c:	e8 6f f1 ff ff       	call   80100390 <panic>
+80101221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010122f:	90                   	nop
+
+80101230 <balloc>:
+80101230:	55                   	push   %ebp
+80101231:	89 e5                	mov    %esp,%ebp
+80101233:	57                   	push   %edi
+80101234:	56                   	push   %esi
+80101235:	53                   	push   %ebx
+80101236:	83 ec 1c             	sub    $0x1c,%esp
+80101239:	8b 0d c0 19 11 80    	mov    0x801119c0,%ecx
+8010123f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101242:	85 c9                	test   %ecx,%ecx
+80101244:	0f 84 87 00 00 00    	je     801012d1 <balloc+0xa1>
+8010124a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+80101251:	8b 75 dc             	mov    -0x24(%ebp),%esi
+80101254:	83 ec 08             	sub    $0x8,%esp
+80101257:	89 f0                	mov    %esi,%eax
+80101259:	c1 f8 0c             	sar    $0xc,%eax
+8010125c:	03 05 d8 19 11 80    	add    0x801119d8,%eax
+80101262:	50                   	push   %eax
+80101263:	ff 75 d8             	pushl  -0x28(%ebp)
+80101266:	e8 65 ee ff ff       	call   801000d0 <bread>
+8010126b:	83 c4 10             	add    $0x10,%esp
+8010126e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101271:	a1 c0 19 11 80       	mov    0x801119c0,%eax
+80101276:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80101279:	31 c0                	xor    %eax,%eax
+8010127b:	eb 2f                	jmp    801012ac <balloc+0x7c>
+8010127d:	8d 76 00             	lea    0x0(%esi),%esi
+80101280:	89 c1                	mov    %eax,%ecx
+80101282:	bb 01 00 00 00       	mov    $0x1,%ebx
+80101287:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010128a:	83 e1 07             	and    $0x7,%ecx
+8010128d:	d3 e3                	shl    %cl,%ebx
+8010128f:	89 c1                	mov    %eax,%ecx
+80101291:	c1 f9 03             	sar    $0x3,%ecx
+80101294:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
+80101299:	89 fa                	mov    %edi,%edx
+8010129b:	85 df                	test   %ebx,%edi
+8010129d:	74 41                	je     801012e0 <balloc+0xb0>
+8010129f:	83 c0 01             	add    $0x1,%eax
+801012a2:	83 c6 01             	add    $0x1,%esi
+801012a5:	3d 00 10 00 00       	cmp    $0x1000,%eax
+801012aa:	74 05                	je     801012b1 <balloc+0x81>
+801012ac:	39 75 e0             	cmp    %esi,-0x20(%ebp)
+801012af:	77 cf                	ja     80101280 <balloc+0x50>
+801012b1:	83 ec 0c             	sub    $0xc,%esp
+801012b4:	ff 75 e4             	pushl  -0x1c(%ebp)
+801012b7:	e8 34 ef ff ff       	call   801001f0 <brelse>
+801012bc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+801012c3:	83 c4 10             	add    $0x10,%esp
+801012c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801012c9:	39 05 c0 19 11 80    	cmp    %eax,0x801119c0
+801012cf:	77 80                	ja     80101251 <balloc+0x21>
+801012d1:	83 ec 0c             	sub    $0xc,%esp
+801012d4:	68 52 7a 10 80       	push   $0x80107a52
+801012d9:	e8 b2 f0 ff ff       	call   80100390 <panic>
+801012de:	66 90                	xchg   %ax,%ax
+801012e0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801012e3:	83 ec 0c             	sub    $0xc,%esp
+801012e6:	09 da                	or     %ebx,%edx
+801012e8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+801012ec:	57                   	push   %edi
+801012ed:	e8 1e 1c 00 00       	call   80102f10 <log_write>
+801012f2:	89 3c 24             	mov    %edi,(%esp)
+801012f5:	e8 f6 ee ff ff       	call   801001f0 <brelse>
+801012fa:	58                   	pop    %eax
+801012fb:	5a                   	pop    %edx
+801012fc:	56                   	push   %esi
+801012fd:	ff 75 d8             	pushl  -0x28(%ebp)
+80101300:	e8 cb ed ff ff       	call   801000d0 <bread>
+80101305:	83 c4 0c             	add    $0xc,%esp
+80101308:	89 c3                	mov    %eax,%ebx
+8010130a:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010130d:	68 00 02 00 00       	push   $0x200
+80101312:	6a 00                	push   $0x0
+80101314:	50                   	push   %eax
+80101315:	e8 f6 3a 00 00       	call   80104e10 <memset>
+8010131a:	89 1c 24             	mov    %ebx,(%esp)
+8010131d:	e8 ee 1b 00 00       	call   80102f10 <log_write>
+80101322:	89 1c 24             	mov    %ebx,(%esp)
+80101325:	e8 c6 ee ff ff       	call   801001f0 <brelse>
+8010132a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010132d:	89 f0                	mov    %esi,%eax
+8010132f:	5b                   	pop    %ebx
+80101330:	5e                   	pop    %esi
+80101331:	5f                   	pop    %edi
+80101332:	5d                   	pop    %ebp
+80101333:	c3                   	ret    
+80101334:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010133b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010133f:	90                   	nop
+
+80101340 <iget>:
+80101340:	55                   	push   %ebp
+80101341:	89 e5                	mov    %esp,%ebp
+80101343:	57                   	push   %edi
+80101344:	89 c7                	mov    %eax,%edi
+80101346:	56                   	push   %esi
+80101347:	31 f6                	xor    %esi,%esi
+80101349:	53                   	push   %ebx
+8010134a:	bb 14 1a 11 80       	mov    $0x80111a14,%ebx
+8010134f:	83 ec 28             	sub    $0x28,%esp
+80101352:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101355:	68 e0 19 11 80       	push   $0x801119e0
+8010135a:	e8 a1 39 00 00       	call   80104d00 <acquire>
+8010135f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101362:	83 c4 10             	add    $0x10,%esp
+80101365:	eb 1b                	jmp    80101382 <iget+0x42>
+80101367:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010136e:	66 90                	xchg   %ax,%ax
+80101370:	39 3b                	cmp    %edi,(%ebx)
+80101372:	74 6c                	je     801013e0 <iget+0xa0>
+80101374:	81 c3 90 00 00 00    	add    $0x90,%ebx
+8010137a:	81 fb 34 36 11 80    	cmp    $0x80113634,%ebx
+80101380:	73 26                	jae    801013a8 <iget+0x68>
+80101382:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101385:	85 c9                	test   %ecx,%ecx
+80101387:	7f e7                	jg     80101370 <iget+0x30>
+80101389:	85 f6                	test   %esi,%esi
+8010138b:	75 e7                	jne    80101374 <iget+0x34>
+8010138d:	89 d8                	mov    %ebx,%eax
+8010138f:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101395:	85 c9                	test   %ecx,%ecx
+80101397:	75 6e                	jne    80101407 <iget+0xc7>
+80101399:	89 c6                	mov    %eax,%esi
+8010139b:	81 fb 34 36 11 80    	cmp    $0x80113634,%ebx
+801013a1:	72 df                	jb     80101382 <iget+0x42>
+801013a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801013a7:	90                   	nop
+801013a8:	85 f6                	test   %esi,%esi
+801013aa:	74 73                	je     8010141f <iget+0xdf>
+801013ac:	83 ec 0c             	sub    $0xc,%esp
+801013af:	89 3e                	mov    %edi,(%esi)
+801013b1:	89 56 04             	mov    %edx,0x4(%esi)
+801013b4:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+801013bb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+801013c2:	68 e0 19 11 80       	push   $0x801119e0
+801013c7:	e8 f4 39 00 00       	call   80104dc0 <release>
+801013cc:	83 c4 10             	add    $0x10,%esp
+801013cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801013d2:	89 f0                	mov    %esi,%eax
+801013d4:	5b                   	pop    %ebx
+801013d5:	5e                   	pop    %esi
+801013d6:	5f                   	pop    %edi
+801013d7:	5d                   	pop    %ebp
+801013d8:	c3                   	ret    
+801013d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801013e0:	39 53 04             	cmp    %edx,0x4(%ebx)
+801013e3:	75 8f                	jne    80101374 <iget+0x34>
+801013e5:	83 ec 0c             	sub    $0xc,%esp
+801013e8:	83 c1 01             	add    $0x1,%ecx
+801013eb:	89 de                	mov    %ebx,%esi
+801013ed:	68 e0 19 11 80       	push   $0x801119e0
+801013f2:	89 4b 08             	mov    %ecx,0x8(%ebx)
+801013f5:	e8 c6 39 00 00       	call   80104dc0 <release>
+801013fa:	83 c4 10             	add    $0x10,%esp
+801013fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101400:	89 f0                	mov    %esi,%eax
+80101402:	5b                   	pop    %ebx
+80101403:	5e                   	pop    %esi
+80101404:	5f                   	pop    %edi
+80101405:	5d                   	pop    %ebp
+80101406:	c3                   	ret    
+80101407:	81 fb 34 36 11 80    	cmp    $0x80113634,%ebx
+8010140d:	73 10                	jae    8010141f <iget+0xdf>
+8010140f:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101412:	85 c9                	test   %ecx,%ecx
+80101414:	0f 8f 56 ff ff ff    	jg     80101370 <iget+0x30>
+8010141a:	e9 6e ff ff ff       	jmp    8010138d <iget+0x4d>
+8010141f:	83 ec 0c             	sub    $0xc,%esp
+80101422:	68 68 7a 10 80       	push   $0x80107a68
+80101427:	e8 64 ef ff ff       	call   80100390 <panic>
+8010142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101430 <bmap>:
+80101430:	55                   	push   %ebp
+80101431:	89 e5                	mov    %esp,%ebp
+80101433:	57                   	push   %edi
+80101434:	56                   	push   %esi
+80101435:	89 c6                	mov    %eax,%esi
+80101437:	53                   	push   %ebx
+80101438:	83 ec 1c             	sub    $0x1c,%esp
+8010143b:	83 fa 0b             	cmp    $0xb,%edx
+8010143e:	0f 86 84 00 00 00    	jbe    801014c8 <bmap+0x98>
+80101444:	8d 5a f4             	lea    -0xc(%edx),%ebx
+80101447:	83 fb 7f             	cmp    $0x7f,%ebx
+8010144a:	0f 87 98 00 00 00    	ja     801014e8 <bmap+0xb8>
+80101450:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
+80101456:	8b 16                	mov    (%esi),%edx
+80101458:	85 c0                	test   %eax,%eax
+8010145a:	74 54                	je     801014b0 <bmap+0x80>
+8010145c:	83 ec 08             	sub    $0x8,%esp
+8010145f:	50                   	push   %eax
+80101460:	52                   	push   %edx
+80101461:	e8 6a ec ff ff       	call   801000d0 <bread>
+80101466:	83 c4 10             	add    $0x10,%esp
+80101469:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
+8010146d:	89 c7                	mov    %eax,%edi
+8010146f:	8b 1a                	mov    (%edx),%ebx
+80101471:	85 db                	test   %ebx,%ebx
+80101473:	74 1b                	je     80101490 <bmap+0x60>
+80101475:	83 ec 0c             	sub    $0xc,%esp
+80101478:	57                   	push   %edi
+80101479:	e8 72 ed ff ff       	call   801001f0 <brelse>
+8010147e:	83 c4 10             	add    $0x10,%esp
+80101481:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101484:	89 d8                	mov    %ebx,%eax
+80101486:	5b                   	pop    %ebx
+80101487:	5e                   	pop    %esi
+80101488:	5f                   	pop    %edi
+80101489:	5d                   	pop    %ebp
+8010148a:	c3                   	ret    
+8010148b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010148f:	90                   	nop
+80101490:	8b 06                	mov    (%esi),%eax
+80101492:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101495:	e8 96 fd ff ff       	call   80101230 <balloc>
+8010149a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010149d:	83 ec 0c             	sub    $0xc,%esp
+801014a0:	89 c3                	mov    %eax,%ebx
+801014a2:	89 02                	mov    %eax,(%edx)
+801014a4:	57                   	push   %edi
+801014a5:	e8 66 1a 00 00       	call   80102f10 <log_write>
+801014aa:	83 c4 10             	add    $0x10,%esp
+801014ad:	eb c6                	jmp    80101475 <bmap+0x45>
+801014af:	90                   	nop
+801014b0:	89 d0                	mov    %edx,%eax
+801014b2:	e8 79 fd ff ff       	call   80101230 <balloc>
+801014b7:	8b 16                	mov    (%esi),%edx
+801014b9:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+801014bf:	eb 9b                	jmp    8010145c <bmap+0x2c>
+801014c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801014c8:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+801014cb:	8b 5f 5c             	mov    0x5c(%edi),%ebx
+801014ce:	85 db                	test   %ebx,%ebx
+801014d0:	75 af                	jne    80101481 <bmap+0x51>
+801014d2:	8b 00                	mov    (%eax),%eax
+801014d4:	e8 57 fd ff ff       	call   80101230 <balloc>
+801014d9:	89 47 5c             	mov    %eax,0x5c(%edi)
+801014dc:	89 c3                	mov    %eax,%ebx
+801014de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801014e1:	89 d8                	mov    %ebx,%eax
+801014e3:	5b                   	pop    %ebx
+801014e4:	5e                   	pop    %esi
+801014e5:	5f                   	pop    %edi
+801014e6:	5d                   	pop    %ebp
+801014e7:	c3                   	ret    
+801014e8:	83 ec 0c             	sub    $0xc,%esp
+801014eb:	68 78 7a 10 80       	push   $0x80107a78
+801014f0:	e8 9b ee ff ff       	call   80100390 <panic>
+801014f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801014fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101500 <readsb>:
+80101500:	f3 0f 1e fb          	endbr32 
+80101504:	55                   	push   %ebp
+80101505:	89 e5                	mov    %esp,%ebp
+80101507:	56                   	push   %esi
+80101508:	53                   	push   %ebx
+80101509:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010150c:	83 ec 08             	sub    $0x8,%esp
+8010150f:	6a 01                	push   $0x1
+80101511:	ff 75 08             	pushl  0x8(%ebp)
+80101514:	e8 b7 eb ff ff       	call   801000d0 <bread>
+80101519:	83 c4 0c             	add    $0xc,%esp
+8010151c:	89 c3                	mov    %eax,%ebx
+8010151e:	8d 40 5c             	lea    0x5c(%eax),%eax
+80101521:	6a 1c                	push   $0x1c
+80101523:	50                   	push   %eax
+80101524:	56                   	push   %esi
+80101525:	e8 86 39 00 00       	call   80104eb0 <memmove>
+8010152a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010152d:	83 c4 10             	add    $0x10,%esp
+80101530:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101533:	5b                   	pop    %ebx
+80101534:	5e                   	pop    %esi
+80101535:	5d                   	pop    %ebp
+80101536:	e9 b5 ec ff ff       	jmp    801001f0 <brelse>
+8010153b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010153f:	90                   	nop
+
+80101540 <iinit>:
+80101540:	f3 0f 1e fb          	endbr32 
+80101544:	55                   	push   %ebp
+80101545:	89 e5                	mov    %esp,%ebp
+80101547:	53                   	push   %ebx
+80101548:	bb 20 1a 11 80       	mov    $0x80111a20,%ebx
+8010154d:	83 ec 0c             	sub    $0xc,%esp
+80101550:	68 8b 7a 10 80       	push   $0x80107a8b
+80101555:	68 e0 19 11 80       	push   $0x801119e0
+8010155a:	e8 21 36 00 00       	call   80104b80 <initlock>
+8010155f:	83 c4 10             	add    $0x10,%esp
+80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101568:	83 ec 08             	sub    $0x8,%esp
+8010156b:	68 92 7a 10 80       	push   $0x80107a92
+80101570:	53                   	push   %ebx
+80101571:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101577:	e8 c4 34 00 00       	call   80104a40 <initsleeplock>
+8010157c:	83 c4 10             	add    $0x10,%esp
+8010157f:	81 fb 40 36 11 80    	cmp    $0x80113640,%ebx
+80101585:	75 e1                	jne    80101568 <iinit+0x28>
+80101587:	83 ec 08             	sub    $0x8,%esp
+8010158a:	68 c0 19 11 80       	push   $0x801119c0
+8010158f:	ff 75 08             	pushl  0x8(%ebp)
+80101592:	e8 69 ff ff ff       	call   80101500 <readsb>
+80101597:	ff 35 d8 19 11 80    	pushl  0x801119d8
+8010159d:	ff 35 d4 19 11 80    	pushl  0x801119d4
+801015a3:	ff 35 d0 19 11 80    	pushl  0x801119d0
+801015a9:	ff 35 cc 19 11 80    	pushl  0x801119cc
+801015af:	ff 35 c8 19 11 80    	pushl  0x801119c8
+801015b5:	ff 35 c4 19 11 80    	pushl  0x801119c4
+801015bb:	ff 35 c0 19 11 80    	pushl  0x801119c0
+801015c1:	68 f8 7a 10 80       	push   $0x80107af8
+801015c6:	e8 e5 f0 ff ff       	call   801006b0 <cprintf>
+801015cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801015ce:	83 c4 30             	add    $0x30,%esp
+801015d1:	c9                   	leave  
+801015d2:	c3                   	ret    
+801015d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801015da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801015e0 <ialloc>:
+801015e0:	f3 0f 1e fb          	endbr32 
+801015e4:	55                   	push   %ebp
+801015e5:	89 e5                	mov    %esp,%ebp
+801015e7:	57                   	push   %edi
+801015e8:	56                   	push   %esi
+801015e9:	53                   	push   %ebx
+801015ea:	83 ec 1c             	sub    $0x1c,%esp
+801015ed:	8b 45 0c             	mov    0xc(%ebp),%eax
+801015f0:	83 3d c8 19 11 80 01 	cmpl   $0x1,0x801119c8
+801015f7:	8b 75 08             	mov    0x8(%ebp),%esi
+801015fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801015fd:	0f 86 8d 00 00 00    	jbe    80101690 <ialloc+0xb0>
+80101603:	bf 01 00 00 00       	mov    $0x1,%edi
+80101608:	eb 1d                	jmp    80101627 <ialloc+0x47>
+8010160a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101610:	83 ec 0c             	sub    $0xc,%esp
+80101613:	83 c7 01             	add    $0x1,%edi
+80101616:	53                   	push   %ebx
+80101617:	e8 d4 eb ff ff       	call   801001f0 <brelse>
+8010161c:	83 c4 10             	add    $0x10,%esp
+8010161f:	3b 3d c8 19 11 80    	cmp    0x801119c8,%edi
+80101625:	73 69                	jae    80101690 <ialloc+0xb0>
+80101627:	89 f8                	mov    %edi,%eax
+80101629:	83 ec 08             	sub    $0x8,%esp
+8010162c:	c1 e8 03             	shr    $0x3,%eax
+8010162f:	03 05 d4 19 11 80    	add    0x801119d4,%eax
+80101635:	50                   	push   %eax
+80101636:	56                   	push   %esi
+80101637:	e8 94 ea ff ff       	call   801000d0 <bread>
+8010163c:	83 c4 10             	add    $0x10,%esp
+8010163f:	89 c3                	mov    %eax,%ebx
+80101641:	89 f8                	mov    %edi,%eax
+80101643:	83 e0 07             	and    $0x7,%eax
+80101646:	c1 e0 06             	shl    $0x6,%eax
+80101649:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
+8010164d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80101651:	75 bd                	jne    80101610 <ialloc+0x30>
+80101653:	83 ec 04             	sub    $0x4,%esp
+80101656:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80101659:	6a 40                	push   $0x40
+8010165b:	6a 00                	push   $0x0
+8010165d:	51                   	push   %ecx
+8010165e:	e8 ad 37 00 00       	call   80104e10 <memset>
+80101663:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80101667:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010166a:	66 89 01             	mov    %ax,(%ecx)
+8010166d:	89 1c 24             	mov    %ebx,(%esp)
+80101670:	e8 9b 18 00 00       	call   80102f10 <log_write>
+80101675:	89 1c 24             	mov    %ebx,(%esp)
+80101678:	e8 73 eb ff ff       	call   801001f0 <brelse>
+8010167d:	83 c4 10             	add    $0x10,%esp
+80101680:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101683:	89 fa                	mov    %edi,%edx
+80101685:	5b                   	pop    %ebx
+80101686:	89 f0                	mov    %esi,%eax
+80101688:	5e                   	pop    %esi
+80101689:	5f                   	pop    %edi
+8010168a:	5d                   	pop    %ebp
+8010168b:	e9 b0 fc ff ff       	jmp    80101340 <iget>
+80101690:	83 ec 0c             	sub    $0xc,%esp
+80101693:	68 98 7a 10 80       	push   $0x80107a98
+80101698:	e8 f3 ec ff ff       	call   80100390 <panic>
+8010169d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801016a0 <iupdate>:
+801016a0:	f3 0f 1e fb          	endbr32 
+801016a4:	55                   	push   %ebp
+801016a5:	89 e5                	mov    %esp,%ebp
+801016a7:	56                   	push   %esi
+801016a8:	53                   	push   %ebx
+801016a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801016ac:	8b 43 04             	mov    0x4(%ebx),%eax
+801016af:	83 c3 5c             	add    $0x5c,%ebx
+801016b2:	83 ec 08             	sub    $0x8,%esp
+801016b5:	c1 e8 03             	shr    $0x3,%eax
+801016b8:	03 05 d4 19 11 80    	add    0x801119d4,%eax
+801016be:	50                   	push   %eax
+801016bf:	ff 73 a4             	pushl  -0x5c(%ebx)
+801016c2:	e8 09 ea ff ff       	call   801000d0 <bread>
+801016c7:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+801016cb:	83 c4 0c             	add    $0xc,%esp
+801016ce:	89 c6                	mov    %eax,%esi
+801016d0:	8b 43 a8             	mov    -0x58(%ebx),%eax
+801016d3:	83 e0 07             	and    $0x7,%eax
+801016d6:	c1 e0 06             	shl    $0x6,%eax
+801016d9:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+801016dd:	66 89 10             	mov    %dx,(%eax)
+801016e0:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+801016e4:	83 c0 0c             	add    $0xc,%eax
+801016e7:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+801016eb:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+801016ef:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+801016f3:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+801016f7:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+801016fb:	8b 53 fc             	mov    -0x4(%ebx),%edx
+801016fe:	89 50 fc             	mov    %edx,-0x4(%eax)
+80101701:	6a 34                	push   $0x34
+80101703:	53                   	push   %ebx
+80101704:	50                   	push   %eax
+80101705:	e8 a6 37 00 00       	call   80104eb0 <memmove>
+8010170a:	89 34 24             	mov    %esi,(%esp)
+8010170d:	e8 fe 17 00 00       	call   80102f10 <log_write>
+80101712:	89 75 08             	mov    %esi,0x8(%ebp)
+80101715:	83 c4 10             	add    $0x10,%esp
+80101718:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010171b:	5b                   	pop    %ebx
+8010171c:	5e                   	pop    %esi
+8010171d:	5d                   	pop    %ebp
+8010171e:	e9 cd ea ff ff       	jmp    801001f0 <brelse>
+80101723:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010172a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101730 <idup>:
+80101730:	f3 0f 1e fb          	endbr32 
+80101734:	55                   	push   %ebp
+80101735:	89 e5                	mov    %esp,%ebp
+80101737:	53                   	push   %ebx
+80101738:	83 ec 10             	sub    $0x10,%esp
+8010173b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010173e:	68 e0 19 11 80       	push   $0x801119e0
+80101743:	e8 b8 35 00 00       	call   80104d00 <acquire>
+80101748:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+8010174c:	c7 04 24 e0 19 11 80 	movl   $0x801119e0,(%esp)
+80101753:	e8 68 36 00 00       	call   80104dc0 <release>
+80101758:	89 d8                	mov    %ebx,%eax
+8010175a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010175d:	c9                   	leave  
+8010175e:	c3                   	ret    
+8010175f:	90                   	nop
+
+80101760 <ilock>:
+80101760:	f3 0f 1e fb          	endbr32 
+80101764:	55                   	push   %ebp
+80101765:	89 e5                	mov    %esp,%ebp
+80101767:	56                   	push   %esi
+80101768:	53                   	push   %ebx
+80101769:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010176c:	85 db                	test   %ebx,%ebx
+8010176e:	0f 84 b3 00 00 00    	je     80101827 <ilock+0xc7>
+80101774:	8b 53 08             	mov    0x8(%ebx),%edx
+80101777:	85 d2                	test   %edx,%edx
+80101779:	0f 8e a8 00 00 00    	jle    80101827 <ilock+0xc7>
+8010177f:	83 ec 0c             	sub    $0xc,%esp
+80101782:	8d 43 0c             	lea    0xc(%ebx),%eax
+80101785:	50                   	push   %eax
+80101786:	e8 f5 32 00 00       	call   80104a80 <acquiresleep>
+8010178b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010178e:	83 c4 10             	add    $0x10,%esp
+80101791:	85 c0                	test   %eax,%eax
+80101793:	74 0b                	je     801017a0 <ilock+0x40>
+80101795:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101798:	5b                   	pop    %ebx
+80101799:	5e                   	pop    %esi
+8010179a:	5d                   	pop    %ebp
+8010179b:	c3                   	ret    
+8010179c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801017a0:	8b 43 04             	mov    0x4(%ebx),%eax
+801017a3:	83 ec 08             	sub    $0x8,%esp
+801017a6:	c1 e8 03             	shr    $0x3,%eax
+801017a9:	03 05 d4 19 11 80    	add    0x801119d4,%eax
+801017af:	50                   	push   %eax
+801017b0:	ff 33                	pushl  (%ebx)
+801017b2:	e8 19 e9 ff ff       	call   801000d0 <bread>
+801017b7:	83 c4 0c             	add    $0xc,%esp
+801017ba:	89 c6                	mov    %eax,%esi
+801017bc:	8b 43 04             	mov    0x4(%ebx),%eax
+801017bf:	83 e0 07             	and    $0x7,%eax
+801017c2:	c1 e0 06             	shl    $0x6,%eax
+801017c5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+801017c9:	0f b7 10             	movzwl (%eax),%edx
+801017cc:	83 c0 0c             	add    $0xc,%eax
+801017cf:	66 89 53 50          	mov    %dx,0x50(%ebx)
+801017d3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+801017d7:	66 89 53 52          	mov    %dx,0x52(%ebx)
+801017db:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+801017df:	66 89 53 54          	mov    %dx,0x54(%ebx)
+801017e3:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+801017e7:	66 89 53 56          	mov    %dx,0x56(%ebx)
+801017eb:	8b 50 fc             	mov    -0x4(%eax),%edx
+801017ee:	89 53 58             	mov    %edx,0x58(%ebx)
+801017f1:	6a 34                	push   $0x34
+801017f3:	50                   	push   %eax
+801017f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
+801017f7:	50                   	push   %eax
+801017f8:	e8 b3 36 00 00       	call   80104eb0 <memmove>
+801017fd:	89 34 24             	mov    %esi,(%esp)
+80101800:	e8 eb e9 ff ff       	call   801001f0 <brelse>
+80101805:	83 c4 10             	add    $0x10,%esp
+80101808:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+8010180d:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+80101814:	0f 85 7b ff ff ff    	jne    80101795 <ilock+0x35>
+8010181a:	83 ec 0c             	sub    $0xc,%esp
+8010181d:	68 b0 7a 10 80       	push   $0x80107ab0
+80101822:	e8 69 eb ff ff       	call   80100390 <panic>
+80101827:	83 ec 0c             	sub    $0xc,%esp
+8010182a:	68 aa 7a 10 80       	push   $0x80107aaa
+8010182f:	e8 5c eb ff ff       	call   80100390 <panic>
+80101834:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010183b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010183f:	90                   	nop
+
+80101840 <iunlock>:
+80101840:	f3 0f 1e fb          	endbr32 
+80101844:	55                   	push   %ebp
+80101845:	89 e5                	mov    %esp,%ebp
+80101847:	56                   	push   %esi
+80101848:	53                   	push   %ebx
+80101849:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010184c:	85 db                	test   %ebx,%ebx
+8010184e:	74 28                	je     80101878 <iunlock+0x38>
+80101850:	83 ec 0c             	sub    $0xc,%esp
+80101853:	8d 73 0c             	lea    0xc(%ebx),%esi
+80101856:	56                   	push   %esi
+80101857:	e8 c4 32 00 00       	call   80104b20 <holdingsleep>
+8010185c:	83 c4 10             	add    $0x10,%esp
+8010185f:	85 c0                	test   %eax,%eax
+80101861:	74 15                	je     80101878 <iunlock+0x38>
+80101863:	8b 43 08             	mov    0x8(%ebx),%eax
+80101866:	85 c0                	test   %eax,%eax
+80101868:	7e 0e                	jle    80101878 <iunlock+0x38>
+8010186a:	89 75 08             	mov    %esi,0x8(%ebp)
+8010186d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101870:	5b                   	pop    %ebx
+80101871:	5e                   	pop    %esi
+80101872:	5d                   	pop    %ebp
+80101873:	e9 68 32 00 00       	jmp    80104ae0 <releasesleep>
+80101878:	83 ec 0c             	sub    $0xc,%esp
+8010187b:	68 bf 7a 10 80       	push   $0x80107abf
+80101880:	e8 0b eb ff ff       	call   80100390 <panic>
+80101885:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010188c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101890 <iput>:
+80101890:	f3 0f 1e fb          	endbr32 
+80101894:	55                   	push   %ebp
+80101895:	89 e5                	mov    %esp,%ebp
+80101897:	57                   	push   %edi
+80101898:	56                   	push   %esi
+80101899:	53                   	push   %ebx
+8010189a:	83 ec 28             	sub    $0x28,%esp
+8010189d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801018a0:	8d 7b 0c             	lea    0xc(%ebx),%edi
+801018a3:	57                   	push   %edi
+801018a4:	e8 d7 31 00 00       	call   80104a80 <acquiresleep>
+801018a9:	8b 53 4c             	mov    0x4c(%ebx),%edx
+801018ac:	83 c4 10             	add    $0x10,%esp
+801018af:	85 d2                	test   %edx,%edx
+801018b1:	74 07                	je     801018ba <iput+0x2a>
+801018b3:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801018b8:	74 36                	je     801018f0 <iput+0x60>
+801018ba:	83 ec 0c             	sub    $0xc,%esp
+801018bd:	57                   	push   %edi
+801018be:	e8 1d 32 00 00       	call   80104ae0 <releasesleep>
+801018c3:	c7 04 24 e0 19 11 80 	movl   $0x801119e0,(%esp)
+801018ca:	e8 31 34 00 00       	call   80104d00 <acquire>
+801018cf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
+801018d3:	83 c4 10             	add    $0x10,%esp
+801018d6:	c7 45 08 e0 19 11 80 	movl   $0x801119e0,0x8(%ebp)
+801018dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801018e0:	5b                   	pop    %ebx
+801018e1:	5e                   	pop    %esi
+801018e2:	5f                   	pop    %edi
+801018e3:	5d                   	pop    %ebp
+801018e4:	e9 d7 34 00 00       	jmp    80104dc0 <release>
+801018e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801018f0:	83 ec 0c             	sub    $0xc,%esp
+801018f3:	68 e0 19 11 80       	push   $0x801119e0
+801018f8:	e8 03 34 00 00       	call   80104d00 <acquire>
+801018fd:	8b 73 08             	mov    0x8(%ebx),%esi
+80101900:	c7 04 24 e0 19 11 80 	movl   $0x801119e0,(%esp)
+80101907:	e8 b4 34 00 00       	call   80104dc0 <release>
+8010190c:	83 c4 10             	add    $0x10,%esp
+8010190f:	83 fe 01             	cmp    $0x1,%esi
+80101912:	75 a6                	jne    801018ba <iput+0x2a>
+80101914:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
+8010191a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+8010191d:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80101920:	89 cf                	mov    %ecx,%edi
+80101922:	eb 0b                	jmp    8010192f <iput+0x9f>
+80101924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101928:	83 c6 04             	add    $0x4,%esi
+8010192b:	39 fe                	cmp    %edi,%esi
+8010192d:	74 19                	je     80101948 <iput+0xb8>
+8010192f:	8b 16                	mov    (%esi),%edx
+80101931:	85 d2                	test   %edx,%edx
+80101933:	74 f3                	je     80101928 <iput+0x98>
+80101935:	8b 03                	mov    (%ebx),%eax
+80101937:	e8 74 f8 ff ff       	call   801011b0 <bfree>
+8010193c:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80101942:	eb e4                	jmp    80101928 <iput+0x98>
+80101944:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101948:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+8010194e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80101951:	85 c0                	test   %eax,%eax
+80101953:	75 33                	jne    80101988 <iput+0xf8>
+80101955:	83 ec 0c             	sub    $0xc,%esp
+80101958:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+8010195f:	53                   	push   %ebx
+80101960:	e8 3b fd ff ff       	call   801016a0 <iupdate>
+80101965:	31 c0                	xor    %eax,%eax
+80101967:	66 89 43 50          	mov    %ax,0x50(%ebx)
+8010196b:	89 1c 24             	mov    %ebx,(%esp)
+8010196e:	e8 2d fd ff ff       	call   801016a0 <iupdate>
+80101973:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
+8010197a:	83 c4 10             	add    $0x10,%esp
+8010197d:	e9 38 ff ff ff       	jmp    801018ba <iput+0x2a>
+80101982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101988:	83 ec 08             	sub    $0x8,%esp
+8010198b:	50                   	push   %eax
+8010198c:	ff 33                	pushl  (%ebx)
+8010198e:	e8 3d e7 ff ff       	call   801000d0 <bread>
+80101993:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101996:	83 c4 10             	add    $0x10,%esp
+80101999:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+8010199f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801019a2:	8d 70 5c             	lea    0x5c(%eax),%esi
+801019a5:	89 cf                	mov    %ecx,%edi
+801019a7:	eb 0e                	jmp    801019b7 <iput+0x127>
+801019a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801019b0:	83 c6 04             	add    $0x4,%esi
+801019b3:	39 f7                	cmp    %esi,%edi
+801019b5:	74 19                	je     801019d0 <iput+0x140>
+801019b7:	8b 16                	mov    (%esi),%edx
+801019b9:	85 d2                	test   %edx,%edx
+801019bb:	74 f3                	je     801019b0 <iput+0x120>
+801019bd:	8b 03                	mov    (%ebx),%eax
+801019bf:	e8 ec f7 ff ff       	call   801011b0 <bfree>
+801019c4:	eb ea                	jmp    801019b0 <iput+0x120>
+801019c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801019cd:	8d 76 00             	lea    0x0(%esi),%esi
+801019d0:	83 ec 0c             	sub    $0xc,%esp
+801019d3:	ff 75 e4             	pushl  -0x1c(%ebp)
+801019d6:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801019d9:	e8 12 e8 ff ff       	call   801001f0 <brelse>
+801019de:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
+801019e4:	8b 03                	mov    (%ebx),%eax
+801019e6:	e8 c5 f7 ff ff       	call   801011b0 <bfree>
+801019eb:	83 c4 10             	add    $0x10,%esp
+801019ee:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
+801019f5:	00 00 00 
+801019f8:	e9 58 ff ff ff       	jmp    80101955 <iput+0xc5>
+801019fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101a00 <iunlockput>:
+80101a00:	f3 0f 1e fb          	endbr32 
+80101a04:	55                   	push   %ebp
+80101a05:	89 e5                	mov    %esp,%ebp
+80101a07:	53                   	push   %ebx
+80101a08:	83 ec 10             	sub    $0x10,%esp
+80101a0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101a0e:	53                   	push   %ebx
+80101a0f:	e8 2c fe ff ff       	call   80101840 <iunlock>
+80101a14:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101a17:	83 c4 10             	add    $0x10,%esp
+80101a1a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101a1d:	c9                   	leave  
+80101a1e:	e9 6d fe ff ff       	jmp    80101890 <iput>
+80101a23:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101a30 <stati>:
+80101a30:	f3 0f 1e fb          	endbr32 
+80101a34:	55                   	push   %ebp
+80101a35:	89 e5                	mov    %esp,%ebp
+80101a37:	8b 55 08             	mov    0x8(%ebp),%edx
+80101a3a:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101a3d:	8b 0a                	mov    (%edx),%ecx
+80101a3f:	89 48 04             	mov    %ecx,0x4(%eax)
+80101a42:	8b 4a 04             	mov    0x4(%edx),%ecx
+80101a45:	89 48 08             	mov    %ecx,0x8(%eax)
+80101a48:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+80101a4c:	66 89 08             	mov    %cx,(%eax)
+80101a4f:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+80101a53:	66 89 48 0c          	mov    %cx,0xc(%eax)
+80101a57:	8b 52 58             	mov    0x58(%edx),%edx
+80101a5a:	89 50 10             	mov    %edx,0x10(%eax)
+80101a5d:	5d                   	pop    %ebp
+80101a5e:	c3                   	ret    
+80101a5f:	90                   	nop
+
+80101a60 <readi>:
+80101a60:	f3 0f 1e fb          	endbr32 
+80101a64:	55                   	push   %ebp
+80101a65:	89 e5                	mov    %esp,%ebp
+80101a67:	57                   	push   %edi
+80101a68:	56                   	push   %esi
+80101a69:	53                   	push   %ebx
+80101a6a:	83 ec 1c             	sub    $0x1c,%esp
+80101a6d:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80101a70:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a73:	8b 75 10             	mov    0x10(%ebp),%esi
+80101a76:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101a79:	8b 7d 14             	mov    0x14(%ebp),%edi
+80101a7c:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+80101a81:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101a84:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80101a87:	0f 84 a3 00 00 00    	je     80101b30 <readi+0xd0>
+80101a8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101a90:	8b 40 58             	mov    0x58(%eax),%eax
+80101a93:	39 c6                	cmp    %eax,%esi
+80101a95:	0f 87 b6 00 00 00    	ja     80101b51 <readi+0xf1>
+80101a9b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101a9e:	31 c9                	xor    %ecx,%ecx
+80101aa0:	89 da                	mov    %ebx,%edx
+80101aa2:	01 f2                	add    %esi,%edx
+80101aa4:	0f 92 c1             	setb   %cl
+80101aa7:	89 cf                	mov    %ecx,%edi
+80101aa9:	0f 82 a2 00 00 00    	jb     80101b51 <readi+0xf1>
+80101aaf:	89 c1                	mov    %eax,%ecx
+80101ab1:	29 f1                	sub    %esi,%ecx
+80101ab3:	39 d0                	cmp    %edx,%eax
+80101ab5:	0f 43 cb             	cmovae %ebx,%ecx
+80101ab8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80101abb:	85 c9                	test   %ecx,%ecx
+80101abd:	74 63                	je     80101b22 <readi+0xc2>
+80101abf:	90                   	nop
+80101ac0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+80101ac3:	89 f2                	mov    %esi,%edx
+80101ac5:	c1 ea 09             	shr    $0x9,%edx
+80101ac8:	89 d8                	mov    %ebx,%eax
+80101aca:	e8 61 f9 ff ff       	call   80101430 <bmap>
+80101acf:	83 ec 08             	sub    $0x8,%esp
+80101ad2:	50                   	push   %eax
+80101ad3:	ff 33                	pushl  (%ebx)
+80101ad5:	e8 f6 e5 ff ff       	call   801000d0 <bread>
+80101ada:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101add:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101ae2:	83 c4 0c             	add    $0xc,%esp
+80101ae5:	89 c2                	mov    %eax,%edx
+80101ae7:	89 f0                	mov    %esi,%eax
+80101ae9:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101aee:	29 fb                	sub    %edi,%ebx
+80101af0:	89 55 dc             	mov    %edx,-0x24(%ebp)
+80101af3:	29 c1                	sub    %eax,%ecx
+80101af5:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
+80101af9:	39 d9                	cmp    %ebx,%ecx
+80101afb:	0f 46 d9             	cmovbe %ecx,%ebx
+80101afe:	53                   	push   %ebx
+80101aff:	01 df                	add    %ebx,%edi
+80101b01:	01 de                	add    %ebx,%esi
+80101b03:	50                   	push   %eax
+80101b04:	ff 75 e0             	pushl  -0x20(%ebp)
+80101b07:	e8 a4 33 00 00       	call   80104eb0 <memmove>
+80101b0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101b0f:	89 14 24             	mov    %edx,(%esp)
+80101b12:	e8 d9 e6 ff ff       	call   801001f0 <brelse>
+80101b17:	01 5d e0             	add    %ebx,-0x20(%ebp)
+80101b1a:	83 c4 10             	add    $0x10,%esp
+80101b1d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101b20:	77 9e                	ja     80101ac0 <readi+0x60>
+80101b22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101b25:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b28:	5b                   	pop    %ebx
+80101b29:	5e                   	pop    %esi
+80101b2a:	5f                   	pop    %edi
+80101b2b:	5d                   	pop    %ebp
+80101b2c:	c3                   	ret    
+80101b2d:	8d 76 00             	lea    0x0(%esi),%esi
+80101b30:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101b34:	66 83 f8 09          	cmp    $0x9,%ax
+80101b38:	77 17                	ja     80101b51 <readi+0xf1>
+80101b3a:	8b 04 c5 60 19 11 80 	mov    -0x7feee6a0(,%eax,8),%eax
+80101b41:	85 c0                	test   %eax,%eax
+80101b43:	74 0c                	je     80101b51 <readi+0xf1>
+80101b45:	89 7d 10             	mov    %edi,0x10(%ebp)
+80101b48:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b4b:	5b                   	pop    %ebx
+80101b4c:	5e                   	pop    %esi
+80101b4d:	5f                   	pop    %edi
+80101b4e:	5d                   	pop    %ebp
+80101b4f:	ff e0                	jmp    *%eax
+80101b51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101b56:	eb cd                	jmp    80101b25 <readi+0xc5>
+80101b58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101b5f:	90                   	nop
+
+80101b60 <writei>:
+80101b60:	f3 0f 1e fb          	endbr32 
+80101b64:	55                   	push   %ebp
+80101b65:	89 e5                	mov    %esp,%ebp
+80101b67:	57                   	push   %edi
+80101b68:	56                   	push   %esi
+80101b69:	53                   	push   %ebx
+80101b6a:	83 ec 1c             	sub    $0x1c,%esp
+80101b6d:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b70:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101b73:	8b 7d 14             	mov    0x14(%ebp),%edi
+80101b76:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+80101b7b:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101b7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101b81:	8b 75 10             	mov    0x10(%ebp),%esi
+80101b84:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101b87:	0f 84 b3 00 00 00    	je     80101c40 <writei+0xe0>
+80101b8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101b90:	39 70 58             	cmp    %esi,0x58(%eax)
+80101b93:	0f 82 e3 00 00 00    	jb     80101c7c <writei+0x11c>
+80101b99:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80101b9c:	89 f8                	mov    %edi,%eax
+80101b9e:	01 f0                	add    %esi,%eax
+80101ba0:	0f 82 d6 00 00 00    	jb     80101c7c <writei+0x11c>
+80101ba6:	3d 00 18 01 00       	cmp    $0x11800,%eax
+80101bab:	0f 87 cb 00 00 00    	ja     80101c7c <writei+0x11c>
+80101bb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80101bb8:	85 ff                	test   %edi,%edi
+80101bba:	74 75                	je     80101c31 <writei+0xd1>
+80101bbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101bc0:	8b 7d d8             	mov    -0x28(%ebp),%edi
+80101bc3:	89 f2                	mov    %esi,%edx
+80101bc5:	c1 ea 09             	shr    $0x9,%edx
+80101bc8:	89 f8                	mov    %edi,%eax
+80101bca:	e8 61 f8 ff ff       	call   80101430 <bmap>
+80101bcf:	83 ec 08             	sub    $0x8,%esp
+80101bd2:	50                   	push   %eax
+80101bd3:	ff 37                	pushl  (%edi)
+80101bd5:	e8 f6 e4 ff ff       	call   801000d0 <bread>
+80101bda:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101bdf:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+80101be2:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
+80101be5:	89 c7                	mov    %eax,%edi
+80101be7:	89 f0                	mov    %esi,%eax
+80101be9:	83 c4 0c             	add    $0xc,%esp
+80101bec:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101bf1:	29 c1                	sub    %eax,%ecx
+80101bf3:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
+80101bf7:	39 d9                	cmp    %ebx,%ecx
+80101bf9:	0f 46 d9             	cmovbe %ecx,%ebx
+80101bfc:	53                   	push   %ebx
+80101bfd:	01 de                	add    %ebx,%esi
+80101bff:	ff 75 dc             	pushl  -0x24(%ebp)
+80101c02:	50                   	push   %eax
+80101c03:	e8 a8 32 00 00       	call   80104eb0 <memmove>
+80101c08:	89 3c 24             	mov    %edi,(%esp)
+80101c0b:	e8 00 13 00 00       	call   80102f10 <log_write>
+80101c10:	89 3c 24             	mov    %edi,(%esp)
+80101c13:	e8 d8 e5 ff ff       	call   801001f0 <brelse>
+80101c18:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+80101c1b:	83 c4 10             	add    $0x10,%esp
+80101c1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101c21:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80101c24:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+80101c27:	77 97                	ja     80101bc0 <writei+0x60>
+80101c29:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101c2c:	3b 70 58             	cmp    0x58(%eax),%esi
+80101c2f:	77 37                	ja     80101c68 <writei+0x108>
+80101c31:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101c34:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c37:	5b                   	pop    %ebx
+80101c38:	5e                   	pop    %esi
+80101c39:	5f                   	pop    %edi
+80101c3a:	5d                   	pop    %ebp
+80101c3b:	c3                   	ret    
+80101c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101c40:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101c44:	66 83 f8 09          	cmp    $0x9,%ax
+80101c48:	77 32                	ja     80101c7c <writei+0x11c>
+80101c4a:	8b 04 c5 64 19 11 80 	mov    -0x7feee69c(,%eax,8),%eax
+80101c51:	85 c0                	test   %eax,%eax
+80101c53:	74 27                	je     80101c7c <writei+0x11c>
+80101c55:	89 7d 10             	mov    %edi,0x10(%ebp)
+80101c58:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c5b:	5b                   	pop    %ebx
+80101c5c:	5e                   	pop    %esi
+80101c5d:	5f                   	pop    %edi
+80101c5e:	5d                   	pop    %ebp
+80101c5f:	ff e0                	jmp    *%eax
+80101c61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c68:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101c6b:	83 ec 0c             	sub    $0xc,%esp
+80101c6e:	89 70 58             	mov    %esi,0x58(%eax)
+80101c71:	50                   	push   %eax
+80101c72:	e8 29 fa ff ff       	call   801016a0 <iupdate>
+80101c77:	83 c4 10             	add    $0x10,%esp
+80101c7a:	eb b5                	jmp    80101c31 <writei+0xd1>
+80101c7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101c81:	eb b1                	jmp    80101c34 <writei+0xd4>
+80101c83:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101c90 <namecmp>:
+80101c90:	f3 0f 1e fb          	endbr32 
+80101c94:	55                   	push   %ebp
+80101c95:	89 e5                	mov    %esp,%ebp
+80101c97:	83 ec 0c             	sub    $0xc,%esp
+80101c9a:	6a 0e                	push   $0xe
+80101c9c:	ff 75 0c             	pushl  0xc(%ebp)
+80101c9f:	ff 75 08             	pushl  0x8(%ebp)
+80101ca2:	e8 79 32 00 00       	call   80104f20 <strncmp>
+80101ca7:	c9                   	leave  
+80101ca8:	c3                   	ret    
+80101ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101cb0 <dirlookup>:
+80101cb0:	f3 0f 1e fb          	endbr32 
+80101cb4:	55                   	push   %ebp
+80101cb5:	89 e5                	mov    %esp,%ebp
+80101cb7:	57                   	push   %edi
+80101cb8:	56                   	push   %esi
+80101cb9:	53                   	push   %ebx
+80101cba:	83 ec 1c             	sub    $0x1c,%esp
+80101cbd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101cc0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80101cc5:	0f 85 89 00 00 00    	jne    80101d54 <dirlookup+0xa4>
+80101ccb:	8b 53 58             	mov    0x58(%ebx),%edx
+80101cce:	31 ff                	xor    %edi,%edi
+80101cd0:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101cd3:	85 d2                	test   %edx,%edx
+80101cd5:	74 42                	je     80101d19 <dirlookup+0x69>
+80101cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101cde:	66 90                	xchg   %ax,%ax
+80101ce0:	6a 10                	push   $0x10
+80101ce2:	57                   	push   %edi
+80101ce3:	56                   	push   %esi
+80101ce4:	53                   	push   %ebx
+80101ce5:	e8 76 fd ff ff       	call   80101a60 <readi>
+80101cea:	83 c4 10             	add    $0x10,%esp
+80101ced:	83 f8 10             	cmp    $0x10,%eax
+80101cf0:	75 55                	jne    80101d47 <dirlookup+0x97>
+80101cf2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101cf7:	74 18                	je     80101d11 <dirlookup+0x61>
+80101cf9:	83 ec 04             	sub    $0x4,%esp
+80101cfc:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101cff:	6a 0e                	push   $0xe
+80101d01:	50                   	push   %eax
+80101d02:	ff 75 0c             	pushl  0xc(%ebp)
+80101d05:	e8 16 32 00 00       	call   80104f20 <strncmp>
+80101d0a:	83 c4 10             	add    $0x10,%esp
+80101d0d:	85 c0                	test   %eax,%eax
+80101d0f:	74 17                	je     80101d28 <dirlookup+0x78>
+80101d11:	83 c7 10             	add    $0x10,%edi
+80101d14:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101d17:	72 c7                	jb     80101ce0 <dirlookup+0x30>
+80101d19:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101d1c:	31 c0                	xor    %eax,%eax
+80101d1e:	5b                   	pop    %ebx
+80101d1f:	5e                   	pop    %esi
+80101d20:	5f                   	pop    %edi
+80101d21:	5d                   	pop    %ebp
+80101d22:	c3                   	ret    
+80101d23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101d27:	90                   	nop
+80101d28:	8b 45 10             	mov    0x10(%ebp),%eax
+80101d2b:	85 c0                	test   %eax,%eax
+80101d2d:	74 05                	je     80101d34 <dirlookup+0x84>
+80101d2f:	8b 45 10             	mov    0x10(%ebp),%eax
+80101d32:	89 38                	mov    %edi,(%eax)
+80101d34:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+80101d38:	8b 03                	mov    (%ebx),%eax
+80101d3a:	e8 01 f6 ff ff       	call   80101340 <iget>
+80101d3f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101d42:	5b                   	pop    %ebx
+80101d43:	5e                   	pop    %esi
+80101d44:	5f                   	pop    %edi
+80101d45:	5d                   	pop    %ebp
+80101d46:	c3                   	ret    
+80101d47:	83 ec 0c             	sub    $0xc,%esp
+80101d4a:	68 d9 7a 10 80       	push   $0x80107ad9
+80101d4f:	e8 3c e6 ff ff       	call   80100390 <panic>
+80101d54:	83 ec 0c             	sub    $0xc,%esp
+80101d57:	68 c7 7a 10 80       	push   $0x80107ac7
+80101d5c:	e8 2f e6 ff ff       	call   80100390 <panic>
+80101d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d6f:	90                   	nop
+
+80101d70 <namex>:
+80101d70:	55                   	push   %ebp
+80101d71:	89 e5                	mov    %esp,%ebp
+80101d73:	57                   	push   %edi
+80101d74:	56                   	push   %esi
+80101d75:	53                   	push   %ebx
+80101d76:	89 c3                	mov    %eax,%ebx
+80101d78:	83 ec 1c             	sub    $0x1c,%esp
+80101d7b:	80 38 2f             	cmpb   $0x2f,(%eax)
+80101d7e:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80101d81:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80101d84:	0f 84 86 01 00 00    	je     80101f10 <namex+0x1a0>
+80101d8a:	e8 e1 1f 00 00       	call   80103d70 <myproc>
+80101d8f:	83 ec 0c             	sub    $0xc,%esp
+80101d92:	89 df                	mov    %ebx,%edi
+80101d94:	8b 70 68             	mov    0x68(%eax),%esi
+80101d97:	68 e0 19 11 80       	push   $0x801119e0
+80101d9c:	e8 5f 2f 00 00       	call   80104d00 <acquire>
+80101da1:	83 46 08 01          	addl   $0x1,0x8(%esi)
+80101da5:	c7 04 24 e0 19 11 80 	movl   $0x801119e0,(%esp)
+80101dac:	e8 0f 30 00 00       	call   80104dc0 <release>
+80101db1:	83 c4 10             	add    $0x10,%esp
+80101db4:	eb 0d                	jmp    80101dc3 <namex+0x53>
+80101db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101dbd:	8d 76 00             	lea    0x0(%esi),%esi
+80101dc0:	83 c7 01             	add    $0x1,%edi
+80101dc3:	0f b6 07             	movzbl (%edi),%eax
+80101dc6:	3c 2f                	cmp    $0x2f,%al
+80101dc8:	74 f6                	je     80101dc0 <namex+0x50>
+80101dca:	84 c0                	test   %al,%al
+80101dcc:	0f 84 ee 00 00 00    	je     80101ec0 <namex+0x150>
+80101dd2:	0f b6 07             	movzbl (%edi),%eax
+80101dd5:	84 c0                	test   %al,%al
+80101dd7:	0f 84 fb 00 00 00    	je     80101ed8 <namex+0x168>
+80101ddd:	89 fb                	mov    %edi,%ebx
+80101ddf:	3c 2f                	cmp    $0x2f,%al
+80101de1:	0f 84 f1 00 00 00    	je     80101ed8 <namex+0x168>
+80101de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101dee:	66 90                	xchg   %ax,%ax
+80101df0:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
+80101df4:	83 c3 01             	add    $0x1,%ebx
+80101df7:	3c 2f                	cmp    $0x2f,%al
+80101df9:	74 04                	je     80101dff <namex+0x8f>
+80101dfb:	84 c0                	test   %al,%al
+80101dfd:	75 f1                	jne    80101df0 <namex+0x80>
+80101dff:	89 d8                	mov    %ebx,%eax
+80101e01:	29 f8                	sub    %edi,%eax
+80101e03:	83 f8 0d             	cmp    $0xd,%eax
+80101e06:	0f 8e 84 00 00 00    	jle    80101e90 <namex+0x120>
+80101e0c:	83 ec 04             	sub    $0x4,%esp
+80101e0f:	6a 0e                	push   $0xe
+80101e11:	57                   	push   %edi
+80101e12:	89 df                	mov    %ebx,%edi
+80101e14:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101e17:	e8 94 30 00 00       	call   80104eb0 <memmove>
+80101e1c:	83 c4 10             	add    $0x10,%esp
+80101e1f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80101e22:	75 0c                	jne    80101e30 <namex+0xc0>
+80101e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101e28:	83 c7 01             	add    $0x1,%edi
+80101e2b:	80 3f 2f             	cmpb   $0x2f,(%edi)
+80101e2e:	74 f8                	je     80101e28 <namex+0xb8>
+80101e30:	83 ec 0c             	sub    $0xc,%esp
+80101e33:	56                   	push   %esi
+80101e34:	e8 27 f9 ff ff       	call   80101760 <ilock>
+80101e39:	83 c4 10             	add    $0x10,%esp
+80101e3c:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80101e41:	0f 85 a1 00 00 00    	jne    80101ee8 <namex+0x178>
+80101e47:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80101e4a:	85 d2                	test   %edx,%edx
+80101e4c:	74 09                	je     80101e57 <namex+0xe7>
+80101e4e:	80 3f 00             	cmpb   $0x0,(%edi)
+80101e51:	0f 84 d9 00 00 00    	je     80101f30 <namex+0x1c0>
+80101e57:	83 ec 04             	sub    $0x4,%esp
+80101e5a:	6a 00                	push   $0x0
+80101e5c:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101e5f:	56                   	push   %esi
+80101e60:	e8 4b fe ff ff       	call   80101cb0 <dirlookup>
+80101e65:	83 c4 10             	add    $0x10,%esp
+80101e68:	89 c3                	mov    %eax,%ebx
+80101e6a:	85 c0                	test   %eax,%eax
+80101e6c:	74 7a                	je     80101ee8 <namex+0x178>
+80101e6e:	83 ec 0c             	sub    $0xc,%esp
+80101e71:	56                   	push   %esi
+80101e72:	e8 c9 f9 ff ff       	call   80101840 <iunlock>
+80101e77:	89 34 24             	mov    %esi,(%esp)
+80101e7a:	89 de                	mov    %ebx,%esi
+80101e7c:	e8 0f fa ff ff       	call   80101890 <iput>
+80101e81:	83 c4 10             	add    $0x10,%esp
+80101e84:	e9 3a ff ff ff       	jmp    80101dc3 <namex+0x53>
+80101e89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101e90:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101e93:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
+80101e96:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+80101e99:	83 ec 04             	sub    $0x4,%esp
+80101e9c:	50                   	push   %eax
+80101e9d:	57                   	push   %edi
+80101e9e:	89 df                	mov    %ebx,%edi
+80101ea0:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101ea3:	e8 08 30 00 00       	call   80104eb0 <memmove>
+80101ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101eab:	83 c4 10             	add    $0x10,%esp
+80101eae:	c6 00 00             	movb   $0x0,(%eax)
+80101eb1:	e9 69 ff ff ff       	jmp    80101e1f <namex+0xaf>
+80101eb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101ebd:	8d 76 00             	lea    0x0(%esi),%esi
+80101ec0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101ec3:	85 c0                	test   %eax,%eax
+80101ec5:	0f 85 85 00 00 00    	jne    80101f50 <namex+0x1e0>
+80101ecb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ece:	89 f0                	mov    %esi,%eax
+80101ed0:	5b                   	pop    %ebx
+80101ed1:	5e                   	pop    %esi
+80101ed2:	5f                   	pop    %edi
+80101ed3:	5d                   	pop    %ebp
+80101ed4:	c3                   	ret    
+80101ed5:	8d 76 00             	lea    0x0(%esi),%esi
+80101ed8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101edb:	89 fb                	mov    %edi,%ebx
+80101edd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101ee0:	31 c0                	xor    %eax,%eax
+80101ee2:	eb b5                	jmp    80101e99 <namex+0x129>
+80101ee4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101ee8:	83 ec 0c             	sub    $0xc,%esp
+80101eeb:	56                   	push   %esi
+80101eec:	e8 4f f9 ff ff       	call   80101840 <iunlock>
+80101ef1:	89 34 24             	mov    %esi,(%esp)
+80101ef4:	31 f6                	xor    %esi,%esi
+80101ef6:	e8 95 f9 ff ff       	call   80101890 <iput>
+80101efb:	83 c4 10             	add    $0x10,%esp
+80101efe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101f01:	89 f0                	mov    %esi,%eax
+80101f03:	5b                   	pop    %ebx
+80101f04:	5e                   	pop    %esi
+80101f05:	5f                   	pop    %edi
+80101f06:	5d                   	pop    %ebp
+80101f07:	c3                   	ret    
+80101f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101f0f:	90                   	nop
+80101f10:	ba 01 00 00 00       	mov    $0x1,%edx
+80101f15:	b8 01 00 00 00       	mov    $0x1,%eax
+80101f1a:	89 df                	mov    %ebx,%edi
+80101f1c:	e8 1f f4 ff ff       	call   80101340 <iget>
+80101f21:	89 c6                	mov    %eax,%esi
+80101f23:	e9 9b fe ff ff       	jmp    80101dc3 <namex+0x53>
+80101f28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101f2f:	90                   	nop
+80101f30:	83 ec 0c             	sub    $0xc,%esp
+80101f33:	56                   	push   %esi
+80101f34:	e8 07 f9 ff ff       	call   80101840 <iunlock>
+80101f39:	83 c4 10             	add    $0x10,%esp
+80101f3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101f3f:	89 f0                	mov    %esi,%eax
+80101f41:	5b                   	pop    %ebx
+80101f42:	5e                   	pop    %esi
+80101f43:	5f                   	pop    %edi
+80101f44:	5d                   	pop    %ebp
+80101f45:	c3                   	ret    
+80101f46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101f4d:	8d 76 00             	lea    0x0(%esi),%esi
+80101f50:	83 ec 0c             	sub    $0xc,%esp
+80101f53:	56                   	push   %esi
+80101f54:	31 f6                	xor    %esi,%esi
+80101f56:	e8 35 f9 ff ff       	call   80101890 <iput>
+80101f5b:	83 c4 10             	add    $0x10,%esp
+80101f5e:	e9 68 ff ff ff       	jmp    80101ecb <namex+0x15b>
+80101f63:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101f6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101f70 <dirlink>:
+80101f70:	f3 0f 1e fb          	endbr32 
+80101f74:	55                   	push   %ebp
+80101f75:	89 e5                	mov    %esp,%ebp
+80101f77:	57                   	push   %edi
+80101f78:	56                   	push   %esi
+80101f79:	53                   	push   %ebx
+80101f7a:	83 ec 20             	sub    $0x20,%esp
+80101f7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101f80:	6a 00                	push   $0x0
+80101f82:	ff 75 0c             	pushl  0xc(%ebp)
+80101f85:	53                   	push   %ebx
+80101f86:	e8 25 fd ff ff       	call   80101cb0 <dirlookup>
+80101f8b:	83 c4 10             	add    $0x10,%esp
+80101f8e:	85 c0                	test   %eax,%eax
+80101f90:	75 6b                	jne    80101ffd <dirlink+0x8d>
+80101f92:	8b 7b 58             	mov    0x58(%ebx),%edi
+80101f95:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101f98:	85 ff                	test   %edi,%edi
+80101f9a:	74 2d                	je     80101fc9 <dirlink+0x59>
+80101f9c:	31 ff                	xor    %edi,%edi
+80101f9e:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101fa1:	eb 0d                	jmp    80101fb0 <dirlink+0x40>
+80101fa3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101fa7:	90                   	nop
+80101fa8:	83 c7 10             	add    $0x10,%edi
+80101fab:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101fae:	73 19                	jae    80101fc9 <dirlink+0x59>
+80101fb0:	6a 10                	push   $0x10
+80101fb2:	57                   	push   %edi
+80101fb3:	56                   	push   %esi
+80101fb4:	53                   	push   %ebx
+80101fb5:	e8 a6 fa ff ff       	call   80101a60 <readi>
+80101fba:	83 c4 10             	add    $0x10,%esp
+80101fbd:	83 f8 10             	cmp    $0x10,%eax
+80101fc0:	75 4e                	jne    80102010 <dirlink+0xa0>
+80101fc2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101fc7:	75 df                	jne    80101fa8 <dirlink+0x38>
+80101fc9:	83 ec 04             	sub    $0x4,%esp
+80101fcc:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101fcf:	6a 0e                	push   $0xe
+80101fd1:	ff 75 0c             	pushl  0xc(%ebp)
+80101fd4:	50                   	push   %eax
+80101fd5:	e8 96 2f 00 00       	call   80104f70 <strncpy>
+80101fda:	6a 10                	push   $0x10
+80101fdc:	8b 45 10             	mov    0x10(%ebp),%eax
+80101fdf:	57                   	push   %edi
+80101fe0:	56                   	push   %esi
+80101fe1:	53                   	push   %ebx
+80101fe2:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+80101fe6:	e8 75 fb ff ff       	call   80101b60 <writei>
+80101feb:	83 c4 20             	add    $0x20,%esp
+80101fee:	83 f8 10             	cmp    $0x10,%eax
+80101ff1:	75 2a                	jne    8010201d <dirlink+0xad>
+80101ff3:	31 c0                	xor    %eax,%eax
+80101ff5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ff8:	5b                   	pop    %ebx
+80101ff9:	5e                   	pop    %esi
+80101ffa:	5f                   	pop    %edi
+80101ffb:	5d                   	pop    %ebp
+80101ffc:	c3                   	ret    
+80101ffd:	83 ec 0c             	sub    $0xc,%esp
+80102000:	50                   	push   %eax
+80102001:	e8 8a f8 ff ff       	call   80101890 <iput>
+80102006:	83 c4 10             	add    $0x10,%esp
+80102009:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010200e:	eb e5                	jmp    80101ff5 <dirlink+0x85>
+80102010:	83 ec 0c             	sub    $0xc,%esp
+80102013:	68 e8 7a 10 80       	push   $0x80107ae8
+80102018:	e8 73 e3 ff ff       	call   80100390 <panic>
+8010201d:	83 ec 0c             	sub    $0xc,%esp
+80102020:	68 fe 80 10 80       	push   $0x801080fe
+80102025:	e8 66 e3 ff ff       	call   80100390 <panic>
+8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102030 <namei>:
+80102030:	f3 0f 1e fb          	endbr32 
+80102034:	55                   	push   %ebp
+80102035:	31 d2                	xor    %edx,%edx
+80102037:	89 e5                	mov    %esp,%ebp
+80102039:	83 ec 18             	sub    $0x18,%esp
+8010203c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010203f:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+80102042:	e8 29 fd ff ff       	call   80101d70 <namex>
+80102047:	c9                   	leave  
+80102048:	c3                   	ret    
+80102049:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102050 <nameiparent>:
+80102050:	f3 0f 1e fb          	endbr32 
+80102054:	55                   	push   %ebp
+80102055:	ba 01 00 00 00       	mov    $0x1,%edx
+8010205a:	89 e5                	mov    %esp,%ebp
+8010205c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+8010205f:	8b 45 08             	mov    0x8(%ebp),%eax
+80102062:	5d                   	pop    %ebp
+80102063:	e9 08 fd ff ff       	jmp    80101d70 <namex>
+80102068:	66 90                	xchg   %ax,%ax
+8010206a:	66 90                	xchg   %ax,%ax
+8010206c:	66 90                	xchg   %ax,%ax
+8010206e:	66 90                	xchg   %ax,%ax
+
+80102070 <idestart>:
+80102070:	55                   	push   %ebp
+80102071:	89 e5                	mov    %esp,%ebp
+80102073:	57                   	push   %edi
+80102074:	56                   	push   %esi
+80102075:	53                   	push   %ebx
+80102076:	83 ec 0c             	sub    $0xc,%esp
+80102079:	85 c0                	test   %eax,%eax
+8010207b:	0f 84 b4 00 00 00    	je     80102135 <idestart+0xc5>
+80102081:	8b 70 08             	mov    0x8(%eax),%esi
+80102084:	89 c3                	mov    %eax,%ebx
+80102086:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
+8010208c:	0f 87 96 00 00 00    	ja     80102128 <idestart+0xb8>
+80102092:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
+80102097:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010209e:	66 90                	xchg   %ax,%ax
+801020a0:	89 ca                	mov    %ecx,%edx
+801020a2:	ec                   	in     (%dx),%al
+801020a3:	83 e0 c0             	and    $0xffffffc0,%eax
+801020a6:	3c 40                	cmp    $0x40,%al
+801020a8:	75 f6                	jne    801020a0 <idestart+0x30>
+801020aa:	31 ff                	xor    %edi,%edi
+801020ac:	ba f6 03 00 00       	mov    $0x3f6,%edx
+801020b1:	89 f8                	mov    %edi,%eax
+801020b3:	ee                   	out    %al,(%dx)
+801020b4:	b8 01 00 00 00       	mov    $0x1,%eax
+801020b9:	ba f2 01 00 00       	mov    $0x1f2,%edx
+801020be:	ee                   	out    %al,(%dx)
+801020bf:	ba f3 01 00 00       	mov    $0x1f3,%edx
+801020c4:	89 f0                	mov    %esi,%eax
+801020c6:	ee                   	out    %al,(%dx)
+801020c7:	89 f0                	mov    %esi,%eax
+801020c9:	ba f4 01 00 00       	mov    $0x1f4,%edx
+801020ce:	c1 f8 08             	sar    $0x8,%eax
+801020d1:	ee                   	out    %al,(%dx)
+801020d2:	ba f5 01 00 00       	mov    $0x1f5,%edx
+801020d7:	89 f8                	mov    %edi,%eax
+801020d9:	ee                   	out    %al,(%dx)
+801020da:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
+801020de:	ba f6 01 00 00       	mov    $0x1f6,%edx
+801020e3:	c1 e0 04             	shl    $0x4,%eax
+801020e6:	83 e0 10             	and    $0x10,%eax
+801020e9:	83 c8 e0             	or     $0xffffffe0,%eax
+801020ec:	ee                   	out    %al,(%dx)
+801020ed:	f6 03 04             	testb  $0x4,(%ebx)
+801020f0:	75 16                	jne    80102108 <idestart+0x98>
+801020f2:	b8 20 00 00 00       	mov    $0x20,%eax
+801020f7:	89 ca                	mov    %ecx,%edx
+801020f9:	ee                   	out    %al,(%dx)
+801020fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801020fd:	5b                   	pop    %ebx
+801020fe:	5e                   	pop    %esi
+801020ff:	5f                   	pop    %edi
+80102100:	5d                   	pop    %ebp
+80102101:	c3                   	ret    
+80102102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102108:	b8 30 00 00 00       	mov    $0x30,%eax
+8010210d:	89 ca                	mov    %ecx,%edx
+8010210f:	ee                   	out    %al,(%dx)
+80102110:	b9 80 00 00 00       	mov    $0x80,%ecx
+80102115:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80102118:	ba f0 01 00 00       	mov    $0x1f0,%edx
+8010211d:	fc                   	cld    
+8010211e:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+80102120:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102123:	5b                   	pop    %ebx
+80102124:	5e                   	pop    %esi
+80102125:	5f                   	pop    %edi
+80102126:	5d                   	pop    %ebp
+80102127:	c3                   	ret    
+80102128:	83 ec 0c             	sub    $0xc,%esp
+8010212b:	68 54 7b 10 80       	push   $0x80107b54
+80102130:	e8 5b e2 ff ff       	call   80100390 <panic>
+80102135:	83 ec 0c             	sub    $0xc,%esp
+80102138:	68 4b 7b 10 80       	push   $0x80107b4b
+8010213d:	e8 4e e2 ff ff       	call   80100390 <panic>
+80102142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102150 <ideinit>:
+80102150:	f3 0f 1e fb          	endbr32 
+80102154:	55                   	push   %ebp
+80102155:	89 e5                	mov    %esp,%ebp
+80102157:	83 ec 10             	sub    $0x10,%esp
+8010215a:	68 66 7b 10 80       	push   $0x80107b66
+8010215f:	68 80 b5 10 80       	push   $0x8010b580
+80102164:	e8 17 2a 00 00       	call   80104b80 <initlock>
+80102169:	58                   	pop    %eax
+8010216a:	a1 30 38 11 80       	mov    0x80113830,%eax
+8010216f:	5a                   	pop    %edx
+80102170:	83 e8 01             	sub    $0x1,%eax
+80102173:	50                   	push   %eax
+80102174:	6a 0e                	push   $0xe
+80102176:	e8 b5 02 00 00       	call   80102430 <ioapicenable>
+8010217b:	83 c4 10             	add    $0x10,%esp
+8010217e:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102183:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102187:	90                   	nop
+80102188:	ec                   	in     (%dx),%al
+80102189:	83 e0 c0             	and    $0xffffffc0,%eax
+8010218c:	3c 40                	cmp    $0x40,%al
+8010218e:	75 f8                	jne    80102188 <ideinit+0x38>
+80102190:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+80102195:	ba f6 01 00 00       	mov    $0x1f6,%edx
+8010219a:	ee                   	out    %al,(%dx)
+8010219b:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+801021a0:	ba f7 01 00 00       	mov    $0x1f7,%edx
+801021a5:	eb 0e                	jmp    801021b5 <ideinit+0x65>
+801021a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801021ae:	66 90                	xchg   %ax,%ax
+801021b0:	83 e9 01             	sub    $0x1,%ecx
+801021b3:	74 0f                	je     801021c4 <ideinit+0x74>
+801021b5:	ec                   	in     (%dx),%al
+801021b6:	84 c0                	test   %al,%al
+801021b8:	74 f6                	je     801021b0 <ideinit+0x60>
+801021ba:	c7 05 60 b5 10 80 01 	movl   $0x1,0x8010b560
+801021c1:	00 00 00 
+801021c4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+801021c9:	ba f6 01 00 00       	mov    $0x1f6,%edx
+801021ce:	ee                   	out    %al,(%dx)
+801021cf:	c9                   	leave  
+801021d0:	c3                   	ret    
+801021d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801021d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801021df:	90                   	nop
+
+801021e0 <ideintr>:
+801021e0:	f3 0f 1e fb          	endbr32 
+801021e4:	55                   	push   %ebp
+801021e5:	89 e5                	mov    %esp,%ebp
+801021e7:	57                   	push   %edi
+801021e8:	56                   	push   %esi
+801021e9:	53                   	push   %ebx
+801021ea:	83 ec 18             	sub    $0x18,%esp
+801021ed:	68 80 b5 10 80       	push   $0x8010b580
+801021f2:	e8 09 2b 00 00       	call   80104d00 <acquire>
+801021f7:	8b 1d 64 b5 10 80    	mov    0x8010b564,%ebx
+801021fd:	83 c4 10             	add    $0x10,%esp
+80102200:	85 db                	test   %ebx,%ebx
+80102202:	74 5f                	je     80102263 <ideintr+0x83>
+80102204:	8b 43 58             	mov    0x58(%ebx),%eax
+80102207:	a3 64 b5 10 80       	mov    %eax,0x8010b564
+8010220c:	8b 33                	mov    (%ebx),%esi
+8010220e:	f7 c6 04 00 00 00    	test   $0x4,%esi
+80102214:	75 2b                	jne    80102241 <ideintr+0x61>
+80102216:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010221b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010221f:	90                   	nop
+80102220:	ec                   	in     (%dx),%al
+80102221:	89 c1                	mov    %eax,%ecx
+80102223:	83 e1 c0             	and    $0xffffffc0,%ecx
+80102226:	80 f9 40             	cmp    $0x40,%cl
+80102229:	75 f5                	jne    80102220 <ideintr+0x40>
+8010222b:	a8 21                	test   $0x21,%al
+8010222d:	75 12                	jne    80102241 <ideintr+0x61>
+8010222f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+80102232:	b9 80 00 00 00       	mov    $0x80,%ecx
+80102237:	ba f0 01 00 00       	mov    $0x1f0,%edx
+8010223c:	fc                   	cld    
+8010223d:	f3 6d                	rep insl (%dx),%es:(%edi)
+8010223f:	8b 33                	mov    (%ebx),%esi
+80102241:	83 e6 fb             	and    $0xfffffffb,%esi
+80102244:	83 ec 0c             	sub    $0xc,%esp
+80102247:	83 ce 02             	or     $0x2,%esi
+8010224a:	89 33                	mov    %esi,(%ebx)
+8010224c:	53                   	push   %ebx
+8010224d:	e8 5e 23 00 00       	call   801045b0 <wakeup>
+80102252:	a1 64 b5 10 80       	mov    0x8010b564,%eax
+80102257:	83 c4 10             	add    $0x10,%esp
+8010225a:	85 c0                	test   %eax,%eax
+8010225c:	74 05                	je     80102263 <ideintr+0x83>
+8010225e:	e8 0d fe ff ff       	call   80102070 <idestart>
+80102263:	83 ec 0c             	sub    $0xc,%esp
+80102266:	68 80 b5 10 80       	push   $0x8010b580
+8010226b:	e8 50 2b 00 00       	call   80104dc0 <release>
+80102270:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102273:	5b                   	pop    %ebx
+80102274:	5e                   	pop    %esi
+80102275:	5f                   	pop    %edi
+80102276:	5d                   	pop    %ebp
+80102277:	c3                   	ret    
+80102278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010227f:	90                   	nop
+
+80102280 <iderw>:
+80102280:	f3 0f 1e fb          	endbr32 
+80102284:	55                   	push   %ebp
+80102285:	89 e5                	mov    %esp,%ebp
+80102287:	53                   	push   %ebx
+80102288:	83 ec 10             	sub    $0x10,%esp
+8010228b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010228e:	8d 43 0c             	lea    0xc(%ebx),%eax
+80102291:	50                   	push   %eax
+80102292:	e8 89 28 00 00       	call   80104b20 <holdingsleep>
+80102297:	83 c4 10             	add    $0x10,%esp
+8010229a:	85 c0                	test   %eax,%eax
+8010229c:	0f 84 cf 00 00 00    	je     80102371 <iderw+0xf1>
+801022a2:	8b 03                	mov    (%ebx),%eax
+801022a4:	83 e0 06             	and    $0x6,%eax
+801022a7:	83 f8 02             	cmp    $0x2,%eax
+801022aa:	0f 84 b4 00 00 00    	je     80102364 <iderw+0xe4>
+801022b0:	8b 53 04             	mov    0x4(%ebx),%edx
+801022b3:	85 d2                	test   %edx,%edx
+801022b5:	74 0d                	je     801022c4 <iderw+0x44>
+801022b7:	a1 60 b5 10 80       	mov    0x8010b560,%eax
+801022bc:	85 c0                	test   %eax,%eax
+801022be:	0f 84 93 00 00 00    	je     80102357 <iderw+0xd7>
+801022c4:	83 ec 0c             	sub    $0xc,%esp
+801022c7:	68 80 b5 10 80       	push   $0x8010b580
+801022cc:	e8 2f 2a 00 00       	call   80104d00 <acquire>
+801022d1:	a1 64 b5 10 80       	mov    0x8010b564,%eax
+801022d6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+801022dd:	83 c4 10             	add    $0x10,%esp
+801022e0:	85 c0                	test   %eax,%eax
+801022e2:	74 6c                	je     80102350 <iderw+0xd0>
+801022e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801022e8:	89 c2                	mov    %eax,%edx
+801022ea:	8b 40 58             	mov    0x58(%eax),%eax
+801022ed:	85 c0                	test   %eax,%eax
+801022ef:	75 f7                	jne    801022e8 <iderw+0x68>
+801022f1:	83 c2 58             	add    $0x58,%edx
+801022f4:	89 1a                	mov    %ebx,(%edx)
+801022f6:	39 1d 64 b5 10 80    	cmp    %ebx,0x8010b564
+801022fc:	74 42                	je     80102340 <iderw+0xc0>
+801022fe:	8b 03                	mov    (%ebx),%eax
+80102300:	83 e0 06             	and    $0x6,%eax
+80102303:	83 f8 02             	cmp    $0x2,%eax
+80102306:	74 23                	je     8010232b <iderw+0xab>
+80102308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010230f:	90                   	nop
+80102310:	83 ec 08             	sub    $0x8,%esp
+80102313:	68 80 b5 10 80       	push   $0x8010b580
+80102318:	53                   	push   %ebx
+80102319:	e8 92 20 00 00       	call   801043b0 <sleep>
+8010231e:	8b 03                	mov    (%ebx),%eax
+80102320:	83 c4 10             	add    $0x10,%esp
+80102323:	83 e0 06             	and    $0x6,%eax
+80102326:	83 f8 02             	cmp    $0x2,%eax
+80102329:	75 e5                	jne    80102310 <iderw+0x90>
+8010232b:	c7 45 08 80 b5 10 80 	movl   $0x8010b580,0x8(%ebp)
+80102332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102335:	c9                   	leave  
+80102336:	e9 85 2a 00 00       	jmp    80104dc0 <release>
+8010233b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010233f:	90                   	nop
+80102340:	89 d8                	mov    %ebx,%eax
+80102342:	e8 29 fd ff ff       	call   80102070 <idestart>
+80102347:	eb b5                	jmp    801022fe <iderw+0x7e>
+80102349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102350:	ba 64 b5 10 80       	mov    $0x8010b564,%edx
+80102355:	eb 9d                	jmp    801022f4 <iderw+0x74>
+80102357:	83 ec 0c             	sub    $0xc,%esp
+8010235a:	68 95 7b 10 80       	push   $0x80107b95
+8010235f:	e8 2c e0 ff ff       	call   80100390 <panic>
+80102364:	83 ec 0c             	sub    $0xc,%esp
+80102367:	68 80 7b 10 80       	push   $0x80107b80
+8010236c:	e8 1f e0 ff ff       	call   80100390 <panic>
+80102371:	83 ec 0c             	sub    $0xc,%esp
+80102374:	68 6a 7b 10 80       	push   $0x80107b6a
+80102379:	e8 12 e0 ff ff       	call   80100390 <panic>
+8010237e:	66 90                	xchg   %ax,%ax
+
+80102380 <ioapicinit>:
+80102380:	f3 0f 1e fb          	endbr32 
+80102384:	55                   	push   %ebp
+80102385:	c7 05 34 36 11 80 00 	movl   $0xfec00000,0x80113634
+8010238c:	00 c0 fe 
+8010238f:	89 e5                	mov    %esp,%ebp
+80102391:	56                   	push   %esi
+80102392:	53                   	push   %ebx
+80102393:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+8010239a:	00 00 00 
+8010239d:	8b 15 34 36 11 80    	mov    0x80113634,%edx
+801023a3:	8b 72 10             	mov    0x10(%edx),%esi
+801023a6:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
+801023ac:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
+801023b2:	0f b6 15 60 37 11 80 	movzbl 0x80113760,%edx
+801023b9:	c1 ee 10             	shr    $0x10,%esi
+801023bc:	89 f0                	mov    %esi,%eax
+801023be:	0f b6 f0             	movzbl %al,%esi
+801023c1:	8b 41 10             	mov    0x10(%ecx),%eax
+801023c4:	c1 e8 18             	shr    $0x18,%eax
+801023c7:	39 c2                	cmp    %eax,%edx
+801023c9:	74 16                	je     801023e1 <ioapicinit+0x61>
+801023cb:	83 ec 0c             	sub    $0xc,%esp
+801023ce:	68 b4 7b 10 80       	push   $0x80107bb4
+801023d3:	e8 d8 e2 ff ff       	call   801006b0 <cprintf>
+801023d8:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
+801023de:	83 c4 10             	add    $0x10,%esp
+801023e1:	83 c6 21             	add    $0x21,%esi
+801023e4:	ba 10 00 00 00       	mov    $0x10,%edx
+801023e9:	b8 20 00 00 00       	mov    $0x20,%eax
+801023ee:	66 90                	xchg   %ax,%ax
+801023f0:	89 11                	mov    %edx,(%ecx)
+801023f2:	89 c3                	mov    %eax,%ebx
+801023f4:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
+801023fa:	83 c0 01             	add    $0x1,%eax
+801023fd:	81 cb 00 00 01 00    	or     $0x10000,%ebx
+80102403:	89 59 10             	mov    %ebx,0x10(%ecx)
+80102406:	8d 5a 01             	lea    0x1(%edx),%ebx
+80102409:	83 c2 02             	add    $0x2,%edx
+8010240c:	89 19                	mov    %ebx,(%ecx)
+8010240e:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
+80102414:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+8010241b:	39 f0                	cmp    %esi,%eax
+8010241d:	75 d1                	jne    801023f0 <ioapicinit+0x70>
+8010241f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102422:	5b                   	pop    %ebx
+80102423:	5e                   	pop    %esi
+80102424:	5d                   	pop    %ebp
+80102425:	c3                   	ret    
+80102426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010242d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102430 <ioapicenable>:
+80102430:	f3 0f 1e fb          	endbr32 
+80102434:	55                   	push   %ebp
+80102435:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
+8010243b:	89 e5                	mov    %esp,%ebp
+8010243d:	8b 45 08             	mov    0x8(%ebp),%eax
+80102440:	8d 50 20             	lea    0x20(%eax),%edx
+80102443:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+80102447:	89 01                	mov    %eax,(%ecx)
+80102449:	8b 0d 34 36 11 80    	mov    0x80113634,%ecx
+8010244f:	83 c0 01             	add    $0x1,%eax
+80102452:	89 51 10             	mov    %edx,0x10(%ecx)
+80102455:	8b 55 0c             	mov    0xc(%ebp),%edx
+80102458:	89 01                	mov    %eax,(%ecx)
+8010245a:	a1 34 36 11 80       	mov    0x80113634,%eax
+8010245f:	c1 e2 18             	shl    $0x18,%edx
+80102462:	89 50 10             	mov    %edx,0x10(%eax)
+80102465:	5d                   	pop    %ebp
+80102466:	c3                   	ret    
+80102467:	66 90                	xchg   %ax,%ax
+80102469:	66 90                	xchg   %ax,%ax
+8010246b:	66 90                	xchg   %ax,%ax
+8010246d:	66 90                	xchg   %ax,%ax
+8010246f:	90                   	nop
+
+80102470 <kfree>:
+80102470:	f3 0f 1e fb          	endbr32 
+80102474:	55                   	push   %ebp
+80102475:	89 e5                	mov    %esp,%ebp
+80102477:	53                   	push   %ebx
+80102478:	83 ec 04             	sub    $0x4,%esp
+8010247b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010247e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+80102484:	75 7a                	jne    80102500 <kfree+0x90>
+80102486:	81 fb a8 64 11 80    	cmp    $0x801164a8,%ebx
+8010248c:	72 72                	jb     80102500 <kfree+0x90>
+8010248e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80102494:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+80102499:	77 65                	ja     80102500 <kfree+0x90>
+8010249b:	83 ec 04             	sub    $0x4,%esp
+8010249e:	68 00 10 00 00       	push   $0x1000
+801024a3:	6a 01                	push   $0x1
+801024a5:	53                   	push   %ebx
+801024a6:	e8 65 29 00 00       	call   80104e10 <memset>
+801024ab:	8b 15 74 36 11 80    	mov    0x80113674,%edx
+801024b1:	83 c4 10             	add    $0x10,%esp
+801024b4:	85 d2                	test   %edx,%edx
+801024b6:	75 20                	jne    801024d8 <kfree+0x68>
+801024b8:	a1 78 36 11 80       	mov    0x80113678,%eax
+801024bd:	89 03                	mov    %eax,(%ebx)
+801024bf:	a1 74 36 11 80       	mov    0x80113674,%eax
+801024c4:	89 1d 78 36 11 80    	mov    %ebx,0x80113678
+801024ca:	85 c0                	test   %eax,%eax
+801024cc:	75 22                	jne    801024f0 <kfree+0x80>
+801024ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801024d1:	c9                   	leave  
+801024d2:	c3                   	ret    
+801024d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801024d7:	90                   	nop
+801024d8:	83 ec 0c             	sub    $0xc,%esp
+801024db:	68 40 36 11 80       	push   $0x80113640
+801024e0:	e8 1b 28 00 00       	call   80104d00 <acquire>
+801024e5:	83 c4 10             	add    $0x10,%esp
+801024e8:	eb ce                	jmp    801024b8 <kfree+0x48>
+801024ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801024f0:	c7 45 08 40 36 11 80 	movl   $0x80113640,0x8(%ebp)
+801024f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801024fa:	c9                   	leave  
+801024fb:	e9 c0 28 00 00       	jmp    80104dc0 <release>
+80102500:	83 ec 0c             	sub    $0xc,%esp
+80102503:	68 e6 7b 10 80       	push   $0x80107be6
+80102508:	e8 83 de ff ff       	call   80100390 <panic>
+8010250d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102510 <freerange>:
+80102510:	f3 0f 1e fb          	endbr32 
+80102514:	55                   	push   %ebp
+80102515:	89 e5                	mov    %esp,%ebp
+80102517:	56                   	push   %esi
+80102518:	8b 45 08             	mov    0x8(%ebp),%eax
+8010251b:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010251e:	53                   	push   %ebx
+8010251f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102525:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010252b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102531:	39 de                	cmp    %ebx,%esi
+80102533:	72 1f                	jb     80102554 <freerange+0x44>
+80102535:	8d 76 00             	lea    0x0(%esi),%esi
+80102538:	83 ec 0c             	sub    $0xc,%esp
+8010253b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+80102541:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102547:	50                   	push   %eax
+80102548:	e8 23 ff ff ff       	call   80102470 <kfree>
+8010254d:	83 c4 10             	add    $0x10,%esp
+80102550:	39 f3                	cmp    %esi,%ebx
+80102552:	76 e4                	jbe    80102538 <freerange+0x28>
+80102554:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102557:	5b                   	pop    %ebx
+80102558:	5e                   	pop    %esi
+80102559:	5d                   	pop    %ebp
+8010255a:	c3                   	ret    
+8010255b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010255f:	90                   	nop
+
+80102560 <kinit1>:
+80102560:	f3 0f 1e fb          	endbr32 
+80102564:	55                   	push   %ebp
+80102565:	89 e5                	mov    %esp,%ebp
+80102567:	56                   	push   %esi
+80102568:	53                   	push   %ebx
+80102569:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010256c:	83 ec 08             	sub    $0x8,%esp
+8010256f:	68 ec 7b 10 80       	push   $0x80107bec
+80102574:	68 40 36 11 80       	push   $0x80113640
+80102579:	e8 02 26 00 00       	call   80104b80 <initlock>
+8010257e:	8b 45 08             	mov    0x8(%ebp),%eax
+80102581:	83 c4 10             	add    $0x10,%esp
+80102584:	c7 05 74 36 11 80 00 	movl   $0x0,0x80113674
+8010258b:	00 00 00 
+8010258e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102594:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010259a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801025a0:	39 de                	cmp    %ebx,%esi
+801025a2:	72 20                	jb     801025c4 <kinit1+0x64>
+801025a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801025a8:	83 ec 0c             	sub    $0xc,%esp
+801025ab:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+801025b1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801025b7:	50                   	push   %eax
+801025b8:	e8 b3 fe ff ff       	call   80102470 <kfree>
+801025bd:	83 c4 10             	add    $0x10,%esp
+801025c0:	39 de                	cmp    %ebx,%esi
+801025c2:	73 e4                	jae    801025a8 <kinit1+0x48>
+801025c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801025c7:	5b                   	pop    %ebx
+801025c8:	5e                   	pop    %esi
+801025c9:	5d                   	pop    %ebp
+801025ca:	c3                   	ret    
+801025cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801025cf:	90                   	nop
+
+801025d0 <kinit2>:
+801025d0:	f3 0f 1e fb          	endbr32 
+801025d4:	55                   	push   %ebp
+801025d5:	89 e5                	mov    %esp,%ebp
+801025d7:	56                   	push   %esi
+801025d8:	8b 45 08             	mov    0x8(%ebp),%eax
+801025db:	8b 75 0c             	mov    0xc(%ebp),%esi
+801025de:	53                   	push   %ebx
+801025df:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+801025e5:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801025eb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801025f1:	39 de                	cmp    %ebx,%esi
+801025f3:	72 1f                	jb     80102614 <kinit2+0x44>
+801025f5:	8d 76 00             	lea    0x0(%esi),%esi
+801025f8:	83 ec 0c             	sub    $0xc,%esp
+801025fb:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+80102601:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102607:	50                   	push   %eax
+80102608:	e8 63 fe ff ff       	call   80102470 <kfree>
+8010260d:	83 c4 10             	add    $0x10,%esp
+80102610:	39 de                	cmp    %ebx,%esi
+80102612:	73 e4                	jae    801025f8 <kinit2+0x28>
+80102614:	c7 05 74 36 11 80 01 	movl   $0x1,0x80113674
+8010261b:	00 00 00 
+8010261e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102621:	5b                   	pop    %ebx
+80102622:	5e                   	pop    %esi
+80102623:	5d                   	pop    %ebp
+80102624:	c3                   	ret    
+80102625:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010262c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102630 <kalloc>:
+80102630:	f3 0f 1e fb          	endbr32 
+80102634:	a1 74 36 11 80       	mov    0x80113674,%eax
+80102639:	85 c0                	test   %eax,%eax
+8010263b:	75 1b                	jne    80102658 <kalloc+0x28>
+8010263d:	a1 78 36 11 80       	mov    0x80113678,%eax
+80102642:	85 c0                	test   %eax,%eax
+80102644:	74 0a                	je     80102650 <kalloc+0x20>
+80102646:	8b 10                	mov    (%eax),%edx
+80102648:	89 15 78 36 11 80    	mov    %edx,0x80113678
+8010264e:	c3                   	ret    
+8010264f:	90                   	nop
+80102650:	c3                   	ret    
+80102651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102658:	55                   	push   %ebp
+80102659:	89 e5                	mov    %esp,%ebp
+8010265b:	83 ec 24             	sub    $0x24,%esp
+8010265e:	68 40 36 11 80       	push   $0x80113640
+80102663:	e8 98 26 00 00       	call   80104d00 <acquire>
+80102668:	a1 78 36 11 80       	mov    0x80113678,%eax
+8010266d:	8b 15 74 36 11 80    	mov    0x80113674,%edx
+80102673:	83 c4 10             	add    $0x10,%esp
+80102676:	85 c0                	test   %eax,%eax
+80102678:	74 08                	je     80102682 <kalloc+0x52>
+8010267a:	8b 08                	mov    (%eax),%ecx
+8010267c:	89 0d 78 36 11 80    	mov    %ecx,0x80113678
+80102682:	85 d2                	test   %edx,%edx
+80102684:	74 16                	je     8010269c <kalloc+0x6c>
+80102686:	83 ec 0c             	sub    $0xc,%esp
+80102689:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010268c:	68 40 36 11 80       	push   $0x80113640
+80102691:	e8 2a 27 00 00       	call   80104dc0 <release>
+80102696:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102699:	83 c4 10             	add    $0x10,%esp
+8010269c:	c9                   	leave  
+8010269d:	c3                   	ret    
+8010269e:	66 90                	xchg   %ax,%ax
+
+801026a0 <kbdgetc>:
+801026a0:	f3 0f 1e fb          	endbr32 
+801026a4:	ba 64 00 00 00       	mov    $0x64,%edx
+801026a9:	ec                   	in     (%dx),%al
+801026aa:	a8 01                	test   $0x1,%al
+801026ac:	0f 84 be 00 00 00    	je     80102770 <kbdgetc+0xd0>
+801026b2:	55                   	push   %ebp
+801026b3:	ba 60 00 00 00       	mov    $0x60,%edx
+801026b8:	89 e5                	mov    %esp,%ebp
+801026ba:	53                   	push   %ebx
+801026bb:	ec                   	in     (%dx),%al
+801026bc:	8b 1d b4 b5 10 80    	mov    0x8010b5b4,%ebx
+801026c2:	0f b6 d0             	movzbl %al,%edx
+801026c5:	3c e0                	cmp    $0xe0,%al
+801026c7:	74 57                	je     80102720 <kbdgetc+0x80>
+801026c9:	89 d9                	mov    %ebx,%ecx
+801026cb:	83 e1 40             	and    $0x40,%ecx
+801026ce:	84 c0                	test   %al,%al
+801026d0:	78 5e                	js     80102730 <kbdgetc+0x90>
+801026d2:	85 c9                	test   %ecx,%ecx
+801026d4:	74 09                	je     801026df <kbdgetc+0x3f>
+801026d6:	83 c8 80             	or     $0xffffff80,%eax
+801026d9:	83 e3 bf             	and    $0xffffffbf,%ebx
+801026dc:	0f b6 d0             	movzbl %al,%edx
+801026df:	0f b6 8a 20 7d 10 80 	movzbl -0x7fef82e0(%edx),%ecx
+801026e6:	0f b6 82 20 7c 10 80 	movzbl -0x7fef83e0(%edx),%eax
+801026ed:	09 d9                	or     %ebx,%ecx
+801026ef:	31 c1                	xor    %eax,%ecx
+801026f1:	89 c8                	mov    %ecx,%eax
+801026f3:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
+801026f9:	83 e0 03             	and    $0x3,%eax
+801026fc:	83 e1 08             	and    $0x8,%ecx
+801026ff:	8b 04 85 00 7c 10 80 	mov    -0x7fef8400(,%eax,4),%eax
+80102706:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+8010270a:	74 0b                	je     80102717 <kbdgetc+0x77>
+8010270c:	8d 50 9f             	lea    -0x61(%eax),%edx
+8010270f:	83 fa 19             	cmp    $0x19,%edx
+80102712:	77 44                	ja     80102758 <kbdgetc+0xb8>
+80102714:	83 e8 20             	sub    $0x20,%eax
+80102717:	5b                   	pop    %ebx
+80102718:	5d                   	pop    %ebp
+80102719:	c3                   	ret    
+8010271a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102720:	83 cb 40             	or     $0x40,%ebx
+80102723:	31 c0                	xor    %eax,%eax
+80102725:	89 1d b4 b5 10 80    	mov    %ebx,0x8010b5b4
+8010272b:	5b                   	pop    %ebx
+8010272c:	5d                   	pop    %ebp
+8010272d:	c3                   	ret    
+8010272e:	66 90                	xchg   %ax,%ax
+80102730:	83 e0 7f             	and    $0x7f,%eax
+80102733:	85 c9                	test   %ecx,%ecx
+80102735:	0f 44 d0             	cmove  %eax,%edx
+80102738:	31 c0                	xor    %eax,%eax
+8010273a:	0f b6 8a 20 7d 10 80 	movzbl -0x7fef82e0(%edx),%ecx
+80102741:	83 c9 40             	or     $0x40,%ecx
+80102744:	0f b6 c9             	movzbl %cl,%ecx
+80102747:	f7 d1                	not    %ecx
+80102749:	21 d9                	and    %ebx,%ecx
+8010274b:	5b                   	pop    %ebx
+8010274c:	5d                   	pop    %ebp
+8010274d:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
+80102753:	c3                   	ret    
+80102754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102758:	8d 48 bf             	lea    -0x41(%eax),%ecx
+8010275b:	8d 50 20             	lea    0x20(%eax),%edx
+8010275e:	5b                   	pop    %ebx
+8010275f:	5d                   	pop    %ebp
+80102760:	83 f9 1a             	cmp    $0x1a,%ecx
+80102763:	0f 42 c2             	cmovb  %edx,%eax
+80102766:	c3                   	ret    
+80102767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010276e:	66 90                	xchg   %ax,%ax
+80102770:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102775:	c3                   	ret    
+80102776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010277d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102780 <kbdintr>:
+80102780:	f3 0f 1e fb          	endbr32 
+80102784:	55                   	push   %ebp
+80102785:	89 e5                	mov    %esp,%ebp
+80102787:	83 ec 14             	sub    $0x14,%esp
+8010278a:	68 a0 26 10 80       	push   $0x801026a0
+8010278f:	e8 cc e0 ff ff       	call   80100860 <consoleintr>
+80102794:	83 c4 10             	add    $0x10,%esp
+80102797:	c9                   	leave  
+80102798:	c3                   	ret    
+80102799:	66 90                	xchg   %ax,%ax
+8010279b:	66 90                	xchg   %ax,%ax
+8010279d:	66 90                	xchg   %ax,%ax
+8010279f:	90                   	nop
+
+801027a0 <lapicinit>:
+801027a0:	f3 0f 1e fb          	endbr32 
+801027a4:	a1 7c 36 11 80       	mov    0x8011367c,%eax
+801027a9:	85 c0                	test   %eax,%eax
+801027ab:	0f 84 c7 00 00 00    	je     80102878 <lapicinit+0xd8>
+801027b1:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+801027b8:	01 00 00 
+801027bb:	8b 50 20             	mov    0x20(%eax),%edx
+801027be:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+801027c5:	00 00 00 
+801027c8:	8b 50 20             	mov    0x20(%eax),%edx
+801027cb:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+801027d2:	00 02 00 
+801027d5:	8b 50 20             	mov    0x20(%eax),%edx
+801027d8:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+801027df:	96 98 00 
+801027e2:	8b 50 20             	mov    0x20(%eax),%edx
+801027e5:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+801027ec:	00 01 00 
+801027ef:	8b 50 20             	mov    0x20(%eax),%edx
+801027f2:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+801027f9:	00 01 00 
+801027fc:	8b 50 20             	mov    0x20(%eax),%edx
+801027ff:	8b 50 30             	mov    0x30(%eax),%edx
+80102802:	c1 ea 10             	shr    $0x10,%edx
+80102805:	81 e2 fc 00 00 00    	and    $0xfc,%edx
+8010280b:	75 73                	jne    80102880 <lapicinit+0xe0>
+8010280d:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80102814:	00 00 00 
+80102817:	8b 50 20             	mov    0x20(%eax),%edx
+8010281a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+80102821:	00 00 00 
+80102824:	8b 50 20             	mov    0x20(%eax),%edx
+80102827:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010282e:	00 00 00 
+80102831:	8b 50 20             	mov    0x20(%eax),%edx
+80102834:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+8010283b:	00 00 00 
+8010283e:	8b 50 20             	mov    0x20(%eax),%edx
+80102841:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+80102848:	00 00 00 
+8010284b:	8b 50 20             	mov    0x20(%eax),%edx
+8010284e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+80102855:	85 08 00 
+80102858:	8b 50 20             	mov    0x20(%eax),%edx
+8010285b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010285f:	90                   	nop
+80102860:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+80102866:	80 e6 10             	and    $0x10,%dh
+80102869:	75 f5                	jne    80102860 <lapicinit+0xc0>
+8010286b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+80102872:	00 00 00 
+80102875:	8b 40 20             	mov    0x20(%eax),%eax
+80102878:	c3                   	ret    
+80102879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102880:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+80102887:	00 01 00 
+8010288a:	8b 50 20             	mov    0x20(%eax),%edx
+8010288d:	e9 7b ff ff ff       	jmp    8010280d <lapicinit+0x6d>
+80102892:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801028a0 <lapicid>:
+801028a0:	f3 0f 1e fb          	endbr32 
+801028a4:	a1 7c 36 11 80       	mov    0x8011367c,%eax
+801028a9:	85 c0                	test   %eax,%eax
+801028ab:	74 0b                	je     801028b8 <lapicid+0x18>
+801028ad:	8b 40 20             	mov    0x20(%eax),%eax
+801028b0:	c1 e8 18             	shr    $0x18,%eax
+801028b3:	c3                   	ret    
+801028b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801028b8:	31 c0                	xor    %eax,%eax
+801028ba:	c3                   	ret    
+801028bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801028bf:	90                   	nop
+
+801028c0 <lapiceoi>:
+801028c0:	f3 0f 1e fb          	endbr32 
+801028c4:	a1 7c 36 11 80       	mov    0x8011367c,%eax
+801028c9:	85 c0                	test   %eax,%eax
+801028cb:	74 0d                	je     801028da <lapiceoi+0x1a>
+801028cd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801028d4:	00 00 00 
+801028d7:	8b 40 20             	mov    0x20(%eax),%eax
+801028da:	c3                   	ret    
+801028db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801028df:	90                   	nop
+
+801028e0 <microdelay>:
+801028e0:	f3 0f 1e fb          	endbr32 
+801028e4:	c3                   	ret    
+801028e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801028f0 <lapicstartap>:
+801028f0:	f3 0f 1e fb          	endbr32 
+801028f4:	55                   	push   %ebp
+801028f5:	b8 0f 00 00 00       	mov    $0xf,%eax
+801028fa:	ba 70 00 00 00       	mov    $0x70,%edx
+801028ff:	89 e5                	mov    %esp,%ebp
+80102901:	53                   	push   %ebx
+80102902:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102905:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102908:	ee                   	out    %al,(%dx)
+80102909:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010290e:	ba 71 00 00 00       	mov    $0x71,%edx
+80102913:	ee                   	out    %al,(%dx)
+80102914:	31 c0                	xor    %eax,%eax
+80102916:	c1 e3 18             	shl    $0x18,%ebx
+80102919:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+8010291f:	89 c8                	mov    %ecx,%eax
+80102921:	c1 e9 0c             	shr    $0xc,%ecx
+80102924:	89 da                	mov    %ebx,%edx
+80102926:	c1 e8 04             	shr    $0x4,%eax
+80102929:	80 cd 06             	or     $0x6,%ch
+8010292c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+80102932:	a1 7c 36 11 80       	mov    0x8011367c,%eax
+80102937:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+8010293d:	8b 58 20             	mov    0x20(%eax),%ebx
+80102940:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+80102947:	c5 00 00 
+8010294a:	8b 58 20             	mov    0x20(%eax),%ebx
+8010294d:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+80102954:	85 00 00 
+80102957:	8b 58 20             	mov    0x20(%eax),%ebx
+8010295a:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+80102960:	8b 58 20             	mov    0x20(%eax),%ebx
+80102963:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+80102969:	8b 58 20             	mov    0x20(%eax),%ebx
+8010296c:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+80102972:	8b 50 20             	mov    0x20(%eax),%edx
+80102975:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+8010297b:	5b                   	pop    %ebx
+8010297c:	8b 40 20             	mov    0x20(%eax),%eax
+8010297f:	5d                   	pop    %ebp
+80102980:	c3                   	ret    
+80102981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010298f:	90                   	nop
+
+80102990 <cmostime>:
+80102990:	f3 0f 1e fb          	endbr32 
+80102994:	55                   	push   %ebp
+80102995:	b8 0b 00 00 00       	mov    $0xb,%eax
+8010299a:	ba 70 00 00 00       	mov    $0x70,%edx
+8010299f:	89 e5                	mov    %esp,%ebp
+801029a1:	57                   	push   %edi
+801029a2:	56                   	push   %esi
+801029a3:	53                   	push   %ebx
+801029a4:	83 ec 4c             	sub    $0x4c,%esp
+801029a7:	ee                   	out    %al,(%dx)
+801029a8:	ba 71 00 00 00       	mov    $0x71,%edx
+801029ad:	ec                   	in     (%dx),%al
+801029ae:	83 e0 04             	and    $0x4,%eax
+801029b1:	bb 70 00 00 00       	mov    $0x70,%ebx
+801029b6:	88 45 b3             	mov    %al,-0x4d(%ebp)
+801029b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801029c0:	31 c0                	xor    %eax,%eax
+801029c2:	89 da                	mov    %ebx,%edx
+801029c4:	ee                   	out    %al,(%dx)
+801029c5:	b9 71 00 00 00       	mov    $0x71,%ecx
+801029ca:	89 ca                	mov    %ecx,%edx
+801029cc:	ec                   	in     (%dx),%al
+801029cd:	88 45 b7             	mov    %al,-0x49(%ebp)
+801029d0:	89 da                	mov    %ebx,%edx
+801029d2:	b8 02 00 00 00       	mov    $0x2,%eax
+801029d7:	ee                   	out    %al,(%dx)
+801029d8:	89 ca                	mov    %ecx,%edx
+801029da:	ec                   	in     (%dx),%al
+801029db:	88 45 b6             	mov    %al,-0x4a(%ebp)
+801029de:	89 da                	mov    %ebx,%edx
+801029e0:	b8 04 00 00 00       	mov    $0x4,%eax
+801029e5:	ee                   	out    %al,(%dx)
+801029e6:	89 ca                	mov    %ecx,%edx
+801029e8:	ec                   	in     (%dx),%al
+801029e9:	88 45 b5             	mov    %al,-0x4b(%ebp)
+801029ec:	89 da                	mov    %ebx,%edx
+801029ee:	b8 07 00 00 00       	mov    $0x7,%eax
+801029f3:	ee                   	out    %al,(%dx)
+801029f4:	89 ca                	mov    %ecx,%edx
+801029f6:	ec                   	in     (%dx),%al
+801029f7:	88 45 b4             	mov    %al,-0x4c(%ebp)
+801029fa:	89 da                	mov    %ebx,%edx
+801029fc:	b8 08 00 00 00       	mov    $0x8,%eax
+80102a01:	ee                   	out    %al,(%dx)
+80102a02:	89 ca                	mov    %ecx,%edx
+80102a04:	ec                   	in     (%dx),%al
+80102a05:	89 c7                	mov    %eax,%edi
+80102a07:	89 da                	mov    %ebx,%edx
+80102a09:	b8 09 00 00 00       	mov    $0x9,%eax
+80102a0e:	ee                   	out    %al,(%dx)
+80102a0f:	89 ca                	mov    %ecx,%edx
+80102a11:	ec                   	in     (%dx),%al
+80102a12:	89 c6                	mov    %eax,%esi
+80102a14:	89 da                	mov    %ebx,%edx
+80102a16:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102a1b:	ee                   	out    %al,(%dx)
+80102a1c:	89 ca                	mov    %ecx,%edx
+80102a1e:	ec                   	in     (%dx),%al
+80102a1f:	84 c0                	test   %al,%al
+80102a21:	78 9d                	js     801029c0 <cmostime+0x30>
+80102a23:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+80102a27:	89 fa                	mov    %edi,%edx
+80102a29:	0f b6 fa             	movzbl %dl,%edi
+80102a2c:	89 f2                	mov    %esi,%edx
+80102a2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102a31:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+80102a35:	0f b6 f2             	movzbl %dl,%esi
+80102a38:	89 da                	mov    %ebx,%edx
+80102a3a:	89 7d c8             	mov    %edi,-0x38(%ebp)
+80102a3d:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102a40:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+80102a44:	89 75 cc             	mov    %esi,-0x34(%ebp)
+80102a47:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102a4a:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+80102a4e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102a51:	31 c0                	xor    %eax,%eax
+80102a53:	ee                   	out    %al,(%dx)
+80102a54:	89 ca                	mov    %ecx,%edx
+80102a56:	ec                   	in     (%dx),%al
+80102a57:	0f b6 c0             	movzbl %al,%eax
+80102a5a:	89 da                	mov    %ebx,%edx
+80102a5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80102a5f:	b8 02 00 00 00       	mov    $0x2,%eax
+80102a64:	ee                   	out    %al,(%dx)
+80102a65:	89 ca                	mov    %ecx,%edx
+80102a67:	ec                   	in     (%dx),%al
+80102a68:	0f b6 c0             	movzbl %al,%eax
+80102a6b:	89 da                	mov    %ebx,%edx
+80102a6d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80102a70:	b8 04 00 00 00       	mov    $0x4,%eax
+80102a75:	ee                   	out    %al,(%dx)
+80102a76:	89 ca                	mov    %ecx,%edx
+80102a78:	ec                   	in     (%dx),%al
+80102a79:	0f b6 c0             	movzbl %al,%eax
+80102a7c:	89 da                	mov    %ebx,%edx
+80102a7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102a81:	b8 07 00 00 00       	mov    $0x7,%eax
+80102a86:	ee                   	out    %al,(%dx)
+80102a87:	89 ca                	mov    %ecx,%edx
+80102a89:	ec                   	in     (%dx),%al
+80102a8a:	0f b6 c0             	movzbl %al,%eax
+80102a8d:	89 da                	mov    %ebx,%edx
+80102a8f:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80102a92:	b8 08 00 00 00       	mov    $0x8,%eax
+80102a97:	ee                   	out    %al,(%dx)
+80102a98:	89 ca                	mov    %ecx,%edx
+80102a9a:	ec                   	in     (%dx),%al
+80102a9b:	0f b6 c0             	movzbl %al,%eax
+80102a9e:	89 da                	mov    %ebx,%edx
+80102aa0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80102aa3:	b8 09 00 00 00       	mov    $0x9,%eax
+80102aa8:	ee                   	out    %al,(%dx)
+80102aa9:	89 ca                	mov    %ecx,%edx
+80102aab:	ec                   	in     (%dx),%al
+80102aac:	0f b6 c0             	movzbl %al,%eax
+80102aaf:	83 ec 04             	sub    $0x4,%esp
+80102ab2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80102ab5:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80102ab8:	6a 18                	push   $0x18
+80102aba:	50                   	push   %eax
+80102abb:	8d 45 b8             	lea    -0x48(%ebp),%eax
+80102abe:	50                   	push   %eax
+80102abf:	e8 9c 23 00 00       	call   80104e60 <memcmp>
+80102ac4:	83 c4 10             	add    $0x10,%esp
+80102ac7:	85 c0                	test   %eax,%eax
+80102ac9:	0f 85 f1 fe ff ff    	jne    801029c0 <cmostime+0x30>
+80102acf:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+80102ad3:	75 78                	jne    80102b4d <cmostime+0x1bd>
+80102ad5:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102ad8:	89 c2                	mov    %eax,%edx
+80102ada:	83 e0 0f             	and    $0xf,%eax
+80102add:	c1 ea 04             	shr    $0x4,%edx
+80102ae0:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102ae3:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102ae6:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102ae9:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102aec:	89 c2                	mov    %eax,%edx
+80102aee:	83 e0 0f             	and    $0xf,%eax
+80102af1:	c1 ea 04             	shr    $0x4,%edx
+80102af4:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102af7:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102afa:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102afd:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102b00:	89 c2                	mov    %eax,%edx
+80102b02:	83 e0 0f             	and    $0xf,%eax
+80102b05:	c1 ea 04             	shr    $0x4,%edx
+80102b08:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b0b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b0e:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102b11:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102b14:	89 c2                	mov    %eax,%edx
+80102b16:	83 e0 0f             	and    $0xf,%eax
+80102b19:	c1 ea 04             	shr    $0x4,%edx
+80102b1c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b1f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b22:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102b25:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102b28:	89 c2                	mov    %eax,%edx
+80102b2a:	83 e0 0f             	and    $0xf,%eax
+80102b2d:	c1 ea 04             	shr    $0x4,%edx
+80102b30:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b33:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b36:	89 45 c8             	mov    %eax,-0x38(%ebp)
+80102b39:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102b3c:	89 c2                	mov    %eax,%edx
+80102b3e:	83 e0 0f             	and    $0xf,%eax
+80102b41:	c1 ea 04             	shr    $0x4,%edx
+80102b44:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b47:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b4a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+80102b4d:	8b 75 08             	mov    0x8(%ebp),%esi
+80102b50:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102b53:	89 06                	mov    %eax,(%esi)
+80102b55:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102b58:	89 46 04             	mov    %eax,0x4(%esi)
+80102b5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102b5e:	89 46 08             	mov    %eax,0x8(%esi)
+80102b61:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102b64:	89 46 0c             	mov    %eax,0xc(%esi)
+80102b67:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102b6a:	89 46 10             	mov    %eax,0x10(%esi)
+80102b6d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102b70:	89 46 14             	mov    %eax,0x14(%esi)
+80102b73:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+80102b7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102b7d:	5b                   	pop    %ebx
+80102b7e:	5e                   	pop    %esi
+80102b7f:	5f                   	pop    %edi
+80102b80:	5d                   	pop    %ebp
+80102b81:	c3                   	ret    
+80102b82:	66 90                	xchg   %ax,%ax
+80102b84:	66 90                	xchg   %ax,%ax
+80102b86:	66 90                	xchg   %ax,%ax
+80102b88:	66 90                	xchg   %ax,%ax
+80102b8a:	66 90                	xchg   %ax,%ax
+80102b8c:	66 90                	xchg   %ax,%ax
+80102b8e:	66 90                	xchg   %ax,%ax
+
+80102b90 <install_trans>:
+80102b90:	8b 0d c8 36 11 80    	mov    0x801136c8,%ecx
+80102b96:	85 c9                	test   %ecx,%ecx
+80102b98:	0f 8e 8a 00 00 00    	jle    80102c28 <install_trans+0x98>
+80102b9e:	55                   	push   %ebp
+80102b9f:	89 e5                	mov    %esp,%ebp
+80102ba1:	57                   	push   %edi
+80102ba2:	31 ff                	xor    %edi,%edi
+80102ba4:	56                   	push   %esi
+80102ba5:	53                   	push   %ebx
+80102ba6:	83 ec 0c             	sub    $0xc,%esp
+80102ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102bb0:	a1 b4 36 11 80       	mov    0x801136b4,%eax
+80102bb5:	83 ec 08             	sub    $0x8,%esp
+80102bb8:	01 f8                	add    %edi,%eax
+80102bba:	83 c0 01             	add    $0x1,%eax
+80102bbd:	50                   	push   %eax
+80102bbe:	ff 35 c4 36 11 80    	pushl  0x801136c4
+80102bc4:	e8 07 d5 ff ff       	call   801000d0 <bread>
+80102bc9:	89 c6                	mov    %eax,%esi
+80102bcb:	58                   	pop    %eax
+80102bcc:	5a                   	pop    %edx
+80102bcd:	ff 34 bd cc 36 11 80 	pushl  -0x7feec934(,%edi,4)
+80102bd4:	ff 35 c4 36 11 80    	pushl  0x801136c4
+80102bda:	83 c7 01             	add    $0x1,%edi
+80102bdd:	e8 ee d4 ff ff       	call   801000d0 <bread>
+80102be2:	83 c4 0c             	add    $0xc,%esp
+80102be5:	89 c3                	mov    %eax,%ebx
+80102be7:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102bea:	68 00 02 00 00       	push   $0x200
+80102bef:	50                   	push   %eax
+80102bf0:	8d 43 5c             	lea    0x5c(%ebx),%eax
+80102bf3:	50                   	push   %eax
+80102bf4:	e8 b7 22 00 00       	call   80104eb0 <memmove>
+80102bf9:	89 1c 24             	mov    %ebx,(%esp)
+80102bfc:	e8 af d5 ff ff       	call   801001b0 <bwrite>
+80102c01:	89 34 24             	mov    %esi,(%esp)
+80102c04:	e8 e7 d5 ff ff       	call   801001f0 <brelse>
+80102c09:	89 1c 24             	mov    %ebx,(%esp)
+80102c0c:	e8 df d5 ff ff       	call   801001f0 <brelse>
+80102c11:	83 c4 10             	add    $0x10,%esp
+80102c14:	39 3d c8 36 11 80    	cmp    %edi,0x801136c8
+80102c1a:	7f 94                	jg     80102bb0 <install_trans+0x20>
+80102c1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102c1f:	5b                   	pop    %ebx
+80102c20:	5e                   	pop    %esi
+80102c21:	5f                   	pop    %edi
+80102c22:	5d                   	pop    %ebp
+80102c23:	c3                   	ret    
+80102c24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c28:	c3                   	ret    
+80102c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102c30 <write_head>:
+80102c30:	55                   	push   %ebp
+80102c31:	89 e5                	mov    %esp,%ebp
+80102c33:	53                   	push   %ebx
+80102c34:	83 ec 0c             	sub    $0xc,%esp
+80102c37:	ff 35 b4 36 11 80    	pushl  0x801136b4
+80102c3d:	ff 35 c4 36 11 80    	pushl  0x801136c4
+80102c43:	e8 88 d4 ff ff       	call   801000d0 <bread>
+80102c48:	83 c4 10             	add    $0x10,%esp
+80102c4b:	89 c3                	mov    %eax,%ebx
+80102c4d:	a1 c8 36 11 80       	mov    0x801136c8,%eax
+80102c52:	89 43 5c             	mov    %eax,0x5c(%ebx)
+80102c55:	85 c0                	test   %eax,%eax
+80102c57:	7e 19                	jle    80102c72 <write_head+0x42>
+80102c59:	31 d2                	xor    %edx,%edx
+80102c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c5f:	90                   	nop
+80102c60:	8b 0c 95 cc 36 11 80 	mov    -0x7feec934(,%edx,4),%ecx
+80102c67:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
+80102c6b:	83 c2 01             	add    $0x1,%edx
+80102c6e:	39 d0                	cmp    %edx,%eax
+80102c70:	75 ee                	jne    80102c60 <write_head+0x30>
+80102c72:	83 ec 0c             	sub    $0xc,%esp
+80102c75:	53                   	push   %ebx
+80102c76:	e8 35 d5 ff ff       	call   801001b0 <bwrite>
+80102c7b:	89 1c 24             	mov    %ebx,(%esp)
+80102c7e:	e8 6d d5 ff ff       	call   801001f0 <brelse>
+80102c83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102c86:	83 c4 10             	add    $0x10,%esp
+80102c89:	c9                   	leave  
+80102c8a:	c3                   	ret    
+80102c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c8f:	90                   	nop
+
+80102c90 <initlog>:
+80102c90:	f3 0f 1e fb          	endbr32 
+80102c94:	55                   	push   %ebp
+80102c95:	89 e5                	mov    %esp,%ebp
+80102c97:	53                   	push   %ebx
+80102c98:	83 ec 2c             	sub    $0x2c,%esp
+80102c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102c9e:	68 20 7e 10 80       	push   $0x80107e20
+80102ca3:	68 80 36 11 80       	push   $0x80113680
+80102ca8:	e8 d3 1e 00 00       	call   80104b80 <initlock>
+80102cad:	58                   	pop    %eax
+80102cae:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102cb1:	5a                   	pop    %edx
+80102cb2:	50                   	push   %eax
+80102cb3:	53                   	push   %ebx
+80102cb4:	e8 47 e8 ff ff       	call   80101500 <readsb>
+80102cb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80102cbc:	59                   	pop    %ecx
+80102cbd:	89 1d c4 36 11 80    	mov    %ebx,0x801136c4
+80102cc3:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80102cc6:	a3 b4 36 11 80       	mov    %eax,0x801136b4
+80102ccb:	89 15 b8 36 11 80    	mov    %edx,0x801136b8
+80102cd1:	5a                   	pop    %edx
+80102cd2:	50                   	push   %eax
+80102cd3:	53                   	push   %ebx
+80102cd4:	e8 f7 d3 ff ff       	call   801000d0 <bread>
+80102cd9:	83 c4 10             	add    $0x10,%esp
+80102cdc:	8b 48 5c             	mov    0x5c(%eax),%ecx
+80102cdf:	89 0d c8 36 11 80    	mov    %ecx,0x801136c8
+80102ce5:	85 c9                	test   %ecx,%ecx
+80102ce7:	7e 19                	jle    80102d02 <initlog+0x72>
+80102ce9:	31 d2                	xor    %edx,%edx
+80102ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102cef:	90                   	nop
+80102cf0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
+80102cf4:	89 1c 95 cc 36 11 80 	mov    %ebx,-0x7feec934(,%edx,4)
+80102cfb:	83 c2 01             	add    $0x1,%edx
+80102cfe:	39 d1                	cmp    %edx,%ecx
+80102d00:	75 ee                	jne    80102cf0 <initlog+0x60>
+80102d02:	83 ec 0c             	sub    $0xc,%esp
+80102d05:	50                   	push   %eax
+80102d06:	e8 e5 d4 ff ff       	call   801001f0 <brelse>
+80102d0b:	e8 80 fe ff ff       	call   80102b90 <install_trans>
+80102d10:	c7 05 c8 36 11 80 00 	movl   $0x0,0x801136c8
+80102d17:	00 00 00 
+80102d1a:	e8 11 ff ff ff       	call   80102c30 <write_head>
+80102d1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102d22:	83 c4 10             	add    $0x10,%esp
+80102d25:	c9                   	leave  
+80102d26:	c3                   	ret    
+80102d27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d2e:	66 90                	xchg   %ax,%ax
+
+80102d30 <begin_op>:
+80102d30:	f3 0f 1e fb          	endbr32 
+80102d34:	55                   	push   %ebp
+80102d35:	89 e5                	mov    %esp,%ebp
+80102d37:	83 ec 14             	sub    $0x14,%esp
+80102d3a:	68 80 36 11 80       	push   $0x80113680
+80102d3f:	e8 bc 1f 00 00       	call   80104d00 <acquire>
+80102d44:	83 c4 10             	add    $0x10,%esp
+80102d47:	eb 1c                	jmp    80102d65 <begin_op+0x35>
+80102d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d50:	83 ec 08             	sub    $0x8,%esp
+80102d53:	68 80 36 11 80       	push   $0x80113680
+80102d58:	68 80 36 11 80       	push   $0x80113680
+80102d5d:	e8 4e 16 00 00       	call   801043b0 <sleep>
+80102d62:	83 c4 10             	add    $0x10,%esp
+80102d65:	a1 c0 36 11 80       	mov    0x801136c0,%eax
+80102d6a:	85 c0                	test   %eax,%eax
+80102d6c:	75 e2                	jne    80102d50 <begin_op+0x20>
+80102d6e:	a1 bc 36 11 80       	mov    0x801136bc,%eax
+80102d73:	8b 15 c8 36 11 80    	mov    0x801136c8,%edx
+80102d79:	83 c0 01             	add    $0x1,%eax
+80102d7c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102d7f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102d82:	83 fa 1e             	cmp    $0x1e,%edx
+80102d85:	7f c9                	jg     80102d50 <begin_op+0x20>
+80102d87:	83 ec 0c             	sub    $0xc,%esp
+80102d8a:	a3 bc 36 11 80       	mov    %eax,0x801136bc
+80102d8f:	68 80 36 11 80       	push   $0x80113680
+80102d94:	e8 27 20 00 00       	call   80104dc0 <release>
+80102d99:	83 c4 10             	add    $0x10,%esp
+80102d9c:	c9                   	leave  
+80102d9d:	c3                   	ret    
+80102d9e:	66 90                	xchg   %ax,%ax
+
+80102da0 <end_op>:
+80102da0:	f3 0f 1e fb          	endbr32 
+80102da4:	55                   	push   %ebp
+80102da5:	89 e5                	mov    %esp,%ebp
+80102da7:	57                   	push   %edi
+80102da8:	56                   	push   %esi
+80102da9:	53                   	push   %ebx
+80102daa:	83 ec 18             	sub    $0x18,%esp
+80102dad:	68 80 36 11 80       	push   $0x80113680
+80102db2:	e8 49 1f 00 00       	call   80104d00 <acquire>
+80102db7:	a1 bc 36 11 80       	mov    0x801136bc,%eax
+80102dbc:	8b 35 c0 36 11 80    	mov    0x801136c0,%esi
+80102dc2:	83 c4 10             	add    $0x10,%esp
+80102dc5:	8d 58 ff             	lea    -0x1(%eax),%ebx
+80102dc8:	89 1d bc 36 11 80    	mov    %ebx,0x801136bc
+80102dce:	85 f6                	test   %esi,%esi
+80102dd0:	0f 85 1e 01 00 00    	jne    80102ef4 <end_op+0x154>
+80102dd6:	85 db                	test   %ebx,%ebx
+80102dd8:	0f 85 f2 00 00 00    	jne    80102ed0 <end_op+0x130>
+80102dde:	c7 05 c0 36 11 80 01 	movl   $0x1,0x801136c0
+80102de5:	00 00 00 
+80102de8:	83 ec 0c             	sub    $0xc,%esp
+80102deb:	68 80 36 11 80       	push   $0x80113680
+80102df0:	e8 cb 1f 00 00       	call   80104dc0 <release>
+80102df5:	8b 0d c8 36 11 80    	mov    0x801136c8,%ecx
+80102dfb:	83 c4 10             	add    $0x10,%esp
+80102dfe:	85 c9                	test   %ecx,%ecx
+80102e00:	7f 3e                	jg     80102e40 <end_op+0xa0>
+80102e02:	83 ec 0c             	sub    $0xc,%esp
+80102e05:	68 80 36 11 80       	push   $0x80113680
+80102e0a:	e8 f1 1e 00 00       	call   80104d00 <acquire>
+80102e0f:	c7 04 24 80 36 11 80 	movl   $0x80113680,(%esp)
+80102e16:	c7 05 c0 36 11 80 00 	movl   $0x0,0x801136c0
+80102e1d:	00 00 00 
+80102e20:	e8 8b 17 00 00       	call   801045b0 <wakeup>
+80102e25:	c7 04 24 80 36 11 80 	movl   $0x80113680,(%esp)
+80102e2c:	e8 8f 1f 00 00       	call   80104dc0 <release>
+80102e31:	83 c4 10             	add    $0x10,%esp
+80102e34:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102e37:	5b                   	pop    %ebx
+80102e38:	5e                   	pop    %esi
+80102e39:	5f                   	pop    %edi
+80102e3a:	5d                   	pop    %ebp
+80102e3b:	c3                   	ret    
+80102e3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102e40:	a1 b4 36 11 80       	mov    0x801136b4,%eax
+80102e45:	83 ec 08             	sub    $0x8,%esp
+80102e48:	01 d8                	add    %ebx,%eax
+80102e4a:	83 c0 01             	add    $0x1,%eax
+80102e4d:	50                   	push   %eax
+80102e4e:	ff 35 c4 36 11 80    	pushl  0x801136c4
+80102e54:	e8 77 d2 ff ff       	call   801000d0 <bread>
+80102e59:	89 c6                	mov    %eax,%esi
+80102e5b:	58                   	pop    %eax
+80102e5c:	5a                   	pop    %edx
+80102e5d:	ff 34 9d cc 36 11 80 	pushl  -0x7feec934(,%ebx,4)
+80102e64:	ff 35 c4 36 11 80    	pushl  0x801136c4
+80102e6a:	83 c3 01             	add    $0x1,%ebx
+80102e6d:	e8 5e d2 ff ff       	call   801000d0 <bread>
+80102e72:	83 c4 0c             	add    $0xc,%esp
+80102e75:	89 c7                	mov    %eax,%edi
+80102e77:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102e7a:	68 00 02 00 00       	push   $0x200
+80102e7f:	50                   	push   %eax
+80102e80:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102e83:	50                   	push   %eax
+80102e84:	e8 27 20 00 00       	call   80104eb0 <memmove>
+80102e89:	89 34 24             	mov    %esi,(%esp)
+80102e8c:	e8 1f d3 ff ff       	call   801001b0 <bwrite>
+80102e91:	89 3c 24             	mov    %edi,(%esp)
+80102e94:	e8 57 d3 ff ff       	call   801001f0 <brelse>
+80102e99:	89 34 24             	mov    %esi,(%esp)
+80102e9c:	e8 4f d3 ff ff       	call   801001f0 <brelse>
+80102ea1:	83 c4 10             	add    $0x10,%esp
+80102ea4:	3b 1d c8 36 11 80    	cmp    0x801136c8,%ebx
+80102eaa:	7c 94                	jl     80102e40 <end_op+0xa0>
+80102eac:	e8 7f fd ff ff       	call   80102c30 <write_head>
+80102eb1:	e8 da fc ff ff       	call   80102b90 <install_trans>
+80102eb6:	c7 05 c8 36 11 80 00 	movl   $0x0,0x801136c8
+80102ebd:	00 00 00 
+80102ec0:	e8 6b fd ff ff       	call   80102c30 <write_head>
+80102ec5:	e9 38 ff ff ff       	jmp    80102e02 <end_op+0x62>
+80102eca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102ed0:	83 ec 0c             	sub    $0xc,%esp
+80102ed3:	68 80 36 11 80       	push   $0x80113680
+80102ed8:	e8 d3 16 00 00       	call   801045b0 <wakeup>
+80102edd:	c7 04 24 80 36 11 80 	movl   $0x80113680,(%esp)
+80102ee4:	e8 d7 1e 00 00       	call   80104dc0 <release>
+80102ee9:	83 c4 10             	add    $0x10,%esp
+80102eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102eef:	5b                   	pop    %ebx
+80102ef0:	5e                   	pop    %esi
+80102ef1:	5f                   	pop    %edi
+80102ef2:	5d                   	pop    %ebp
+80102ef3:	c3                   	ret    
+80102ef4:	83 ec 0c             	sub    $0xc,%esp
+80102ef7:	68 24 7e 10 80       	push   $0x80107e24
+80102efc:	e8 8f d4 ff ff       	call   80100390 <panic>
+80102f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102f0f:	90                   	nop
+
+80102f10 <log_write>:
+80102f10:	f3 0f 1e fb          	endbr32 
+80102f14:	55                   	push   %ebp
+80102f15:	89 e5                	mov    %esp,%ebp
+80102f17:	53                   	push   %ebx
+80102f18:	83 ec 04             	sub    $0x4,%esp
+80102f1b:	8b 15 c8 36 11 80    	mov    0x801136c8,%edx
+80102f21:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102f24:	83 fa 1d             	cmp    $0x1d,%edx
+80102f27:	0f 8f 91 00 00 00    	jg     80102fbe <log_write+0xae>
+80102f2d:	a1 b8 36 11 80       	mov    0x801136b8,%eax
+80102f32:	83 e8 01             	sub    $0x1,%eax
+80102f35:	39 c2                	cmp    %eax,%edx
+80102f37:	0f 8d 81 00 00 00    	jge    80102fbe <log_write+0xae>
+80102f3d:	a1 bc 36 11 80       	mov    0x801136bc,%eax
+80102f42:	85 c0                	test   %eax,%eax
+80102f44:	0f 8e 81 00 00 00    	jle    80102fcb <log_write+0xbb>
+80102f4a:	83 ec 0c             	sub    $0xc,%esp
+80102f4d:	68 80 36 11 80       	push   $0x80113680
+80102f52:	e8 a9 1d 00 00       	call   80104d00 <acquire>
+80102f57:	8b 15 c8 36 11 80    	mov    0x801136c8,%edx
+80102f5d:	83 c4 10             	add    $0x10,%esp
+80102f60:	85 d2                	test   %edx,%edx
+80102f62:	7e 4e                	jle    80102fb2 <log_write+0xa2>
+80102f64:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80102f67:	31 c0                	xor    %eax,%eax
+80102f69:	eb 0c                	jmp    80102f77 <log_write+0x67>
+80102f6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102f6f:	90                   	nop
+80102f70:	83 c0 01             	add    $0x1,%eax
+80102f73:	39 c2                	cmp    %eax,%edx
+80102f75:	74 29                	je     80102fa0 <log_write+0x90>
+80102f77:	39 0c 85 cc 36 11 80 	cmp    %ecx,-0x7feec934(,%eax,4)
+80102f7e:	75 f0                	jne    80102f70 <log_write+0x60>
+80102f80:	89 0c 85 cc 36 11 80 	mov    %ecx,-0x7feec934(,%eax,4)
+80102f87:	83 0b 04             	orl    $0x4,(%ebx)
+80102f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102f8d:	c7 45 08 80 36 11 80 	movl   $0x80113680,0x8(%ebp)
+80102f94:	c9                   	leave  
+80102f95:	e9 26 1e 00 00       	jmp    80104dc0 <release>
+80102f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102fa0:	89 0c 95 cc 36 11 80 	mov    %ecx,-0x7feec934(,%edx,4)
+80102fa7:	83 c2 01             	add    $0x1,%edx
+80102faa:	89 15 c8 36 11 80    	mov    %edx,0x801136c8
+80102fb0:	eb d5                	jmp    80102f87 <log_write+0x77>
+80102fb2:	8b 43 08             	mov    0x8(%ebx),%eax
+80102fb5:	a3 cc 36 11 80       	mov    %eax,0x801136cc
+80102fba:	75 cb                	jne    80102f87 <log_write+0x77>
+80102fbc:	eb e9                	jmp    80102fa7 <log_write+0x97>
+80102fbe:	83 ec 0c             	sub    $0xc,%esp
+80102fc1:	68 33 7e 10 80       	push   $0x80107e33
+80102fc6:	e8 c5 d3 ff ff       	call   80100390 <panic>
+80102fcb:	83 ec 0c             	sub    $0xc,%esp
+80102fce:	68 49 7e 10 80       	push   $0x80107e49
+80102fd3:	e8 b8 d3 ff ff       	call   80100390 <panic>
+80102fd8:	66 90                	xchg   %ax,%ax
+80102fda:	66 90                	xchg   %ax,%ax
+80102fdc:	66 90                	xchg   %ax,%ax
+80102fde:	66 90                	xchg   %ax,%ax
+
+80102fe0 <mpmain>:
+80102fe0:	55                   	push   %ebp
+80102fe1:	89 e5                	mov    %esp,%ebp
+80102fe3:	53                   	push   %ebx
+80102fe4:	83 ec 04             	sub    $0x4,%esp
+80102fe7:	e8 64 0d 00 00       	call   80103d50 <cpuid>
+80102fec:	89 c3                	mov    %eax,%ebx
+80102fee:	e8 5d 0d 00 00       	call   80103d50 <cpuid>
+80102ff3:	83 ec 04             	sub    $0x4,%esp
+80102ff6:	53                   	push   %ebx
+80102ff7:	50                   	push   %eax
+80102ff8:	68 64 7e 10 80       	push   $0x80107e64
+80102ffd:	e8 ae d6 ff ff       	call   801006b0 <cprintf>
+80103002:	e8 c9 31 00 00       	call   801061d0 <idtinit>
+80103007:	e8 e4 0c 00 00       	call   80103cf0 <mycpu>
+8010300c:	89 c2                	mov    %eax,%edx
+8010300e:	b8 01 00 00 00       	mov    $0x1,%eax
+80103013:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+8010301a:	e8 61 10 00 00       	call   80104080 <scheduler>
+8010301f:	90                   	nop
+
+80103020 <mpenter>:
+80103020:	f3 0f 1e fb          	endbr32 
+80103024:	55                   	push   %ebp
+80103025:	89 e5                	mov    %esp,%ebp
+80103027:	83 ec 08             	sub    $0x8,%esp
+8010302a:	e8 51 42 00 00       	call   80107280 <switchkvm>
+8010302f:	e8 bc 41 00 00       	call   801071f0 <seginit>
+80103034:	e8 67 f7 ff ff       	call   801027a0 <lapicinit>
+80103039:	e8 a2 ff ff ff       	call   80102fe0 <mpmain>
+8010303e:	66 90                	xchg   %ax,%ax
+
+80103040 <main>:
+80103040:	f3 0f 1e fb          	endbr32 
+80103044:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80103048:	83 e4 f0             	and    $0xfffffff0,%esp
+8010304b:	ff 71 fc             	pushl  -0x4(%ecx)
+8010304e:	55                   	push   %ebp
+8010304f:	89 e5                	mov    %esp,%ebp
+80103051:	53                   	push   %ebx
+80103052:	51                   	push   %ecx
+80103053:	83 ec 08             	sub    $0x8,%esp
+80103056:	68 00 00 40 80       	push   $0x80400000
+8010305b:	68 a8 64 11 80       	push   $0x801164a8
+80103060:	e8 fb f4 ff ff       	call   80102560 <kinit1>
+80103065:	e8 f6 46 00 00       	call   80107760 <kvmalloc>
+8010306a:	e8 81 01 00 00       	call   801031f0 <mpinit>
+8010306f:	e8 2c f7 ff ff       	call   801027a0 <lapicinit>
+80103074:	e8 77 41 00 00       	call   801071f0 <seginit>
+80103079:	e8 52 03 00 00       	call   801033d0 <picinit>
+8010307e:	e8 fd f2 ff ff       	call   80102380 <ioapicinit>
+80103083:	e8 a8 d9 ff ff       	call   80100a30 <consoleinit>
+80103088:	e8 23 34 00 00       	call   801064b0 <uartinit>
+8010308d:	e8 2e 0c 00 00       	call   80103cc0 <pinit>
+80103092:	e8 b9 30 00 00       	call   80106150 <tvinit>
+80103097:	e8 a4 cf ff ff       	call   80100040 <binit>
+8010309c:	e8 3f dd ff ff       	call   80100de0 <fileinit>
+801030a1:	e8 aa f0 ff ff       	call   80102150 <ideinit>
+801030a6:	83 c4 0c             	add    $0xc,%esp
+801030a9:	68 8a 00 00 00       	push   $0x8a
+801030ae:	68 8c b4 10 80       	push   $0x8010b48c
+801030b3:	68 00 70 00 80       	push   $0x80007000
+801030b8:	e8 f3 1d 00 00       	call   80104eb0 <memmove>
+801030bd:	83 c4 10             	add    $0x10,%esp
+801030c0:	69 05 30 38 11 80 b0 	imul   $0xb0,0x80113830,%eax
+801030c7:	00 00 00 
+801030ca:	05 80 37 11 80       	add    $0x80113780,%eax
+801030cf:	3d 80 37 11 80       	cmp    $0x80113780,%eax
+801030d4:	76 7a                	jbe    80103150 <main+0x110>
+801030d6:	bb 80 37 11 80       	mov    $0x80113780,%ebx
+801030db:	eb 1c                	jmp    801030f9 <main+0xb9>
+801030dd:	8d 76 00             	lea    0x0(%esi),%esi
+801030e0:	69 05 30 38 11 80 b0 	imul   $0xb0,0x80113830,%eax
+801030e7:	00 00 00 
+801030ea:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+801030f0:	05 80 37 11 80       	add    $0x80113780,%eax
+801030f5:	39 c3                	cmp    %eax,%ebx
+801030f7:	73 57                	jae    80103150 <main+0x110>
+801030f9:	e8 f2 0b 00 00       	call   80103cf0 <mycpu>
+801030fe:	39 c3                	cmp    %eax,%ebx
+80103100:	74 de                	je     801030e0 <main+0xa0>
+80103102:	e8 29 f5 ff ff       	call   80102630 <kalloc>
+80103107:	83 ec 08             	sub    $0x8,%esp
+8010310a:	c7 05 f8 6f 00 80 20 	movl   $0x80103020,0x80006ff8
+80103111:	30 10 80 
+80103114:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
+8010311b:	a0 10 00 
+8010311e:	05 00 10 00 00       	add    $0x1000,%eax
+80103123:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+80103128:	0f b6 03             	movzbl (%ebx),%eax
+8010312b:	68 00 70 00 00       	push   $0x7000
+80103130:	50                   	push   %eax
+80103131:	e8 ba f7 ff ff       	call   801028f0 <lapicstartap>
+80103136:	83 c4 10             	add    $0x10,%esp
+80103139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103140:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80103146:	85 c0                	test   %eax,%eax
+80103148:	74 f6                	je     80103140 <main+0x100>
+8010314a:	eb 94                	jmp    801030e0 <main+0xa0>
+8010314c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103150:	83 ec 08             	sub    $0x8,%esp
+80103153:	68 00 00 00 8e       	push   $0x8e000000
+80103158:	68 00 00 40 80       	push   $0x80400000
+8010315d:	e8 6e f4 ff ff       	call   801025d0 <kinit2>
+80103162:	e8 39 0c 00 00       	call   80103da0 <userinit>
+80103167:	e8 74 fe ff ff       	call   80102fe0 <mpmain>
+8010316c:	66 90                	xchg   %ax,%ax
+8010316e:	66 90                	xchg   %ax,%ax
+
+80103170 <mpsearch1>:
+80103170:	55                   	push   %ebp
+80103171:	89 e5                	mov    %esp,%ebp
+80103173:	57                   	push   %edi
+80103174:	56                   	push   %esi
+80103175:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+8010317b:	53                   	push   %ebx
+8010317c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+8010317f:	83 ec 0c             	sub    $0xc,%esp
+80103182:	39 de                	cmp    %ebx,%esi
+80103184:	72 10                	jb     80103196 <mpsearch1+0x26>
+80103186:	eb 50                	jmp    801031d8 <mpsearch1+0x68>
+80103188:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010318f:	90                   	nop
+80103190:	89 fe                	mov    %edi,%esi
+80103192:	39 fb                	cmp    %edi,%ebx
+80103194:	76 42                	jbe    801031d8 <mpsearch1+0x68>
+80103196:	83 ec 04             	sub    $0x4,%esp
+80103199:	8d 7e 10             	lea    0x10(%esi),%edi
+8010319c:	6a 04                	push   $0x4
+8010319e:	68 78 7e 10 80       	push   $0x80107e78
+801031a3:	56                   	push   %esi
+801031a4:	e8 b7 1c 00 00       	call   80104e60 <memcmp>
+801031a9:	83 c4 10             	add    $0x10,%esp
+801031ac:	85 c0                	test   %eax,%eax
+801031ae:	75 e0                	jne    80103190 <mpsearch1+0x20>
+801031b0:	89 f2                	mov    %esi,%edx
+801031b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801031b8:	0f b6 0a             	movzbl (%edx),%ecx
+801031bb:	83 c2 01             	add    $0x1,%edx
+801031be:	01 c8                	add    %ecx,%eax
+801031c0:	39 fa                	cmp    %edi,%edx
+801031c2:	75 f4                	jne    801031b8 <mpsearch1+0x48>
+801031c4:	84 c0                	test   %al,%al
+801031c6:	75 c8                	jne    80103190 <mpsearch1+0x20>
+801031c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801031cb:	89 f0                	mov    %esi,%eax
+801031cd:	5b                   	pop    %ebx
+801031ce:	5e                   	pop    %esi
+801031cf:	5f                   	pop    %edi
+801031d0:	5d                   	pop    %ebp
+801031d1:	c3                   	ret    
+801031d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801031d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801031db:	31 f6                	xor    %esi,%esi
+801031dd:	5b                   	pop    %ebx
+801031de:	89 f0                	mov    %esi,%eax
+801031e0:	5e                   	pop    %esi
+801031e1:	5f                   	pop    %edi
+801031e2:	5d                   	pop    %ebp
+801031e3:	c3                   	ret    
+801031e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801031eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801031ef:	90                   	nop
+
+801031f0 <mpinit>:
+801031f0:	f3 0f 1e fb          	endbr32 
+801031f4:	55                   	push   %ebp
+801031f5:	89 e5                	mov    %esp,%ebp
+801031f7:	57                   	push   %edi
+801031f8:	56                   	push   %esi
+801031f9:	53                   	push   %ebx
+801031fa:	83 ec 1c             	sub    $0x1c,%esp
+801031fd:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103204:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+8010320b:	c1 e0 08             	shl    $0x8,%eax
+8010320e:	09 d0                	or     %edx,%eax
+80103210:	c1 e0 04             	shl    $0x4,%eax
+80103213:	75 1b                	jne    80103230 <mpinit+0x40>
+80103215:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+8010321c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+80103223:	c1 e0 08             	shl    $0x8,%eax
+80103226:	09 d0                	or     %edx,%eax
+80103228:	c1 e0 0a             	shl    $0xa,%eax
+8010322b:	2d 00 04 00 00       	sub    $0x400,%eax
+80103230:	ba 00 04 00 00       	mov    $0x400,%edx
+80103235:	e8 36 ff ff ff       	call   80103170 <mpsearch1>
+8010323a:	89 c6                	mov    %eax,%esi
+8010323c:	85 c0                	test   %eax,%eax
+8010323e:	0f 84 4c 01 00 00    	je     80103390 <mpinit+0x1a0>
+80103244:	8b 5e 04             	mov    0x4(%esi),%ebx
+80103247:	85 db                	test   %ebx,%ebx
+80103249:	0f 84 61 01 00 00    	je     801033b0 <mpinit+0x1c0>
+8010324f:	83 ec 04             	sub    $0x4,%esp
+80103252:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80103258:	6a 04                	push   $0x4
+8010325a:	68 7d 7e 10 80       	push   $0x80107e7d
+8010325f:	50                   	push   %eax
+80103260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103263:	e8 f8 1b 00 00       	call   80104e60 <memcmp>
+80103268:	83 c4 10             	add    $0x10,%esp
+8010326b:	85 c0                	test   %eax,%eax
+8010326d:	0f 85 3d 01 00 00    	jne    801033b0 <mpinit+0x1c0>
+80103273:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+8010327a:	3c 01                	cmp    $0x1,%al
+8010327c:	74 08                	je     80103286 <mpinit+0x96>
+8010327e:	3c 04                	cmp    $0x4,%al
+80103280:	0f 85 2a 01 00 00    	jne    801033b0 <mpinit+0x1c0>
+80103286:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+8010328d:	66 85 d2             	test   %dx,%dx
+80103290:	74 26                	je     801032b8 <mpinit+0xc8>
+80103292:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
+80103295:	89 d8                	mov    %ebx,%eax
+80103297:	31 d2                	xor    %edx,%edx
+80103299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801032a0:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
+801032a7:	83 c0 01             	add    $0x1,%eax
+801032aa:	01 ca                	add    %ecx,%edx
+801032ac:	39 f8                	cmp    %edi,%eax
+801032ae:	75 f0                	jne    801032a0 <mpinit+0xb0>
+801032b0:	84 d2                	test   %dl,%dl
+801032b2:	0f 85 f8 00 00 00    	jne    801033b0 <mpinit+0x1c0>
+801032b8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+801032be:	a3 7c 36 11 80       	mov    %eax,0x8011367c
+801032c3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+801032c9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+801032d0:	bb 01 00 00 00       	mov    $0x1,%ebx
+801032d5:	03 55 e4             	add    -0x1c(%ebp),%edx
+801032d8:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+801032db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801032df:	90                   	nop
+801032e0:	39 c2                	cmp    %eax,%edx
+801032e2:	76 15                	jbe    801032f9 <mpinit+0x109>
+801032e4:	0f b6 08             	movzbl (%eax),%ecx
+801032e7:	80 f9 02             	cmp    $0x2,%cl
+801032ea:	74 5c                	je     80103348 <mpinit+0x158>
+801032ec:	77 42                	ja     80103330 <mpinit+0x140>
+801032ee:	84 c9                	test   %cl,%cl
+801032f0:	74 6e                	je     80103360 <mpinit+0x170>
+801032f2:	83 c0 08             	add    $0x8,%eax
+801032f5:	39 c2                	cmp    %eax,%edx
+801032f7:	77 eb                	ja     801032e4 <mpinit+0xf4>
+801032f9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+801032fc:	85 db                	test   %ebx,%ebx
+801032fe:	0f 84 b9 00 00 00    	je     801033bd <mpinit+0x1cd>
+80103304:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
+80103308:	74 15                	je     8010331f <mpinit+0x12f>
+8010330a:	b8 70 00 00 00       	mov    $0x70,%eax
+8010330f:	ba 22 00 00 00       	mov    $0x22,%edx
+80103314:	ee                   	out    %al,(%dx)
+80103315:	ba 23 00 00 00       	mov    $0x23,%edx
+8010331a:	ec                   	in     (%dx),%al
+8010331b:	83 c8 01             	or     $0x1,%eax
+8010331e:	ee                   	out    %al,(%dx)
+8010331f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103322:	5b                   	pop    %ebx
+80103323:	5e                   	pop    %esi
+80103324:	5f                   	pop    %edi
+80103325:	5d                   	pop    %ebp
+80103326:	c3                   	ret    
+80103327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010332e:	66 90                	xchg   %ax,%ax
+80103330:	83 e9 03             	sub    $0x3,%ecx
+80103333:	80 f9 01             	cmp    $0x1,%cl
+80103336:	76 ba                	jbe    801032f2 <mpinit+0x102>
+80103338:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010333f:	eb 9f                	jmp    801032e0 <mpinit+0xf0>
+80103341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103348:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
+8010334c:	83 c0 08             	add    $0x8,%eax
+8010334f:	88 0d 60 37 11 80    	mov    %cl,0x80113760
+80103355:	eb 89                	jmp    801032e0 <mpinit+0xf0>
+80103357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010335e:	66 90                	xchg   %ax,%ax
+80103360:	8b 0d 30 38 11 80    	mov    0x80113830,%ecx
+80103366:	85 c9                	test   %ecx,%ecx
+80103368:	7f 19                	jg     80103383 <mpinit+0x193>
+8010336a:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+80103370:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
+80103374:	83 c1 01             	add    $0x1,%ecx
+80103377:	89 0d 30 38 11 80    	mov    %ecx,0x80113830
+8010337d:	88 9f 80 37 11 80    	mov    %bl,-0x7feec880(%edi)
+80103383:	83 c0 14             	add    $0x14,%eax
+80103386:	e9 55 ff ff ff       	jmp    801032e0 <mpinit+0xf0>
+8010338b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010338f:	90                   	nop
+80103390:	ba 00 00 01 00       	mov    $0x10000,%edx
+80103395:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+8010339a:	e8 d1 fd ff ff       	call   80103170 <mpsearch1>
+8010339f:	89 c6                	mov    %eax,%esi
+801033a1:	85 c0                	test   %eax,%eax
+801033a3:	0f 85 9b fe ff ff    	jne    80103244 <mpinit+0x54>
+801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801033b0:	83 ec 0c             	sub    $0xc,%esp
+801033b3:	68 82 7e 10 80       	push   $0x80107e82
+801033b8:	e8 d3 cf ff ff       	call   80100390 <panic>
+801033bd:	83 ec 0c             	sub    $0xc,%esp
+801033c0:	68 9c 7e 10 80       	push   $0x80107e9c
+801033c5:	e8 c6 cf ff ff       	call   80100390 <panic>
+801033ca:	66 90                	xchg   %ax,%ax
+801033cc:	66 90                	xchg   %ax,%ax
+801033ce:	66 90                	xchg   %ax,%ax
+
+801033d0 <picinit>:
+801033d0:	f3 0f 1e fb          	endbr32 
+801033d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801033d9:	ba 21 00 00 00       	mov    $0x21,%edx
+801033de:	ee                   	out    %al,(%dx)
+801033df:	ba a1 00 00 00       	mov    $0xa1,%edx
+801033e4:	ee                   	out    %al,(%dx)
+801033e5:	c3                   	ret    
+801033e6:	66 90                	xchg   %ax,%ax
+801033e8:	66 90                	xchg   %ax,%ax
+801033ea:	66 90                	xchg   %ax,%ax
+801033ec:	66 90                	xchg   %ax,%ax
+801033ee:	66 90                	xchg   %ax,%ax
+
+801033f0 <pipealloc>:
+801033f0:	f3 0f 1e fb          	endbr32 
+801033f4:	55                   	push   %ebp
+801033f5:	89 e5                	mov    %esp,%ebp
+801033f7:	57                   	push   %edi
+801033f8:	56                   	push   %esi
+801033f9:	53                   	push   %ebx
+801033fa:	83 ec 0c             	sub    $0xc,%esp
+801033fd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103400:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103403:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103409:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010340f:	e8 ec d9 ff ff       	call   80100e00 <filealloc>
+80103414:	89 03                	mov    %eax,(%ebx)
+80103416:	85 c0                	test   %eax,%eax
+80103418:	0f 84 ac 00 00 00    	je     801034ca <pipealloc+0xda>
+8010341e:	e8 dd d9 ff ff       	call   80100e00 <filealloc>
+80103423:	89 06                	mov    %eax,(%esi)
+80103425:	85 c0                	test   %eax,%eax
+80103427:	0f 84 8b 00 00 00    	je     801034b8 <pipealloc+0xc8>
+8010342d:	e8 fe f1 ff ff       	call   80102630 <kalloc>
+80103432:	89 c7                	mov    %eax,%edi
+80103434:	85 c0                	test   %eax,%eax
+80103436:	0f 84 b4 00 00 00    	je     801034f0 <pipealloc+0x100>
+8010343c:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+80103443:	00 00 00 
+80103446:	83 ec 08             	sub    $0x8,%esp
+80103449:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+80103450:	00 00 00 
+80103453:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+8010345a:	00 00 00 
+8010345d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+80103464:	00 00 00 
+80103467:	68 bb 7e 10 80       	push   $0x80107ebb
+8010346c:	50                   	push   %eax
+8010346d:	e8 0e 17 00 00       	call   80104b80 <initlock>
+80103472:	8b 03                	mov    (%ebx),%eax
+80103474:	83 c4 10             	add    $0x10,%esp
+80103477:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+8010347d:	8b 03                	mov    (%ebx),%eax
+8010347f:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+80103483:	8b 03                	mov    (%ebx),%eax
+80103485:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+80103489:	8b 03                	mov    (%ebx),%eax
+8010348b:	89 78 0c             	mov    %edi,0xc(%eax)
+8010348e:	8b 06                	mov    (%esi),%eax
+80103490:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+80103496:	8b 06                	mov    (%esi),%eax
+80103498:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+8010349c:	8b 06                	mov    (%esi),%eax
+8010349e:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+801034a2:	8b 06                	mov    (%esi),%eax
+801034a4:	89 78 0c             	mov    %edi,0xc(%eax)
+801034a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801034aa:	31 c0                	xor    %eax,%eax
+801034ac:	5b                   	pop    %ebx
+801034ad:	5e                   	pop    %esi
+801034ae:	5f                   	pop    %edi
+801034af:	5d                   	pop    %ebp
+801034b0:	c3                   	ret    
+801034b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801034b8:	8b 03                	mov    (%ebx),%eax
+801034ba:	85 c0                	test   %eax,%eax
+801034bc:	74 1e                	je     801034dc <pipealloc+0xec>
+801034be:	83 ec 0c             	sub    $0xc,%esp
+801034c1:	50                   	push   %eax
+801034c2:	e8 f9 d9 ff ff       	call   80100ec0 <fileclose>
+801034c7:	83 c4 10             	add    $0x10,%esp
+801034ca:	8b 06                	mov    (%esi),%eax
+801034cc:	85 c0                	test   %eax,%eax
+801034ce:	74 0c                	je     801034dc <pipealloc+0xec>
+801034d0:	83 ec 0c             	sub    $0xc,%esp
+801034d3:	50                   	push   %eax
+801034d4:	e8 e7 d9 ff ff       	call   80100ec0 <fileclose>
+801034d9:	83 c4 10             	add    $0x10,%esp
+801034dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801034df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801034e4:	5b                   	pop    %ebx
+801034e5:	5e                   	pop    %esi
+801034e6:	5f                   	pop    %edi
+801034e7:	5d                   	pop    %ebp
+801034e8:	c3                   	ret    
+801034e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801034f0:	8b 03                	mov    (%ebx),%eax
+801034f2:	85 c0                	test   %eax,%eax
+801034f4:	75 c8                	jne    801034be <pipealloc+0xce>
+801034f6:	eb d2                	jmp    801034ca <pipealloc+0xda>
+801034f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801034ff:	90                   	nop
+
+80103500 <pipeclose>:
+80103500:	f3 0f 1e fb          	endbr32 
+80103504:	55                   	push   %ebp
+80103505:	89 e5                	mov    %esp,%ebp
+80103507:	56                   	push   %esi
+80103508:	53                   	push   %ebx
+80103509:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010350c:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010350f:	83 ec 0c             	sub    $0xc,%esp
+80103512:	53                   	push   %ebx
+80103513:	e8 e8 17 00 00       	call   80104d00 <acquire>
+80103518:	83 c4 10             	add    $0x10,%esp
+8010351b:	85 f6                	test   %esi,%esi
+8010351d:	74 41                	je     80103560 <pipeclose+0x60>
+8010351f:	83 ec 0c             	sub    $0xc,%esp
+80103522:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+80103528:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+8010352f:	00 00 00 
+80103532:	50                   	push   %eax
+80103533:	e8 78 10 00 00       	call   801045b0 <wakeup>
+80103538:	83 c4 10             	add    $0x10,%esp
+8010353b:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+80103541:	85 d2                	test   %edx,%edx
+80103543:	75 0a                	jne    8010354f <pipeclose+0x4f>
+80103545:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+8010354b:	85 c0                	test   %eax,%eax
+8010354d:	74 31                	je     80103580 <pipeclose+0x80>
+8010354f:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80103552:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103555:	5b                   	pop    %ebx
+80103556:	5e                   	pop    %esi
+80103557:	5d                   	pop    %ebp
+80103558:	e9 63 18 00 00       	jmp    80104dc0 <release>
+8010355d:	8d 76 00             	lea    0x0(%esi),%esi
+80103560:	83 ec 0c             	sub    $0xc,%esp
+80103563:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+80103569:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+80103570:	00 00 00 
+80103573:	50                   	push   %eax
+80103574:	e8 37 10 00 00       	call   801045b0 <wakeup>
+80103579:	83 c4 10             	add    $0x10,%esp
+8010357c:	eb bd                	jmp    8010353b <pipeclose+0x3b>
+8010357e:	66 90                	xchg   %ax,%ax
+80103580:	83 ec 0c             	sub    $0xc,%esp
+80103583:	53                   	push   %ebx
+80103584:	e8 37 18 00 00       	call   80104dc0 <release>
+80103589:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010358c:	83 c4 10             	add    $0x10,%esp
+8010358f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103592:	5b                   	pop    %ebx
+80103593:	5e                   	pop    %esi
+80103594:	5d                   	pop    %ebp
+80103595:	e9 d6 ee ff ff       	jmp    80102470 <kfree>
+8010359a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801035a0 <pipewrite>:
+801035a0:	f3 0f 1e fb          	endbr32 
+801035a4:	55                   	push   %ebp
+801035a5:	89 e5                	mov    %esp,%ebp
+801035a7:	57                   	push   %edi
+801035a8:	56                   	push   %esi
+801035a9:	53                   	push   %ebx
+801035aa:	83 ec 28             	sub    $0x28,%esp
+801035ad:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801035b0:	53                   	push   %ebx
+801035b1:	e8 4a 17 00 00       	call   80104d00 <acquire>
+801035b6:	8b 45 10             	mov    0x10(%ebp),%eax
+801035b9:	83 c4 10             	add    $0x10,%esp
+801035bc:	85 c0                	test   %eax,%eax
+801035be:	0f 8e bc 00 00 00    	jle    80103680 <pipewrite+0xe0>
+801035c4:	8b 45 0c             	mov    0xc(%ebp),%eax
+801035c7:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
+801035cd:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+801035d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801035d6:	03 45 10             	add    0x10(%ebp),%eax
+801035d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801035dc:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+801035e2:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+801035e8:	89 ca                	mov    %ecx,%edx
+801035ea:	05 00 02 00 00       	add    $0x200,%eax
+801035ef:	39 c1                	cmp    %eax,%ecx
+801035f1:	74 3b                	je     8010362e <pipewrite+0x8e>
+801035f3:	eb 63                	jmp    80103658 <pipewrite+0xb8>
+801035f5:	8d 76 00             	lea    0x0(%esi),%esi
+801035f8:	e8 73 07 00 00       	call   80103d70 <myproc>
+801035fd:	8b 48 24             	mov    0x24(%eax),%ecx
+80103600:	85 c9                	test   %ecx,%ecx
+80103602:	75 34                	jne    80103638 <pipewrite+0x98>
+80103604:	83 ec 0c             	sub    $0xc,%esp
+80103607:	57                   	push   %edi
+80103608:	e8 a3 0f 00 00       	call   801045b0 <wakeup>
+8010360d:	58                   	pop    %eax
+8010360e:	5a                   	pop    %edx
+8010360f:	53                   	push   %ebx
+80103610:	56                   	push   %esi
+80103611:	e8 9a 0d 00 00       	call   801043b0 <sleep>
+80103616:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010361c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+80103622:	83 c4 10             	add    $0x10,%esp
+80103625:	05 00 02 00 00       	add    $0x200,%eax
+8010362a:	39 c2                	cmp    %eax,%edx
+8010362c:	75 2a                	jne    80103658 <pipewrite+0xb8>
+8010362e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80103634:	85 c0                	test   %eax,%eax
+80103636:	75 c0                	jne    801035f8 <pipewrite+0x58>
+80103638:	83 ec 0c             	sub    $0xc,%esp
+8010363b:	53                   	push   %ebx
+8010363c:	e8 7f 17 00 00       	call   80104dc0 <release>
+80103641:	83 c4 10             	add    $0x10,%esp
+80103644:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103649:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010364c:	5b                   	pop    %ebx
+8010364d:	5e                   	pop    %esi
+8010364e:	5f                   	pop    %edi
+8010364f:	5d                   	pop    %ebp
+80103650:	c3                   	ret    
+80103651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103658:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+8010365b:	8d 4a 01             	lea    0x1(%edx),%ecx
+8010365e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+80103664:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
+8010366a:	0f b6 06             	movzbl (%esi),%eax
+8010366d:	83 c6 01             	add    $0x1,%esi
+80103670:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+80103673:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
+80103677:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+8010367a:	0f 85 5c ff ff ff    	jne    801035dc <pipewrite+0x3c>
+80103680:	83 ec 0c             	sub    $0xc,%esp
+80103683:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+80103689:	50                   	push   %eax
+8010368a:	e8 21 0f 00 00       	call   801045b0 <wakeup>
+8010368f:	89 1c 24             	mov    %ebx,(%esp)
+80103692:	e8 29 17 00 00       	call   80104dc0 <release>
+80103697:	8b 45 10             	mov    0x10(%ebp),%eax
+8010369a:	83 c4 10             	add    $0x10,%esp
+8010369d:	eb aa                	jmp    80103649 <pipewrite+0xa9>
+8010369f:	90                   	nop
+
+801036a0 <piperead>:
+801036a0:	f3 0f 1e fb          	endbr32 
+801036a4:	55                   	push   %ebp
+801036a5:	89 e5                	mov    %esp,%ebp
+801036a7:	57                   	push   %edi
+801036a8:	56                   	push   %esi
+801036a9:	53                   	push   %ebx
+801036aa:	83 ec 18             	sub    $0x18,%esp
+801036ad:	8b 75 08             	mov    0x8(%ebp),%esi
+801036b0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801036b3:	56                   	push   %esi
+801036b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+801036ba:	e8 41 16 00 00       	call   80104d00 <acquire>
+801036bf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+801036c5:	83 c4 10             	add    $0x10,%esp
+801036c8:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
+801036ce:	74 33                	je     80103703 <piperead+0x63>
+801036d0:	eb 3b                	jmp    8010370d <piperead+0x6d>
+801036d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801036d8:	e8 93 06 00 00       	call   80103d70 <myproc>
+801036dd:	8b 48 24             	mov    0x24(%eax),%ecx
+801036e0:	85 c9                	test   %ecx,%ecx
+801036e2:	0f 85 88 00 00 00    	jne    80103770 <piperead+0xd0>
+801036e8:	83 ec 08             	sub    $0x8,%esp
+801036eb:	56                   	push   %esi
+801036ec:	53                   	push   %ebx
+801036ed:	e8 be 0c 00 00       	call   801043b0 <sleep>
+801036f2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
+801036f8:	83 c4 10             	add    $0x10,%esp
+801036fb:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
+80103701:	75 0a                	jne    8010370d <piperead+0x6d>
+80103703:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
+80103709:	85 c0                	test   %eax,%eax
+8010370b:	75 cb                	jne    801036d8 <piperead+0x38>
+8010370d:	8b 55 10             	mov    0x10(%ebp),%edx
+80103710:	31 db                	xor    %ebx,%ebx
+80103712:	85 d2                	test   %edx,%edx
+80103714:	7f 28                	jg     8010373e <piperead+0x9e>
+80103716:	eb 34                	jmp    8010374c <piperead+0xac>
+80103718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010371f:	90                   	nop
+80103720:	8d 48 01             	lea    0x1(%eax),%ecx
+80103723:	25 ff 01 00 00       	and    $0x1ff,%eax
+80103728:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
+8010372e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
+80103733:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+80103736:	83 c3 01             	add    $0x1,%ebx
+80103739:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+8010373c:	74 0e                	je     8010374c <piperead+0xac>
+8010373e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+80103744:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
+8010374a:	75 d4                	jne    80103720 <piperead+0x80>
+8010374c:	83 ec 0c             	sub    $0xc,%esp
+8010374f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+80103755:	50                   	push   %eax
+80103756:	e8 55 0e 00 00       	call   801045b0 <wakeup>
+8010375b:	89 34 24             	mov    %esi,(%esp)
+8010375e:	e8 5d 16 00 00       	call   80104dc0 <release>
+80103763:	83 c4 10             	add    $0x10,%esp
+80103766:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103769:	89 d8                	mov    %ebx,%eax
+8010376b:	5b                   	pop    %ebx
+8010376c:	5e                   	pop    %esi
+8010376d:	5f                   	pop    %edi
+8010376e:	5d                   	pop    %ebp
+8010376f:	c3                   	ret    
+80103770:	83 ec 0c             	sub    $0xc,%esp
+80103773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103778:	56                   	push   %esi
+80103779:	e8 42 16 00 00       	call   80104dc0 <release>
+8010377e:	83 c4 10             	add    $0x10,%esp
+80103781:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103784:	89 d8                	mov    %ebx,%eax
+80103786:	5b                   	pop    %ebx
+80103787:	5e                   	pop    %esi
+80103788:	5f                   	pop    %edi
+80103789:	5d                   	pop    %ebp
+8010378a:	c3                   	ret    
+8010378b:	66 90                	xchg   %ax,%ax
+8010378d:	66 90                	xchg   %ax,%ax
+8010378f:	90                   	nop
+
+80103790 <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+80103790:	55                   	push   %ebp
+80103791:	89 e5                	mov    %esp,%ebp
+80103793:	53                   	push   %ebx
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103794:	bb 54 3a 11 80       	mov    $0x80113a54,%ebx
+{
+80103799:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+8010379c:	68 20 3a 11 80       	push   $0x80113a20
+801037a1:	e8 5a 15 00 00       	call   80104d00 <acquire>
+801037a6:	83 c4 10             	add    $0x10,%esp
+801037a9:	eb 17                	jmp    801037c2 <allocproc+0x32>
+801037ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801037af:	90                   	nop
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801037b0:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801037b6:	81 fb 54 5c 11 80    	cmp    $0x80115c54,%ebx
+801037bc:	0f 84 9e 00 00 00    	je     80103860 <allocproc+0xd0>
+    if(p->state == UNUSED)
+801037c2:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037c5:	85 c0                	test   %eax,%eax
+801037c7:	75 e7                	jne    801037b0 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+801037c9:	a1 04 b0 10 80       	mov    0x8010b004,%eax
+  p->nocs = 0;
+  p->parent = &defaultParent;
+  p->burst_time = 0;
+  p->rt = 0;
+  release(&ptable.lock);
+801037ce:	83 ec 0c             	sub    $0xc,%esp
+  p->state = EMBRYO;
+801037d1:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->nocs = 0;
+801037d8:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
+  p->pid = nextpid++;
+801037df:	89 43 10             	mov    %eax,0x10(%ebx)
+801037e2:	8d 50 01             	lea    0x1(%eax),%edx
+  p->parent = &defaultParent;
+801037e5:	c7 43 14 80 39 11 80 	movl   $0x80113980,0x14(%ebx)
+  p->burst_time = 0;
+801037ec:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
+801037f3:	00 00 00 
+  p->rt = 0;
+801037f6:	c7 83 84 00 00 00 00 	movl   $0x0,0x84(%ebx)
+801037fd:	00 00 00 
+  release(&ptable.lock);
+80103800:	68 20 3a 11 80       	push   $0x80113a20
+  p->pid = nextpid++;
+80103805:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
+  release(&ptable.lock);
+8010380b:	e8 b0 15 00 00       	call   80104dc0 <release>
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+80103810:	e8 1b ee ff ff       	call   80102630 <kalloc>
+80103815:	83 c4 10             	add    $0x10,%esp
+80103818:	89 43 08             	mov    %eax,0x8(%ebx)
+8010381b:	85 c0                	test   %eax,%eax
+8010381d:	74 5a                	je     80103879 <allocproc+0xe9>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+8010381f:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+80103825:	83 ec 04             	sub    $0x4,%esp
+  sp -= sizeof *p->context;
+80103828:	05 9c 0f 00 00       	add    $0xf9c,%eax
+  sp -= sizeof *p->tf;
+8010382d:	89 53 18             	mov    %edx,0x18(%ebx)
+  *(uint*)sp = (uint)trapret;
+80103830:	c7 40 14 41 61 10 80 	movl   $0x80106141,0x14(%eax)
+  p->context = (struct context*)sp;
+80103837:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  memset(p->context, 0, sizeof *p->context);
+8010383a:	6a 14                	push   $0x14
+8010383c:	6a 00                	push   $0x0
+8010383e:	50                   	push   %eax
+8010383f:	e8 cc 15 00 00       	call   80104e10 <memset>
+  p->context->eip = (uint)forkret;
+80103844:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
+  return p;
+80103847:	83 c4 10             	add    $0x10,%esp
+  p->context->eip = (uint)forkret;
+8010384a:	c7 40 10 90 38 10 80 	movl   $0x80103890,0x10(%eax)
+}
+80103851:	89 d8                	mov    %ebx,%eax
+80103853:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103856:	c9                   	leave  
+80103857:	c3                   	ret    
+80103858:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010385f:	90                   	nop
+  release(&ptable.lock);
+80103860:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80103863:	31 db                	xor    %ebx,%ebx
+  release(&ptable.lock);
+80103865:	68 20 3a 11 80       	push   $0x80113a20
+8010386a:	e8 51 15 00 00       	call   80104dc0 <release>
+}
+8010386f:	89 d8                	mov    %ebx,%eax
+  return 0;
+80103871:	83 c4 10             	add    $0x10,%esp
+}
+80103874:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103877:	c9                   	leave  
+80103878:	c3                   	ret    
+    p->state = UNUSED;
+80103879:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return 0;
+80103880:	31 db                	xor    %ebx,%ebx
+}
+80103882:	89 d8                	mov    %ebx,%eax
+80103884:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103887:	c9                   	leave  
+80103888:	c3                   	ret    
+80103889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103890 <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+80103890:	f3 0f 1e fb          	endbr32 
+80103894:	55                   	push   %ebp
+80103895:	89 e5                	mov    %esp,%ebp
+80103897:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+8010389a:	68 20 3a 11 80       	push   $0x80113a20
+8010389f:	e8 1c 15 00 00       	call   80104dc0 <release>
+
+  if (first) {
+801038a4:	a1 00 b0 10 80       	mov    0x8010b000,%eax
+801038a9:	83 c4 10             	add    $0x10,%esp
+801038ac:	85 c0                	test   %eax,%eax
+801038ae:	75 08                	jne    801038b8 <forkret+0x28>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+801038b0:	c9                   	leave  
+801038b1:	c3                   	ret    
+801038b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    first = 0;
+801038b8:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
+801038bf:	00 00 00 
+    iinit(ROOTDEV);
+801038c2:	83 ec 0c             	sub    $0xc,%esp
+801038c5:	6a 01                	push   $0x1
+801038c7:	e8 74 dc ff ff       	call   80101540 <iinit>
+    initlog(ROOTDEV);
+801038cc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038d3:	e8 b8 f3 ff ff       	call   80102c90 <initlog>
+}
+801038d8:	83 c4 10             	add    $0x10,%esp
+801038db:	c9                   	leave  
+801038dc:	c3                   	ret    
+801038dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801038e0 <isEmpty>:
+int isEmpty(){
+801038e0:	f3 0f 1e fb          	endbr32 
+801038e4:	55                   	push   %ebp
+801038e5:	89 e5                	mov    %esp,%ebp
+801038e7:	83 ec 14             	sub    $0x14,%esp
+  acquire(&pqueue.lock);
+801038ea:	68 40 38 11 80       	push   $0x80113840
+801038ef:	e8 0c 14 00 00       	call   80104d00 <acquire>
+  if(pqueue.siz == 0){
+801038f4:	a1 74 38 11 80       	mov    0x80113874,%eax
+801038f9:	83 c4 10             	add    $0x10,%esp
+801038fc:	85 c0                	test   %eax,%eax
+801038fe:	75 20                	jne    80103920 <isEmpty+0x40>
+    release(&pqueue.lock);
+80103900:	83 ec 0c             	sub    $0xc,%esp
+80103903:	68 40 38 11 80       	push   $0x80113840
+80103908:	e8 b3 14 00 00       	call   80104dc0 <release>
+    return 1;
+8010390d:	83 c4 10             	add    $0x10,%esp
+80103910:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80103915:	c9                   	leave  
+80103916:	c3                   	ret    
+80103917:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010391e:	66 90                	xchg   %ax,%ax
+    release(&pqueue.lock);
+80103920:	83 ec 0c             	sub    $0xc,%esp
+80103923:	68 40 38 11 80       	push   $0x80113840
+80103928:	e8 93 14 00 00       	call   80104dc0 <release>
+    return 0;
+8010392d:	83 c4 10             	add    $0x10,%esp
+80103930:	31 c0                	xor    %eax,%eax
+}
+80103932:	c9                   	leave  
+80103933:	c3                   	ret    
+80103934:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010393b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010393f:	90                   	nop
+
+80103940 <insert>:
+void insert(struct proc *p){
+80103940:	f3 0f 1e fb          	endbr32 
+80103944:	55                   	push   %ebp
+80103945:	89 e5                	mov    %esp,%ebp
+80103947:	57                   	push   %edi
+80103948:	56                   	push   %esi
+80103949:	53                   	push   %ebx
+8010394a:	83 ec 18             	sub    $0x18,%esp
+8010394d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&pqueue.lock);
+80103950:	68 40 38 11 80       	push   $0x80113840
+80103955:	e8 a6 13 00 00       	call   80104d00 <acquire>
+  if(pqueue.siz==NPROC){
+8010395a:	8b 15 74 38 11 80    	mov    0x80113874,%edx
+80103960:	83 c4 10             	add    $0x10,%esp
+80103963:	83 fa 40             	cmp    $0x40,%edx
+80103966:	74 47                	je     801039af <insert+0x6f>
+  pqueue.siz++;
+80103968:	8d 42 01             	lea    0x1(%edx),%eax
+  pqueue.proc[pqueue.siz]=p;
+8010396b:	89 1c 95 7c 38 11 80 	mov    %ebx,-0x7feec784(,%edx,4)
+  pqueue.siz++;
+80103972:	a3 74 38 11 80       	mov    %eax,0x80113874
+  while(curr>1 && ((pqueue.proc[curr]->burst_time)<(pqueue.proc[curr/2]->burst_time))){
+80103977:	83 f8 01             	cmp    $0x1,%eax
+8010397a:	7f 17                	jg     80103993 <insert+0x53>
+8010397c:	eb 31                	jmp    801039af <insert+0x6f>
+8010397e:	66 90                	xchg   %ax,%ax
+    pqueue.proc[curr]=pqueue.proc[curr/2];
+80103980:	89 14 b5 78 38 11 80 	mov    %edx,-0x7feec788(,%esi,4)
+    pqueue.proc[curr/2]=temp;
+80103987:	89 1c 8d 48 38 11 80 	mov    %ebx,-0x7feec7b8(,%ecx,4)
+  while(curr>1 && ((pqueue.proc[curr]->burst_time)<(pqueue.proc[curr/2]->burst_time))){
+8010398e:	83 f8 01             	cmp    $0x1,%eax
+80103991:	74 1c                	je     801039af <insert+0x6f>
+80103993:	89 c6                	mov    %eax,%esi
+80103995:	d1 f8                	sar    %eax
+80103997:	8d 48 0c             	lea    0xc(%eax),%ecx
+8010399a:	8b 14 8d 48 38 11 80 	mov    -0x7feec7b8(,%ecx,4),%edx
+801039a1:	8b ba 80 00 00 00    	mov    0x80(%edx),%edi
+801039a7:	39 bb 80 00 00 00    	cmp    %edi,0x80(%ebx)
+801039ad:	7c d1                	jl     80103980 <insert+0x40>
+    release(&pqueue.lock);
+801039af:	c7 45 08 40 38 11 80 	movl   $0x80113840,0x8(%ebp)
+}
+801039b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801039b9:	5b                   	pop    %ebx
+801039ba:	5e                   	pop    %esi
+801039bb:	5f                   	pop    %edi
+801039bc:	5d                   	pop    %ebp
+    release(&pqueue.lock);
+801039bd:	e9 fe 13 00 00       	jmp    80104dc0 <release>
+801039c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801039c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801039d0 <wakeup1>:
+//PAGEBREAK!
+// Wake up all processes sleeping on chan.
+// The ptable lock must be held.
+static void
+wakeup1(void *chan)
+{
+801039d0:	55                   	push   %ebp
+801039d1:	89 e5                	mov    %esp,%ebp
+801039d3:	56                   	push   %esi
+801039d4:	89 c6                	mov    %eax,%esi
+801039d6:	53                   	push   %ebx
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801039d7:	bb 54 3a 11 80       	mov    $0x80113a54,%ebx
+801039dc:	eb 10                	jmp    801039ee <wakeup1+0x1e>
+801039de:	66 90                	xchg   %ax,%ax
+801039e0:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801039e6:	81 fb 54 5c 11 80    	cmp    $0x80115c54,%ebx
+801039ec:	74 2c                	je     80103a1a <wakeup1+0x4a>
+    if(p->state == SLEEPING && p->chan == chan){
+801039ee:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
+801039f2:	75 ec                	jne    801039e0 <wakeup1+0x10>
+801039f4:	39 73 20             	cmp    %esi,0x20(%ebx)
+801039f7:	75 e7                	jne    801039e0 <wakeup1+0x10>
+
+      if(p->state != RUNNABLE){
+        p->state = RUNNABLE;
+        insert(p);
+801039f9:	83 ec 0c             	sub    $0xc,%esp
+        p->state = RUNNABLE;
+801039fc:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+        insert(p);
+80103a03:	53                   	push   %ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103a04:	81 c3 88 00 00 00    	add    $0x88,%ebx
+        insert(p);
+80103a0a:	e8 31 ff ff ff       	call   80103940 <insert>
+80103a0f:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103a12:	81 fb 54 5c 11 80    	cmp    $0x80115c54,%ebx
+80103a18:	75 d4                	jne    801039ee <wakeup1+0x1e>
+      }else{
+        p->state = RUNNABLE;
+      }
+    }
+      
+}
+80103a1a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103a1d:	5b                   	pop    %ebx
+80103a1e:	5e                   	pop    %esi
+80103a1f:	5d                   	pop    %ebp
+80103a20:	c3                   	ret    
+80103a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103a28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103a2f:	90                   	nop
+
+80103a30 <fix>:
+void fix(int curr){
+80103a30:	f3 0f 1e fb          	endbr32 
+80103a34:	55                   	push   %ebp
+80103a35:	89 e5                	mov    %esp,%ebp
+80103a37:	57                   	push   %edi
+80103a38:	56                   	push   %esi
+80103a39:	53                   	push   %ebx
+80103a3a:	83 ec 38             	sub    $0x38,%esp
+80103a3d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&pqueue.lock);
+80103a40:	68 40 38 11 80       	push   $0x80113840
+80103a45:	e8 b6 12 00 00       	call   80104d00 <acquire>
+  while(curr*2<=pqueue.siz){
+80103a4a:	8b 15 74 38 11 80    	mov    0x80113874,%edx
+80103a50:	8d 04 1b             	lea    (%ebx,%ebx,1),%eax
+80103a53:	83 c4 10             	add    $0x10,%esp
+80103a56:	89 c7                	mov    %eax,%edi
+80103a58:	89 55 dc             	mov    %edx,-0x24(%ebp)
+80103a5b:	39 c2                	cmp    %eax,%edx
+80103a5d:	7d 49                	jge    80103aa8 <fix+0x78>
+80103a5f:	e9 8f 00 00 00       	jmp    80103af3 <fix+0xc3>
+80103a64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      if((pqueue.proc[curr]->burst_time)<=(pqueue.proc[curr*2]->burst_time)&&(pqueue.proc[curr]->burst_time)<=(pqueue.proc[curr*2+1]->burst_time))
+80103a68:	8d 5f 01             	lea    0x1(%edi),%ebx
+80103a6b:	89 5d d8             	mov    %ebx,-0x28(%ebp)
+80103a6e:	8b 1c bd 7c 38 11 80 	mov    -0x7feec784(,%edi,4),%ebx
+80103a75:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+80103a78:	8b 9b 80 00 00 00    	mov    0x80(%ebx),%ebx
+80103a7e:	39 4d e0             	cmp    %ecx,-0x20(%ebp)
+80103a81:	0f 8f 89 00 00 00    	jg     80103b10 <fix+0xe0>
+80103a87:	39 5d e0             	cmp    %ebx,-0x20(%ebp)
+80103a8a:	7e 67                	jle    80103af3 <fix+0xc3>
+          pqueue.proc[curr*2+1]=pqueue.proc[curr];
+80103a8c:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+          pqueue.proc[curr]=temp;
+80103a8f:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+          pqueue.proc[curr*2+1]=pqueue.proc[curr];
+80103a92:	89 14 9d 78 38 11 80 	mov    %edx,-0x7feec788(,%ebx,4)
+          pqueue.proc[curr]=temp;
+80103a99:	89 34 85 48 38 11 80 	mov    %esi,-0x7feec7b8(,%eax,4)
+  while(curr*2<=pqueue.siz){
+80103aa0:	8d 3c 1b             	lea    (%ebx,%ebx,1),%edi
+80103aa3:	3b 7d dc             	cmp    -0x24(%ebp),%edi
+80103aa6:	7f 4b                	jg     80103af3 <fix+0xc3>
+    if(curr*2+1<=pqueue.siz){
+80103aa8:	8d 43 0c             	lea    0xc(%ebx),%eax
+80103aab:	8d 77 0c             	lea    0xc(%edi),%esi
+80103aae:	8b 14 85 48 38 11 80 	mov    -0x7feec7b8(,%eax,4),%edx
+80103ab5:	8b 8a 80 00 00 00    	mov    0x80(%edx),%ecx
+80103abb:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80103abe:	8b 0c b5 48 38 11 80 	mov    -0x7feec7b8(,%esi,4),%ecx
+80103ac5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80103ac8:	8b 89 80 00 00 00    	mov    0x80(%ecx),%ecx
+80103ace:	3b 7d dc             	cmp    -0x24(%ebp),%edi
+80103ad1:	7c 95                	jl     80103a68 <fix+0x38>
+      if((pqueue.proc[curr]->burst_time)<=(pqueue.proc[curr*2]->burst_time))
+80103ad3:	39 4d e0             	cmp    %ecx,-0x20(%ebp)
+80103ad6:	7e 1b                	jle    80103af3 <fix+0xc3>
+        pqueue.proc[curr*2]=pqueue.proc[curr];
+80103ad8:	89 14 b5 48 38 11 80 	mov    %edx,-0x7feec7b8(,%esi,4)
+        pqueue.proc[curr]=temp;
+80103adf:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+80103ae2:	89 fb                	mov    %edi,%ebx
+  while(curr*2<=pqueue.siz){
+80103ae4:	8d 3c 1b             	lea    (%ebx,%ebx,1),%edi
+        pqueue.proc[curr]=temp;
+80103ae7:	89 34 85 48 38 11 80 	mov    %esi,-0x7feec7b8(,%eax,4)
+  while(curr*2<=pqueue.siz){
+80103aee:	3b 7d dc             	cmp    -0x24(%ebp),%edi
+80103af1:	7e b5                	jle    80103aa8 <fix+0x78>
+  release(&pqueue.lock);
+80103af3:	c7 45 08 40 38 11 80 	movl   $0x80113840,0x8(%ebp)
+}
+80103afa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103afd:	5b                   	pop    %ebx
+80103afe:	5e                   	pop    %esi
+80103aff:	5f                   	pop    %edi
+80103b00:	5d                   	pop    %ebp
+  release(&pqueue.lock);
+80103b01:	e9 ba 12 00 00       	jmp    80104dc0 <release>
+80103b06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b0d:	8d 76 00             	lea    0x0(%esi),%esi
+        if((pqueue.proc[curr*2]->burst_time)<=(pqueue.proc[curr*2+1]->burst_time)){
+80103b10:	39 d9                	cmp    %ebx,%ecx
+80103b12:	0f 8f 74 ff ff ff    	jg     80103a8c <fix+0x5c>
+          pqueue.proc[curr*2]=pqueue.proc[curr];
+80103b18:	89 14 b5 48 38 11 80 	mov    %edx,-0x7feec7b8(,%esi,4)
+          pqueue.proc[curr]=temp;
+80103b1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103b22:	89 fb                	mov    %edi,%ebx
+80103b24:	89 14 85 48 38 11 80 	mov    %edx,-0x7feec7b8(,%eax,4)
+          curr*=2;
+80103b2b:	e9 70 ff ff ff       	jmp    80103aa0 <fix+0x70>
+
+80103b30 <extractMin>:
+struct proc * extractMin(){
+80103b30:	f3 0f 1e fb          	endbr32 
+80103b34:	55                   	push   %ebp
+80103b35:	89 e5                	mov    %esp,%ebp
+80103b37:	53                   	push   %ebx
+80103b38:	83 ec 10             	sub    $0x10,%esp
+  acquire(&pqueue.lock);
+80103b3b:	68 40 38 11 80       	push   $0x80113840
+80103b40:	e8 bb 11 00 00       	call   80104d00 <acquire>
+  if(pqueue.siz == 0){
+80103b45:	a1 74 38 11 80       	mov    0x80113874,%eax
+80103b4a:	83 c4 10             	add    $0x10,%esp
+80103b4d:	85 c0                	test   %eax,%eax
+80103b4f:	74 6f                	je     80103bc0 <extractMin+0x90>
+  struct proc* min=pqueue.proc[1];
+80103b51:	8b 1d 7c 38 11 80    	mov    0x8011387c,%ebx
+  if(pqueue.siz==1)
+80103b57:	83 f8 01             	cmp    $0x1,%eax
+80103b5a:	74 3c                	je     80103b98 <extractMin+0x68>
+    release(&pqueue.lock);
+80103b5c:	83 ec 0c             	sub    $0xc,%esp
+    pqueue.proc[1] = pqueue.proc[pqueue.siz];
+80103b5f:	8b 14 85 78 38 11 80 	mov    -0x7feec788(,%eax,4),%edx
+    pqueue.siz--;
+80103b66:	83 e8 01             	sub    $0x1,%eax
+    release(&pqueue.lock);
+80103b69:	68 40 38 11 80       	push   $0x80113840
+    pqueue.proc[1] = pqueue.proc[pqueue.siz];
+80103b6e:	89 15 7c 38 11 80    	mov    %edx,0x8011387c
+    pqueue.siz--;
+80103b74:	a3 74 38 11 80       	mov    %eax,0x80113874
+    release(&pqueue.lock);
+80103b79:	e8 42 12 00 00       	call   80104dc0 <release>
+    fix(1);
+80103b7e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80103b85:	e8 a6 fe ff ff       	call   80103a30 <fix>
+80103b8a:	83 c4 10             	add    $0x10,%esp
+}
+80103b8d:	89 d8                	mov    %ebx,%eax
+80103b8f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103b92:	c9                   	leave  
+80103b93:	c3                   	ret    
+80103b94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    pqueue.siz=0;
+80103b98:	c7 05 74 38 11 80 00 	movl   $0x0,0x80113874
+80103b9f:	00 00 00 
+    release(&pqueue.lock);
+80103ba2:	83 ec 0c             	sub    $0xc,%esp
+80103ba5:	68 40 38 11 80       	push   $0x80113840
+80103baa:	e8 11 12 00 00       	call   80104dc0 <release>
+}
+80103baf:	89 d8                	mov    %ebx,%eax
+80103bb1:	83 c4 10             	add    $0x10,%esp
+80103bb4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103bb7:	c9                   	leave  
+80103bb8:	c3                   	ret    
+80103bb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    release(&pqueue.lock);
+80103bc0:	83 ec 0c             	sub    $0xc,%esp
+    return 0;
+80103bc3:	31 db                	xor    %ebx,%ebx
+    release(&pqueue.lock);
+80103bc5:	68 40 38 11 80       	push   $0x80113840
+80103bca:	e8 f1 11 00 00       	call   80104dc0 <release>
+    return 0;
+80103bcf:	83 c4 10             	add    $0x10,%esp
+80103bd2:	eb b9                	jmp    80103b8d <extractMin+0x5d>
+80103bd4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103bdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103bdf:	90                   	nop
+
+80103be0 <changeKey>:
+void changeKey(int pid, int x){
+80103be0:	f3 0f 1e fb          	endbr32 
+80103be4:	55                   	push   %ebp
+80103be5:	89 e5                	mov    %esp,%ebp
+80103be7:	57                   	push   %edi
+80103be8:	56                   	push   %esi
+80103be9:	53                   	push   %ebx
+80103bea:	83 ec 28             	sub    $0x28,%esp
+80103bed:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103bf0:	8b 7d 08             	mov    0x8(%ebp),%edi
+	acquire(&pqueue.lock);
+80103bf3:	68 40 38 11 80       	push   $0x80113840
+void changeKey(int pid, int x){
+80103bf8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	acquire(&pqueue.lock);
+80103bfb:	e8 00 11 00 00       	call   80104d00 <acquire>
+	for(int i=1;i<=pqueue.siz;i++){
+80103c00:	a1 74 38 11 80       	mov    0x80113874,%eax
+80103c05:	83 c4 10             	add    $0x10,%esp
+80103c08:	85 c0                	test   %eax,%eax
+80103c0a:	0f 8e 90 00 00 00    	jle    80103ca0 <changeKey+0xc0>
+80103c10:	bb 01 00 00 00       	mov    $0x1,%ebx
+80103c15:	eb 10                	jmp    80103c27 <changeKey+0x47>
+80103c17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c1e:	66 90                	xchg   %ax,%ax
+80103c20:	83 c3 01             	add    $0x1,%ebx
+80103c23:	39 c3                	cmp    %eax,%ebx
+80103c25:	7f 79                	jg     80103ca0 <changeKey+0xc0>
+		if(pqueue.proc[i]->pid == pid){
+80103c27:	8b 34 9d 78 38 11 80 	mov    -0x7feec788(,%ebx,4),%esi
+80103c2e:	39 7e 10             	cmp    %edi,0x10(%esi)
+80103c31:	75 ed                	jne    80103c20 <changeKey+0x40>
+	if(curr==pqueue.siz){
+80103c33:	8d 50 ff             	lea    -0x1(%eax),%edx
+80103c36:	39 c3                	cmp    %eax,%ebx
+80103c38:	74 46                	je     80103c80 <changeKey+0xa0>
+		release(&pqueue.lock);
+80103c3a:	83 ec 0c             	sub    $0xc,%esp
+		pqueue.proc[curr]=pqueue.proc[pqueue.siz];
+80103c3d:	8b 04 85 78 38 11 80 	mov    -0x7feec788(,%eax,4),%eax
+		pqueue.siz--;
+80103c44:	89 15 74 38 11 80    	mov    %edx,0x80113874
+		release(&pqueue.lock);
+80103c4a:	68 40 38 11 80       	push   $0x80113840
+		pqueue.proc[curr]=pqueue.proc[pqueue.siz];
+80103c4f:	89 04 9d 78 38 11 80 	mov    %eax,-0x7feec788(,%ebx,4)
+		release(&pqueue.lock);
+80103c56:	e8 65 11 00 00       	call   80104dc0 <release>
+		fix(curr);
+80103c5b:	89 1c 24             	mov    %ebx,(%esp)
+80103c5e:	e8 cd fd ff ff       	call   80103a30 <fix>
+80103c63:	83 c4 10             	add    $0x10,%esp
+	p->burst_time=x;
+80103c66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103c69:	89 86 80 00 00 00    	mov    %eax,0x80(%esi)
+	insert(p);
+80103c6f:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80103c72:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103c75:	5b                   	pop    %ebx
+80103c76:	5e                   	pop    %esi
+80103c77:	5f                   	pop    %edi
+80103c78:	5d                   	pop    %ebp
+	insert(p);
+80103c79:	e9 c2 fc ff ff       	jmp    80103940 <insert>
+80103c7e:	66 90                	xchg   %ax,%ax
+		release(&pqueue.lock);
+80103c80:	83 ec 0c             	sub    $0xc,%esp
+		pqueue.siz--;
+80103c83:	89 15 74 38 11 80    	mov    %edx,0x80113874
+		release(&pqueue.lock);
+80103c89:	68 40 38 11 80       	push   $0x80113840
+80103c8e:	e8 2d 11 00 00       	call   80104dc0 <release>
+80103c93:	83 c4 10             	add    $0x10,%esp
+80103c96:	eb ce                	jmp    80103c66 <changeKey+0x86>
+80103c98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c9f:	90                   	nop
+		release(&pqueue.lock);
+80103ca0:	c7 45 08 40 38 11 80 	movl   $0x80113840,0x8(%ebp)
+}
+80103ca7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103caa:	5b                   	pop    %ebx
+80103cab:	5e                   	pop    %esi
+80103cac:	5f                   	pop    %edi
+80103cad:	5d                   	pop    %ebp
+		release(&pqueue.lock);
+80103cae:	e9 0d 11 00 00       	jmp    80104dc0 <release>
+80103cb3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103cc0 <pinit>:
+{
+80103cc0:	f3 0f 1e fb          	endbr32 
+80103cc4:	55                   	push   %ebp
+80103cc5:	89 e5                	mov    %esp,%ebp
+80103cc7:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+80103cca:	68 c0 7e 10 80       	push   $0x80107ec0
+80103ccf:	68 20 3a 11 80       	push   $0x80113a20
+80103cd4:	e8 a7 0e 00 00       	call   80104b80 <initlock>
+  initlock(&pqueue.lock, "pqueue");
+80103cd9:	58                   	pop    %eax
+80103cda:	5a                   	pop    %edx
+80103cdb:	68 c7 7e 10 80       	push   $0x80107ec7
+80103ce0:	68 40 38 11 80       	push   $0x80113840
+80103ce5:	e8 96 0e 00 00       	call   80104b80 <initlock>
+}
+80103cea:	83 c4 10             	add    $0x10,%esp
+80103ced:	c9                   	leave  
+80103cee:	c3                   	ret    
+80103cef:	90                   	nop
+
+80103cf0 <mycpu>:
+{
+80103cf0:	f3 0f 1e fb          	endbr32 
+80103cf4:	55                   	push   %ebp
+80103cf5:	89 e5                	mov    %esp,%ebp
+80103cf7:	83 ec 08             	sub    $0x8,%esp
+
+static inline uint
+readeflags(void)
+{
+  uint eflags;
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103cfa:	9c                   	pushf  
+80103cfb:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80103cfc:	f6 c4 02             	test   $0x2,%ah
+80103cff:	75 36                	jne    80103d37 <mycpu+0x47>
+  apicid = lapicid();
+80103d01:	e8 9a eb ff ff       	call   801028a0 <lapicid>
+  for (i = 0; i < ncpu; ++i) {
+80103d06:	8b 15 30 38 11 80    	mov    0x80113830,%edx
+80103d0c:	85 d2                	test   %edx,%edx
+80103d0e:	7e 0b                	jle    80103d1b <mycpu+0x2b>
+    if (cpus[i].apicid == apicid)
+80103d10:	0f b6 15 80 37 11 80 	movzbl 0x80113780,%edx
+80103d17:	39 d0                	cmp    %edx,%eax
+80103d19:	74 15                	je     80103d30 <mycpu+0x40>
+  panic("unknown apicid\n");
+80103d1b:	83 ec 0c             	sub    $0xc,%esp
+80103d1e:	68 ce 7e 10 80       	push   $0x80107ece
+80103d23:	e8 68 c6 ff ff       	call   80100390 <panic>
+80103d28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d2f:	90                   	nop
+}
+80103d30:	c9                   	leave  
+80103d31:	b8 80 37 11 80       	mov    $0x80113780,%eax
+80103d36:	c3                   	ret    
+    panic("mycpu called with interrupts enabled\n");
+80103d37:	83 ec 0c             	sub    $0xc,%esp
+80103d3a:	68 ac 7f 10 80       	push   $0x80107fac
+80103d3f:	e8 4c c6 ff ff       	call   80100390 <panic>
+80103d44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103d4f:	90                   	nop
+
+80103d50 <cpuid>:
+cpuid() {
+80103d50:	f3 0f 1e fb          	endbr32 
+80103d54:	55                   	push   %ebp
+80103d55:	89 e5                	mov    %esp,%ebp
+80103d57:	83 ec 08             	sub    $0x8,%esp
+  return mycpu()-cpus;
+80103d5a:	e8 91 ff ff ff       	call   80103cf0 <mycpu>
+}
+80103d5f:	c9                   	leave  
+  return mycpu()-cpus;
+80103d60:	2d 80 37 11 80       	sub    $0x80113780,%eax
+80103d65:	c1 f8 04             	sar    $0x4,%eax
+80103d68:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+80103d6e:	c3                   	ret    
+80103d6f:	90                   	nop
+
+80103d70 <myproc>:
+myproc(void) {
+80103d70:	f3 0f 1e fb          	endbr32 
+80103d74:	55                   	push   %ebp
+80103d75:	89 e5                	mov    %esp,%ebp
+80103d77:	53                   	push   %ebx
+80103d78:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+80103d7b:	e8 80 0e 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80103d80:	e8 6b ff ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80103d85:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103d8b:	e8 c0 0e 00 00       	call   80104c50 <popcli>
+}
+80103d90:	83 c4 04             	add    $0x4,%esp
+80103d93:	89 d8                	mov    %ebx,%eax
+80103d95:	5b                   	pop    %ebx
+80103d96:	5d                   	pop    %ebp
+80103d97:	c3                   	ret    
+80103d98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d9f:	90                   	nop
+
+80103da0 <userinit>:
+{
+80103da0:	f3 0f 1e fb          	endbr32 
+80103da4:	55                   	push   %ebp
+80103da5:	89 e5                	mov    %esp,%ebp
+80103da7:	53                   	push   %ebx
+80103da8:	83 ec 10             	sub    $0x10,%esp
+  acquire(&pqueue.lock);
+80103dab:	68 40 38 11 80       	push   $0x80113840
+80103db0:	e8 4b 0f 00 00       	call   80104d00 <acquire>
+  release(&pqueue.lock);
+80103db5:	c7 04 24 40 38 11 80 	movl   $0x80113840,(%esp)
+  pqueue.siz = 0;
+80103dbc:	c7 05 74 38 11 80 00 	movl   $0x0,0x80113874
+80103dc3:	00 00 00 
+  release(&pqueue.lock);
+80103dc6:	e8 f5 0f 00 00       	call   80104dc0 <release>
+  p = allocproc();
+80103dcb:	e8 c0 f9 ff ff       	call   80103790 <allocproc>
+80103dd0:	89 c3                	mov    %eax,%ebx
+  initproc = p;
+80103dd2:	a3 b8 b5 10 80       	mov    %eax,0x8010b5b8
+  if((p->pgdir = setupkvm()) == 0)
+80103dd7:	e8 04 39 00 00       	call   801076e0 <setupkvm>
+80103ddc:	83 c4 10             	add    $0x10,%esp
+80103ddf:	89 43 04             	mov    %eax,0x4(%ebx)
+80103de2:	85 c0                	test   %eax,%eax
+80103de4:	0f 84 d3 00 00 00    	je     80103ebd <userinit+0x11d>
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+80103dea:	83 ec 04             	sub    $0x4,%esp
+80103ded:	68 2c 00 00 00       	push   $0x2c
+80103df2:	68 60 b4 10 80       	push   $0x8010b460
+80103df7:	50                   	push   %eax
+80103df8:	e8 b3 35 00 00       	call   801073b0 <inituvm>
+  memset(p->tf, 0, sizeof(*p->tf));
+80103dfd:	83 c4 0c             	add    $0xc,%esp
+  p->sz = PGSIZE;
+80103e00:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+80103e06:	6a 4c                	push   $0x4c
+80103e08:	6a 00                	push   $0x0
+80103e0a:	ff 73 18             	pushl  0x18(%ebx)
+80103e0d:	e8 fe 0f 00 00       	call   80104e10 <memset>
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+80103e12:	8b 43 18             	mov    0x18(%ebx),%eax
+80103e15:	ba 1b 00 00 00       	mov    $0x1b,%edx
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+80103e1a:	83 c4 0c             	add    $0xc,%esp
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+80103e1d:	b9 23 00 00 00       	mov    $0x23,%ecx
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+80103e22:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+80103e26:	8b 43 18             	mov    0x18(%ebx),%eax
+80103e29:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+80103e2d:	8b 43 18             	mov    0x18(%ebx),%eax
+80103e30:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103e34:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+80103e38:	8b 43 18             	mov    0x18(%ebx),%eax
+80103e3b:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103e3f:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+80103e43:	8b 43 18             	mov    0x18(%ebx),%eax
+80103e46:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+80103e4d:	8b 43 18             	mov    0x18(%ebx),%eax
+80103e50:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0;  // beginning of initcode.S
+80103e57:	8b 43 18             	mov    0x18(%ebx),%eax
+80103e5a:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+80103e61:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103e64:	6a 10                	push   $0x10
+80103e66:	68 f7 7e 10 80       	push   $0x80107ef7
+80103e6b:	50                   	push   %eax
+80103e6c:	e8 5f 11 00 00       	call   80104fd0 <safestrcpy>
+  p->cwd = namei("/");
+80103e71:	c7 04 24 00 7f 10 80 	movl   $0x80107f00,(%esp)
+80103e78:	e8 b3 e1 ff ff       	call   80102030 <namei>
+80103e7d:	89 43 68             	mov    %eax,0x68(%ebx)
+  acquire(&ptable.lock);
+80103e80:	c7 04 24 20 3a 11 80 	movl   $0x80113a20,(%esp)
+80103e87:	e8 74 0e 00 00       	call   80104d00 <acquire>
+  if(p->state != RUNNABLE){
+80103e8c:	83 c4 10             	add    $0x10,%esp
+80103e8f:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103e93:	74 13                	je     80103ea8 <userinit+0x108>
+    insert(p);
+80103e95:	83 ec 0c             	sub    $0xc,%esp
+    p->state = RUNNABLE;
+80103e98:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+    insert(p);
+80103e9f:	53                   	push   %ebx
+80103ea0:	e8 9b fa ff ff       	call   80103940 <insert>
+80103ea5:	83 c4 10             	add    $0x10,%esp
+  release(&ptable.lock);
+80103ea8:	83 ec 0c             	sub    $0xc,%esp
+80103eab:	68 20 3a 11 80       	push   $0x80113a20
+80103eb0:	e8 0b 0f 00 00       	call   80104dc0 <release>
+}
+80103eb5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103eb8:	83 c4 10             	add    $0x10,%esp
+80103ebb:	c9                   	leave  
+80103ebc:	c3                   	ret    
+    panic("userinit: out of memory?");
+80103ebd:	83 ec 0c             	sub    $0xc,%esp
+80103ec0:	68 de 7e 10 80       	push   $0x80107ede
+80103ec5:	e8 c6 c4 ff ff       	call   80100390 <panic>
+80103eca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103ed0 <growproc>:
+{
+80103ed0:	f3 0f 1e fb          	endbr32 
+80103ed4:	55                   	push   %ebp
+80103ed5:	89 e5                	mov    %esp,%ebp
+80103ed7:	56                   	push   %esi
+80103ed8:	53                   	push   %ebx
+80103ed9:	8b 75 08             	mov    0x8(%ebp),%esi
+  pushcli();
+80103edc:	e8 1f 0d 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80103ee1:	e8 0a fe ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80103ee6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103eec:	e8 5f 0d 00 00       	call   80104c50 <popcli>
+  sz = curproc->sz;
+80103ef1:	8b 03                	mov    (%ebx),%eax
+  if(n > 0){
+80103ef3:	85 f6                	test   %esi,%esi
+80103ef5:	7f 19                	jg     80103f10 <growproc+0x40>
+  } else if(n < 0){
+80103ef7:	75 37                	jne    80103f30 <growproc+0x60>
+  switchuvm(curproc);
+80103ef9:	83 ec 0c             	sub    $0xc,%esp
+  curproc->sz = sz;
+80103efc:	89 03                	mov    %eax,(%ebx)
+  switchuvm(curproc);
+80103efe:	53                   	push   %ebx
+80103eff:	e8 9c 33 00 00       	call   801072a0 <switchuvm>
+  return 0;
+80103f04:	83 c4 10             	add    $0x10,%esp
+80103f07:	31 c0                	xor    %eax,%eax
+}
+80103f09:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103f0c:	5b                   	pop    %ebx
+80103f0d:	5e                   	pop    %esi
+80103f0e:	5d                   	pop    %ebp
+80103f0f:	c3                   	ret    
+    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103f10:	83 ec 04             	sub    $0x4,%esp
+80103f13:	01 c6                	add    %eax,%esi
+80103f15:	56                   	push   %esi
+80103f16:	50                   	push   %eax
+80103f17:	ff 73 04             	pushl  0x4(%ebx)
+80103f1a:	e8 e1 35 00 00       	call   80107500 <allocuvm>
+80103f1f:	83 c4 10             	add    $0x10,%esp
+80103f22:	85 c0                	test   %eax,%eax
+80103f24:	75 d3                	jne    80103ef9 <growproc+0x29>
+      return -1;
+80103f26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103f2b:	eb dc                	jmp    80103f09 <growproc+0x39>
+80103f2d:	8d 76 00             	lea    0x0(%esi),%esi
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80103f30:	83 ec 04             	sub    $0x4,%esp
+80103f33:	01 c6                	add    %eax,%esi
+80103f35:	56                   	push   %esi
+80103f36:	50                   	push   %eax
+80103f37:	ff 73 04             	pushl  0x4(%ebx)
+80103f3a:	e8 f1 36 00 00       	call   80107630 <deallocuvm>
+80103f3f:	83 c4 10             	add    $0x10,%esp
+80103f42:	85 c0                	test   %eax,%eax
+80103f44:	75 b3                	jne    80103ef9 <growproc+0x29>
+80103f46:	eb de                	jmp    80103f26 <growproc+0x56>
+80103f48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f4f:	90                   	nop
+
+80103f50 <fork>:
+{
+80103f50:	f3 0f 1e fb          	endbr32 
+80103f54:	55                   	push   %ebp
+80103f55:	89 e5                	mov    %esp,%ebp
+80103f57:	57                   	push   %edi
+80103f58:	56                   	push   %esi
+80103f59:	53                   	push   %ebx
+80103f5a:	83 ec 1c             	sub    $0x1c,%esp
+  pushcli();
+80103f5d:	e8 9e 0c 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80103f62:	e8 89 fd ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80103f67:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103f6d:	e8 de 0c 00 00       	call   80104c50 <popcli>
+  if((np = allocproc()) == 0){
+80103f72:	e8 19 f8 ff ff       	call   80103790 <allocproc>
+80103f77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103f7a:	85 c0                	test   %eax,%eax
+80103f7c:	0f 84 d1 00 00 00    	je     80104053 <fork+0x103>
+  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+80103f82:	83 ec 08             	sub    $0x8,%esp
+80103f85:	ff 33                	pushl  (%ebx)
+80103f87:	89 c7                	mov    %eax,%edi
+80103f89:	ff 73 04             	pushl  0x4(%ebx)
+80103f8c:	e8 1f 38 00 00       	call   801077b0 <copyuvm>
+80103f91:	83 c4 10             	add    $0x10,%esp
+80103f94:	89 47 04             	mov    %eax,0x4(%edi)
+80103f97:	85 c0                	test   %eax,%eax
+80103f99:	0f 84 bb 00 00 00    	je     8010405a <fork+0x10a>
+  np->sz = curproc->sz;
+80103f9f:	8b 03                	mov    (%ebx),%eax
+80103fa1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103fa4:	89 01                	mov    %eax,(%ecx)
+  *np->tf = *curproc->tf;
+80103fa6:	8b 79 18             	mov    0x18(%ecx),%edi
+  np->parent = curproc;
+80103fa9:	89 c8                	mov    %ecx,%eax
+80103fab:	89 59 14             	mov    %ebx,0x14(%ecx)
+  *np->tf = *curproc->tf;
+80103fae:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103fb3:	8b 73 18             	mov    0x18(%ebx),%esi
+80103fb6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  for(i = 0; i < NOFILE; i++)
+80103fb8:	31 f6                	xor    %esi,%esi
+  np->tf->eax = 0;
+80103fba:	8b 40 18             	mov    0x18(%eax),%eax
+80103fbd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+  for(i = 0; i < NOFILE; i++)
+80103fc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[i])
+80103fc8:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103fcc:	85 c0                	test   %eax,%eax
+80103fce:	74 13                	je     80103fe3 <fork+0x93>
+      np->ofile[i] = filedup(curproc->ofile[i]);
+80103fd0:	83 ec 0c             	sub    $0xc,%esp
+80103fd3:	50                   	push   %eax
+80103fd4:	e8 97 ce ff ff       	call   80100e70 <filedup>
+80103fd9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103fdc:	83 c4 10             	add    $0x10,%esp
+80103fdf:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+  for(i = 0; i < NOFILE; i++)
+80103fe3:	83 c6 01             	add    $0x1,%esi
+80103fe6:	83 fe 10             	cmp    $0x10,%esi
+80103fe9:	75 dd                	jne    80103fc8 <fork+0x78>
+  np->cwd = idup(curproc->cwd);
+80103feb:	83 ec 0c             	sub    $0xc,%esp
+80103fee:	ff 73 68             	pushl  0x68(%ebx)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103ff1:	83 c3 6c             	add    $0x6c,%ebx
+  np->cwd = idup(curproc->cwd);
+80103ff4:	e8 37 d7 ff ff       	call   80101730 <idup>
+80103ff9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80103ffc:	83 c4 0c             	add    $0xc,%esp
+  np->cwd = idup(curproc->cwd);
+80103fff:	89 47 68             	mov    %eax,0x68(%edi)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+80104002:	8d 47 6c             	lea    0x6c(%edi),%eax
+80104005:	6a 10                	push   $0x10
+80104007:	53                   	push   %ebx
+80104008:	50                   	push   %eax
+80104009:	e8 c2 0f 00 00       	call   80104fd0 <safestrcpy>
+  pid = np->pid;
+8010400e:	8b 5f 10             	mov    0x10(%edi),%ebx
+  acquire(&ptable.lock);
+80104011:	c7 04 24 20 3a 11 80 	movl   $0x80113a20,(%esp)
+80104018:	e8 e3 0c 00 00       	call   80104d00 <acquire>
+  if(np->state != RUNNABLE){
+8010401d:	83 c4 10             	add    $0x10,%esp
+80104020:	83 7f 0c 03          	cmpl   $0x3,0xc(%edi)
+80104024:	74 13                	je     80104039 <fork+0xe9>
+    insert(np);
+80104026:	83 ec 0c             	sub    $0xc,%esp
+    np->state = RUNNABLE;
+80104029:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+    insert(np);
+80104030:	57                   	push   %edi
+80104031:	e8 0a f9 ff ff       	call   80103940 <insert>
+80104036:	83 c4 10             	add    $0x10,%esp
+  release(&ptable.lock);
+80104039:	83 ec 0c             	sub    $0xc,%esp
+8010403c:	68 20 3a 11 80       	push   $0x80113a20
+80104041:	e8 7a 0d 00 00       	call   80104dc0 <release>
+  return pid;
+80104046:	83 c4 10             	add    $0x10,%esp
+}
+80104049:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010404c:	89 d8                	mov    %ebx,%eax
+8010404e:	5b                   	pop    %ebx
+8010404f:	5e                   	pop    %esi
+80104050:	5f                   	pop    %edi
+80104051:	5d                   	pop    %ebp
+80104052:	c3                   	ret    
+    return -1;
+80104053:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104058:	eb ef                	jmp    80104049 <fork+0xf9>
+    kfree(np->kstack);
+8010405a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+8010405d:	83 ec 0c             	sub    $0xc,%esp
+80104060:	ff 73 08             	pushl  0x8(%ebx)
+80104063:	e8 08 e4 ff ff       	call   80102470 <kfree>
+    np->kstack = 0;
+80104068:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+    return -1;
+8010406f:	83 c4 10             	add    $0x10,%esp
+    np->state = UNUSED;
+80104072:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return -1;
+80104079:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010407e:	eb c9                	jmp    80104049 <fork+0xf9>
+
+80104080 <scheduler>:
+{
+80104080:	f3 0f 1e fb          	endbr32 
+80104084:	55                   	push   %ebp
+80104085:	89 e5                	mov    %esp,%ebp
+80104087:	57                   	push   %edi
+80104088:	56                   	push   %esi
+80104089:	53                   	push   %ebx
+8010408a:	83 ec 0c             	sub    $0xc,%esp
+	defaultParent.pid = -2;
+8010408d:	c7 05 90 39 11 80 fe 	movl   $0xfffffffe,0x80113990
+80104094:	ff ff ff 
+  struct cpu *c = mycpu();
+80104097:	e8 54 fc ff ff       	call   80103cf0 <mycpu>
+  c->proc = 0;
+8010409c:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+801040a3:	00 00 00 
+  struct cpu *c = mycpu();
+801040a6:	89 c6                	mov    %eax,%esi
+  c->proc = 0;
+801040a8:	8d 78 04             	lea    0x4(%eax),%edi
+801040ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801040af:	90                   	nop
+}
+
+static inline void
+sti(void)
+{
+  asm volatile("sti");
+801040b0:	fb                   	sti    
+    acquire(&ptable.lock);
+801040b1:	83 ec 0c             	sub    $0xc,%esp
+801040b4:	68 20 3a 11 80       	push   $0x80113a20
+801040b9:	e8 42 0c 00 00       	call   80104d00 <acquire>
+  	if((p = extractMin(0)) == 0){
+801040be:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+801040c5:	e8 66 fa ff ff       	call   80103b30 <extractMin>
+801040ca:	83 c4 10             	add    $0x10,%esp
+801040cd:	89 c3                	mov    %eax,%ebx
+801040cf:	85 c0                	test   %eax,%eax
+801040d1:	74 4d                	je     80104120 <scheduler+0xa0>
+  	if(p->state!=RUNNABLE)
+801040d3:	83 78 0c 03          	cmpl   $0x3,0xc(%eax)
+801040d7:	75 47                	jne    80104120 <scheduler+0xa0>
+  	switchuvm(p);
+801040d9:	83 ec 0c             	sub    $0xc,%esp
+  	c->proc = p;
+801040dc:	89 86 ac 00 00 00    	mov    %eax,0xac(%esi)
+  	switchuvm(p);
+801040e2:	50                   	push   %eax
+801040e3:	e8 b8 31 00 00       	call   801072a0 <switchuvm>
+  	(p->nocs)++;
+801040e8:	83 43 7c 01          	addl   $0x1,0x7c(%ebx)
+  	p->state = RUNNING;
+801040ec:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+  	swtch(&(c->scheduler), p->context);
+801040f3:	58                   	pop    %eax
+801040f4:	5a                   	pop    %edx
+801040f5:	ff 73 1c             	pushl  0x1c(%ebx)
+801040f8:	57                   	push   %edi
+801040f9:	e8 35 0f 00 00       	call   80105033 <swtch>
+  	switchkvm();
+801040fe:	e8 7d 31 00 00       	call   80107280 <switchkvm>
+  	c->proc = 0;
+80104103:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+8010410a:	00 00 00 
+    release(&ptable.lock);
+8010410d:	c7 04 24 20 3a 11 80 	movl   $0x80113a20,(%esp)
+80104114:	e8 a7 0c 00 00       	call   80104dc0 <release>
+80104119:	83 c4 10             	add    $0x10,%esp
+8010411c:	eb 92                	jmp    801040b0 <scheduler+0x30>
+8010411e:	66 90                	xchg   %ax,%ax
+      release(&ptable.lock);
+80104120:	83 ec 0c             	sub    $0xc,%esp
+80104123:	68 20 3a 11 80       	push   $0x80113a20
+80104128:	e8 93 0c 00 00       	call   80104dc0 <release>
+      continue;
+8010412d:	83 c4 10             	add    $0x10,%esp
+80104130:	e9 7b ff ff ff       	jmp    801040b0 <scheduler+0x30>
+80104135:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010413c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104140 <sched>:
+{
+80104140:	f3 0f 1e fb          	endbr32 
+80104144:	55                   	push   %ebp
+80104145:	89 e5                	mov    %esp,%ebp
+80104147:	56                   	push   %esi
+80104148:	53                   	push   %ebx
+  pushcli();
+80104149:	e8 b2 0a 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+8010414e:	e8 9d fb ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80104153:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104159:	e8 f2 0a 00 00       	call   80104c50 <popcli>
+  if(!holding(&ptable.lock))
+8010415e:	83 ec 0c             	sub    $0xc,%esp
+80104161:	68 20 3a 11 80       	push   $0x80113a20
+80104166:	e8 45 0b 00 00       	call   80104cb0 <holding>
+8010416b:	83 c4 10             	add    $0x10,%esp
+8010416e:	85 c0                	test   %eax,%eax
+80104170:	74 4f                	je     801041c1 <sched+0x81>
+  if(mycpu()->ncli != 1)
+80104172:	e8 79 fb ff ff       	call   80103cf0 <mycpu>
+80104177:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+8010417e:	75 68                	jne    801041e8 <sched+0xa8>
+  if(p->state == RUNNING)
+80104180:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80104184:	74 55                	je     801041db <sched+0x9b>
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80104186:	9c                   	pushf  
+80104187:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80104188:	f6 c4 02             	test   $0x2,%ah
+8010418b:	75 41                	jne    801041ce <sched+0x8e>
+  intena = mycpu()->intena;
+8010418d:	e8 5e fb ff ff       	call   80103cf0 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+80104192:	83 c3 1c             	add    $0x1c,%ebx
+  intena = mycpu()->intena;
+80104195:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+8010419b:	e8 50 fb ff ff       	call   80103cf0 <mycpu>
+801041a0:	83 ec 08             	sub    $0x8,%esp
+801041a3:	ff 70 04             	pushl  0x4(%eax)
+801041a6:	53                   	push   %ebx
+801041a7:	e8 87 0e 00 00       	call   80105033 <swtch>
+  mycpu()->intena = intena;
+801041ac:	e8 3f fb ff ff       	call   80103cf0 <mycpu>
+}
+801041b1:	83 c4 10             	add    $0x10,%esp
+  mycpu()->intena = intena;
+801041b4:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+801041ba:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801041bd:	5b                   	pop    %ebx
+801041be:	5e                   	pop    %esi
+801041bf:	5d                   	pop    %ebp
+801041c0:	c3                   	ret    
+    panic("sched ptable.lock");
+801041c1:	83 ec 0c             	sub    $0xc,%esp
+801041c4:	68 02 7f 10 80       	push   $0x80107f02
+801041c9:	e8 c2 c1 ff ff       	call   80100390 <panic>
+    panic("sched interruptible");
+801041ce:	83 ec 0c             	sub    $0xc,%esp
+801041d1:	68 2e 7f 10 80       	push   $0x80107f2e
+801041d6:	e8 b5 c1 ff ff       	call   80100390 <panic>
+    panic("sched running");
+801041db:	83 ec 0c             	sub    $0xc,%esp
+801041de:	68 20 7f 10 80       	push   $0x80107f20
+801041e3:	e8 a8 c1 ff ff       	call   80100390 <panic>
+    panic("sched locks");
+801041e8:	83 ec 0c             	sub    $0xc,%esp
+801041eb:	68 14 7f 10 80       	push   $0x80107f14
+801041f0:	e8 9b c1 ff ff       	call   80100390 <panic>
+801041f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801041fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104200 <exit>:
+{
+80104200:	f3 0f 1e fb          	endbr32 
+80104204:	55                   	push   %ebp
+80104205:	89 e5                	mov    %esp,%ebp
+80104207:	57                   	push   %edi
+80104208:	56                   	push   %esi
+80104209:	53                   	push   %ebx
+8010420a:	83 ec 0c             	sub    $0xc,%esp
+  pushcli();
+8010420d:	e8 ee 09 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80104212:	e8 d9 fa ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80104217:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+8010421d:	e8 2e 0a 00 00       	call   80104c50 <popcli>
+  if(curproc == initproc)
+80104222:	8d 5e 28             	lea    0x28(%esi),%ebx
+80104225:	8d 7e 68             	lea    0x68(%esi),%edi
+80104228:	39 35 b8 b5 10 80    	cmp    %esi,0x8010b5b8
+8010422e:	0f 84 b5 00 00 00    	je     801042e9 <exit+0xe9>
+80104234:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd]){
+80104238:	8b 03                	mov    (%ebx),%eax
+8010423a:	85 c0                	test   %eax,%eax
+8010423c:	74 12                	je     80104250 <exit+0x50>
+      fileclose(curproc->ofile[fd]);
+8010423e:	83 ec 0c             	sub    $0xc,%esp
+80104241:	50                   	push   %eax
+80104242:	e8 79 cc ff ff       	call   80100ec0 <fileclose>
+      curproc->ofile[fd] = 0;
+80104247:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010424d:	83 c4 10             	add    $0x10,%esp
+  for(fd = 0; fd < NOFILE; fd++){
+80104250:	83 c3 04             	add    $0x4,%ebx
+80104253:	39 fb                	cmp    %edi,%ebx
+80104255:	75 e1                	jne    80104238 <exit+0x38>
+  begin_op();
+80104257:	e8 d4 ea ff ff       	call   80102d30 <begin_op>
+  iput(curproc->cwd);
+8010425c:	83 ec 0c             	sub    $0xc,%esp
+8010425f:	ff 76 68             	pushl  0x68(%esi)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104262:	bb 54 3a 11 80       	mov    $0x80113a54,%ebx
+  iput(curproc->cwd);
+80104267:	e8 24 d6 ff ff       	call   80101890 <iput>
+  end_op();
+8010426c:	e8 2f eb ff ff       	call   80102da0 <end_op>
+  curproc->cwd = 0;
+80104271:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+  acquire(&ptable.lock);
+80104278:	c7 04 24 20 3a 11 80 	movl   $0x80113a20,(%esp)
+8010427f:	e8 7c 0a 00 00       	call   80104d00 <acquire>
+  wakeup1(curproc->parent);
+80104284:	8b 46 14             	mov    0x14(%esi),%eax
+80104287:	e8 44 f7 ff ff       	call   801039d0 <wakeup1>
+8010428c:	83 c4 10             	add    $0x10,%esp
+8010428f:	eb 15                	jmp    801042a6 <exit+0xa6>
+80104291:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104298:	81 c3 88 00 00 00    	add    $0x88,%ebx
+8010429e:	81 fb 54 5c 11 80    	cmp    $0x80115c54,%ebx
+801042a4:	74 2a                	je     801042d0 <exit+0xd0>
+    if(p->parent == curproc){
+801042a6:	39 73 14             	cmp    %esi,0x14(%ebx)
+801042a9:	75 ed                	jne    80104298 <exit+0x98>
+      p->parent = initproc;
+801042ab:	a1 b8 b5 10 80       	mov    0x8010b5b8,%eax
+      if(p->state == ZOMBIE)
+801042b0:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+      p->parent = initproc;
+801042b4:	89 43 14             	mov    %eax,0x14(%ebx)
+      if(p->state == ZOMBIE)
+801042b7:	75 df                	jne    80104298 <exit+0x98>
+        wakeup1(initproc);
+801042b9:	e8 12 f7 ff ff       	call   801039d0 <wakeup1>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801042be:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801042c4:	81 fb 54 5c 11 80    	cmp    $0x80115c54,%ebx
+801042ca:	75 da                	jne    801042a6 <exit+0xa6>
+801042cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  curproc->state = ZOMBIE;
+801042d0:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+  sched();
+801042d7:	e8 64 fe ff ff       	call   80104140 <sched>
+  panic("zombie exit");
+801042dc:	83 ec 0c             	sub    $0xc,%esp
+801042df:	68 4f 7f 10 80       	push   $0x80107f4f
+801042e4:	e8 a7 c0 ff ff       	call   80100390 <panic>
+    panic("init exiting");
+801042e9:	83 ec 0c             	sub    $0xc,%esp
+801042ec:	68 42 7f 10 80       	push   $0x80107f42
+801042f1:	e8 9a c0 ff ff       	call   80100390 <panic>
+801042f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801042fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104300 <yield>:
+{
+80104300:	f3 0f 1e fb          	endbr32 
+80104304:	55                   	push   %ebp
+80104305:	89 e5                	mov    %esp,%ebp
+80104307:	53                   	push   %ebx
+80104308:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);  //DOC: yieldlock
+8010430b:	68 20 3a 11 80       	push   $0x80113a20
+80104310:	e8 eb 09 00 00       	call   80104d00 <acquire>
+  pushcli();
+80104315:	e8 e6 08 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+8010431a:	e8 d1 f9 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+8010431f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104325:	e8 26 09 00 00       	call   80104c50 <popcli>
+  if(myproc()->state != RUNNABLE){
+8010432a:	83 c4 10             	add    $0x10,%esp
+8010432d:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80104331:	74 5d                	je     80104390 <yield+0x90>
+  pushcli();
+80104333:	e8 c8 08 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80104338:	e8 b3 f9 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+8010433d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104343:	e8 08 09 00 00       	call   80104c50 <popcli>
+    myproc()->state = RUNNABLE;
+80104348:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  pushcli();
+8010434f:	e8 ac 08 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80104354:	e8 97 f9 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80104359:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010435f:	e8 ec 08 00 00       	call   80104c50 <popcli>
+    insert(myproc());
+80104364:	83 ec 0c             	sub    $0xc,%esp
+80104367:	53                   	push   %ebx
+80104368:	e8 d3 f5 ff ff       	call   80103940 <insert>
+8010436d:	83 c4 10             	add    $0x10,%esp
+  sched();
+80104370:	e8 cb fd ff ff       	call   80104140 <sched>
+  release(&ptable.lock);
+80104375:	83 ec 0c             	sub    $0xc,%esp
+80104378:	68 20 3a 11 80       	push   $0x80113a20
+8010437d:	e8 3e 0a 00 00       	call   80104dc0 <release>
+}
+80104382:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104385:	83 c4 10             	add    $0x10,%esp
+80104388:	c9                   	leave  
+80104389:	c3                   	ret    
+8010438a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  pushcli();
+80104390:	e8 6b 08 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80104395:	e8 56 f9 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+8010439a:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801043a0:	e8 ab 08 00 00       	call   80104c50 <popcli>
+    myproc()->state = RUNNABLE;
+801043a5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+801043ac:	eb c2                	jmp    80104370 <yield+0x70>
+801043ae:	66 90                	xchg   %ax,%ax
+
+801043b0 <sleep>:
+{
+801043b0:	f3 0f 1e fb          	endbr32 
+801043b4:	55                   	push   %ebp
+801043b5:	89 e5                	mov    %esp,%ebp
+801043b7:	57                   	push   %edi
+801043b8:	56                   	push   %esi
+801043b9:	53                   	push   %ebx
+801043ba:	83 ec 0c             	sub    $0xc,%esp
+801043bd:	8b 7d 08             	mov    0x8(%ebp),%edi
+801043c0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  pushcli();
+801043c3:	e8 38 08 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+801043c8:	e8 23 f9 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+801043cd:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801043d3:	e8 78 08 00 00       	call   80104c50 <popcli>
+  if(p == 0)
+801043d8:	85 db                	test   %ebx,%ebx
+801043da:	0f 84 83 00 00 00    	je     80104463 <sleep+0xb3>
+  if(lk == 0)
+801043e0:	85 f6                	test   %esi,%esi
+801043e2:	74 72                	je     80104456 <sleep+0xa6>
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+801043e4:	81 fe 20 3a 11 80    	cmp    $0x80113a20,%esi
+801043ea:	74 4c                	je     80104438 <sleep+0x88>
+    acquire(&ptable.lock);  //DOC: sleeplock1
+801043ec:	83 ec 0c             	sub    $0xc,%esp
+801043ef:	68 20 3a 11 80       	push   $0x80113a20
+801043f4:	e8 07 09 00 00       	call   80104d00 <acquire>
+    release(lk);
+801043f9:	89 34 24             	mov    %esi,(%esp)
+801043fc:	e8 bf 09 00 00       	call   80104dc0 <release>
+  p->chan = chan;
+80104401:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80104404:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+8010440b:	e8 30 fd ff ff       	call   80104140 <sched>
+  p->chan = 0;
+80104410:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+    release(&ptable.lock);
+80104417:	c7 04 24 20 3a 11 80 	movl   $0x80113a20,(%esp)
+8010441e:	e8 9d 09 00 00       	call   80104dc0 <release>
+    acquire(lk);
+80104423:	89 75 08             	mov    %esi,0x8(%ebp)
+80104426:	83 c4 10             	add    $0x10,%esp
+}
+80104429:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010442c:	5b                   	pop    %ebx
+8010442d:	5e                   	pop    %esi
+8010442e:	5f                   	pop    %edi
+8010442f:	5d                   	pop    %ebp
+    acquire(lk);
+80104430:	e9 cb 08 00 00       	jmp    80104d00 <acquire>
+80104435:	8d 76 00             	lea    0x0(%esi),%esi
+  p->chan = chan;
+80104438:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+8010443b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80104442:	e8 f9 fc ff ff       	call   80104140 <sched>
+  p->chan = 0;
+80104447:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+8010444e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104451:	5b                   	pop    %ebx
+80104452:	5e                   	pop    %esi
+80104453:	5f                   	pop    %edi
+80104454:	5d                   	pop    %ebp
+80104455:	c3                   	ret    
+    panic("sleep without lk");
+80104456:	83 ec 0c             	sub    $0xc,%esp
+80104459:	68 61 7f 10 80       	push   $0x80107f61
+8010445e:	e8 2d bf ff ff       	call   80100390 <panic>
+    panic("sleep");
+80104463:	83 ec 0c             	sub    $0xc,%esp
+80104466:	68 5b 7f 10 80       	push   $0x80107f5b
+8010446b:	e8 20 bf ff ff       	call   80100390 <panic>
+
+80104470 <wait>:
+{
+80104470:	f3 0f 1e fb          	endbr32 
+80104474:	55                   	push   %ebp
+80104475:	89 e5                	mov    %esp,%ebp
+80104477:	56                   	push   %esi
+80104478:	53                   	push   %ebx
+  pushcli();
+80104479:	e8 82 07 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+8010447e:	e8 6d f8 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80104483:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80104489:	e8 c2 07 00 00       	call   80104c50 <popcli>
+  acquire(&ptable.lock);
+8010448e:	83 ec 0c             	sub    $0xc,%esp
+80104491:	68 20 3a 11 80       	push   $0x80113a20
+80104496:	e8 65 08 00 00       	call   80104d00 <acquire>
+8010449b:	83 c4 10             	add    $0x10,%esp
+    havekids = 0;
+8010449e:	31 c0                	xor    %eax,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801044a0:	bb 54 3a 11 80       	mov    $0x80113a54,%ebx
+801044a5:	eb 17                	jmp    801044be <wait+0x4e>
+801044a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044ae:	66 90                	xchg   %ax,%ax
+801044b0:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801044b6:	81 fb 54 5c 11 80    	cmp    $0x80115c54,%ebx
+801044bc:	74 1e                	je     801044dc <wait+0x6c>
+      if(p->parent != curproc)
+801044be:	39 73 14             	cmp    %esi,0x14(%ebx)
+801044c1:	75 ed                	jne    801044b0 <wait+0x40>
+      if(p->state == ZOMBIE){
+801044c3:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+801044c7:	74 3f                	je     80104508 <wait+0x98>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801044c9:	81 c3 88 00 00 00    	add    $0x88,%ebx
+      havekids = 1;
+801044cf:	b8 01 00 00 00       	mov    $0x1,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801044d4:	81 fb 54 5c 11 80    	cmp    $0x80115c54,%ebx
+801044da:	75 e2                	jne    801044be <wait+0x4e>
+    if(!havekids || curproc->killed){
+801044dc:	85 c0                	test   %eax,%eax
+801044de:	0f 84 b3 00 00 00    	je     80104597 <wait+0x127>
+801044e4:	8b 46 24             	mov    0x24(%esi),%eax
+801044e7:	85 c0                	test   %eax,%eax
+801044e9:	0f 85 a8 00 00 00    	jne    80104597 <wait+0x127>
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+801044ef:	83 ec 08             	sub    $0x8,%esp
+801044f2:	68 20 3a 11 80       	push   $0x80113a20
+801044f7:	56                   	push   %esi
+801044f8:	e8 b3 fe ff ff       	call   801043b0 <sleep>
+    havekids = 0;
+801044fd:	83 c4 10             	add    $0x10,%esp
+80104500:	eb 9c                	jmp    8010449e <wait+0x2e>
+80104502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        changeKey(p->pid, 0);
+80104508:	83 ec 08             	sub    $0x8,%esp
+8010450b:	6a 00                	push   $0x0
+8010450d:	ff 73 10             	pushl  0x10(%ebx)
+80104510:	e8 cb f6 ff ff       	call   80103be0 <changeKey>
+        if((pqueue.proc[1]->burst_time == 0) && (pqueue.proc[1]->pid == p->pid))
+80104515:	a1 7c 38 11 80       	mov    0x8011387c,%eax
+8010451a:	83 c4 10             	add    $0x10,%esp
+8010451d:	8b 73 10             	mov    0x10(%ebx),%esi
+80104520:	8b 88 80 00 00 00    	mov    0x80(%eax),%ecx
+80104526:	85 c9                	test   %ecx,%ecx
+80104528:	74 56                	je     80104580 <wait+0x110>
+        kfree(p->kstack);
+8010452a:	83 ec 0c             	sub    $0xc,%esp
+8010452d:	ff 73 08             	pushl  0x8(%ebx)
+80104530:	e8 3b df ff ff       	call   80102470 <kfree>
+        freevm(p->pgdir);
+80104535:	5a                   	pop    %edx
+80104536:	ff 73 04             	pushl  0x4(%ebx)
+        p->kstack = 0;
+80104539:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80104540:	e8 1b 31 00 00       	call   80107660 <freevm>
+        release(&ptable.lock);
+80104545:	c7 04 24 20 3a 11 80 	movl   $0x80113a20,(%esp)
+        p->pid = 0;
+8010454c:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80104553:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+8010455a:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+8010455e:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->state = UNUSED;
+80104565:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        release(&ptable.lock);
+8010456c:	e8 4f 08 00 00       	call   80104dc0 <release>
+        return pid;
+80104571:	83 c4 10             	add    $0x10,%esp
+}
+80104574:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104577:	89 f0                	mov    %esi,%eax
+80104579:	5b                   	pop    %ebx
+8010457a:	5e                   	pop    %esi
+8010457b:	5d                   	pop    %ebp
+8010457c:	c3                   	ret    
+8010457d:	8d 76 00             	lea    0x0(%esi),%esi
+        if((pqueue.proc[1]->burst_time == 0) && (pqueue.proc[1]->pid == p->pid))
+80104580:	39 70 10             	cmp    %esi,0x10(%eax)
+80104583:	75 a5                	jne    8010452a <wait+0xba>
+          extractMin(0);
+80104585:	83 ec 0c             	sub    $0xc,%esp
+80104588:	6a 00                	push   $0x0
+8010458a:	e8 a1 f5 ff ff       	call   80103b30 <extractMin>
+8010458f:	8b 73 10             	mov    0x10(%ebx),%esi
+80104592:	83 c4 10             	add    $0x10,%esp
+80104595:	eb 93                	jmp    8010452a <wait+0xba>
+      release(&ptable.lock);
+80104597:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+8010459a:	be ff ff ff ff       	mov    $0xffffffff,%esi
+      release(&ptable.lock);
+8010459f:	68 20 3a 11 80       	push   $0x80113a20
+801045a4:	e8 17 08 00 00       	call   80104dc0 <release>
+      return -1;
+801045a9:	83 c4 10             	add    $0x10,%esp
+801045ac:	eb c6                	jmp    80104574 <wait+0x104>
+801045ae:	66 90                	xchg   %ax,%ax
+
+801045b0 <wakeup>:
+
+// Wake up all processes sleeping on chan.
+void
+wakeup(void *chan)
+{
+801045b0:	f3 0f 1e fb          	endbr32 
+801045b4:	55                   	push   %ebp
+801045b5:	89 e5                	mov    %esp,%ebp
+801045b7:	53                   	push   %ebx
+801045b8:	83 ec 10             	sub    $0x10,%esp
+801045bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ptable.lock);
+801045be:	68 20 3a 11 80       	push   $0x80113a20
+801045c3:	e8 38 07 00 00       	call   80104d00 <acquire>
+  wakeup1(chan);
+801045c8:	89 d8                	mov    %ebx,%eax
+801045ca:	e8 01 f4 ff ff       	call   801039d0 <wakeup1>
+  release(&ptable.lock);
+801045cf:	c7 45 08 20 3a 11 80 	movl   $0x80113a20,0x8(%ebp)
+}
+801045d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  release(&ptable.lock);
+801045d9:	83 c4 10             	add    $0x10,%esp
+}
+801045dc:	c9                   	leave  
+  release(&ptable.lock);
+801045dd:	e9 de 07 00 00       	jmp    80104dc0 <release>
+801045e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801045e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801045f0 <kill>:
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int
+kill(int pid)
+{
+801045f0:	f3 0f 1e fb          	endbr32 
+801045f4:	55                   	push   %ebp
+801045f5:	89 e5                	mov    %esp,%ebp
+801045f7:	53                   	push   %ebx
+801045f8:	83 ec 10             	sub    $0x10,%esp
+801045fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+801045fe:	68 20 3a 11 80       	push   $0x80113a20
+80104603:	e8 f8 06 00 00       	call   80104d00 <acquire>
+80104608:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010460b:	b8 54 3a 11 80       	mov    $0x80113a54,%eax
+80104610:	eb 12                	jmp    80104624 <kill+0x34>
+80104612:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104618:	05 88 00 00 00       	add    $0x88,%eax
+8010461d:	3d 54 5c 11 80       	cmp    $0x80115c54,%eax
+80104622:	74 2c                	je     80104650 <kill+0x60>
+    if(p->pid == pid){
+80104624:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104627:	75 ef                	jne    80104618 <kill+0x28>
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING){
+80104629:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      p->killed = 1;
+8010462d:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      if(p->state == SLEEPING){
+80104634:	74 3a                	je     80104670 <kill+0x80>
+          insert(p);
+        }else{
+          p->state = RUNNABLE;
+        }
+      }
+      release(&ptable.lock);
+80104636:	83 ec 0c             	sub    $0xc,%esp
+80104639:	68 20 3a 11 80       	push   $0x80113a20
+8010463e:	e8 7d 07 00 00       	call   80104dc0 <release>
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+80104643:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+      return 0;
+80104646:	83 c4 10             	add    $0x10,%esp
+80104649:	31 c0                	xor    %eax,%eax
+}
+8010464b:	c9                   	leave  
+8010464c:	c3                   	ret    
+8010464d:	8d 76 00             	lea    0x0(%esi),%esi
+  release(&ptable.lock);
+80104650:	83 ec 0c             	sub    $0xc,%esp
+80104653:	68 20 3a 11 80       	push   $0x80113a20
+80104658:	e8 63 07 00 00       	call   80104dc0 <release>
+}
+8010465d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  return -1;
+80104660:	83 c4 10             	add    $0x10,%esp
+80104663:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104668:	c9                   	leave  
+80104669:	c3                   	ret    
+8010466a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+          insert(p);
+80104670:	83 ec 0c             	sub    $0xc,%esp
+          p->state = RUNNABLE;
+80104673:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+          insert(p);
+8010467a:	50                   	push   %eax
+8010467b:	e8 c0 f2 ff ff       	call   80103940 <insert>
+80104680:	83 c4 10             	add    $0x10,%esp
+80104683:	eb b1                	jmp    80104636 <kill+0x46>
+80104685:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010468c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104690 <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+80104690:	f3 0f 1e fb          	endbr32 
+80104694:	55                   	push   %ebp
+80104695:	89 e5                	mov    %esp,%ebp
+80104697:	57                   	push   %edi
+80104698:	56                   	push   %esi
+80104699:	8d 75 e8             	lea    -0x18(%ebp),%esi
+8010469c:	53                   	push   %ebx
+8010469d:	bb c0 3a 11 80       	mov    $0x80113ac0,%ebx
+801046a2:	83 ec 3c             	sub    $0x3c,%esp
+801046a5:	eb 2b                	jmp    801046d2 <procdump+0x42>
+801046a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801046ae:	66 90                	xchg   %ax,%ax
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+801046b0:	83 ec 0c             	sub    $0xc,%esp
+801046b3:	68 17 83 10 80       	push   $0x80108317
+801046b8:	e8 f3 bf ff ff       	call   801006b0 <cprintf>
+801046bd:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801046c0:	81 c3 88 00 00 00    	add    $0x88,%ebx
+801046c6:	81 fb c0 5c 11 80    	cmp    $0x80115cc0,%ebx
+801046cc:	0f 84 8e 00 00 00    	je     80104760 <procdump+0xd0>
+    if(p->state == UNUSED)
+801046d2:	8b 43 a0             	mov    -0x60(%ebx),%eax
+801046d5:	85 c0                	test   %eax,%eax
+801046d7:	74 e7                	je     801046c0 <procdump+0x30>
+      state = "???";
+801046d9:	ba 72 7f 10 80       	mov    $0x80107f72,%edx
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+801046de:	83 f8 05             	cmp    $0x5,%eax
+801046e1:	77 11                	ja     801046f4 <procdump+0x64>
+801046e3:	8b 14 85 d4 7f 10 80 	mov    -0x7fef802c(,%eax,4),%edx
+      state = "???";
+801046ea:	b8 72 7f 10 80       	mov    $0x80107f72,%eax
+801046ef:	85 d2                	test   %edx,%edx
+801046f1:	0f 44 d0             	cmove  %eax,%edx
+    cprintf("%d %s %s", p->pid, state, p->name);
+801046f4:	53                   	push   %ebx
+801046f5:	52                   	push   %edx
+801046f6:	ff 73 a4             	pushl  -0x5c(%ebx)
+801046f9:	68 76 7f 10 80       	push   $0x80107f76
+801046fe:	e8 ad bf ff ff       	call   801006b0 <cprintf>
+    if(p->state == SLEEPING){
+80104703:	83 c4 10             	add    $0x10,%esp
+80104706:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+8010470a:	75 a4                	jne    801046b0 <procdump+0x20>
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+8010470c:	83 ec 08             	sub    $0x8,%esp
+8010470f:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104712:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104715:	50                   	push   %eax
+80104716:	8b 43 b0             	mov    -0x50(%ebx),%eax
+80104719:	8b 40 0c             	mov    0xc(%eax),%eax
+8010471c:	83 c0 08             	add    $0x8,%eax
+8010471f:	50                   	push   %eax
+80104720:	e8 7b 04 00 00       	call   80104ba0 <getcallerpcs>
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104725:	83 c4 10             	add    $0x10,%esp
+80104728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010472f:	90                   	nop
+80104730:	8b 17                	mov    (%edi),%edx
+80104732:	85 d2                	test   %edx,%edx
+80104734:	0f 84 76 ff ff ff    	je     801046b0 <procdump+0x20>
+        cprintf(" %p", pc[i]);
+8010473a:	83 ec 08             	sub    $0x8,%esp
+8010473d:	83 c7 04             	add    $0x4,%edi
+80104740:	52                   	push   %edx
+80104741:	68 c1 79 10 80       	push   $0x801079c1
+80104746:	e8 65 bf ff ff       	call   801006b0 <cprintf>
+      for(i=0; i<10 && pc[i] != 0; i++)
+8010474b:	83 c4 10             	add    $0x10,%esp
+8010474e:	39 fe                	cmp    %edi,%esi
+80104750:	75 de                	jne    80104730 <procdump+0xa0>
+80104752:	e9 59 ff ff ff       	jmp    801046b0 <procdump+0x20>
+80104757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010475e:	66 90                	xchg   %ax,%ax
+  }
+}
+80104760:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104763:	5b                   	pop    %ebx
+80104764:	5e                   	pop    %esi
+80104765:	5f                   	pop    %edi
+80104766:	5d                   	pop    %ebp
+80104767:	c3                   	ret    
+80104768:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010476f:	90                   	nop
+
+80104770 <getNumProc_system>:
+
+int getNumProc_system(void){
+80104770:	f3 0f 1e fb          	endbr32 
+80104774:	55                   	push   %ebp
+80104775:	89 e5                	mov    %esp,%ebp
+80104777:	53                   	push   %ebx
+
+	int num_processes;
+	struct proc *p;
+
+  num_processes = 0;
+80104778:	31 db                	xor    %ebx,%ebx
+int getNumProc_system(void){
+8010477a:	83 ec 10             	sub    $0x10,%esp
+	acquire(&ptable.lock);
+8010477d:	68 20 3a 11 80       	push   $0x80113a20
+80104782:	e8 79 05 00 00       	call   80104d00 <acquire>
+80104787:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010478a:	b8 54 3a 11 80       	mov    $0x80113a54,%eax
+8010478f:	90                   	nop
+    if(p->state != UNUSED){
+      num_processes ++;
+80104790:	83 78 0c 01          	cmpl   $0x1,0xc(%eax)
+80104794:	83 db ff             	sbb    $0xffffffff,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104797:	05 88 00 00 00       	add    $0x88,%eax
+8010479c:	3d 54 5c 11 80       	cmp    $0x80115c54,%eax
+801047a1:	75 ed                	jne    80104790 <getNumProc_system+0x20>
+    }
+  }
+  release(&ptable.lock);
+801047a3:	83 ec 0c             	sub    $0xc,%esp
+801047a6:	68 20 3a 11 80       	push   $0x80113a20
+801047ab:	e8 10 06 00 00       	call   80104dc0 <release>
+
+  return num_processes ;
+}
+801047b0:	89 d8                	mov    %ebx,%eax
+801047b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801047b5:	c9                   	leave  
+801047b6:	c3                   	ret    
+801047b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047be:	66 90                	xchg   %ax,%ax
+
+801047c0 <getMaxPID_system>:
+
+int getMaxPID_system(void){
+801047c0:	f3 0f 1e fb          	endbr32 
+801047c4:	55                   	push   %ebp
+801047c5:	89 e5                	mov    %esp,%ebp
+801047c7:	53                   	push   %ebx
+
+	int max_pid;
+	struct proc *p;
+
+  max_pid = 0;
+801047c8:	31 db                	xor    %ebx,%ebx
+int getMaxPID_system(void){
+801047ca:	83 ec 10             	sub    $0x10,%esp
+	acquire(&ptable.lock);
+801047cd:	68 20 3a 11 80       	push   $0x80113a20
+801047d2:	e8 29 05 00 00       	call   80104d00 <acquire>
+801047d7:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801047da:	b8 54 3a 11 80       	mov    $0x80113a54,%eax
+801047df:	90                   	nop
+    if(p->state != UNUSED){
+801047e0:	8b 50 0c             	mov    0xc(%eax),%edx
+801047e3:	85 d2                	test   %edx,%edx
+801047e5:	74 08                	je     801047ef <getMaxPID_system+0x2f>
+      if(p->pid > max_pid){
+801047e7:	8b 50 10             	mov    0x10(%eax),%edx
+801047ea:	39 d3                	cmp    %edx,%ebx
+801047ec:	0f 4c da             	cmovl  %edx,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801047ef:	05 88 00 00 00       	add    $0x88,%eax
+801047f4:	3d 54 5c 11 80       	cmp    $0x80115c54,%eax
+801047f9:	75 e5                	jne    801047e0 <getMaxPID_system+0x20>
+        max_pid = p->pid;
+      }
+    }
+  }
+  release(&ptable.lock);
+801047fb:	83 ec 0c             	sub    $0xc,%esp
+801047fe:	68 20 3a 11 80       	push   $0x80113a20
+80104803:	e8 b8 05 00 00       	call   80104dc0 <release>
+
+  return max_pid;
+}
+80104808:	89 d8                	mov    %ebx,%eax
+8010480a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010480d:	c9                   	leave  
+8010480e:	c3                   	ret    
+8010480f:	90                   	nop
+
+80104810 <getProcInfo_system>:
+
+
+struct processInfo getProcInfo_system(int pid){
+80104810:	f3 0f 1e fb          	endbr32 
+80104814:	55                   	push   %ebp
+80104815:	89 e5                	mov    %esp,%ebp
+80104817:	57                   	push   %edi
+80104818:	56                   	push   %esi
+80104819:	53                   	push   %ebx
+8010481a:	83 ec 28             	sub    $0x28,%esp
+8010481d:	8b 75 08             	mov    0x8(%ebp),%esi
+80104820:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+
+	struct proc *p;
+	struct processInfo temporary_info = {-1,0,0};
+
+	acquire(&ptable.lock);
+80104823:	68 20 3a 11 80       	push   $0x80113a20
+80104828:	e8 d3 04 00 00       	call   80104d00 <acquire>
+8010482d:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104830:	b8 54 3a 11 80       	mov    $0x80113a54,%eax
+80104835:	eb 15                	jmp    8010484c <getProcInfo_system+0x3c>
+80104837:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010483e:	66 90                	xchg   %ax,%ax
+80104840:	05 88 00 00 00       	add    $0x88,%eax
+80104845:	3d 54 5c 11 80       	cmp    $0x80115c54,%eax
+8010484a:	74 44                	je     80104890 <getProcInfo_system+0x80>
+    if(p->state != UNUSED){
+8010484c:	8b 50 0c             	mov    0xc(%eax),%edx
+8010484f:	85 d2                	test   %edx,%edx
+80104851:	74 ed                	je     80104840 <getProcInfo_system+0x30>
+      if(p->pid == pid) {
+80104853:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104856:	75 e8                	jne    80104840 <getProcInfo_system+0x30>
+        temporary_info.ppid = p->parent->pid;
+80104858:	8b 50 14             	mov    0x14(%eax),%edx
+        temporary_info.psize = p->sz;
+        temporary_info.numberContextSwitches = p->nocs;
+        release(&ptable.lock);
+8010485b:	83 ec 0c             	sub    $0xc,%esp
+        temporary_info.psize = p->sz;
+8010485e:	8b 38                	mov    (%eax),%edi
+        temporary_info.numberContextSwitches = p->nocs;
+80104860:	8b 58 7c             	mov    0x7c(%eax),%ebx
+        temporary_info.ppid = p->parent->pid;
+80104863:	8b 52 10             	mov    0x10(%edx),%edx
+        release(&ptable.lock);
+80104866:	68 20 3a 11 80       	push   $0x80113a20
+        temporary_info.ppid = p->parent->pid;
+8010486b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        release(&ptable.lock);
+8010486e:	e8 4d 05 00 00       	call   80104dc0 <release>
+        return temporary_info;
+80104873:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80104876:	89 7e 04             	mov    %edi,0x4(%esi)
+80104879:	83 c4 10             	add    $0x10,%esp
+8010487c:	89 5e 08             	mov    %ebx,0x8(%esi)
+  }
+  release(&ptable.lock);
+
+  return temporary_info;
+
+}
+8010487f:	89 f0                	mov    %esi,%eax
+        return temporary_info;
+80104881:	89 16                	mov    %edx,(%esi)
+}
+80104883:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104886:	5b                   	pop    %ebx
+80104887:	5e                   	pop    %esi
+80104888:	5f                   	pop    %edi
+80104889:	5d                   	pop    %ebp
+8010488a:	c2 04 00             	ret    $0x4
+8010488d:	8d 76 00             	lea    0x0(%esi),%esi
+  release(&ptable.lock);
+80104890:	83 ec 0c             	sub    $0xc,%esp
+80104893:	68 20 3a 11 80       	push   $0x80113a20
+80104898:	e8 23 05 00 00       	call   80104dc0 <release>
+  return temporary_info;
+8010489d:	c7 06 ff ff ff ff    	movl   $0xffffffff,(%esi)
+801048a3:	83 c4 10             	add    $0x10,%esp
+}
+801048a6:	89 f0                	mov    %esi,%eax
+  return temporary_info;
+801048a8:	c7 46 04 00 00 00 00 	movl   $0x0,0x4(%esi)
+801048af:	c7 46 08 00 00 00 00 	movl   $0x0,0x8(%esi)
+}
+801048b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801048b9:	5b                   	pop    %ebx
+801048ba:	5e                   	pop    %esi
+801048bb:	5f                   	pop    %edi
+801048bc:	5d                   	pop    %ebp
+801048bd:	c2 04 00             	ret    $0x4
+
+801048c0 <set_burst_time_system>:
+
+int
+set_burst_time_system(int burst_time)
+{
+801048c0:	f3 0f 1e fb          	endbr32 
+801048c4:	55                   	push   %ebp
+801048c5:	89 e5                	mov    %esp,%ebp
+801048c7:	53                   	push   %ebx
+801048c8:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+801048cb:	e8 30 03 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+801048d0:	e8 1b f4 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+801048d5:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801048db:	e8 70 03 00 00       	call   80104c50 <popcli>
+	struct proc *p = myproc();
+	p->burst_time = burst_time;
+801048e0:	8b 45 08             	mov    0x8(%ebp),%eax
+801048e3:	89 83 80 00 00 00    	mov    %eax,0x80(%ebx)
+  yield();
+801048e9:	e8 12 fa ff ff       	call   80104300 <yield>
+
+	return 0;
+}
+801048ee:	83 c4 04             	add    $0x4,%esp
+801048f1:	31 c0                	xor    %eax,%eax
+801048f3:	5b                   	pop    %ebx
+801048f4:	5d                   	pop    %ebp
+801048f5:	c3                   	ret    
+801048f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104900 <get_burst_time_system>:
+
+int 
+get_burst_time_system()
+{
+80104900:	f3 0f 1e fb          	endbr32 
+80104904:	55                   	push   %ebp
+80104905:	89 e5                	mov    %esp,%ebp
+80104907:	53                   	push   %ebx
+80104908:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+8010490b:	e8 f0 02 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80104910:	e8 db f3 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80104915:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010491b:	e8 30 03 00 00       	call   80104c50 <popcli>
+	struct proc *p = myproc();
+
+	return p->burst_time;
+80104920:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
+
+}
+80104926:	83 c4 04             	add    $0x4,%esp
+80104929:	5b                   	pop    %ebx
+8010492a:	5d                   	pop    %ebp
+8010492b:	c3                   	ret    
+8010492c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104930 <getCurrentInfo_system>:
+
+struct processInfo
+getCurrentInfo_system(){
+80104930:	f3 0f 1e fb          	endbr32 
+80104934:	55                   	push   %ebp
+80104935:	89 e5                	mov    %esp,%ebp
+80104937:	57                   	push   %edi
+80104938:	56                   	push   %esi
+80104939:	53                   	push   %ebx
+
+  struct proc *p;
+  struct processInfo temporaryInfo = {-1,0,0};
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010493a:	bb 54 3a 11 80       	mov    $0x80113a54,%ebx
+getCurrentInfo_system(){
+8010493f:	83 ec 28             	sub    $0x28,%esp
+80104942:	8b 7d 08             	mov    0x8(%ebp),%edi
+  acquire(&ptable.lock);
+80104945:	68 20 3a 11 80       	push   $0x80113a20
+8010494a:	e8 b1 03 00 00       	call   80104d00 <acquire>
+8010494f:	83 c4 10             	add    $0x10,%esp
+80104952:	eb 12                	jmp    80104966 <getCurrentInfo_system+0x36>
+80104954:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104958:	81 c3 88 00 00 00    	add    $0x88,%ebx
+8010495e:	81 fb 54 5c 11 80    	cmp    $0x80115c54,%ebx
+80104964:	74 5a                	je     801049c0 <getCurrentInfo_system+0x90>
+    if(p->state != UNUSED){
+80104966:	8b 43 0c             	mov    0xc(%ebx),%eax
+80104969:	85 c0                	test   %eax,%eax
+8010496b:	74 eb                	je     80104958 <getCurrentInfo_system+0x28>
+  pushcli();
+8010496d:	e8 8e 02 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80104972:	e8 79 f3 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80104977:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+8010497d:	e8 ce 02 00 00       	call   80104c50 <popcli>
+      if(p == myproc()) {
+80104982:	39 de                	cmp    %ebx,%esi
+80104984:	75 d2                	jne    80104958 <getCurrentInfo_system+0x28>
+        temporaryInfo.ppid = p->parent->pid;
+80104986:	8b 43 14             	mov    0x14(%ebx),%eax
+        temporaryInfo.psize = p->sz;
+        temporaryInfo.numberContextSwitches = p->nocs;
+        release(&ptable.lock);
+80104989:	83 ec 0c             	sub    $0xc,%esp
+        temporaryInfo.psize = p->sz;
+8010498c:	8b 33                	mov    (%ebx),%esi
+        temporaryInfo.numberContextSwitches = p->nocs;
+8010498e:	8b 5b 7c             	mov    0x7c(%ebx),%ebx
+        temporaryInfo.ppid = p->parent->pid;
+80104991:	8b 40 10             	mov    0x10(%eax),%eax
+        release(&ptable.lock);
+80104994:	68 20 3a 11 80       	push   $0x80113a20
+        temporaryInfo.ppid = p->parent->pid;
+80104999:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        release(&ptable.lock);
+8010499c:	e8 1f 04 00 00       	call   80104dc0 <release>
+        return temporaryInfo;
+801049a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801049a4:	89 77 04             	mov    %esi,0x4(%edi)
+801049a7:	83 c4 10             	add    $0x10,%esp
+801049aa:	89 5f 08             	mov    %ebx,0x8(%edi)
+801049ad:	89 07                	mov    %eax,(%edi)
+    }
+  }
+  release(&ptable.lock);
+
+  return temporaryInfo ;
+}
+801049af:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801049b2:	89 f8                	mov    %edi,%eax
+801049b4:	5b                   	pop    %ebx
+801049b5:	5e                   	pop    %esi
+801049b6:	5f                   	pop    %edi
+801049b7:	5d                   	pop    %ebp
+801049b8:	c2 04 00             	ret    $0x4
+801049bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801049bf:	90                   	nop
+  release(&ptable.lock);
+801049c0:	83 ec 0c             	sub    $0xc,%esp
+801049c3:	68 20 3a 11 80       	push   $0x80113a20
+801049c8:	e8 f3 03 00 00       	call   80104dc0 <release>
+  return temporaryInfo ;
+801049cd:	c7 07 ff ff ff ff    	movl   $0xffffffff,(%edi)
+801049d3:	83 c4 10             	add    $0x10,%esp
+}
+801049d6:	89 f8                	mov    %edi,%eax
+  return temporaryInfo ;
+801049d8:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)
+801049df:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%edi)
+}
+801049e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801049e9:	5b                   	pop    %ebx
+801049ea:	5e                   	pop    %esi
+801049eb:	5f                   	pop    %edi
+801049ec:	5d                   	pop    %ebp
+801049ed:	c2 04 00             	ret    $0x4
+
+801049f0 <getCurrentPID_system>:
+
+int getCurrentPID_system(void){
+801049f0:	f3 0f 1e fb          	endbr32 
+801049f4:	55                   	push   %ebp
+801049f5:	89 e5                	mov    %esp,%ebp
+801049f7:	53                   	push   %ebx
+801049f8:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+801049fb:	e8 00 02 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80104a00:	e8 eb f2 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80104a05:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104a0b:	e8 40 02 00 00       	call   80104c50 <popcli>
+
+  if(!myproc())return -1;
+80104a10:	85 db                	test   %ebx,%ebx
+80104a12:	74 1e                	je     80104a32 <getCurrentPID_system+0x42>
+  pushcli();
+80104a14:	e8 e7 01 00 00       	call   80104c00 <pushcli>
+  c = mycpu();
+80104a19:	e8 d2 f2 ff ff       	call   80103cf0 <mycpu>
+  p = c->proc;
+80104a1e:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104a24:	e8 27 02 00 00       	call   80104c50 <popcli>
+
+  return myproc()->pid;
+80104a29:	8b 43 10             	mov    0x10(%ebx),%eax
+}
+80104a2c:	83 c4 04             	add    $0x4,%esp
+80104a2f:	5b                   	pop    %ebx
+80104a30:	5d                   	pop    %ebp
+80104a31:	c3                   	ret    
+  if(!myproc())return -1;
+80104a32:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104a37:	eb f3                	jmp    80104a2c <getCurrentPID_system+0x3c>
+80104a39:	66 90                	xchg   %ax,%ax
+80104a3b:	66 90                	xchg   %ax,%ax
+80104a3d:	66 90                	xchg   %ax,%ax
+80104a3f:	90                   	nop
+
+80104a40 <initsleeplock>:
+80104a40:	f3 0f 1e fb          	endbr32 
+80104a44:	55                   	push   %ebp
+80104a45:	89 e5                	mov    %esp,%ebp
+80104a47:	53                   	push   %ebx
+80104a48:	83 ec 0c             	sub    $0xc,%esp
+80104a4b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104a4e:	68 ec 7f 10 80       	push   $0x80107fec
+80104a53:	8d 43 04             	lea    0x4(%ebx),%eax
+80104a56:	50                   	push   %eax
+80104a57:	e8 24 01 00 00       	call   80104b80 <initlock>
+80104a5c:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104a5f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104a65:	83 c4 10             	add    $0x10,%esp
+80104a68:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104a6f:	89 43 38             	mov    %eax,0x38(%ebx)
+80104a72:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104a75:	c9                   	leave  
+80104a76:	c3                   	ret    
+80104a77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a7e:	66 90                	xchg   %ax,%ax
+
+80104a80 <acquiresleep>:
+80104a80:	f3 0f 1e fb          	endbr32 
+80104a84:	55                   	push   %ebp
+80104a85:	89 e5                	mov    %esp,%ebp
+80104a87:	56                   	push   %esi
+80104a88:	53                   	push   %ebx
+80104a89:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104a8c:	8d 73 04             	lea    0x4(%ebx),%esi
+80104a8f:	83 ec 0c             	sub    $0xc,%esp
+80104a92:	56                   	push   %esi
+80104a93:	e8 68 02 00 00       	call   80104d00 <acquire>
+80104a98:	8b 13                	mov    (%ebx),%edx
+80104a9a:	83 c4 10             	add    $0x10,%esp
+80104a9d:	85 d2                	test   %edx,%edx
+80104a9f:	74 1a                	je     80104abb <acquiresleep+0x3b>
+80104aa1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104aa8:	83 ec 08             	sub    $0x8,%esp
+80104aab:	56                   	push   %esi
+80104aac:	53                   	push   %ebx
+80104aad:	e8 fe f8 ff ff       	call   801043b0 <sleep>
+80104ab2:	8b 03                	mov    (%ebx),%eax
+80104ab4:	83 c4 10             	add    $0x10,%esp
+80104ab7:	85 c0                	test   %eax,%eax
+80104ab9:	75 ed                	jne    80104aa8 <acquiresleep+0x28>
+80104abb:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+80104ac1:	e8 aa f2 ff ff       	call   80103d70 <myproc>
+80104ac6:	8b 40 10             	mov    0x10(%eax),%eax
+80104ac9:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104acc:	89 75 08             	mov    %esi,0x8(%ebp)
+80104acf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104ad2:	5b                   	pop    %ebx
+80104ad3:	5e                   	pop    %esi
+80104ad4:	5d                   	pop    %ebp
+80104ad5:	e9 e6 02 00 00       	jmp    80104dc0 <release>
+80104ada:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104ae0 <releasesleep>:
+80104ae0:	f3 0f 1e fb          	endbr32 
+80104ae4:	55                   	push   %ebp
+80104ae5:	89 e5                	mov    %esp,%ebp
+80104ae7:	56                   	push   %esi
+80104ae8:	53                   	push   %ebx
+80104ae9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104aec:	8d 73 04             	lea    0x4(%ebx),%esi
+80104aef:	83 ec 0c             	sub    $0xc,%esp
+80104af2:	56                   	push   %esi
+80104af3:	e8 08 02 00 00       	call   80104d00 <acquire>
+80104af8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104afe:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104b05:	89 1c 24             	mov    %ebx,(%esp)
+80104b08:	e8 a3 fa ff ff       	call   801045b0 <wakeup>
+80104b0d:	89 75 08             	mov    %esi,0x8(%ebp)
+80104b10:	83 c4 10             	add    $0x10,%esp
+80104b13:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104b16:	5b                   	pop    %ebx
+80104b17:	5e                   	pop    %esi
+80104b18:	5d                   	pop    %ebp
+80104b19:	e9 a2 02 00 00       	jmp    80104dc0 <release>
+80104b1e:	66 90                	xchg   %ax,%ax
+
+80104b20 <holdingsleep>:
+80104b20:	f3 0f 1e fb          	endbr32 
+80104b24:	55                   	push   %ebp
+80104b25:	89 e5                	mov    %esp,%ebp
+80104b27:	57                   	push   %edi
+80104b28:	31 ff                	xor    %edi,%edi
+80104b2a:	56                   	push   %esi
+80104b2b:	53                   	push   %ebx
+80104b2c:	83 ec 18             	sub    $0x18,%esp
+80104b2f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104b32:	8d 73 04             	lea    0x4(%ebx),%esi
+80104b35:	56                   	push   %esi
+80104b36:	e8 c5 01 00 00       	call   80104d00 <acquire>
+80104b3b:	8b 03                	mov    (%ebx),%eax
+80104b3d:	83 c4 10             	add    $0x10,%esp
+80104b40:	85 c0                	test   %eax,%eax
+80104b42:	75 1c                	jne    80104b60 <holdingsleep+0x40>
+80104b44:	83 ec 0c             	sub    $0xc,%esp
+80104b47:	56                   	push   %esi
+80104b48:	e8 73 02 00 00       	call   80104dc0 <release>
+80104b4d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104b50:	89 f8                	mov    %edi,%eax
+80104b52:	5b                   	pop    %ebx
+80104b53:	5e                   	pop    %esi
+80104b54:	5f                   	pop    %edi
+80104b55:	5d                   	pop    %ebp
+80104b56:	c3                   	ret    
+80104b57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b5e:	66 90                	xchg   %ax,%ax
+80104b60:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104b63:	e8 08 f2 ff ff       	call   80103d70 <myproc>
+80104b68:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104b6b:	0f 94 c0             	sete   %al
+80104b6e:	0f b6 c0             	movzbl %al,%eax
+80104b71:	89 c7                	mov    %eax,%edi
+80104b73:	eb cf                	jmp    80104b44 <holdingsleep+0x24>
+80104b75:	66 90                	xchg   %ax,%ax
+80104b77:	66 90                	xchg   %ax,%ax
+80104b79:	66 90                	xchg   %ax,%ax
+80104b7b:	66 90                	xchg   %ax,%ax
+80104b7d:	66 90                	xchg   %ax,%ax
+80104b7f:	90                   	nop
+
+80104b80 <initlock>:
+80104b80:	f3 0f 1e fb          	endbr32 
+80104b84:	55                   	push   %ebp
+80104b85:	89 e5                	mov    %esp,%ebp
+80104b87:	8b 45 08             	mov    0x8(%ebp),%eax
+80104b8a:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104b8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104b93:	89 50 04             	mov    %edx,0x4(%eax)
+80104b96:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80104b9d:	5d                   	pop    %ebp
+80104b9e:	c3                   	ret    
+80104b9f:	90                   	nop
+
+80104ba0 <getcallerpcs>:
+80104ba0:	f3 0f 1e fb          	endbr32 
+80104ba4:	55                   	push   %ebp
+80104ba5:	31 d2                	xor    %edx,%edx
+80104ba7:	89 e5                	mov    %esp,%ebp
+80104ba9:	53                   	push   %ebx
+80104baa:	8b 45 08             	mov    0x8(%ebp),%eax
+80104bad:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104bb0:	83 e8 08             	sub    $0x8,%eax
+80104bb3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104bb7:	90                   	nop
+80104bb8:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104bbe:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80104bc4:	77 1a                	ja     80104be0 <getcallerpcs+0x40>
+80104bc6:	8b 58 04             	mov    0x4(%eax),%ebx
+80104bc9:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+80104bcc:	83 c2 01             	add    $0x1,%edx
+80104bcf:	8b 00                	mov    (%eax),%eax
+80104bd1:	83 fa 0a             	cmp    $0xa,%edx
+80104bd4:	75 e2                	jne    80104bb8 <getcallerpcs+0x18>
+80104bd6:	5b                   	pop    %ebx
+80104bd7:	5d                   	pop    %ebp
+80104bd8:	c3                   	ret    
+80104bd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104be0:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+80104be3:	8d 51 28             	lea    0x28(%ecx),%edx
+80104be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104bed:	8d 76 00             	lea    0x0(%esi),%esi
+80104bf0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104bf6:	83 c0 04             	add    $0x4,%eax
+80104bf9:	39 d0                	cmp    %edx,%eax
+80104bfb:	75 f3                	jne    80104bf0 <getcallerpcs+0x50>
+80104bfd:	5b                   	pop    %ebx
+80104bfe:	5d                   	pop    %ebp
+80104bff:	c3                   	ret    
+
+80104c00 <pushcli>:
+80104c00:	f3 0f 1e fb          	endbr32 
+80104c04:	55                   	push   %ebp
+80104c05:	89 e5                	mov    %esp,%ebp
+80104c07:	53                   	push   %ebx
+80104c08:	83 ec 04             	sub    $0x4,%esp
+80104c0b:	9c                   	pushf  
+80104c0c:	5b                   	pop    %ebx
+80104c0d:	fa                   	cli    
+80104c0e:	e8 dd f0 ff ff       	call   80103cf0 <mycpu>
+80104c13:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104c19:	85 c0                	test   %eax,%eax
+80104c1b:	74 13                	je     80104c30 <pushcli+0x30>
+80104c1d:	e8 ce f0 ff ff       	call   80103cf0 <mycpu>
+80104c22:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+80104c29:	83 c4 04             	add    $0x4,%esp
+80104c2c:	5b                   	pop    %ebx
+80104c2d:	5d                   	pop    %ebp
+80104c2e:	c3                   	ret    
+80104c2f:	90                   	nop
+80104c30:	e8 bb f0 ff ff       	call   80103cf0 <mycpu>
+80104c35:	81 e3 00 02 00 00    	and    $0x200,%ebx
+80104c3b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80104c41:	eb da                	jmp    80104c1d <pushcli+0x1d>
+80104c43:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104c50 <popcli>:
+80104c50:	f3 0f 1e fb          	endbr32 
+80104c54:	55                   	push   %ebp
+80104c55:	89 e5                	mov    %esp,%ebp
+80104c57:	83 ec 08             	sub    $0x8,%esp
+80104c5a:	9c                   	pushf  
+80104c5b:	58                   	pop    %eax
+80104c5c:	f6 c4 02             	test   $0x2,%ah
+80104c5f:	75 31                	jne    80104c92 <popcli+0x42>
+80104c61:	e8 8a f0 ff ff       	call   80103cf0 <mycpu>
+80104c66:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+80104c6d:	78 30                	js     80104c9f <popcli+0x4f>
+80104c6f:	e8 7c f0 ff ff       	call   80103cf0 <mycpu>
+80104c74:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80104c7a:	85 d2                	test   %edx,%edx
+80104c7c:	74 02                	je     80104c80 <popcli+0x30>
+80104c7e:	c9                   	leave  
+80104c7f:	c3                   	ret    
+80104c80:	e8 6b f0 ff ff       	call   80103cf0 <mycpu>
+80104c85:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+80104c8b:	85 c0                	test   %eax,%eax
+80104c8d:	74 ef                	je     80104c7e <popcli+0x2e>
+80104c8f:	fb                   	sti    
+80104c90:	c9                   	leave  
+80104c91:	c3                   	ret    
+80104c92:	83 ec 0c             	sub    $0xc,%esp
+80104c95:	68 f7 7f 10 80       	push   $0x80107ff7
+80104c9a:	e8 f1 b6 ff ff       	call   80100390 <panic>
+80104c9f:	83 ec 0c             	sub    $0xc,%esp
+80104ca2:	68 0e 80 10 80       	push   $0x8010800e
+80104ca7:	e8 e4 b6 ff ff       	call   80100390 <panic>
+80104cac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104cb0 <holding>:
+80104cb0:	f3 0f 1e fb          	endbr32 
+80104cb4:	55                   	push   %ebp
+80104cb5:	89 e5                	mov    %esp,%ebp
+80104cb7:	56                   	push   %esi
+80104cb8:	53                   	push   %ebx
+80104cb9:	8b 75 08             	mov    0x8(%ebp),%esi
+80104cbc:	31 db                	xor    %ebx,%ebx
+80104cbe:	e8 3d ff ff ff       	call   80104c00 <pushcli>
+80104cc3:	8b 06                	mov    (%esi),%eax
+80104cc5:	85 c0                	test   %eax,%eax
+80104cc7:	75 0f                	jne    80104cd8 <holding+0x28>
+80104cc9:	e8 82 ff ff ff       	call   80104c50 <popcli>
+80104cce:	89 d8                	mov    %ebx,%eax
+80104cd0:	5b                   	pop    %ebx
+80104cd1:	5e                   	pop    %esi
+80104cd2:	5d                   	pop    %ebp
+80104cd3:	c3                   	ret    
+80104cd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104cd8:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104cdb:	e8 10 f0 ff ff       	call   80103cf0 <mycpu>
+80104ce0:	39 c3                	cmp    %eax,%ebx
+80104ce2:	0f 94 c3             	sete   %bl
+80104ce5:	e8 66 ff ff ff       	call   80104c50 <popcli>
+80104cea:	0f b6 db             	movzbl %bl,%ebx
+80104ced:	89 d8                	mov    %ebx,%eax
+80104cef:	5b                   	pop    %ebx
+80104cf0:	5e                   	pop    %esi
+80104cf1:	5d                   	pop    %ebp
+80104cf2:	c3                   	ret    
+80104cf3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104d00 <acquire>:
+80104d00:	f3 0f 1e fb          	endbr32 
+80104d04:	55                   	push   %ebp
+80104d05:	89 e5                	mov    %esp,%ebp
+80104d07:	56                   	push   %esi
+80104d08:	53                   	push   %ebx
+80104d09:	e8 f2 fe ff ff       	call   80104c00 <pushcli>
+80104d0e:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104d11:	83 ec 0c             	sub    $0xc,%esp
+80104d14:	53                   	push   %ebx
+80104d15:	e8 96 ff ff ff       	call   80104cb0 <holding>
+80104d1a:	83 c4 10             	add    $0x10,%esp
+80104d1d:	85 c0                	test   %eax,%eax
+80104d1f:	0f 85 7f 00 00 00    	jne    80104da4 <acquire+0xa4>
+80104d25:	89 c6                	mov    %eax,%esi
+80104d27:	ba 01 00 00 00       	mov    $0x1,%edx
+80104d2c:	eb 05                	jmp    80104d33 <acquire+0x33>
+80104d2e:	66 90                	xchg   %ax,%ax
+80104d30:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104d33:	89 d0                	mov    %edx,%eax
+80104d35:	f0 87 03             	lock xchg %eax,(%ebx)
+80104d38:	85 c0                	test   %eax,%eax
+80104d3a:	75 f4                	jne    80104d30 <acquire+0x30>
+80104d3c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104d41:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104d44:	e8 a7 ef ff ff       	call   80103cf0 <mycpu>
+80104d49:	89 43 08             	mov    %eax,0x8(%ebx)
+80104d4c:	89 e8                	mov    %ebp,%eax
+80104d4e:	66 90                	xchg   %ax,%ax
+80104d50:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+80104d56:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+80104d5c:	77 22                	ja     80104d80 <acquire+0x80>
+80104d5e:	8b 50 04             	mov    0x4(%eax),%edx
+80104d61:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+80104d65:	83 c6 01             	add    $0x1,%esi
+80104d68:	8b 00                	mov    (%eax),%eax
+80104d6a:	83 fe 0a             	cmp    $0xa,%esi
+80104d6d:	75 e1                	jne    80104d50 <acquire+0x50>
+80104d6f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104d72:	5b                   	pop    %ebx
+80104d73:	5e                   	pop    %esi
+80104d74:	5d                   	pop    %ebp
+80104d75:	c3                   	ret    
+80104d76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d7d:	8d 76 00             	lea    0x0(%esi),%esi
+80104d80:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+80104d84:	83 c3 34             	add    $0x34,%ebx
+80104d87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d8e:	66 90                	xchg   %ax,%ax
+80104d90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104d96:	83 c0 04             	add    $0x4,%eax
+80104d99:	39 d8                	cmp    %ebx,%eax
+80104d9b:	75 f3                	jne    80104d90 <acquire+0x90>
+80104d9d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104da0:	5b                   	pop    %ebx
+80104da1:	5e                   	pop    %esi
+80104da2:	5d                   	pop    %ebp
+80104da3:	c3                   	ret    
+80104da4:	83 ec 0c             	sub    $0xc,%esp
+80104da7:	68 15 80 10 80       	push   $0x80108015
+80104dac:	e8 df b5 ff ff       	call   80100390 <panic>
+80104db1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104db8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104dbf:	90                   	nop
+
+80104dc0 <release>:
+80104dc0:	f3 0f 1e fb          	endbr32 
+80104dc4:	55                   	push   %ebp
+80104dc5:	89 e5                	mov    %esp,%ebp
+80104dc7:	53                   	push   %ebx
+80104dc8:	83 ec 10             	sub    $0x10,%esp
+80104dcb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104dce:	53                   	push   %ebx
+80104dcf:	e8 dc fe ff ff       	call   80104cb0 <holding>
+80104dd4:	83 c4 10             	add    $0x10,%esp
+80104dd7:	85 c0                	test   %eax,%eax
+80104dd9:	74 22                	je     80104dfd <release+0x3d>
+80104ddb:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104de2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104de9:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104dee:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104df4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104df7:	c9                   	leave  
+80104df8:	e9 53 fe ff ff       	jmp    80104c50 <popcli>
+80104dfd:	83 ec 0c             	sub    $0xc,%esp
+80104e00:	68 1d 80 10 80       	push   $0x8010801d
+80104e05:	e8 86 b5 ff ff       	call   80100390 <panic>
+80104e0a:	66 90                	xchg   %ax,%ax
+80104e0c:	66 90                	xchg   %ax,%ax
+80104e0e:	66 90                	xchg   %ax,%ax
+
+80104e10 <memset>:
+80104e10:	f3 0f 1e fb          	endbr32 
+80104e14:	55                   	push   %ebp
+80104e15:	89 e5                	mov    %esp,%ebp
+80104e17:	57                   	push   %edi
+80104e18:	8b 55 08             	mov    0x8(%ebp),%edx
+80104e1b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104e1e:	53                   	push   %ebx
+80104e1f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104e22:	89 d7                	mov    %edx,%edi
+80104e24:	09 cf                	or     %ecx,%edi
+80104e26:	83 e7 03             	and    $0x3,%edi
+80104e29:	75 25                	jne    80104e50 <memset+0x40>
+80104e2b:	0f b6 f8             	movzbl %al,%edi
+80104e2e:	c1 e0 18             	shl    $0x18,%eax
+80104e31:	89 fb                	mov    %edi,%ebx
+80104e33:	c1 e9 02             	shr    $0x2,%ecx
+80104e36:	c1 e3 10             	shl    $0x10,%ebx
+80104e39:	09 d8                	or     %ebx,%eax
+80104e3b:	09 f8                	or     %edi,%eax
+80104e3d:	c1 e7 08             	shl    $0x8,%edi
+80104e40:	09 f8                	or     %edi,%eax
+80104e42:	89 d7                	mov    %edx,%edi
+80104e44:	fc                   	cld    
+80104e45:	f3 ab                	rep stos %eax,%es:(%edi)
+80104e47:	5b                   	pop    %ebx
+80104e48:	89 d0                	mov    %edx,%eax
+80104e4a:	5f                   	pop    %edi
+80104e4b:	5d                   	pop    %ebp
+80104e4c:	c3                   	ret    
+80104e4d:	8d 76 00             	lea    0x0(%esi),%esi
+80104e50:	89 d7                	mov    %edx,%edi
+80104e52:	fc                   	cld    
+80104e53:	f3 aa                	rep stos %al,%es:(%edi)
+80104e55:	5b                   	pop    %ebx
+80104e56:	89 d0                	mov    %edx,%eax
+80104e58:	5f                   	pop    %edi
+80104e59:	5d                   	pop    %ebp
+80104e5a:	c3                   	ret    
+80104e5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104e5f:	90                   	nop
+
+80104e60 <memcmp>:
+80104e60:	f3 0f 1e fb          	endbr32 
+80104e64:	55                   	push   %ebp
+80104e65:	89 e5                	mov    %esp,%ebp
+80104e67:	56                   	push   %esi
+80104e68:	8b 75 10             	mov    0x10(%ebp),%esi
+80104e6b:	8b 55 08             	mov    0x8(%ebp),%edx
+80104e6e:	53                   	push   %ebx
+80104e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104e72:	85 f6                	test   %esi,%esi
+80104e74:	74 2a                	je     80104ea0 <memcmp+0x40>
+80104e76:	01 c6                	add    %eax,%esi
+80104e78:	eb 10                	jmp    80104e8a <memcmp+0x2a>
+80104e7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104e80:	83 c0 01             	add    $0x1,%eax
+80104e83:	83 c2 01             	add    $0x1,%edx
+80104e86:	39 f0                	cmp    %esi,%eax
+80104e88:	74 16                	je     80104ea0 <memcmp+0x40>
+80104e8a:	0f b6 0a             	movzbl (%edx),%ecx
+80104e8d:	0f b6 18             	movzbl (%eax),%ebx
+80104e90:	38 d9                	cmp    %bl,%cl
+80104e92:	74 ec                	je     80104e80 <memcmp+0x20>
+80104e94:	0f b6 c1             	movzbl %cl,%eax
+80104e97:	29 d8                	sub    %ebx,%eax
+80104e99:	5b                   	pop    %ebx
+80104e9a:	5e                   	pop    %esi
+80104e9b:	5d                   	pop    %ebp
+80104e9c:	c3                   	ret    
+80104e9d:	8d 76 00             	lea    0x0(%esi),%esi
+80104ea0:	5b                   	pop    %ebx
+80104ea1:	31 c0                	xor    %eax,%eax
+80104ea3:	5e                   	pop    %esi
+80104ea4:	5d                   	pop    %ebp
+80104ea5:	c3                   	ret    
+80104ea6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ead:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104eb0 <memmove>:
+80104eb0:	f3 0f 1e fb          	endbr32 
+80104eb4:	55                   	push   %ebp
+80104eb5:	89 e5                	mov    %esp,%ebp
+80104eb7:	57                   	push   %edi
+80104eb8:	8b 55 08             	mov    0x8(%ebp),%edx
+80104ebb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104ebe:	56                   	push   %esi
+80104ebf:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104ec2:	39 d6                	cmp    %edx,%esi
+80104ec4:	73 2a                	jae    80104ef0 <memmove+0x40>
+80104ec6:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104ec9:	39 fa                	cmp    %edi,%edx
+80104ecb:	73 23                	jae    80104ef0 <memmove+0x40>
+80104ecd:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80104ed0:	85 c9                	test   %ecx,%ecx
+80104ed2:	74 13                	je     80104ee7 <memmove+0x37>
+80104ed4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104ed8:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80104edc:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80104edf:	83 e8 01             	sub    $0x1,%eax
+80104ee2:	83 f8 ff             	cmp    $0xffffffff,%eax
+80104ee5:	75 f1                	jne    80104ed8 <memmove+0x28>
+80104ee7:	5e                   	pop    %esi
+80104ee8:	89 d0                	mov    %edx,%eax
+80104eea:	5f                   	pop    %edi
+80104eeb:	5d                   	pop    %ebp
+80104eec:	c3                   	ret    
+80104eed:	8d 76 00             	lea    0x0(%esi),%esi
+80104ef0:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80104ef3:	89 d7                	mov    %edx,%edi
+80104ef5:	85 c9                	test   %ecx,%ecx
+80104ef7:	74 ee                	je     80104ee7 <memmove+0x37>
+80104ef9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f00:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+80104f01:	39 f0                	cmp    %esi,%eax
+80104f03:	75 fb                	jne    80104f00 <memmove+0x50>
+80104f05:	5e                   	pop    %esi
+80104f06:	89 d0                	mov    %edx,%eax
+80104f08:	5f                   	pop    %edi
+80104f09:	5d                   	pop    %ebp
+80104f0a:	c3                   	ret    
+80104f0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104f0f:	90                   	nop
+
+80104f10 <memcpy>:
+80104f10:	f3 0f 1e fb          	endbr32 
+80104f14:	eb 9a                	jmp    80104eb0 <memmove>
+80104f16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f1d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104f20 <strncmp>:
+80104f20:	f3 0f 1e fb          	endbr32 
+80104f24:	55                   	push   %ebp
+80104f25:	89 e5                	mov    %esp,%ebp
+80104f27:	56                   	push   %esi
+80104f28:	8b 75 10             	mov    0x10(%ebp),%esi
+80104f2b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104f2e:	53                   	push   %ebx
+80104f2f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104f32:	85 f6                	test   %esi,%esi
+80104f34:	74 32                	je     80104f68 <strncmp+0x48>
+80104f36:	01 c6                	add    %eax,%esi
+80104f38:	eb 14                	jmp    80104f4e <strncmp+0x2e>
+80104f3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104f40:	38 da                	cmp    %bl,%dl
+80104f42:	75 14                	jne    80104f58 <strncmp+0x38>
+80104f44:	83 c0 01             	add    $0x1,%eax
+80104f47:	83 c1 01             	add    $0x1,%ecx
+80104f4a:	39 f0                	cmp    %esi,%eax
+80104f4c:	74 1a                	je     80104f68 <strncmp+0x48>
+80104f4e:	0f b6 11             	movzbl (%ecx),%edx
+80104f51:	0f b6 18             	movzbl (%eax),%ebx
+80104f54:	84 d2                	test   %dl,%dl
+80104f56:	75 e8                	jne    80104f40 <strncmp+0x20>
+80104f58:	0f b6 c2             	movzbl %dl,%eax
+80104f5b:	29 d8                	sub    %ebx,%eax
+80104f5d:	5b                   	pop    %ebx
+80104f5e:	5e                   	pop    %esi
+80104f5f:	5d                   	pop    %ebp
+80104f60:	c3                   	ret    
+80104f61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f68:	5b                   	pop    %ebx
+80104f69:	31 c0                	xor    %eax,%eax
+80104f6b:	5e                   	pop    %esi
+80104f6c:	5d                   	pop    %ebp
+80104f6d:	c3                   	ret    
+80104f6e:	66 90                	xchg   %ax,%ax
+
+80104f70 <strncpy>:
+80104f70:	f3 0f 1e fb          	endbr32 
+80104f74:	55                   	push   %ebp
+80104f75:	89 e5                	mov    %esp,%ebp
+80104f77:	57                   	push   %edi
+80104f78:	56                   	push   %esi
+80104f79:	8b 75 08             	mov    0x8(%ebp),%esi
+80104f7c:	53                   	push   %ebx
+80104f7d:	8b 45 10             	mov    0x10(%ebp),%eax
+80104f80:	89 f2                	mov    %esi,%edx
+80104f82:	eb 1b                	jmp    80104f9f <strncpy+0x2f>
+80104f84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104f88:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+80104f8c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80104f8f:	83 c2 01             	add    $0x1,%edx
+80104f92:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+80104f96:	89 f9                	mov    %edi,%ecx
+80104f98:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104f9b:	84 c9                	test   %cl,%cl
+80104f9d:	74 09                	je     80104fa8 <strncpy+0x38>
+80104f9f:	89 c3                	mov    %eax,%ebx
+80104fa1:	83 e8 01             	sub    $0x1,%eax
+80104fa4:	85 db                	test   %ebx,%ebx
+80104fa6:	7f e0                	jg     80104f88 <strncpy+0x18>
+80104fa8:	89 d1                	mov    %edx,%ecx
+80104faa:	85 c0                	test   %eax,%eax
+80104fac:	7e 15                	jle    80104fc3 <strncpy+0x53>
+80104fae:	66 90                	xchg   %ax,%ax
+80104fb0:	83 c1 01             	add    $0x1,%ecx
+80104fb3:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+80104fb7:	89 c8                	mov    %ecx,%eax
+80104fb9:	f7 d0                	not    %eax
+80104fbb:	01 d0                	add    %edx,%eax
+80104fbd:	01 d8                	add    %ebx,%eax
+80104fbf:	85 c0                	test   %eax,%eax
+80104fc1:	7f ed                	jg     80104fb0 <strncpy+0x40>
+80104fc3:	5b                   	pop    %ebx
+80104fc4:	89 f0                	mov    %esi,%eax
+80104fc6:	5e                   	pop    %esi
+80104fc7:	5f                   	pop    %edi
+80104fc8:	5d                   	pop    %ebp
+80104fc9:	c3                   	ret    
+80104fca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104fd0 <safestrcpy>:
+80104fd0:	f3 0f 1e fb          	endbr32 
+80104fd4:	55                   	push   %ebp
+80104fd5:	89 e5                	mov    %esp,%ebp
+80104fd7:	56                   	push   %esi
+80104fd8:	8b 55 10             	mov    0x10(%ebp),%edx
+80104fdb:	8b 75 08             	mov    0x8(%ebp),%esi
+80104fde:	53                   	push   %ebx
+80104fdf:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104fe2:	85 d2                	test   %edx,%edx
+80104fe4:	7e 21                	jle    80105007 <safestrcpy+0x37>
+80104fe6:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80104fea:	89 f2                	mov    %esi,%edx
+80104fec:	eb 12                	jmp    80105000 <safestrcpy+0x30>
+80104fee:	66 90                	xchg   %ax,%ax
+80104ff0:	0f b6 08             	movzbl (%eax),%ecx
+80104ff3:	83 c0 01             	add    $0x1,%eax
+80104ff6:	83 c2 01             	add    $0x1,%edx
+80104ff9:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104ffc:	84 c9                	test   %cl,%cl
+80104ffe:	74 04                	je     80105004 <safestrcpy+0x34>
+80105000:	39 d8                	cmp    %ebx,%eax
+80105002:	75 ec                	jne    80104ff0 <safestrcpy+0x20>
+80105004:	c6 02 00             	movb   $0x0,(%edx)
+80105007:	89 f0                	mov    %esi,%eax
+80105009:	5b                   	pop    %ebx
+8010500a:	5e                   	pop    %esi
+8010500b:	5d                   	pop    %ebp
+8010500c:	c3                   	ret    
+8010500d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105010 <strlen>:
+80105010:	f3 0f 1e fb          	endbr32 
+80105014:	55                   	push   %ebp
+80105015:	31 c0                	xor    %eax,%eax
+80105017:	89 e5                	mov    %esp,%ebp
+80105019:	8b 55 08             	mov    0x8(%ebp),%edx
+8010501c:	80 3a 00             	cmpb   $0x0,(%edx)
+8010501f:	74 10                	je     80105031 <strlen+0x21>
+80105021:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105028:	83 c0 01             	add    $0x1,%eax
+8010502b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+8010502f:	75 f7                	jne    80105028 <strlen+0x18>
+80105031:	5d                   	pop    %ebp
+80105032:	c3                   	ret    
+
+80105033 <swtch>:
+80105033:	8b 44 24 04          	mov    0x4(%esp),%eax
+80105037:	8b 54 24 08          	mov    0x8(%esp),%edx
+8010503b:	55                   	push   %ebp
+8010503c:	53                   	push   %ebx
+8010503d:	56                   	push   %esi
+8010503e:	57                   	push   %edi
+8010503f:	89 20                	mov    %esp,(%eax)
+80105041:	89 d4                	mov    %edx,%esp
+80105043:	5f                   	pop    %edi
+80105044:	5e                   	pop    %esi
+80105045:	5b                   	pop    %ebx
+80105046:	5d                   	pop    %ebp
+80105047:	c3                   	ret    
+80105048:	66 90                	xchg   %ax,%ax
+8010504a:	66 90                	xchg   %ax,%ax
+8010504c:	66 90                	xchg   %ax,%ax
+8010504e:	66 90                	xchg   %ax,%ax
+
+80105050 <fetchint>:
+80105050:	f3 0f 1e fb          	endbr32 
+80105054:	55                   	push   %ebp
+80105055:	89 e5                	mov    %esp,%ebp
+80105057:	53                   	push   %ebx
+80105058:	83 ec 04             	sub    $0x4,%esp
+8010505b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010505e:	e8 0d ed ff ff       	call   80103d70 <myproc>
+80105063:	8b 00                	mov    (%eax),%eax
+80105065:	39 d8                	cmp    %ebx,%eax
+80105067:	76 17                	jbe    80105080 <fetchint+0x30>
+80105069:	8d 53 04             	lea    0x4(%ebx),%edx
+8010506c:	39 d0                	cmp    %edx,%eax
+8010506e:	72 10                	jb     80105080 <fetchint+0x30>
+80105070:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105073:	8b 13                	mov    (%ebx),%edx
+80105075:	89 10                	mov    %edx,(%eax)
+80105077:	31 c0                	xor    %eax,%eax
+80105079:	83 c4 04             	add    $0x4,%esp
+8010507c:	5b                   	pop    %ebx
+8010507d:	5d                   	pop    %ebp
+8010507e:	c3                   	ret    
+8010507f:	90                   	nop
+80105080:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105085:	eb f2                	jmp    80105079 <fetchint+0x29>
+80105087:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010508e:	66 90                	xchg   %ax,%ax
+
+80105090 <fetchstr>:
+80105090:	f3 0f 1e fb          	endbr32 
+80105094:	55                   	push   %ebp
+80105095:	89 e5                	mov    %esp,%ebp
+80105097:	53                   	push   %ebx
+80105098:	83 ec 04             	sub    $0x4,%esp
+8010509b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010509e:	e8 cd ec ff ff       	call   80103d70 <myproc>
+801050a3:	39 18                	cmp    %ebx,(%eax)
+801050a5:	76 31                	jbe    801050d8 <fetchstr+0x48>
+801050a7:	8b 55 0c             	mov    0xc(%ebp),%edx
+801050aa:	89 1a                	mov    %ebx,(%edx)
+801050ac:	8b 10                	mov    (%eax),%edx
+801050ae:	39 d3                	cmp    %edx,%ebx
+801050b0:	73 26                	jae    801050d8 <fetchstr+0x48>
+801050b2:	89 d8                	mov    %ebx,%eax
+801050b4:	eb 11                	jmp    801050c7 <fetchstr+0x37>
+801050b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050bd:	8d 76 00             	lea    0x0(%esi),%esi
+801050c0:	83 c0 01             	add    $0x1,%eax
+801050c3:	39 c2                	cmp    %eax,%edx
+801050c5:	76 11                	jbe    801050d8 <fetchstr+0x48>
+801050c7:	80 38 00             	cmpb   $0x0,(%eax)
+801050ca:	75 f4                	jne    801050c0 <fetchstr+0x30>
+801050cc:	83 c4 04             	add    $0x4,%esp
+801050cf:	29 d8                	sub    %ebx,%eax
+801050d1:	5b                   	pop    %ebx
+801050d2:	5d                   	pop    %ebp
+801050d3:	c3                   	ret    
+801050d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801050d8:	83 c4 04             	add    $0x4,%esp
+801050db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801050e0:	5b                   	pop    %ebx
+801050e1:	5d                   	pop    %ebp
+801050e2:	c3                   	ret    
+801050e3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801050f0 <argint>:
+801050f0:	f3 0f 1e fb          	endbr32 
+801050f4:	55                   	push   %ebp
+801050f5:	89 e5                	mov    %esp,%ebp
+801050f7:	56                   	push   %esi
+801050f8:	53                   	push   %ebx
+801050f9:	e8 72 ec ff ff       	call   80103d70 <myproc>
+801050fe:	8b 55 08             	mov    0x8(%ebp),%edx
+80105101:	8b 40 18             	mov    0x18(%eax),%eax
+80105104:	8b 40 44             	mov    0x44(%eax),%eax
+80105107:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+8010510a:	e8 61 ec ff ff       	call   80103d70 <myproc>
+8010510f:	8d 73 04             	lea    0x4(%ebx),%esi
+80105112:	8b 00                	mov    (%eax),%eax
+80105114:	39 c6                	cmp    %eax,%esi
+80105116:	73 18                	jae    80105130 <argint+0x40>
+80105118:	8d 53 08             	lea    0x8(%ebx),%edx
+8010511b:	39 d0                	cmp    %edx,%eax
+8010511d:	72 11                	jb     80105130 <argint+0x40>
+8010511f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105122:	8b 53 04             	mov    0x4(%ebx),%edx
+80105125:	89 10                	mov    %edx,(%eax)
+80105127:	31 c0                	xor    %eax,%eax
+80105129:	5b                   	pop    %ebx
+8010512a:	5e                   	pop    %esi
+8010512b:	5d                   	pop    %ebp
+8010512c:	c3                   	ret    
+8010512d:	8d 76 00             	lea    0x0(%esi),%esi
+80105130:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105135:	eb f2                	jmp    80105129 <argint+0x39>
+80105137:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010513e:	66 90                	xchg   %ax,%ax
+
+80105140 <argptr>:
+80105140:	f3 0f 1e fb          	endbr32 
+80105144:	55                   	push   %ebp
+80105145:	89 e5                	mov    %esp,%ebp
+80105147:	56                   	push   %esi
+80105148:	53                   	push   %ebx
+80105149:	83 ec 10             	sub    $0x10,%esp
+8010514c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+8010514f:	e8 1c ec ff ff       	call   80103d70 <myproc>
+80105154:	83 ec 08             	sub    $0x8,%esp
+80105157:	89 c6                	mov    %eax,%esi
+80105159:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010515c:	50                   	push   %eax
+8010515d:	ff 75 08             	pushl  0x8(%ebp)
+80105160:	e8 8b ff ff ff       	call   801050f0 <argint>
+80105165:	83 c4 10             	add    $0x10,%esp
+80105168:	85 c0                	test   %eax,%eax
+8010516a:	78 24                	js     80105190 <argptr+0x50>
+8010516c:	85 db                	test   %ebx,%ebx
+8010516e:	78 20                	js     80105190 <argptr+0x50>
+80105170:	8b 16                	mov    (%esi),%edx
+80105172:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105175:	39 c2                	cmp    %eax,%edx
+80105177:	76 17                	jbe    80105190 <argptr+0x50>
+80105179:	01 c3                	add    %eax,%ebx
+8010517b:	39 da                	cmp    %ebx,%edx
+8010517d:	72 11                	jb     80105190 <argptr+0x50>
+8010517f:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105182:	89 02                	mov    %eax,(%edx)
+80105184:	31 c0                	xor    %eax,%eax
+80105186:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105189:	5b                   	pop    %ebx
+8010518a:	5e                   	pop    %esi
+8010518b:	5d                   	pop    %ebp
+8010518c:	c3                   	ret    
+8010518d:	8d 76 00             	lea    0x0(%esi),%esi
+80105190:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105195:	eb ef                	jmp    80105186 <argptr+0x46>
+80105197:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010519e:	66 90                	xchg   %ax,%ax
+
+801051a0 <argstr>:
+801051a0:	f3 0f 1e fb          	endbr32 
+801051a4:	55                   	push   %ebp
+801051a5:	89 e5                	mov    %esp,%ebp
+801051a7:	83 ec 20             	sub    $0x20,%esp
+801051aa:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801051ad:	50                   	push   %eax
+801051ae:	ff 75 08             	pushl  0x8(%ebp)
+801051b1:	e8 3a ff ff ff       	call   801050f0 <argint>
+801051b6:	83 c4 10             	add    $0x10,%esp
+801051b9:	85 c0                	test   %eax,%eax
+801051bb:	78 13                	js     801051d0 <argstr+0x30>
+801051bd:	83 ec 08             	sub    $0x8,%esp
+801051c0:	ff 75 0c             	pushl  0xc(%ebp)
+801051c3:	ff 75 f4             	pushl  -0xc(%ebp)
+801051c6:	e8 c5 fe ff ff       	call   80105090 <fetchstr>
+801051cb:	83 c4 10             	add    $0x10,%esp
+801051ce:	c9                   	leave  
+801051cf:	c3                   	ret    
+801051d0:	c9                   	leave  
+801051d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051d6:	c3                   	ret    
+801051d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051de:	66 90                	xchg   %ax,%ax
+
+801051e0 <syscall>:
+801051e0:	f3 0f 1e fb          	endbr32 
+801051e4:	55                   	push   %ebp
+801051e5:	89 e5                	mov    %esp,%ebp
+801051e7:	53                   	push   %ebx
+801051e8:	83 ec 04             	sub    $0x4,%esp
+801051eb:	e8 80 eb ff ff       	call   80103d70 <myproc>
+801051f0:	89 c3                	mov    %eax,%ebx
+801051f2:	8b 40 18             	mov    0x18(%eax),%eax
+801051f5:	8b 40 1c             	mov    0x1c(%eax),%eax
+801051f8:	8d 50 ff             	lea    -0x1(%eax),%edx
+801051fb:	83 fa 1c             	cmp    $0x1c,%edx
+801051fe:	77 20                	ja     80105220 <syscall+0x40>
+80105200:	8b 14 85 60 80 10 80 	mov    -0x7fef7fa0(,%eax,4),%edx
+80105207:	85 d2                	test   %edx,%edx
+80105209:	74 15                	je     80105220 <syscall+0x40>
+8010520b:	ff d2                	call   *%edx
+8010520d:	89 c2                	mov    %eax,%edx
+8010520f:	8b 43 18             	mov    0x18(%ebx),%eax
+80105212:	89 50 1c             	mov    %edx,0x1c(%eax)
+80105215:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105218:	c9                   	leave  
+80105219:	c3                   	ret    
+8010521a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105220:	50                   	push   %eax
+80105221:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80105224:	50                   	push   %eax
+80105225:	ff 73 10             	pushl  0x10(%ebx)
+80105228:	68 25 80 10 80       	push   $0x80108025
+8010522d:	e8 7e b4 ff ff       	call   801006b0 <cprintf>
+80105232:	8b 43 18             	mov    0x18(%ebx),%eax
+80105235:	83 c4 10             	add    $0x10,%esp
+80105238:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+8010523f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105242:	c9                   	leave  
+80105243:	c3                   	ret    
+80105244:	66 90                	xchg   %ax,%ax
+80105246:	66 90                	xchg   %ax,%ax
+80105248:	66 90                	xchg   %ax,%ax
+8010524a:	66 90                	xchg   %ax,%ax
+8010524c:	66 90                	xchg   %ax,%ax
+8010524e:	66 90                	xchg   %ax,%ax
+
+80105250 <create>:
+80105250:	55                   	push   %ebp
+80105251:	89 e5                	mov    %esp,%ebp
+80105253:	57                   	push   %edi
+80105254:	56                   	push   %esi
+80105255:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105258:	53                   	push   %ebx
+80105259:	83 ec 34             	sub    $0x34,%esp
+8010525c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+8010525f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80105262:	57                   	push   %edi
+80105263:	50                   	push   %eax
+80105264:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80105267:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+8010526a:	e8 e1 cd ff ff       	call   80102050 <nameiparent>
+8010526f:	83 c4 10             	add    $0x10,%esp
+80105272:	85 c0                	test   %eax,%eax
+80105274:	0f 84 46 01 00 00    	je     801053c0 <create+0x170>
+8010527a:	83 ec 0c             	sub    $0xc,%esp
+8010527d:	89 c3                	mov    %eax,%ebx
+8010527f:	50                   	push   %eax
+80105280:	e8 db c4 ff ff       	call   80101760 <ilock>
+80105285:	83 c4 0c             	add    $0xc,%esp
+80105288:	6a 00                	push   $0x0
+8010528a:	57                   	push   %edi
+8010528b:	53                   	push   %ebx
+8010528c:	e8 1f ca ff ff       	call   80101cb0 <dirlookup>
+80105291:	83 c4 10             	add    $0x10,%esp
+80105294:	89 c6                	mov    %eax,%esi
+80105296:	85 c0                	test   %eax,%eax
+80105298:	74 56                	je     801052f0 <create+0xa0>
+8010529a:	83 ec 0c             	sub    $0xc,%esp
+8010529d:	53                   	push   %ebx
+8010529e:	e8 5d c7 ff ff       	call   80101a00 <iunlockput>
+801052a3:	89 34 24             	mov    %esi,(%esp)
+801052a6:	e8 b5 c4 ff ff       	call   80101760 <ilock>
+801052ab:	83 c4 10             	add    $0x10,%esp
+801052ae:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+801052b3:	75 1b                	jne    801052d0 <create+0x80>
+801052b5:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+801052ba:	75 14                	jne    801052d0 <create+0x80>
+801052bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801052bf:	89 f0                	mov    %esi,%eax
+801052c1:	5b                   	pop    %ebx
+801052c2:	5e                   	pop    %esi
+801052c3:	5f                   	pop    %edi
+801052c4:	5d                   	pop    %ebp
+801052c5:	c3                   	ret    
+801052c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052cd:	8d 76 00             	lea    0x0(%esi),%esi
+801052d0:	83 ec 0c             	sub    $0xc,%esp
+801052d3:	56                   	push   %esi
+801052d4:	31 f6                	xor    %esi,%esi
+801052d6:	e8 25 c7 ff ff       	call   80101a00 <iunlockput>
+801052db:	83 c4 10             	add    $0x10,%esp
+801052de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801052e1:	89 f0                	mov    %esi,%eax
+801052e3:	5b                   	pop    %ebx
+801052e4:	5e                   	pop    %esi
+801052e5:	5f                   	pop    %edi
+801052e6:	5d                   	pop    %ebp
+801052e7:	c3                   	ret    
+801052e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052ef:	90                   	nop
+801052f0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+801052f4:	83 ec 08             	sub    $0x8,%esp
+801052f7:	50                   	push   %eax
+801052f8:	ff 33                	pushl  (%ebx)
+801052fa:	e8 e1 c2 ff ff       	call   801015e0 <ialloc>
+801052ff:	83 c4 10             	add    $0x10,%esp
+80105302:	89 c6                	mov    %eax,%esi
+80105304:	85 c0                	test   %eax,%eax
+80105306:	0f 84 cd 00 00 00    	je     801053d9 <create+0x189>
+8010530c:	83 ec 0c             	sub    $0xc,%esp
+8010530f:	50                   	push   %eax
+80105310:	e8 4b c4 ff ff       	call   80101760 <ilock>
+80105315:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80105319:	66 89 46 52          	mov    %ax,0x52(%esi)
+8010531d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80105321:	66 89 46 54          	mov    %ax,0x54(%esi)
+80105325:	b8 01 00 00 00       	mov    $0x1,%eax
+8010532a:	66 89 46 56          	mov    %ax,0x56(%esi)
+8010532e:	89 34 24             	mov    %esi,(%esp)
+80105331:	e8 6a c3 ff ff       	call   801016a0 <iupdate>
+80105336:	83 c4 10             	add    $0x10,%esp
+80105339:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+8010533e:	74 30                	je     80105370 <create+0x120>
+80105340:	83 ec 04             	sub    $0x4,%esp
+80105343:	ff 76 04             	pushl  0x4(%esi)
+80105346:	57                   	push   %edi
+80105347:	53                   	push   %ebx
+80105348:	e8 23 cc ff ff       	call   80101f70 <dirlink>
+8010534d:	83 c4 10             	add    $0x10,%esp
+80105350:	85 c0                	test   %eax,%eax
+80105352:	78 78                	js     801053cc <create+0x17c>
+80105354:	83 ec 0c             	sub    $0xc,%esp
+80105357:	53                   	push   %ebx
+80105358:	e8 a3 c6 ff ff       	call   80101a00 <iunlockput>
+8010535d:	83 c4 10             	add    $0x10,%esp
+80105360:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105363:	89 f0                	mov    %esi,%eax
+80105365:	5b                   	pop    %ebx
+80105366:	5e                   	pop    %esi
+80105367:	5f                   	pop    %edi
+80105368:	5d                   	pop    %ebp
+80105369:	c3                   	ret    
+8010536a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105370:	83 ec 0c             	sub    $0xc,%esp
+80105373:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105378:	53                   	push   %ebx
+80105379:	e8 22 c3 ff ff       	call   801016a0 <iupdate>
+8010537e:	83 c4 0c             	add    $0xc,%esp
+80105381:	ff 76 04             	pushl  0x4(%esi)
+80105384:	68 f4 80 10 80       	push   $0x801080f4
+80105389:	56                   	push   %esi
+8010538a:	e8 e1 cb ff ff       	call   80101f70 <dirlink>
+8010538f:	83 c4 10             	add    $0x10,%esp
+80105392:	85 c0                	test   %eax,%eax
+80105394:	78 18                	js     801053ae <create+0x15e>
+80105396:	83 ec 04             	sub    $0x4,%esp
+80105399:	ff 73 04             	pushl  0x4(%ebx)
+8010539c:	68 f3 80 10 80       	push   $0x801080f3
+801053a1:	56                   	push   %esi
+801053a2:	e8 c9 cb ff ff       	call   80101f70 <dirlink>
+801053a7:	83 c4 10             	add    $0x10,%esp
+801053aa:	85 c0                	test   %eax,%eax
+801053ac:	79 92                	jns    80105340 <create+0xf0>
+801053ae:	83 ec 0c             	sub    $0xc,%esp
+801053b1:	68 e7 80 10 80       	push   $0x801080e7
+801053b6:	e8 d5 af ff ff       	call   80100390 <panic>
+801053bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801053bf:	90                   	nop
+801053c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801053c3:	31 f6                	xor    %esi,%esi
+801053c5:	5b                   	pop    %ebx
+801053c6:	89 f0                	mov    %esi,%eax
+801053c8:	5e                   	pop    %esi
+801053c9:	5f                   	pop    %edi
+801053ca:	5d                   	pop    %ebp
+801053cb:	c3                   	ret    
+801053cc:	83 ec 0c             	sub    $0xc,%esp
+801053cf:	68 f6 80 10 80       	push   $0x801080f6
+801053d4:	e8 b7 af ff ff       	call   80100390 <panic>
+801053d9:	83 ec 0c             	sub    $0xc,%esp
+801053dc:	68 d8 80 10 80       	push   $0x801080d8
+801053e1:	e8 aa af ff ff       	call   80100390 <panic>
+801053e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801053ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801053f0 <argfd.constprop.0>:
+801053f0:	55                   	push   %ebp
+801053f1:	89 e5                	mov    %esp,%ebp
+801053f3:	56                   	push   %esi
+801053f4:	89 d6                	mov    %edx,%esi
+801053f6:	53                   	push   %ebx
+801053f7:	89 c3                	mov    %eax,%ebx
+801053f9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801053fc:	83 ec 18             	sub    $0x18,%esp
+801053ff:	50                   	push   %eax
+80105400:	6a 00                	push   $0x0
+80105402:	e8 e9 fc ff ff       	call   801050f0 <argint>
+80105407:	83 c4 10             	add    $0x10,%esp
+8010540a:	85 c0                	test   %eax,%eax
+8010540c:	78 2a                	js     80105438 <argfd.constprop.0+0x48>
+8010540e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80105412:	77 24                	ja     80105438 <argfd.constprop.0+0x48>
+80105414:	e8 57 e9 ff ff       	call   80103d70 <myproc>
+80105419:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010541c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80105420:	85 c0                	test   %eax,%eax
+80105422:	74 14                	je     80105438 <argfd.constprop.0+0x48>
+80105424:	85 db                	test   %ebx,%ebx
+80105426:	74 02                	je     8010542a <argfd.constprop.0+0x3a>
+80105428:	89 13                	mov    %edx,(%ebx)
+8010542a:	89 06                	mov    %eax,(%esi)
+8010542c:	31 c0                	xor    %eax,%eax
+8010542e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105431:	5b                   	pop    %ebx
+80105432:	5e                   	pop    %esi
+80105433:	5d                   	pop    %ebp
+80105434:	c3                   	ret    
+80105435:	8d 76 00             	lea    0x0(%esi),%esi
+80105438:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010543d:	eb ef                	jmp    8010542e <argfd.constprop.0+0x3e>
+8010543f:	90                   	nop
+
+80105440 <sys_dup>:
+80105440:	f3 0f 1e fb          	endbr32 
+80105444:	55                   	push   %ebp
+80105445:	31 c0                	xor    %eax,%eax
+80105447:	89 e5                	mov    %esp,%ebp
+80105449:	56                   	push   %esi
+8010544a:	53                   	push   %ebx
+8010544b:	8d 55 f4             	lea    -0xc(%ebp),%edx
+8010544e:	83 ec 10             	sub    $0x10,%esp
+80105451:	e8 9a ff ff ff       	call   801053f0 <argfd.constprop.0>
+80105456:	85 c0                	test   %eax,%eax
+80105458:	78 1e                	js     80105478 <sys_dup+0x38>
+8010545a:	8b 75 f4             	mov    -0xc(%ebp),%esi
+8010545d:	31 db                	xor    %ebx,%ebx
+8010545f:	e8 0c e9 ff ff       	call   80103d70 <myproc>
+80105464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105468:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+8010546c:	85 d2                	test   %edx,%edx
+8010546e:	74 20                	je     80105490 <sys_dup+0x50>
+80105470:	83 c3 01             	add    $0x1,%ebx
+80105473:	83 fb 10             	cmp    $0x10,%ebx
+80105476:	75 f0                	jne    80105468 <sys_dup+0x28>
+80105478:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010547b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105480:	89 d8                	mov    %ebx,%eax
+80105482:	5b                   	pop    %ebx
+80105483:	5e                   	pop    %esi
+80105484:	5d                   	pop    %ebp
+80105485:	c3                   	ret    
+80105486:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010548d:	8d 76 00             	lea    0x0(%esi),%esi
+80105490:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80105494:	83 ec 0c             	sub    $0xc,%esp
+80105497:	ff 75 f4             	pushl  -0xc(%ebp)
+8010549a:	e8 d1 b9 ff ff       	call   80100e70 <filedup>
+8010549f:	83 c4 10             	add    $0x10,%esp
+801054a2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801054a5:	89 d8                	mov    %ebx,%eax
+801054a7:	5b                   	pop    %ebx
+801054a8:	5e                   	pop    %esi
+801054a9:	5d                   	pop    %ebp
+801054aa:	c3                   	ret    
+801054ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801054af:	90                   	nop
+
+801054b0 <sys_read>:
+801054b0:	f3 0f 1e fb          	endbr32 
+801054b4:	55                   	push   %ebp
+801054b5:	31 c0                	xor    %eax,%eax
+801054b7:	89 e5                	mov    %esp,%ebp
+801054b9:	83 ec 18             	sub    $0x18,%esp
+801054bc:	8d 55 ec             	lea    -0x14(%ebp),%edx
+801054bf:	e8 2c ff ff ff       	call   801053f0 <argfd.constprop.0>
+801054c4:	85 c0                	test   %eax,%eax
+801054c6:	78 48                	js     80105510 <sys_read+0x60>
+801054c8:	83 ec 08             	sub    $0x8,%esp
+801054cb:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801054ce:	50                   	push   %eax
+801054cf:	6a 02                	push   $0x2
+801054d1:	e8 1a fc ff ff       	call   801050f0 <argint>
+801054d6:	83 c4 10             	add    $0x10,%esp
+801054d9:	85 c0                	test   %eax,%eax
+801054db:	78 33                	js     80105510 <sys_read+0x60>
+801054dd:	83 ec 04             	sub    $0x4,%esp
+801054e0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801054e3:	ff 75 f0             	pushl  -0x10(%ebp)
+801054e6:	50                   	push   %eax
+801054e7:	6a 01                	push   $0x1
+801054e9:	e8 52 fc ff ff       	call   80105140 <argptr>
+801054ee:	83 c4 10             	add    $0x10,%esp
+801054f1:	85 c0                	test   %eax,%eax
+801054f3:	78 1b                	js     80105510 <sys_read+0x60>
+801054f5:	83 ec 04             	sub    $0x4,%esp
+801054f8:	ff 75 f0             	pushl  -0x10(%ebp)
+801054fb:	ff 75 f4             	pushl  -0xc(%ebp)
+801054fe:	ff 75 ec             	pushl  -0x14(%ebp)
+80105501:	e8 ea ba ff ff       	call   80100ff0 <fileread>
+80105506:	83 c4 10             	add    $0x10,%esp
+80105509:	c9                   	leave  
+8010550a:	c3                   	ret    
+8010550b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010550f:	90                   	nop
+80105510:	c9                   	leave  
+80105511:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105516:	c3                   	ret    
+80105517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010551e:	66 90                	xchg   %ax,%ax
+
+80105520 <sys_write>:
+80105520:	f3 0f 1e fb          	endbr32 
+80105524:	55                   	push   %ebp
+80105525:	31 c0                	xor    %eax,%eax
+80105527:	89 e5                	mov    %esp,%ebp
+80105529:	83 ec 18             	sub    $0x18,%esp
+8010552c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010552f:	e8 bc fe ff ff       	call   801053f0 <argfd.constprop.0>
+80105534:	85 c0                	test   %eax,%eax
+80105536:	78 48                	js     80105580 <sys_write+0x60>
+80105538:	83 ec 08             	sub    $0x8,%esp
+8010553b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010553e:	50                   	push   %eax
+8010553f:	6a 02                	push   $0x2
+80105541:	e8 aa fb ff ff       	call   801050f0 <argint>
+80105546:	83 c4 10             	add    $0x10,%esp
+80105549:	85 c0                	test   %eax,%eax
+8010554b:	78 33                	js     80105580 <sys_write+0x60>
+8010554d:	83 ec 04             	sub    $0x4,%esp
+80105550:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105553:	ff 75 f0             	pushl  -0x10(%ebp)
+80105556:	50                   	push   %eax
+80105557:	6a 01                	push   $0x1
+80105559:	e8 e2 fb ff ff       	call   80105140 <argptr>
+8010555e:	83 c4 10             	add    $0x10,%esp
+80105561:	85 c0                	test   %eax,%eax
+80105563:	78 1b                	js     80105580 <sys_write+0x60>
+80105565:	83 ec 04             	sub    $0x4,%esp
+80105568:	ff 75 f0             	pushl  -0x10(%ebp)
+8010556b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010556e:	ff 75 ec             	pushl  -0x14(%ebp)
+80105571:	e8 1a bb ff ff       	call   80101090 <filewrite>
+80105576:	83 c4 10             	add    $0x10,%esp
+80105579:	c9                   	leave  
+8010557a:	c3                   	ret    
+8010557b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010557f:	90                   	nop
+80105580:	c9                   	leave  
+80105581:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105586:	c3                   	ret    
+80105587:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010558e:	66 90                	xchg   %ax,%ax
+
+80105590 <sys_close>:
+80105590:	f3 0f 1e fb          	endbr32 
+80105594:	55                   	push   %ebp
+80105595:	89 e5                	mov    %esp,%ebp
+80105597:	83 ec 18             	sub    $0x18,%esp
+8010559a:	8d 55 f4             	lea    -0xc(%ebp),%edx
+8010559d:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801055a0:	e8 4b fe ff ff       	call   801053f0 <argfd.constprop.0>
+801055a5:	85 c0                	test   %eax,%eax
+801055a7:	78 27                	js     801055d0 <sys_close+0x40>
+801055a9:	e8 c2 e7 ff ff       	call   80103d70 <myproc>
+801055ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
+801055b1:	83 ec 0c             	sub    $0xc,%esp
+801055b4:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+801055bb:	00 
+801055bc:	ff 75 f4             	pushl  -0xc(%ebp)
+801055bf:	e8 fc b8 ff ff       	call   80100ec0 <fileclose>
+801055c4:	83 c4 10             	add    $0x10,%esp
+801055c7:	31 c0                	xor    %eax,%eax
+801055c9:	c9                   	leave  
+801055ca:	c3                   	ret    
+801055cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801055cf:	90                   	nop
+801055d0:	c9                   	leave  
+801055d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801055d6:	c3                   	ret    
+801055d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801055de:	66 90                	xchg   %ax,%ax
+
+801055e0 <sys_fstat>:
+801055e0:	f3 0f 1e fb          	endbr32 
+801055e4:	55                   	push   %ebp
+801055e5:	31 c0                	xor    %eax,%eax
+801055e7:	89 e5                	mov    %esp,%ebp
+801055e9:	83 ec 18             	sub    $0x18,%esp
+801055ec:	8d 55 f0             	lea    -0x10(%ebp),%edx
+801055ef:	e8 fc fd ff ff       	call   801053f0 <argfd.constprop.0>
+801055f4:	85 c0                	test   %eax,%eax
+801055f6:	78 30                	js     80105628 <sys_fstat+0x48>
+801055f8:	83 ec 04             	sub    $0x4,%esp
+801055fb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801055fe:	6a 14                	push   $0x14
+80105600:	50                   	push   %eax
+80105601:	6a 01                	push   $0x1
+80105603:	e8 38 fb ff ff       	call   80105140 <argptr>
+80105608:	83 c4 10             	add    $0x10,%esp
+8010560b:	85 c0                	test   %eax,%eax
+8010560d:	78 19                	js     80105628 <sys_fstat+0x48>
+8010560f:	83 ec 08             	sub    $0x8,%esp
+80105612:	ff 75 f4             	pushl  -0xc(%ebp)
+80105615:	ff 75 f0             	pushl  -0x10(%ebp)
+80105618:	e8 83 b9 ff ff       	call   80100fa0 <filestat>
+8010561d:	83 c4 10             	add    $0x10,%esp
+80105620:	c9                   	leave  
+80105621:	c3                   	ret    
+80105622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105628:	c9                   	leave  
+80105629:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010562e:	c3                   	ret    
+8010562f:	90                   	nop
+
+80105630 <sys_link>:
+80105630:	f3 0f 1e fb          	endbr32 
+80105634:	55                   	push   %ebp
+80105635:	89 e5                	mov    %esp,%ebp
+80105637:	57                   	push   %edi
+80105638:	56                   	push   %esi
+80105639:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+8010563c:	53                   	push   %ebx
+8010563d:	83 ec 34             	sub    $0x34,%esp
+80105640:	50                   	push   %eax
+80105641:	6a 00                	push   $0x0
+80105643:	e8 58 fb ff ff       	call   801051a0 <argstr>
+80105648:	83 c4 10             	add    $0x10,%esp
+8010564b:	85 c0                	test   %eax,%eax
+8010564d:	0f 88 ff 00 00 00    	js     80105752 <sys_link+0x122>
+80105653:	83 ec 08             	sub    $0x8,%esp
+80105656:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105659:	50                   	push   %eax
+8010565a:	6a 01                	push   $0x1
+8010565c:	e8 3f fb ff ff       	call   801051a0 <argstr>
+80105661:	83 c4 10             	add    $0x10,%esp
+80105664:	85 c0                	test   %eax,%eax
+80105666:	0f 88 e6 00 00 00    	js     80105752 <sys_link+0x122>
+8010566c:	e8 bf d6 ff ff       	call   80102d30 <begin_op>
+80105671:	83 ec 0c             	sub    $0xc,%esp
+80105674:	ff 75 d4             	pushl  -0x2c(%ebp)
+80105677:	e8 b4 c9 ff ff       	call   80102030 <namei>
+8010567c:	83 c4 10             	add    $0x10,%esp
+8010567f:	89 c3                	mov    %eax,%ebx
+80105681:	85 c0                	test   %eax,%eax
+80105683:	0f 84 e8 00 00 00    	je     80105771 <sys_link+0x141>
+80105689:	83 ec 0c             	sub    $0xc,%esp
+8010568c:	50                   	push   %eax
+8010568d:	e8 ce c0 ff ff       	call   80101760 <ilock>
+80105692:	83 c4 10             	add    $0x10,%esp
+80105695:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+8010569a:	0f 84 b9 00 00 00    	je     80105759 <sys_link+0x129>
+801056a0:	83 ec 0c             	sub    $0xc,%esp
+801056a3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+801056a8:	8d 7d da             	lea    -0x26(%ebp),%edi
+801056ab:	53                   	push   %ebx
+801056ac:	e8 ef bf ff ff       	call   801016a0 <iupdate>
+801056b1:	89 1c 24             	mov    %ebx,(%esp)
+801056b4:	e8 87 c1 ff ff       	call   80101840 <iunlock>
+801056b9:	58                   	pop    %eax
+801056ba:	5a                   	pop    %edx
+801056bb:	57                   	push   %edi
+801056bc:	ff 75 d0             	pushl  -0x30(%ebp)
+801056bf:	e8 8c c9 ff ff       	call   80102050 <nameiparent>
+801056c4:	83 c4 10             	add    $0x10,%esp
+801056c7:	89 c6                	mov    %eax,%esi
+801056c9:	85 c0                	test   %eax,%eax
+801056cb:	74 5f                	je     8010572c <sys_link+0xfc>
+801056cd:	83 ec 0c             	sub    $0xc,%esp
+801056d0:	50                   	push   %eax
+801056d1:	e8 8a c0 ff ff       	call   80101760 <ilock>
+801056d6:	8b 03                	mov    (%ebx),%eax
+801056d8:	83 c4 10             	add    $0x10,%esp
+801056db:	39 06                	cmp    %eax,(%esi)
+801056dd:	75 41                	jne    80105720 <sys_link+0xf0>
+801056df:	83 ec 04             	sub    $0x4,%esp
+801056e2:	ff 73 04             	pushl  0x4(%ebx)
+801056e5:	57                   	push   %edi
+801056e6:	56                   	push   %esi
+801056e7:	e8 84 c8 ff ff       	call   80101f70 <dirlink>
+801056ec:	83 c4 10             	add    $0x10,%esp
+801056ef:	85 c0                	test   %eax,%eax
+801056f1:	78 2d                	js     80105720 <sys_link+0xf0>
+801056f3:	83 ec 0c             	sub    $0xc,%esp
+801056f6:	56                   	push   %esi
+801056f7:	e8 04 c3 ff ff       	call   80101a00 <iunlockput>
+801056fc:	89 1c 24             	mov    %ebx,(%esp)
+801056ff:	e8 8c c1 ff ff       	call   80101890 <iput>
+80105704:	e8 97 d6 ff ff       	call   80102da0 <end_op>
+80105709:	83 c4 10             	add    $0x10,%esp
+8010570c:	31 c0                	xor    %eax,%eax
+8010570e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105711:	5b                   	pop    %ebx
+80105712:	5e                   	pop    %esi
+80105713:	5f                   	pop    %edi
+80105714:	5d                   	pop    %ebp
+80105715:	c3                   	ret    
+80105716:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010571d:	8d 76 00             	lea    0x0(%esi),%esi
+80105720:	83 ec 0c             	sub    $0xc,%esp
+80105723:	56                   	push   %esi
+80105724:	e8 d7 c2 ff ff       	call   80101a00 <iunlockput>
+80105729:	83 c4 10             	add    $0x10,%esp
+8010572c:	83 ec 0c             	sub    $0xc,%esp
+8010572f:	53                   	push   %ebx
+80105730:	e8 2b c0 ff ff       	call   80101760 <ilock>
+80105735:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+8010573a:	89 1c 24             	mov    %ebx,(%esp)
+8010573d:	e8 5e bf ff ff       	call   801016a0 <iupdate>
+80105742:	89 1c 24             	mov    %ebx,(%esp)
+80105745:	e8 b6 c2 ff ff       	call   80101a00 <iunlockput>
+8010574a:	e8 51 d6 ff ff       	call   80102da0 <end_op>
+8010574f:	83 c4 10             	add    $0x10,%esp
+80105752:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105757:	eb b5                	jmp    8010570e <sys_link+0xde>
+80105759:	83 ec 0c             	sub    $0xc,%esp
+8010575c:	53                   	push   %ebx
+8010575d:	e8 9e c2 ff ff       	call   80101a00 <iunlockput>
+80105762:	e8 39 d6 ff ff       	call   80102da0 <end_op>
+80105767:	83 c4 10             	add    $0x10,%esp
+8010576a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010576f:	eb 9d                	jmp    8010570e <sys_link+0xde>
+80105771:	e8 2a d6 ff ff       	call   80102da0 <end_op>
+80105776:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010577b:	eb 91                	jmp    8010570e <sys_link+0xde>
+8010577d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105780 <sys_unlink>:
+80105780:	f3 0f 1e fb          	endbr32 
+80105784:	55                   	push   %ebp
+80105785:	89 e5                	mov    %esp,%ebp
+80105787:	57                   	push   %edi
+80105788:	56                   	push   %esi
+80105789:	8d 45 c0             	lea    -0x40(%ebp),%eax
+8010578c:	53                   	push   %ebx
+8010578d:	83 ec 54             	sub    $0x54,%esp
+80105790:	50                   	push   %eax
+80105791:	6a 00                	push   $0x0
+80105793:	e8 08 fa ff ff       	call   801051a0 <argstr>
+80105798:	83 c4 10             	add    $0x10,%esp
+8010579b:	85 c0                	test   %eax,%eax
+8010579d:	0f 88 7d 01 00 00    	js     80105920 <sys_unlink+0x1a0>
+801057a3:	e8 88 d5 ff ff       	call   80102d30 <begin_op>
+801057a8:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+801057ab:	83 ec 08             	sub    $0x8,%esp
+801057ae:	53                   	push   %ebx
+801057af:	ff 75 c0             	pushl  -0x40(%ebp)
+801057b2:	e8 99 c8 ff ff       	call   80102050 <nameiparent>
+801057b7:	83 c4 10             	add    $0x10,%esp
+801057ba:	89 c6                	mov    %eax,%esi
+801057bc:	85 c0                	test   %eax,%eax
+801057be:	0f 84 66 01 00 00    	je     8010592a <sys_unlink+0x1aa>
+801057c4:	83 ec 0c             	sub    $0xc,%esp
+801057c7:	50                   	push   %eax
+801057c8:	e8 93 bf ff ff       	call   80101760 <ilock>
+801057cd:	58                   	pop    %eax
+801057ce:	5a                   	pop    %edx
+801057cf:	68 f4 80 10 80       	push   $0x801080f4
+801057d4:	53                   	push   %ebx
+801057d5:	e8 b6 c4 ff ff       	call   80101c90 <namecmp>
+801057da:	83 c4 10             	add    $0x10,%esp
+801057dd:	85 c0                	test   %eax,%eax
+801057df:	0f 84 03 01 00 00    	je     801058e8 <sys_unlink+0x168>
+801057e5:	83 ec 08             	sub    $0x8,%esp
+801057e8:	68 f3 80 10 80       	push   $0x801080f3
+801057ed:	53                   	push   %ebx
+801057ee:	e8 9d c4 ff ff       	call   80101c90 <namecmp>
+801057f3:	83 c4 10             	add    $0x10,%esp
+801057f6:	85 c0                	test   %eax,%eax
+801057f8:	0f 84 ea 00 00 00    	je     801058e8 <sys_unlink+0x168>
+801057fe:	83 ec 04             	sub    $0x4,%esp
+80105801:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80105804:	50                   	push   %eax
+80105805:	53                   	push   %ebx
+80105806:	56                   	push   %esi
+80105807:	e8 a4 c4 ff ff       	call   80101cb0 <dirlookup>
+8010580c:	83 c4 10             	add    $0x10,%esp
+8010580f:	89 c3                	mov    %eax,%ebx
+80105811:	85 c0                	test   %eax,%eax
+80105813:	0f 84 cf 00 00 00    	je     801058e8 <sys_unlink+0x168>
+80105819:	83 ec 0c             	sub    $0xc,%esp
+8010581c:	50                   	push   %eax
+8010581d:	e8 3e bf ff ff       	call   80101760 <ilock>
+80105822:	83 c4 10             	add    $0x10,%esp
+80105825:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+8010582a:	0f 8e 23 01 00 00    	jle    80105953 <sys_unlink+0x1d3>
+80105830:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105835:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105838:	74 66                	je     801058a0 <sys_unlink+0x120>
+8010583a:	83 ec 04             	sub    $0x4,%esp
+8010583d:	6a 10                	push   $0x10
+8010583f:	6a 00                	push   $0x0
+80105841:	57                   	push   %edi
+80105842:	e8 c9 f5 ff ff       	call   80104e10 <memset>
+80105847:	6a 10                	push   $0x10
+80105849:	ff 75 c4             	pushl  -0x3c(%ebp)
+8010584c:	57                   	push   %edi
+8010584d:	56                   	push   %esi
+8010584e:	e8 0d c3 ff ff       	call   80101b60 <writei>
+80105853:	83 c4 20             	add    $0x20,%esp
+80105856:	83 f8 10             	cmp    $0x10,%eax
+80105859:	0f 85 e7 00 00 00    	jne    80105946 <sys_unlink+0x1c6>
+8010585f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105864:	0f 84 96 00 00 00    	je     80105900 <sys_unlink+0x180>
+8010586a:	83 ec 0c             	sub    $0xc,%esp
+8010586d:	56                   	push   %esi
+8010586e:	e8 8d c1 ff ff       	call   80101a00 <iunlockput>
+80105873:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105878:	89 1c 24             	mov    %ebx,(%esp)
+8010587b:	e8 20 be ff ff       	call   801016a0 <iupdate>
+80105880:	89 1c 24             	mov    %ebx,(%esp)
+80105883:	e8 78 c1 ff ff       	call   80101a00 <iunlockput>
+80105888:	e8 13 d5 ff ff       	call   80102da0 <end_op>
+8010588d:	83 c4 10             	add    $0x10,%esp
+80105890:	31 c0                	xor    %eax,%eax
+80105892:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105895:	5b                   	pop    %ebx
+80105896:	5e                   	pop    %esi
+80105897:	5f                   	pop    %edi
+80105898:	5d                   	pop    %ebp
+80105899:	c3                   	ret    
+8010589a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801058a0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+801058a4:	76 94                	jbe    8010583a <sys_unlink+0xba>
+801058a6:	ba 20 00 00 00       	mov    $0x20,%edx
+801058ab:	eb 0b                	jmp    801058b8 <sys_unlink+0x138>
+801058ad:	8d 76 00             	lea    0x0(%esi),%esi
+801058b0:	83 c2 10             	add    $0x10,%edx
+801058b3:	39 53 58             	cmp    %edx,0x58(%ebx)
+801058b6:	76 82                	jbe    8010583a <sys_unlink+0xba>
+801058b8:	6a 10                	push   $0x10
+801058ba:	52                   	push   %edx
+801058bb:	57                   	push   %edi
+801058bc:	53                   	push   %ebx
+801058bd:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+801058c0:	e8 9b c1 ff ff       	call   80101a60 <readi>
+801058c5:	83 c4 10             	add    $0x10,%esp
+801058c8:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+801058cb:	83 f8 10             	cmp    $0x10,%eax
+801058ce:	75 69                	jne    80105939 <sys_unlink+0x1b9>
+801058d0:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801058d5:	74 d9                	je     801058b0 <sys_unlink+0x130>
+801058d7:	83 ec 0c             	sub    $0xc,%esp
+801058da:	53                   	push   %ebx
+801058db:	e8 20 c1 ff ff       	call   80101a00 <iunlockput>
+801058e0:	83 c4 10             	add    $0x10,%esp
+801058e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058e7:	90                   	nop
+801058e8:	83 ec 0c             	sub    $0xc,%esp
+801058eb:	56                   	push   %esi
+801058ec:	e8 0f c1 ff ff       	call   80101a00 <iunlockput>
+801058f1:	e8 aa d4 ff ff       	call   80102da0 <end_op>
+801058f6:	83 c4 10             	add    $0x10,%esp
+801058f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801058fe:	eb 92                	jmp    80105892 <sys_unlink+0x112>
+80105900:	83 ec 0c             	sub    $0xc,%esp
+80105903:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+80105908:	56                   	push   %esi
+80105909:	e8 92 bd ff ff       	call   801016a0 <iupdate>
+8010590e:	83 c4 10             	add    $0x10,%esp
+80105911:	e9 54 ff ff ff       	jmp    8010586a <sys_unlink+0xea>
+80105916:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010591d:	8d 76 00             	lea    0x0(%esi),%esi
+80105920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105925:	e9 68 ff ff ff       	jmp    80105892 <sys_unlink+0x112>
+8010592a:	e8 71 d4 ff ff       	call   80102da0 <end_op>
+8010592f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105934:	e9 59 ff ff ff       	jmp    80105892 <sys_unlink+0x112>
+80105939:	83 ec 0c             	sub    $0xc,%esp
+8010593c:	68 18 81 10 80       	push   $0x80108118
+80105941:	e8 4a aa ff ff       	call   80100390 <panic>
+80105946:	83 ec 0c             	sub    $0xc,%esp
+80105949:	68 2a 81 10 80       	push   $0x8010812a
+8010594e:	e8 3d aa ff ff       	call   80100390 <panic>
+80105953:	83 ec 0c             	sub    $0xc,%esp
+80105956:	68 06 81 10 80       	push   $0x80108106
+8010595b:	e8 30 aa ff ff       	call   80100390 <panic>
+
+80105960 <sys_open>:
+80105960:	f3 0f 1e fb          	endbr32 
+80105964:	55                   	push   %ebp
+80105965:	89 e5                	mov    %esp,%ebp
+80105967:	57                   	push   %edi
+80105968:	56                   	push   %esi
+80105969:	8d 45 e0             	lea    -0x20(%ebp),%eax
+8010596c:	53                   	push   %ebx
+8010596d:	83 ec 24             	sub    $0x24,%esp
+80105970:	50                   	push   %eax
+80105971:	6a 00                	push   $0x0
+80105973:	e8 28 f8 ff ff       	call   801051a0 <argstr>
+80105978:	83 c4 10             	add    $0x10,%esp
+8010597b:	85 c0                	test   %eax,%eax
+8010597d:	0f 88 8a 00 00 00    	js     80105a0d <sys_open+0xad>
+80105983:	83 ec 08             	sub    $0x8,%esp
+80105986:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105989:	50                   	push   %eax
+8010598a:	6a 01                	push   $0x1
+8010598c:	e8 5f f7 ff ff       	call   801050f0 <argint>
+80105991:	83 c4 10             	add    $0x10,%esp
+80105994:	85 c0                	test   %eax,%eax
+80105996:	78 75                	js     80105a0d <sys_open+0xad>
+80105998:	e8 93 d3 ff ff       	call   80102d30 <begin_op>
+8010599d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+801059a1:	75 75                	jne    80105a18 <sys_open+0xb8>
+801059a3:	83 ec 0c             	sub    $0xc,%esp
+801059a6:	ff 75 e0             	pushl  -0x20(%ebp)
+801059a9:	e8 82 c6 ff ff       	call   80102030 <namei>
+801059ae:	83 c4 10             	add    $0x10,%esp
+801059b1:	89 c6                	mov    %eax,%esi
+801059b3:	85 c0                	test   %eax,%eax
+801059b5:	74 7e                	je     80105a35 <sys_open+0xd5>
+801059b7:	83 ec 0c             	sub    $0xc,%esp
+801059ba:	50                   	push   %eax
+801059bb:	e8 a0 bd ff ff       	call   80101760 <ilock>
+801059c0:	83 c4 10             	add    $0x10,%esp
+801059c3:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+801059c8:	0f 84 c2 00 00 00    	je     80105a90 <sys_open+0x130>
+801059ce:	e8 2d b4 ff ff       	call   80100e00 <filealloc>
+801059d3:	89 c7                	mov    %eax,%edi
+801059d5:	85 c0                	test   %eax,%eax
+801059d7:	74 23                	je     801059fc <sys_open+0x9c>
+801059d9:	e8 92 e3 ff ff       	call   80103d70 <myproc>
+801059de:	31 db                	xor    %ebx,%ebx
+801059e0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801059e4:	85 d2                	test   %edx,%edx
+801059e6:	74 60                	je     80105a48 <sys_open+0xe8>
+801059e8:	83 c3 01             	add    $0x1,%ebx
+801059eb:	83 fb 10             	cmp    $0x10,%ebx
+801059ee:	75 f0                	jne    801059e0 <sys_open+0x80>
+801059f0:	83 ec 0c             	sub    $0xc,%esp
+801059f3:	57                   	push   %edi
+801059f4:	e8 c7 b4 ff ff       	call   80100ec0 <fileclose>
+801059f9:	83 c4 10             	add    $0x10,%esp
+801059fc:	83 ec 0c             	sub    $0xc,%esp
+801059ff:	56                   	push   %esi
+80105a00:	e8 fb bf ff ff       	call   80101a00 <iunlockput>
+80105a05:	e8 96 d3 ff ff       	call   80102da0 <end_op>
+80105a0a:	83 c4 10             	add    $0x10,%esp
+80105a0d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105a12:	eb 6d                	jmp    80105a81 <sys_open+0x121>
+80105a14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a18:	83 ec 0c             	sub    $0xc,%esp
+80105a1b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105a1e:	31 c9                	xor    %ecx,%ecx
+80105a20:	ba 02 00 00 00       	mov    $0x2,%edx
+80105a25:	6a 00                	push   $0x0
+80105a27:	e8 24 f8 ff ff       	call   80105250 <create>
+80105a2c:	83 c4 10             	add    $0x10,%esp
+80105a2f:	89 c6                	mov    %eax,%esi
+80105a31:	85 c0                	test   %eax,%eax
+80105a33:	75 99                	jne    801059ce <sys_open+0x6e>
+80105a35:	e8 66 d3 ff ff       	call   80102da0 <end_op>
+80105a3a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105a3f:	eb 40                	jmp    80105a81 <sys_open+0x121>
+80105a41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a48:	83 ec 0c             	sub    $0xc,%esp
+80105a4b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+80105a4f:	56                   	push   %esi
+80105a50:	e8 eb bd ff ff       	call   80101840 <iunlock>
+80105a55:	e8 46 d3 ff ff       	call   80102da0 <end_op>
+80105a5a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+80105a60:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105a63:	83 c4 10             	add    $0x10,%esp
+80105a66:	89 77 10             	mov    %esi,0x10(%edi)
+80105a69:	89 d0                	mov    %edx,%eax
+80105a6b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+80105a72:	f7 d0                	not    %eax
+80105a74:	83 e0 01             	and    $0x1,%eax
+80105a77:	83 e2 03             	and    $0x3,%edx
+80105a7a:	88 47 08             	mov    %al,0x8(%edi)
+80105a7d:	0f 95 47 09          	setne  0x9(%edi)
+80105a81:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105a84:	89 d8                	mov    %ebx,%eax
+80105a86:	5b                   	pop    %ebx
+80105a87:	5e                   	pop    %esi
+80105a88:	5f                   	pop    %edi
+80105a89:	5d                   	pop    %ebp
+80105a8a:	c3                   	ret    
+80105a8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a8f:	90                   	nop
+80105a90:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105a93:	85 c9                	test   %ecx,%ecx
+80105a95:	0f 84 33 ff ff ff    	je     801059ce <sys_open+0x6e>
+80105a9b:	e9 5c ff ff ff       	jmp    801059fc <sys_open+0x9c>
+
+80105aa0 <sys_mkdir>:
+80105aa0:	f3 0f 1e fb          	endbr32 
+80105aa4:	55                   	push   %ebp
+80105aa5:	89 e5                	mov    %esp,%ebp
+80105aa7:	83 ec 18             	sub    $0x18,%esp
+80105aaa:	e8 81 d2 ff ff       	call   80102d30 <begin_op>
+80105aaf:	83 ec 08             	sub    $0x8,%esp
+80105ab2:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105ab5:	50                   	push   %eax
+80105ab6:	6a 00                	push   $0x0
+80105ab8:	e8 e3 f6 ff ff       	call   801051a0 <argstr>
+80105abd:	83 c4 10             	add    $0x10,%esp
+80105ac0:	85 c0                	test   %eax,%eax
+80105ac2:	78 34                	js     80105af8 <sys_mkdir+0x58>
+80105ac4:	83 ec 0c             	sub    $0xc,%esp
+80105ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105aca:	31 c9                	xor    %ecx,%ecx
+80105acc:	ba 01 00 00 00       	mov    $0x1,%edx
+80105ad1:	6a 00                	push   $0x0
+80105ad3:	e8 78 f7 ff ff       	call   80105250 <create>
+80105ad8:	83 c4 10             	add    $0x10,%esp
+80105adb:	85 c0                	test   %eax,%eax
+80105add:	74 19                	je     80105af8 <sys_mkdir+0x58>
+80105adf:	83 ec 0c             	sub    $0xc,%esp
+80105ae2:	50                   	push   %eax
+80105ae3:	e8 18 bf ff ff       	call   80101a00 <iunlockput>
+80105ae8:	e8 b3 d2 ff ff       	call   80102da0 <end_op>
+80105aed:	83 c4 10             	add    $0x10,%esp
+80105af0:	31 c0                	xor    %eax,%eax
+80105af2:	c9                   	leave  
+80105af3:	c3                   	ret    
+80105af4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105af8:	e8 a3 d2 ff ff       	call   80102da0 <end_op>
+80105afd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b02:	c9                   	leave  
+80105b03:	c3                   	ret    
+80105b04:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b0f:	90                   	nop
+
+80105b10 <sys_mknod>:
+80105b10:	f3 0f 1e fb          	endbr32 
+80105b14:	55                   	push   %ebp
+80105b15:	89 e5                	mov    %esp,%ebp
+80105b17:	83 ec 18             	sub    $0x18,%esp
+80105b1a:	e8 11 d2 ff ff       	call   80102d30 <begin_op>
+80105b1f:	83 ec 08             	sub    $0x8,%esp
+80105b22:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105b25:	50                   	push   %eax
+80105b26:	6a 00                	push   $0x0
+80105b28:	e8 73 f6 ff ff       	call   801051a0 <argstr>
+80105b2d:	83 c4 10             	add    $0x10,%esp
+80105b30:	85 c0                	test   %eax,%eax
+80105b32:	78 64                	js     80105b98 <sys_mknod+0x88>
+80105b34:	83 ec 08             	sub    $0x8,%esp
+80105b37:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105b3a:	50                   	push   %eax
+80105b3b:	6a 01                	push   $0x1
+80105b3d:	e8 ae f5 ff ff       	call   801050f0 <argint>
+80105b42:	83 c4 10             	add    $0x10,%esp
+80105b45:	85 c0                	test   %eax,%eax
+80105b47:	78 4f                	js     80105b98 <sys_mknod+0x88>
+80105b49:	83 ec 08             	sub    $0x8,%esp
+80105b4c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105b4f:	50                   	push   %eax
+80105b50:	6a 02                	push   $0x2
+80105b52:	e8 99 f5 ff ff       	call   801050f0 <argint>
+80105b57:	83 c4 10             	add    $0x10,%esp
+80105b5a:	85 c0                	test   %eax,%eax
+80105b5c:	78 3a                	js     80105b98 <sys_mknod+0x88>
+80105b5e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80105b62:	83 ec 0c             	sub    $0xc,%esp
+80105b65:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105b69:	ba 03 00 00 00       	mov    $0x3,%edx
+80105b6e:	50                   	push   %eax
+80105b6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80105b72:	e8 d9 f6 ff ff       	call   80105250 <create>
+80105b77:	83 c4 10             	add    $0x10,%esp
+80105b7a:	85 c0                	test   %eax,%eax
+80105b7c:	74 1a                	je     80105b98 <sys_mknod+0x88>
+80105b7e:	83 ec 0c             	sub    $0xc,%esp
+80105b81:	50                   	push   %eax
+80105b82:	e8 79 be ff ff       	call   80101a00 <iunlockput>
+80105b87:	e8 14 d2 ff ff       	call   80102da0 <end_op>
+80105b8c:	83 c4 10             	add    $0x10,%esp
+80105b8f:	31 c0                	xor    %eax,%eax
+80105b91:	c9                   	leave  
+80105b92:	c3                   	ret    
+80105b93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b97:	90                   	nop
+80105b98:	e8 03 d2 ff ff       	call   80102da0 <end_op>
+80105b9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105ba2:	c9                   	leave  
+80105ba3:	c3                   	ret    
+80105ba4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105baf:	90                   	nop
+
+80105bb0 <sys_chdir>:
+80105bb0:	f3 0f 1e fb          	endbr32 
+80105bb4:	55                   	push   %ebp
+80105bb5:	89 e5                	mov    %esp,%ebp
+80105bb7:	56                   	push   %esi
+80105bb8:	53                   	push   %ebx
+80105bb9:	83 ec 10             	sub    $0x10,%esp
+80105bbc:	e8 af e1 ff ff       	call   80103d70 <myproc>
+80105bc1:	89 c6                	mov    %eax,%esi
+80105bc3:	e8 68 d1 ff ff       	call   80102d30 <begin_op>
+80105bc8:	83 ec 08             	sub    $0x8,%esp
+80105bcb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105bce:	50                   	push   %eax
+80105bcf:	6a 00                	push   $0x0
+80105bd1:	e8 ca f5 ff ff       	call   801051a0 <argstr>
+80105bd6:	83 c4 10             	add    $0x10,%esp
+80105bd9:	85 c0                	test   %eax,%eax
+80105bdb:	78 73                	js     80105c50 <sys_chdir+0xa0>
+80105bdd:	83 ec 0c             	sub    $0xc,%esp
+80105be0:	ff 75 f4             	pushl  -0xc(%ebp)
+80105be3:	e8 48 c4 ff ff       	call   80102030 <namei>
+80105be8:	83 c4 10             	add    $0x10,%esp
+80105beb:	89 c3                	mov    %eax,%ebx
+80105bed:	85 c0                	test   %eax,%eax
+80105bef:	74 5f                	je     80105c50 <sys_chdir+0xa0>
+80105bf1:	83 ec 0c             	sub    $0xc,%esp
+80105bf4:	50                   	push   %eax
+80105bf5:	e8 66 bb ff ff       	call   80101760 <ilock>
+80105bfa:	83 c4 10             	add    $0x10,%esp
+80105bfd:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105c02:	75 2c                	jne    80105c30 <sys_chdir+0x80>
+80105c04:	83 ec 0c             	sub    $0xc,%esp
+80105c07:	53                   	push   %ebx
+80105c08:	e8 33 bc ff ff       	call   80101840 <iunlock>
+80105c0d:	58                   	pop    %eax
+80105c0e:	ff 76 68             	pushl  0x68(%esi)
+80105c11:	e8 7a bc ff ff       	call   80101890 <iput>
+80105c16:	e8 85 d1 ff ff       	call   80102da0 <end_op>
+80105c1b:	89 5e 68             	mov    %ebx,0x68(%esi)
+80105c1e:	83 c4 10             	add    $0x10,%esp
+80105c21:	31 c0                	xor    %eax,%eax
+80105c23:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105c26:	5b                   	pop    %ebx
+80105c27:	5e                   	pop    %esi
+80105c28:	5d                   	pop    %ebp
+80105c29:	c3                   	ret    
+80105c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105c30:	83 ec 0c             	sub    $0xc,%esp
+80105c33:	53                   	push   %ebx
+80105c34:	e8 c7 bd ff ff       	call   80101a00 <iunlockput>
+80105c39:	e8 62 d1 ff ff       	call   80102da0 <end_op>
+80105c3e:	83 c4 10             	add    $0x10,%esp
+80105c41:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105c46:	eb db                	jmp    80105c23 <sys_chdir+0x73>
+80105c48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c4f:	90                   	nop
+80105c50:	e8 4b d1 ff ff       	call   80102da0 <end_op>
+80105c55:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105c5a:	eb c7                	jmp    80105c23 <sys_chdir+0x73>
+80105c5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105c60 <sys_exec>:
+80105c60:	f3 0f 1e fb          	endbr32 
+80105c64:	55                   	push   %ebp
+80105c65:	89 e5                	mov    %esp,%ebp
+80105c67:	57                   	push   %edi
+80105c68:	56                   	push   %esi
+80105c69:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80105c6f:	53                   	push   %ebx
+80105c70:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+80105c76:	50                   	push   %eax
+80105c77:	6a 00                	push   $0x0
+80105c79:	e8 22 f5 ff ff       	call   801051a0 <argstr>
+80105c7e:	83 c4 10             	add    $0x10,%esp
+80105c81:	85 c0                	test   %eax,%eax
+80105c83:	0f 88 8b 00 00 00    	js     80105d14 <sys_exec+0xb4>
+80105c89:	83 ec 08             	sub    $0x8,%esp
+80105c8c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+80105c92:	50                   	push   %eax
+80105c93:	6a 01                	push   $0x1
+80105c95:	e8 56 f4 ff ff       	call   801050f0 <argint>
+80105c9a:	83 c4 10             	add    $0x10,%esp
+80105c9d:	85 c0                	test   %eax,%eax
+80105c9f:	78 73                	js     80105d14 <sys_exec+0xb4>
+80105ca1:	83 ec 04             	sub    $0x4,%esp
+80105ca4:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105caa:	31 db                	xor    %ebx,%ebx
+80105cac:	68 80 00 00 00       	push   $0x80
+80105cb1:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80105cb7:	6a 00                	push   $0x0
+80105cb9:	50                   	push   %eax
+80105cba:	e8 51 f1 ff ff       	call   80104e10 <memset>
+80105cbf:	83 c4 10             	add    $0x10,%esp
+80105cc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105cc8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+80105cce:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80105cd5:	83 ec 08             	sub    $0x8,%esp
+80105cd8:	57                   	push   %edi
+80105cd9:	01 f0                	add    %esi,%eax
+80105cdb:	50                   	push   %eax
+80105cdc:	e8 6f f3 ff ff       	call   80105050 <fetchint>
+80105ce1:	83 c4 10             	add    $0x10,%esp
+80105ce4:	85 c0                	test   %eax,%eax
+80105ce6:	78 2c                	js     80105d14 <sys_exec+0xb4>
+80105ce8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+80105cee:	85 c0                	test   %eax,%eax
+80105cf0:	74 36                	je     80105d28 <sys_exec+0xc8>
+80105cf2:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105cf8:	83 ec 08             	sub    $0x8,%esp
+80105cfb:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+80105cfe:	52                   	push   %edx
+80105cff:	50                   	push   %eax
+80105d00:	e8 8b f3 ff ff       	call   80105090 <fetchstr>
+80105d05:	83 c4 10             	add    $0x10,%esp
+80105d08:	85 c0                	test   %eax,%eax
+80105d0a:	78 08                	js     80105d14 <sys_exec+0xb4>
+80105d0c:	83 c3 01             	add    $0x1,%ebx
+80105d0f:	83 fb 20             	cmp    $0x20,%ebx
+80105d12:	75 b4                	jne    80105cc8 <sys_exec+0x68>
+80105d14:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105d17:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105d1c:	5b                   	pop    %ebx
+80105d1d:	5e                   	pop    %esi
+80105d1e:	5f                   	pop    %edi
+80105d1f:	5d                   	pop    %ebp
+80105d20:	c3                   	ret    
+80105d21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d28:	83 ec 08             	sub    $0x8,%esp
+80105d2b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105d31:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105d38:	00 00 00 00 
+80105d3c:	50                   	push   %eax
+80105d3d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+80105d43:	e8 38 ad ff ff       	call   80100a80 <exec>
+80105d48:	83 c4 10             	add    $0x10,%esp
+80105d4b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105d4e:	5b                   	pop    %ebx
+80105d4f:	5e                   	pop    %esi
+80105d50:	5f                   	pop    %edi
+80105d51:	5d                   	pop    %ebp
+80105d52:	c3                   	ret    
+80105d53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105d60 <sys_pipe>:
+80105d60:	f3 0f 1e fb          	endbr32 
+80105d64:	55                   	push   %ebp
+80105d65:	89 e5                	mov    %esp,%ebp
+80105d67:	57                   	push   %edi
+80105d68:	56                   	push   %esi
+80105d69:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80105d6c:	53                   	push   %ebx
+80105d6d:	83 ec 20             	sub    $0x20,%esp
+80105d70:	6a 08                	push   $0x8
+80105d72:	50                   	push   %eax
+80105d73:	6a 00                	push   $0x0
+80105d75:	e8 c6 f3 ff ff       	call   80105140 <argptr>
+80105d7a:	83 c4 10             	add    $0x10,%esp
+80105d7d:	85 c0                	test   %eax,%eax
+80105d7f:	78 4e                	js     80105dcf <sys_pipe+0x6f>
+80105d81:	83 ec 08             	sub    $0x8,%esp
+80105d84:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105d87:	50                   	push   %eax
+80105d88:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105d8b:	50                   	push   %eax
+80105d8c:	e8 5f d6 ff ff       	call   801033f0 <pipealloc>
+80105d91:	83 c4 10             	add    $0x10,%esp
+80105d94:	85 c0                	test   %eax,%eax
+80105d96:	78 37                	js     80105dcf <sys_pipe+0x6f>
+80105d98:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80105d9b:	31 db                	xor    %ebx,%ebx
+80105d9d:	e8 ce df ff ff       	call   80103d70 <myproc>
+80105da2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105da8:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+80105dac:	85 f6                	test   %esi,%esi
+80105dae:	74 30                	je     80105de0 <sys_pipe+0x80>
+80105db0:	83 c3 01             	add    $0x1,%ebx
+80105db3:	83 fb 10             	cmp    $0x10,%ebx
+80105db6:	75 f0                	jne    80105da8 <sys_pipe+0x48>
+80105db8:	83 ec 0c             	sub    $0xc,%esp
+80105dbb:	ff 75 e0             	pushl  -0x20(%ebp)
+80105dbe:	e8 fd b0 ff ff       	call   80100ec0 <fileclose>
+80105dc3:	58                   	pop    %eax
+80105dc4:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105dc7:	e8 f4 b0 ff ff       	call   80100ec0 <fileclose>
+80105dcc:	83 c4 10             	add    $0x10,%esp
+80105dcf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105dd4:	eb 5b                	jmp    80105e31 <sys_pipe+0xd1>
+80105dd6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105ddd:	8d 76 00             	lea    0x0(%esi),%esi
+80105de0:	8d 73 08             	lea    0x8(%ebx),%esi
+80105de3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80105de7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80105dea:	e8 81 df ff ff       	call   80103d70 <myproc>
+80105def:	31 d2                	xor    %edx,%edx
+80105df1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105df8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+80105dfc:	85 c9                	test   %ecx,%ecx
+80105dfe:	74 20                	je     80105e20 <sys_pipe+0xc0>
+80105e00:	83 c2 01             	add    $0x1,%edx
+80105e03:	83 fa 10             	cmp    $0x10,%edx
+80105e06:	75 f0                	jne    80105df8 <sys_pipe+0x98>
+80105e08:	e8 63 df ff ff       	call   80103d70 <myproc>
+80105e0d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80105e14:	00 
+80105e15:	eb a1                	jmp    80105db8 <sys_pipe+0x58>
+80105e17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e1e:	66 90                	xchg   %ax,%ax
+80105e20:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+80105e24:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105e27:	89 18                	mov    %ebx,(%eax)
+80105e29:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105e2c:	89 50 04             	mov    %edx,0x4(%eax)
+80105e2f:	31 c0                	xor    %eax,%eax
+80105e31:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105e34:	5b                   	pop    %ebx
+80105e35:	5e                   	pop    %esi
+80105e36:	5f                   	pop    %edi
+80105e37:	5d                   	pop    %ebp
+80105e38:	c3                   	ret    
+80105e39:	66 90                	xchg   %ax,%ax
+80105e3b:	66 90                	xchg   %ax,%ax
+80105e3d:	66 90                	xchg   %ax,%ax
+80105e3f:	90                   	nop
+
+80105e40 <sys_fork>:
+80105e40:	f3 0f 1e fb          	endbr32 
+80105e44:	e9 07 e1 ff ff       	jmp    80103f50 <fork>
+80105e49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105e50 <sys_exit>:
+80105e50:	f3 0f 1e fb          	endbr32 
+80105e54:	55                   	push   %ebp
+80105e55:	89 e5                	mov    %esp,%ebp
+80105e57:	83 ec 08             	sub    $0x8,%esp
+80105e5a:	e8 a1 e3 ff ff       	call   80104200 <exit>
+80105e5f:	31 c0                	xor    %eax,%eax
+80105e61:	c9                   	leave  
+80105e62:	c3                   	ret    
+80105e63:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105e70 <sys_wait>:
+80105e70:	f3 0f 1e fb          	endbr32 
+80105e74:	e9 f7 e5 ff ff       	jmp    80104470 <wait>
+80105e79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105e80 <sys_kill>:
+80105e80:	f3 0f 1e fb          	endbr32 
+80105e84:	55                   	push   %ebp
+80105e85:	89 e5                	mov    %esp,%ebp
+80105e87:	83 ec 20             	sub    $0x20,%esp
+80105e8a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105e8d:	50                   	push   %eax
+80105e8e:	6a 00                	push   $0x0
+80105e90:	e8 5b f2 ff ff       	call   801050f0 <argint>
+80105e95:	83 c4 10             	add    $0x10,%esp
+80105e98:	85 c0                	test   %eax,%eax
+80105e9a:	78 14                	js     80105eb0 <sys_kill+0x30>
+80105e9c:	83 ec 0c             	sub    $0xc,%esp
+80105e9f:	ff 75 f4             	pushl  -0xc(%ebp)
+80105ea2:	e8 49 e7 ff ff       	call   801045f0 <kill>
+80105ea7:	83 c4 10             	add    $0x10,%esp
+80105eaa:	c9                   	leave  
+80105eab:	c3                   	ret    
+80105eac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105eb0:	c9                   	leave  
+80105eb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105eb6:	c3                   	ret    
+80105eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105ebe:	66 90                	xchg   %ax,%ax
+
+80105ec0 <sys_getpid>:
+80105ec0:	f3 0f 1e fb          	endbr32 
+80105ec4:	55                   	push   %ebp
+80105ec5:	89 e5                	mov    %esp,%ebp
+80105ec7:	83 ec 08             	sub    $0x8,%esp
+80105eca:	e8 a1 de ff ff       	call   80103d70 <myproc>
+80105ecf:	8b 40 10             	mov    0x10(%eax),%eax
+80105ed2:	c9                   	leave  
+80105ed3:	c3                   	ret    
+80105ed4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105edb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105edf:	90                   	nop
+
+80105ee0 <sys_sbrk>:
+80105ee0:	f3 0f 1e fb          	endbr32 
+80105ee4:	55                   	push   %ebp
+80105ee5:	89 e5                	mov    %esp,%ebp
+80105ee7:	53                   	push   %ebx
+80105ee8:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105eeb:	83 ec 1c             	sub    $0x1c,%esp
+80105eee:	50                   	push   %eax
+80105eef:	6a 00                	push   $0x0
+80105ef1:	e8 fa f1 ff ff       	call   801050f0 <argint>
+80105ef6:	83 c4 10             	add    $0x10,%esp
+80105ef9:	85 c0                	test   %eax,%eax
+80105efb:	78 23                	js     80105f20 <sys_sbrk+0x40>
+80105efd:	e8 6e de ff ff       	call   80103d70 <myproc>
+80105f02:	83 ec 0c             	sub    $0xc,%esp
+80105f05:	8b 18                	mov    (%eax),%ebx
+80105f07:	ff 75 f4             	pushl  -0xc(%ebp)
+80105f0a:	e8 c1 df ff ff       	call   80103ed0 <growproc>
+80105f0f:	83 c4 10             	add    $0x10,%esp
+80105f12:	85 c0                	test   %eax,%eax
+80105f14:	78 0a                	js     80105f20 <sys_sbrk+0x40>
+80105f16:	89 d8                	mov    %ebx,%eax
+80105f18:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105f1b:	c9                   	leave  
+80105f1c:	c3                   	ret    
+80105f1d:	8d 76 00             	lea    0x0(%esi),%esi
+80105f20:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105f25:	eb ef                	jmp    80105f16 <sys_sbrk+0x36>
+80105f27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f2e:	66 90                	xchg   %ax,%ax
+
+80105f30 <sys_sleep>:
+80105f30:	f3 0f 1e fb          	endbr32 
+80105f34:	55                   	push   %ebp
+80105f35:	89 e5                	mov    %esp,%ebp
+80105f37:	53                   	push   %ebx
+80105f38:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105f3b:	83 ec 1c             	sub    $0x1c,%esp
+80105f3e:	50                   	push   %eax
+80105f3f:	6a 00                	push   $0x0
+80105f41:	e8 aa f1 ff ff       	call   801050f0 <argint>
+80105f46:	83 c4 10             	add    $0x10,%esp
+80105f49:	85 c0                	test   %eax,%eax
+80105f4b:	0f 88 86 00 00 00    	js     80105fd7 <sys_sleep+0xa7>
+80105f51:	83 ec 0c             	sub    $0xc,%esp
+80105f54:	68 60 5c 11 80       	push   $0x80115c60
+80105f59:	e8 a2 ed ff ff       	call   80104d00 <acquire>
+80105f5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105f61:	8b 1d a0 64 11 80    	mov    0x801164a0,%ebx
+80105f67:	83 c4 10             	add    $0x10,%esp
+80105f6a:	85 d2                	test   %edx,%edx
+80105f6c:	75 23                	jne    80105f91 <sys_sleep+0x61>
+80105f6e:	eb 50                	jmp    80105fc0 <sys_sleep+0x90>
+80105f70:	83 ec 08             	sub    $0x8,%esp
+80105f73:	68 60 5c 11 80       	push   $0x80115c60
+80105f78:	68 a0 64 11 80       	push   $0x801164a0
+80105f7d:	e8 2e e4 ff ff       	call   801043b0 <sleep>
+80105f82:	a1 a0 64 11 80       	mov    0x801164a0,%eax
+80105f87:	83 c4 10             	add    $0x10,%esp
+80105f8a:	29 d8                	sub    %ebx,%eax
+80105f8c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80105f8f:	73 2f                	jae    80105fc0 <sys_sleep+0x90>
+80105f91:	e8 da dd ff ff       	call   80103d70 <myproc>
+80105f96:	8b 40 24             	mov    0x24(%eax),%eax
+80105f99:	85 c0                	test   %eax,%eax
+80105f9b:	74 d3                	je     80105f70 <sys_sleep+0x40>
+80105f9d:	83 ec 0c             	sub    $0xc,%esp
+80105fa0:	68 60 5c 11 80       	push   $0x80115c60
+80105fa5:	e8 16 ee ff ff       	call   80104dc0 <release>
+80105faa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105fad:	83 c4 10             	add    $0x10,%esp
+80105fb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105fb5:	c9                   	leave  
+80105fb6:	c3                   	ret    
+80105fb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105fbe:	66 90                	xchg   %ax,%ax
+80105fc0:	83 ec 0c             	sub    $0xc,%esp
+80105fc3:	68 60 5c 11 80       	push   $0x80115c60
+80105fc8:	e8 f3 ed ff ff       	call   80104dc0 <release>
+80105fcd:	83 c4 10             	add    $0x10,%esp
+80105fd0:	31 c0                	xor    %eax,%eax
+80105fd2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105fd5:	c9                   	leave  
+80105fd6:	c3                   	ret    
+80105fd7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105fdc:	eb f4                	jmp    80105fd2 <sys_sleep+0xa2>
+80105fde:	66 90                	xchg   %ax,%ax
+
+80105fe0 <sys_uptime>:
+80105fe0:	f3 0f 1e fb          	endbr32 
+80105fe4:	55                   	push   %ebp
+80105fe5:	89 e5                	mov    %esp,%ebp
+80105fe7:	53                   	push   %ebx
+80105fe8:	83 ec 10             	sub    $0x10,%esp
+80105feb:	68 60 5c 11 80       	push   $0x80115c60
+80105ff0:	e8 0b ed ff ff       	call   80104d00 <acquire>
+80105ff5:	8b 1d a0 64 11 80    	mov    0x801164a0,%ebx
+80105ffb:	c7 04 24 60 5c 11 80 	movl   $0x80115c60,(%esp)
+80106002:	e8 b9 ed ff ff       	call   80104dc0 <release>
+80106007:	89 d8                	mov    %ebx,%eax
+80106009:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010600c:	c9                   	leave  
+8010600d:	c3                   	ret    
+8010600e:	66 90                	xchg   %ax,%ax
+
+80106010 <sys_getNumProc>:
+80106010:	f3 0f 1e fb          	endbr32 
+80106014:	e9 57 e7 ff ff       	jmp    80104770 <getNumProc_system>
+80106019:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106020 <sys_getMaxPID>:
+80106020:	f3 0f 1e fb          	endbr32 
+80106024:	e9 97 e7 ff ff       	jmp    801047c0 <getMaxPID_system>
+80106029:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106030 <sys_getProcInfo>:
+80106030:	f3 0f 1e fb          	endbr32 
+80106034:	55                   	push   %ebp
+80106035:	89 e5                	mov    %esp,%ebp
+80106037:	83 ec 2c             	sub    $0x2c,%esp
+8010603a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+8010603d:	6a 04                	push   $0x4
+8010603f:	50                   	push   %eax
+80106040:	6a 00                	push   $0x0
+80106042:	e8 f9 f0 ff ff       	call   80105140 <argptr>
+80106047:	83 c4 0c             	add    $0xc,%esp
+8010604a:	8d 45 e8             	lea    -0x18(%ebp),%eax
+8010604d:	6a 04                	push   $0x4
+8010604f:	50                   	push   %eax
+80106050:	6a 01                	push   $0x1
+80106052:	e8 e9 f0 ff ff       	call   80105140 <argptr>
+80106057:	8d 45 ec             	lea    -0x14(%ebp),%eax
+8010605a:	5a                   	pop    %edx
+8010605b:	59                   	pop    %ecx
+8010605c:	ff 75 e4             	pushl  -0x1c(%ebp)
+8010605f:	50                   	push   %eax
+80106060:	e8 ab e7 ff ff       	call   80104810 <getProcInfo_system>
+80106065:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80106068:	83 c4 0c             	add    $0xc,%esp
+8010606b:	83 f8 ff             	cmp    $0xffffffff,%eax
+8010606e:	74 16                	je     80106086 <sys_getProcInfo+0x56>
+80106070:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80106073:	89 02                	mov    %eax,(%edx)
+80106075:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80106078:	8b 45 e8             	mov    -0x18(%ebp),%eax
+8010607b:	89 50 04             	mov    %edx,0x4(%eax)
+8010607e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80106081:	89 50 08             	mov    %edx,0x8(%eax)
+80106084:	31 c0                	xor    %eax,%eax
+80106086:	c9                   	leave  
+80106087:	c3                   	ret    
+80106088:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010608f:	90                   	nop
+
+80106090 <sys_set_burst_time>:
+80106090:	f3 0f 1e fb          	endbr32 
+80106094:	55                   	push   %ebp
+80106095:	89 e5                	mov    %esp,%ebp
+80106097:	83 ec 1c             	sub    $0x1c,%esp
+8010609a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010609d:	6a 04                	push   $0x4
+8010609f:	50                   	push   %eax
+801060a0:	6a 00                	push   $0x0
+801060a2:	e8 99 f0 ff ff       	call   80105140 <argptr>
+801060a7:	58                   	pop    %eax
+801060a8:	ff 75 f4             	pushl  -0xc(%ebp)
+801060ab:	e8 10 e8 ff ff       	call   801048c0 <set_burst_time_system>
+801060b0:	c9                   	leave  
+801060b1:	c3                   	ret    
+801060b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801060c0 <sys_get_burst_time>:
+801060c0:	f3 0f 1e fb          	endbr32 
+801060c4:	e9 37 e8 ff ff       	jmp    80104900 <get_burst_time_system>
+801060c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801060d0 <sys_getCurrentInfo>:
+801060d0:	f3 0f 1e fb          	endbr32 
+801060d4:	55                   	push   %ebp
+801060d5:	89 e5                	mov    %esp,%ebp
+801060d7:	83 ec 1c             	sub    $0x1c,%esp
+801060da:	8d 45 e8             	lea    -0x18(%ebp),%eax
+801060dd:	6a 04                	push   $0x4
+801060df:	50                   	push   %eax
+801060e0:	6a 00                	push   $0x0
+801060e2:	e8 59 f0 ff ff       	call   80105140 <argptr>
+801060e7:	8d 45 ec             	lea    -0x14(%ebp),%eax
+801060ea:	89 04 24             	mov    %eax,(%esp)
+801060ed:	e8 3e e8 ff ff       	call   80104930 <getCurrentInfo_system>
+801060f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801060f5:	83 c4 0c             	add    $0xc,%esp
+801060f8:	83 f8 ff             	cmp    $0xffffffff,%eax
+801060fb:	74 16                	je     80106113 <sys_getCurrentInfo+0x43>
+801060fd:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80106100:	89 02                	mov    %eax,(%edx)
+80106102:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80106105:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80106108:	89 50 04             	mov    %edx,0x4(%eax)
+8010610b:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010610e:	89 50 08             	mov    %edx,0x8(%eax)
+80106111:	31 c0                	xor    %eax,%eax
+80106113:	c9                   	leave  
+80106114:	c3                   	ret    
+80106115:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010611c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106120 <sys_getCurrentPID>:
+80106120:	f3 0f 1e fb          	endbr32 
+80106124:	e9 c7 e8 ff ff       	jmp    801049f0 <getCurrentPID_system>
+
+80106129 <alltraps>:
+80106129:	1e                   	push   %ds
+8010612a:	06                   	push   %es
+8010612b:	0f a0                	push   %fs
+8010612d:	0f a8                	push   %gs
+8010612f:	60                   	pusha  
+80106130:	66 b8 10 00          	mov    $0x10,%ax
+80106134:	8e d8                	mov    %eax,%ds
+80106136:	8e c0                	mov    %eax,%es
+80106138:	54                   	push   %esp
+80106139:	e8 c2 00 00 00       	call   80106200 <trap>
+8010613e:	83 c4 04             	add    $0x4,%esp
+
+80106141 <trapret>:
+80106141:	61                   	popa   
+80106142:	0f a9                	pop    %gs
+80106144:	0f a1                	pop    %fs
+80106146:	07                   	pop    %es
+80106147:	1f                   	pop    %ds
+80106148:	83 c4 08             	add    $0x8,%esp
+8010614b:	cf                   	iret   
+8010614c:	66 90                	xchg   %ax,%ax
+8010614e:	66 90                	xchg   %ax,%ax
+
+80106150 <tvinit>:
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+80106150:	f3 0f 1e fb          	endbr32 
+80106154:	55                   	push   %ebp
+  int i;
+
+  for(i = 0; i < 256; i++)
+80106155:	31 c0                	xor    %eax,%eax
+{
+80106157:	89 e5                	mov    %esp,%ebp
+80106159:	83 ec 08             	sub    $0x8,%esp
+8010615c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+80106160:	8b 14 85 08 b0 10 80 	mov    -0x7fef4ff8(,%eax,4),%edx
+80106167:	c7 04 c5 a2 5c 11 80 	movl   $0x8e000008,-0x7feea35e(,%eax,8)
+8010616e:	08 00 00 8e 
+80106172:	66 89 14 c5 a0 5c 11 	mov    %dx,-0x7feea360(,%eax,8)
+80106179:	80 
+8010617a:	c1 ea 10             	shr    $0x10,%edx
+8010617d:	66 89 14 c5 a6 5c 11 	mov    %dx,-0x7feea35a(,%eax,8)
+80106184:	80 
+  for(i = 0; i < 256; i++)
+80106185:	83 c0 01             	add    $0x1,%eax
+80106188:	3d 00 01 00 00       	cmp    $0x100,%eax
+8010618d:	75 d1                	jne    80106160 <tvinit+0x10>
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+
+  initlock(&tickslock, "time");
+8010618f:	83 ec 08             	sub    $0x8,%esp
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80106192:	a1 08 b1 10 80       	mov    0x8010b108,%eax
+80106197:	c7 05 a2 5e 11 80 08 	movl   $0xef000008,0x80115ea2
+8010619e:	00 00 ef 
+  initlock(&tickslock, "time");
+801061a1:	68 39 81 10 80       	push   $0x80108139
+801061a6:	68 60 5c 11 80       	push   $0x80115c60
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+801061ab:	66 a3 a0 5e 11 80    	mov    %ax,0x80115ea0
+801061b1:	c1 e8 10             	shr    $0x10,%eax
+801061b4:	66 a3 a6 5e 11 80    	mov    %ax,0x80115ea6
+  initlock(&tickslock, "time");
+801061ba:	e8 c1 e9 ff ff       	call   80104b80 <initlock>
+}
+801061bf:	83 c4 10             	add    $0x10,%esp
+801061c2:	c9                   	leave  
+801061c3:	c3                   	ret    
+801061c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801061cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801061cf:	90                   	nop
+
+801061d0 <idtinit>:
+
+void
+idtinit(void)
+{
+801061d0:	f3 0f 1e fb          	endbr32 
+801061d4:	55                   	push   %ebp
+  pd[0] = size-1;
+801061d5:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+801061da:	89 e5                	mov    %esp,%ebp
+801061dc:	83 ec 10             	sub    $0x10,%esp
+801061df:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+801061e3:	b8 a0 5c 11 80       	mov    $0x80115ca0,%eax
+801061e8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+801061ec:	c1 e8 10             	shr    $0x10,%eax
+801061ef:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+  asm volatile("lidt (%0)" : : "r" (pd));
+801061f3:	8d 45 fa             	lea    -0x6(%ebp),%eax
+801061f6:	0f 01 18             	lidtl  (%eax)
+  lidt(idt, sizeof(idt));
+}
+801061f9:	c9                   	leave  
+801061fa:	c3                   	ret    
+801061fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801061ff:	90                   	nop
+
+80106200 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+80106200:	f3 0f 1e fb          	endbr32 
+80106204:	55                   	push   %ebp
+80106205:	89 e5                	mov    %esp,%ebp
+80106207:	57                   	push   %edi
+80106208:	56                   	push   %esi
+80106209:	53                   	push   %ebx
+8010620a:	83 ec 1c             	sub    $0x1c,%esp
+8010620d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(tf->trapno == T_SYSCALL){
+80106210:	8b 43 30             	mov    0x30(%ebx),%eax
+80106213:	83 f8 40             	cmp    $0x40,%eax
+80106216:	0f 84 94 01 00 00    	je     801063b0 <trap+0x1b0>
+    if(myproc()->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+8010621c:	83 e8 20             	sub    $0x20,%eax
+8010621f:	83 f8 1f             	cmp    $0x1f,%eax
+80106222:	77 08                	ja     8010622c <trap+0x2c>
+80106224:	3e ff 24 85 e0 81 10 	notrack jmp *-0x7fef7e20(,%eax,4)
+8010622b:	80 
+    lapiceoi();
+    break;
+
+  //PAGEBREAK: 13
+  default:
+    if(myproc() == 0 || (tf->cs&3) == 0){
+8010622c:	e8 3f db ff ff       	call   80103d70 <myproc>
+80106231:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106234:	85 c0                	test   %eax,%eax
+80106236:	0f 84 c3 01 00 00    	je     801063ff <trap+0x1ff>
+8010623c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80106240:	0f 84 b9 01 00 00    	je     801063ff <trap+0x1ff>
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+80106246:	0f 20 d1             	mov    %cr2,%ecx
+80106249:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010624c:	e8 ff da ff ff       	call   80103d50 <cpuid>
+80106251:	8b 73 30             	mov    0x30(%ebx),%esi
+80106254:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80106257:	8b 43 34             	mov    0x34(%ebx),%eax
+8010625a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+8010625d:	e8 0e db ff ff       	call   80103d70 <myproc>
+80106262:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106265:	e8 06 db ff ff       	call   80103d70 <myproc>
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010626a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+8010626d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80106270:	51                   	push   %ecx
+80106271:	57                   	push   %edi
+80106272:	52                   	push   %edx
+80106273:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106276:	56                   	push   %esi
+            myproc()->pid, myproc()->name, tf->trapno,
+80106277:	8b 75 e0             	mov    -0x20(%ebp),%esi
+8010627a:	83 c6 6c             	add    $0x6c,%esi
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010627d:	56                   	push   %esi
+8010627e:	ff 70 10             	pushl  0x10(%eax)
+80106281:	68 9c 81 10 80       	push   $0x8010819c
+80106286:	e8 25 a4 ff ff       	call   801006b0 <cprintf>
+            tf->err, cpuid(), tf->eip, rcr2());
+    myproc()->killed = 1;
+8010628b:	83 c4 20             	add    $0x20,%esp
+8010628e:	e8 dd da ff ff       	call   80103d70 <myproc>
+80106293:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+8010629a:	e8 d1 da ff ff       	call   80103d70 <myproc>
+8010629f:	85 c0                	test   %eax,%eax
+801062a1:	74 1d                	je     801062c0 <trap+0xc0>
+801062a3:	e8 c8 da ff ff       	call   80103d70 <myproc>
+801062a8:	8b 50 24             	mov    0x24(%eax),%edx
+801062ab:	85 d2                	test   %edx,%edx
+801062ad:	74 11                	je     801062c0 <trap+0xc0>
+801062af:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801062b3:	83 e0 03             	and    $0x3,%eax
+801062b6:	66 83 f8 03          	cmp    $0x3,%ax
+801062ba:	0f 84 28 01 00 00    	je     801063e8 <trap+0x1e8>
+  //    tf->trapno == T_IRQ0+IRQ_TIMER){
+          // yield();
+    //  }
+
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+801062c0:	e8 ab da ff ff       	call   80103d70 <myproc>
+801062c5:	85 c0                	test   %eax,%eax
+801062c7:	74 1d                	je     801062e6 <trap+0xe6>
+801062c9:	e8 a2 da ff ff       	call   80103d70 <myproc>
+801062ce:	8b 40 24             	mov    0x24(%eax),%eax
+801062d1:	85 c0                	test   %eax,%eax
+801062d3:	74 11                	je     801062e6 <trap+0xe6>
+801062d5:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801062d9:	83 e0 03             	and    $0x3,%eax
+801062dc:	66 83 f8 03          	cmp    $0x3,%ax
+801062e0:	0f 84 f3 00 00 00    	je     801063d9 <trap+0x1d9>
+    exit();
+}
+801062e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801062e9:	5b                   	pop    %ebx
+801062ea:	5e                   	pop    %esi
+801062eb:	5f                   	pop    %edi
+801062ec:	5d                   	pop    %ebp
+801062ed:	c3                   	ret    
+    ideintr();
+801062ee:	e8 ed be ff ff       	call   801021e0 <ideintr>
+    lapiceoi();
+801062f3:	e8 c8 c5 ff ff       	call   801028c0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+801062f8:	e8 73 da ff ff       	call   80103d70 <myproc>
+801062fd:	85 c0                	test   %eax,%eax
+801062ff:	75 a2                	jne    801062a3 <trap+0xa3>
+80106301:	eb bd                	jmp    801062c0 <trap+0xc0>
+    if(cpuid() == 0){
+80106303:	e8 48 da ff ff       	call   80103d50 <cpuid>
+80106308:	85 c0                	test   %eax,%eax
+8010630a:	75 e7                	jne    801062f3 <trap+0xf3>
+      acquire(&tickslock);
+8010630c:	83 ec 0c             	sub    $0xc,%esp
+8010630f:	68 60 5c 11 80       	push   $0x80115c60
+80106314:	e8 e7 e9 ff ff       	call   80104d00 <acquire>
+      wakeup(&ticks);
+80106319:	c7 04 24 a0 64 11 80 	movl   $0x801164a0,(%esp)
+      ticks++;
+80106320:	83 05 a0 64 11 80 01 	addl   $0x1,0x801164a0
+      wakeup(&ticks);
+80106327:	e8 84 e2 ff ff       	call   801045b0 <wakeup>
+      release(&tickslock);
+8010632c:	c7 04 24 60 5c 11 80 	movl   $0x80115c60,(%esp)
+80106333:	e8 88 ea ff ff       	call   80104dc0 <release>
+80106338:	83 c4 10             	add    $0x10,%esp
+    lapiceoi();
+8010633b:	eb b6                	jmp    801062f3 <trap+0xf3>
+    kbdintr();
+8010633d:	e8 3e c4 ff ff       	call   80102780 <kbdintr>
+    lapiceoi();
+80106342:	e8 79 c5 ff ff       	call   801028c0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106347:	e8 24 da ff ff       	call   80103d70 <myproc>
+8010634c:	85 c0                	test   %eax,%eax
+8010634e:	0f 85 4f ff ff ff    	jne    801062a3 <trap+0xa3>
+80106354:	e9 67 ff ff ff       	jmp    801062c0 <trap+0xc0>
+    uartintr();
+80106359:	e8 42 02 00 00       	call   801065a0 <uartintr>
+    lapiceoi();
+8010635e:	e8 5d c5 ff ff       	call   801028c0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106363:	e8 08 da ff ff       	call   80103d70 <myproc>
+80106368:	85 c0                	test   %eax,%eax
+8010636a:	0f 85 33 ff ff ff    	jne    801062a3 <trap+0xa3>
+80106370:	e9 4b ff ff ff       	jmp    801062c0 <trap+0xc0>
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80106375:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106378:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+8010637c:	e8 cf d9 ff ff       	call   80103d50 <cpuid>
+80106381:	57                   	push   %edi
+80106382:	56                   	push   %esi
+80106383:	50                   	push   %eax
+80106384:	68 44 81 10 80       	push   $0x80108144
+80106389:	e8 22 a3 ff ff       	call   801006b0 <cprintf>
+    lapiceoi();
+8010638e:	e8 2d c5 ff ff       	call   801028c0 <lapiceoi>
+    break;
+80106393:	83 c4 10             	add    $0x10,%esp
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106396:	e8 d5 d9 ff ff       	call   80103d70 <myproc>
+8010639b:	85 c0                	test   %eax,%eax
+8010639d:	0f 85 00 ff ff ff    	jne    801062a3 <trap+0xa3>
+801063a3:	e9 18 ff ff ff       	jmp    801062c0 <trap+0xc0>
+801063a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801063af:	90                   	nop
+    if(myproc()->killed)
+801063b0:	e8 bb d9 ff ff       	call   80103d70 <myproc>
+801063b5:	8b 70 24             	mov    0x24(%eax),%esi
+801063b8:	85 f6                	test   %esi,%esi
+801063ba:	75 3c                	jne    801063f8 <trap+0x1f8>
+    myproc()->tf = tf;
+801063bc:	e8 af d9 ff ff       	call   80103d70 <myproc>
+801063c1:	89 58 18             	mov    %ebx,0x18(%eax)
+    syscall();
+801063c4:	e8 17 ee ff ff       	call   801051e0 <syscall>
+    if(myproc()->killed)
+801063c9:	e8 a2 d9 ff ff       	call   80103d70 <myproc>
+801063ce:	8b 48 24             	mov    0x24(%eax),%ecx
+801063d1:	85 c9                	test   %ecx,%ecx
+801063d3:	0f 84 0d ff ff ff    	je     801062e6 <trap+0xe6>
+}
+801063d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801063dc:	5b                   	pop    %ebx
+801063dd:	5e                   	pop    %esi
+801063de:	5f                   	pop    %edi
+801063df:	5d                   	pop    %ebp
+      exit();
+801063e0:	e9 1b de ff ff       	jmp    80104200 <exit>
+801063e5:	8d 76 00             	lea    0x0(%esi),%esi
+    exit();
+801063e8:	e8 13 de ff ff       	call   80104200 <exit>
+801063ed:	e9 ce fe ff ff       	jmp    801062c0 <trap+0xc0>
+801063f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      exit();
+801063f8:	e8 03 de ff ff       	call   80104200 <exit>
+801063fd:	eb bd                	jmp    801063bc <trap+0x1bc>
+801063ff:	0f 20 d6             	mov    %cr2,%esi
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+80106402:	e8 49 d9 ff ff       	call   80103d50 <cpuid>
+80106407:	83 ec 0c             	sub    $0xc,%esp
+8010640a:	56                   	push   %esi
+8010640b:	57                   	push   %edi
+8010640c:	50                   	push   %eax
+8010640d:	ff 73 30             	pushl  0x30(%ebx)
+80106410:	68 68 81 10 80       	push   $0x80108168
+80106415:	e8 96 a2 ff ff       	call   801006b0 <cprintf>
+      panic("trap");
+8010641a:	83 c4 14             	add    $0x14,%esp
+8010641d:	68 3e 81 10 80       	push   $0x8010813e
+80106422:	e8 69 9f ff ff       	call   80100390 <panic>
+80106427:	66 90                	xchg   %ax,%ax
+80106429:	66 90                	xchg   %ax,%ax
+8010642b:	66 90                	xchg   %ax,%ax
+8010642d:	66 90                	xchg   %ax,%ax
+8010642f:	90                   	nop
+
+80106430 <uartgetc>:
+80106430:	f3 0f 1e fb          	endbr32 
+80106434:	a1 bc b5 10 80       	mov    0x8010b5bc,%eax
+80106439:	85 c0                	test   %eax,%eax
+8010643b:	74 1b                	je     80106458 <uartgetc+0x28>
+8010643d:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106442:	ec                   	in     (%dx),%al
+80106443:	a8 01                	test   $0x1,%al
+80106445:	74 11                	je     80106458 <uartgetc+0x28>
+80106447:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010644c:	ec                   	in     (%dx),%al
+8010644d:	0f b6 c0             	movzbl %al,%eax
+80106450:	c3                   	ret    
+80106451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106458:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010645d:	c3                   	ret    
+8010645e:	66 90                	xchg   %ax,%ax
+
+80106460 <uartputc.part.0>:
+80106460:	55                   	push   %ebp
+80106461:	89 e5                	mov    %esp,%ebp
+80106463:	57                   	push   %edi
+80106464:	89 c7                	mov    %eax,%edi
+80106466:	56                   	push   %esi
+80106467:	be fd 03 00 00       	mov    $0x3fd,%esi
+8010646c:	53                   	push   %ebx
+8010646d:	bb 80 00 00 00       	mov    $0x80,%ebx
+80106472:	83 ec 0c             	sub    $0xc,%esp
+80106475:	eb 1b                	jmp    80106492 <uartputc.part.0+0x32>
+80106477:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010647e:	66 90                	xchg   %ax,%ax
+80106480:	83 ec 0c             	sub    $0xc,%esp
+80106483:	6a 0a                	push   $0xa
+80106485:	e8 56 c4 ff ff       	call   801028e0 <microdelay>
+8010648a:	83 c4 10             	add    $0x10,%esp
+8010648d:	83 eb 01             	sub    $0x1,%ebx
+80106490:	74 07                	je     80106499 <uartputc.part.0+0x39>
+80106492:	89 f2                	mov    %esi,%edx
+80106494:	ec                   	in     (%dx),%al
+80106495:	a8 20                	test   $0x20,%al
+80106497:	74 e7                	je     80106480 <uartputc.part.0+0x20>
+80106499:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010649e:	89 f8                	mov    %edi,%eax
+801064a0:	ee                   	out    %al,(%dx)
+801064a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801064a4:	5b                   	pop    %ebx
+801064a5:	5e                   	pop    %esi
+801064a6:	5f                   	pop    %edi
+801064a7:	5d                   	pop    %ebp
+801064a8:	c3                   	ret    
+801064a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801064b0 <uartinit>:
+801064b0:	f3 0f 1e fb          	endbr32 
+801064b4:	55                   	push   %ebp
+801064b5:	31 c9                	xor    %ecx,%ecx
+801064b7:	89 c8                	mov    %ecx,%eax
+801064b9:	89 e5                	mov    %esp,%ebp
+801064bb:	57                   	push   %edi
+801064bc:	56                   	push   %esi
+801064bd:	53                   	push   %ebx
+801064be:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+801064c3:	89 da                	mov    %ebx,%edx
+801064c5:	83 ec 0c             	sub    $0xc,%esp
+801064c8:	ee                   	out    %al,(%dx)
+801064c9:	bf fb 03 00 00       	mov    $0x3fb,%edi
+801064ce:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+801064d3:	89 fa                	mov    %edi,%edx
+801064d5:	ee                   	out    %al,(%dx)
+801064d6:	b8 0c 00 00 00       	mov    $0xc,%eax
+801064db:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801064e0:	ee                   	out    %al,(%dx)
+801064e1:	be f9 03 00 00       	mov    $0x3f9,%esi
+801064e6:	89 c8                	mov    %ecx,%eax
+801064e8:	89 f2                	mov    %esi,%edx
+801064ea:	ee                   	out    %al,(%dx)
+801064eb:	b8 03 00 00 00       	mov    $0x3,%eax
+801064f0:	89 fa                	mov    %edi,%edx
+801064f2:	ee                   	out    %al,(%dx)
+801064f3:	ba fc 03 00 00       	mov    $0x3fc,%edx
+801064f8:	89 c8                	mov    %ecx,%eax
+801064fa:	ee                   	out    %al,(%dx)
+801064fb:	b8 01 00 00 00       	mov    $0x1,%eax
+80106500:	89 f2                	mov    %esi,%edx
+80106502:	ee                   	out    %al,(%dx)
+80106503:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106508:	ec                   	in     (%dx),%al
+80106509:	3c ff                	cmp    $0xff,%al
+8010650b:	74 52                	je     8010655f <uartinit+0xaf>
+8010650d:	c7 05 bc b5 10 80 01 	movl   $0x1,0x8010b5bc
+80106514:	00 00 00 
+80106517:	89 da                	mov    %ebx,%edx
+80106519:	ec                   	in     (%dx),%al
+8010651a:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010651f:	ec                   	in     (%dx),%al
+80106520:	83 ec 08             	sub    $0x8,%esp
+80106523:	be 76 00 00 00       	mov    $0x76,%esi
+80106528:	bb 60 82 10 80       	mov    $0x80108260,%ebx
+8010652d:	6a 00                	push   $0x0
+8010652f:	6a 04                	push   $0x4
+80106531:	e8 fa be ff ff       	call   80102430 <ioapicenable>
+80106536:	83 c4 10             	add    $0x10,%esp
+80106539:	b8 78 00 00 00       	mov    $0x78,%eax
+8010653e:	eb 04                	jmp    80106544 <uartinit+0x94>
+80106540:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+80106544:	8b 15 bc b5 10 80    	mov    0x8010b5bc,%edx
+8010654a:	85 d2                	test   %edx,%edx
+8010654c:	74 08                	je     80106556 <uartinit+0xa6>
+8010654e:	0f be c0             	movsbl %al,%eax
+80106551:	e8 0a ff ff ff       	call   80106460 <uartputc.part.0>
+80106556:	89 f0                	mov    %esi,%eax
+80106558:	83 c3 01             	add    $0x1,%ebx
+8010655b:	84 c0                	test   %al,%al
+8010655d:	75 e1                	jne    80106540 <uartinit+0x90>
+8010655f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106562:	5b                   	pop    %ebx
+80106563:	5e                   	pop    %esi
+80106564:	5f                   	pop    %edi
+80106565:	5d                   	pop    %ebp
+80106566:	c3                   	ret    
+80106567:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010656e:	66 90                	xchg   %ax,%ax
+
+80106570 <uartputc>:
+80106570:	f3 0f 1e fb          	endbr32 
+80106574:	55                   	push   %ebp
+80106575:	8b 15 bc b5 10 80    	mov    0x8010b5bc,%edx
+8010657b:	89 e5                	mov    %esp,%ebp
+8010657d:	8b 45 08             	mov    0x8(%ebp),%eax
+80106580:	85 d2                	test   %edx,%edx
+80106582:	74 0c                	je     80106590 <uartputc+0x20>
+80106584:	5d                   	pop    %ebp
+80106585:	e9 d6 fe ff ff       	jmp    80106460 <uartputc.part.0>
+8010658a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106590:	5d                   	pop    %ebp
+80106591:	c3                   	ret    
+80106592:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106599:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801065a0 <uartintr>:
+801065a0:	f3 0f 1e fb          	endbr32 
+801065a4:	55                   	push   %ebp
+801065a5:	89 e5                	mov    %esp,%ebp
+801065a7:	83 ec 14             	sub    $0x14,%esp
+801065aa:	68 30 64 10 80       	push   $0x80106430
+801065af:	e8 ac a2 ff ff       	call   80100860 <consoleintr>
+801065b4:	83 c4 10             	add    $0x10,%esp
+801065b7:	c9                   	leave  
+801065b8:	c3                   	ret    
+
+801065b9 <vector0>:
+801065b9:	6a 00                	push   $0x0
+801065bb:	6a 00                	push   $0x0
+801065bd:	e9 67 fb ff ff       	jmp    80106129 <alltraps>
+
+801065c2 <vector1>:
+801065c2:	6a 00                	push   $0x0
+801065c4:	6a 01                	push   $0x1
+801065c6:	e9 5e fb ff ff       	jmp    80106129 <alltraps>
+
+801065cb <vector2>:
+801065cb:	6a 00                	push   $0x0
+801065cd:	6a 02                	push   $0x2
+801065cf:	e9 55 fb ff ff       	jmp    80106129 <alltraps>
+
+801065d4 <vector3>:
+801065d4:	6a 00                	push   $0x0
+801065d6:	6a 03                	push   $0x3
+801065d8:	e9 4c fb ff ff       	jmp    80106129 <alltraps>
+
+801065dd <vector4>:
+801065dd:	6a 00                	push   $0x0
+801065df:	6a 04                	push   $0x4
+801065e1:	e9 43 fb ff ff       	jmp    80106129 <alltraps>
+
+801065e6 <vector5>:
+801065e6:	6a 00                	push   $0x0
+801065e8:	6a 05                	push   $0x5
+801065ea:	e9 3a fb ff ff       	jmp    80106129 <alltraps>
+
+801065ef <vector6>:
+801065ef:	6a 00                	push   $0x0
+801065f1:	6a 06                	push   $0x6
+801065f3:	e9 31 fb ff ff       	jmp    80106129 <alltraps>
+
+801065f8 <vector7>:
+801065f8:	6a 00                	push   $0x0
+801065fa:	6a 07                	push   $0x7
+801065fc:	e9 28 fb ff ff       	jmp    80106129 <alltraps>
+
+80106601 <vector8>:
+80106601:	6a 08                	push   $0x8
+80106603:	e9 21 fb ff ff       	jmp    80106129 <alltraps>
+
+80106608 <vector9>:
+80106608:	6a 00                	push   $0x0
+8010660a:	6a 09                	push   $0x9
+8010660c:	e9 18 fb ff ff       	jmp    80106129 <alltraps>
+
+80106611 <vector10>:
+80106611:	6a 0a                	push   $0xa
+80106613:	e9 11 fb ff ff       	jmp    80106129 <alltraps>
+
+80106618 <vector11>:
+80106618:	6a 0b                	push   $0xb
+8010661a:	e9 0a fb ff ff       	jmp    80106129 <alltraps>
+
+8010661f <vector12>:
+8010661f:	6a 0c                	push   $0xc
+80106621:	e9 03 fb ff ff       	jmp    80106129 <alltraps>
+
+80106626 <vector13>:
+80106626:	6a 0d                	push   $0xd
+80106628:	e9 fc fa ff ff       	jmp    80106129 <alltraps>
+
+8010662d <vector14>:
+8010662d:	6a 0e                	push   $0xe
+8010662f:	e9 f5 fa ff ff       	jmp    80106129 <alltraps>
+
+80106634 <vector15>:
+80106634:	6a 00                	push   $0x0
+80106636:	6a 0f                	push   $0xf
+80106638:	e9 ec fa ff ff       	jmp    80106129 <alltraps>
+
+8010663d <vector16>:
+8010663d:	6a 00                	push   $0x0
+8010663f:	6a 10                	push   $0x10
+80106641:	e9 e3 fa ff ff       	jmp    80106129 <alltraps>
+
+80106646 <vector17>:
+80106646:	6a 11                	push   $0x11
+80106648:	e9 dc fa ff ff       	jmp    80106129 <alltraps>
+
+8010664d <vector18>:
+8010664d:	6a 00                	push   $0x0
+8010664f:	6a 12                	push   $0x12
+80106651:	e9 d3 fa ff ff       	jmp    80106129 <alltraps>
+
+80106656 <vector19>:
+80106656:	6a 00                	push   $0x0
+80106658:	6a 13                	push   $0x13
+8010665a:	e9 ca fa ff ff       	jmp    80106129 <alltraps>
+
+8010665f <vector20>:
+8010665f:	6a 00                	push   $0x0
+80106661:	6a 14                	push   $0x14
+80106663:	e9 c1 fa ff ff       	jmp    80106129 <alltraps>
+
+80106668 <vector21>:
+80106668:	6a 00                	push   $0x0
+8010666a:	6a 15                	push   $0x15
+8010666c:	e9 b8 fa ff ff       	jmp    80106129 <alltraps>
+
+80106671 <vector22>:
+80106671:	6a 00                	push   $0x0
+80106673:	6a 16                	push   $0x16
+80106675:	e9 af fa ff ff       	jmp    80106129 <alltraps>
+
+8010667a <vector23>:
+8010667a:	6a 00                	push   $0x0
+8010667c:	6a 17                	push   $0x17
+8010667e:	e9 a6 fa ff ff       	jmp    80106129 <alltraps>
+
+80106683 <vector24>:
+80106683:	6a 00                	push   $0x0
+80106685:	6a 18                	push   $0x18
+80106687:	e9 9d fa ff ff       	jmp    80106129 <alltraps>
+
+8010668c <vector25>:
+8010668c:	6a 00                	push   $0x0
+8010668e:	6a 19                	push   $0x19
+80106690:	e9 94 fa ff ff       	jmp    80106129 <alltraps>
+
+80106695 <vector26>:
+80106695:	6a 00                	push   $0x0
+80106697:	6a 1a                	push   $0x1a
+80106699:	e9 8b fa ff ff       	jmp    80106129 <alltraps>
+
+8010669e <vector27>:
+8010669e:	6a 00                	push   $0x0
+801066a0:	6a 1b                	push   $0x1b
+801066a2:	e9 82 fa ff ff       	jmp    80106129 <alltraps>
+
+801066a7 <vector28>:
+801066a7:	6a 00                	push   $0x0
+801066a9:	6a 1c                	push   $0x1c
+801066ab:	e9 79 fa ff ff       	jmp    80106129 <alltraps>
+
+801066b0 <vector29>:
+801066b0:	6a 00                	push   $0x0
+801066b2:	6a 1d                	push   $0x1d
+801066b4:	e9 70 fa ff ff       	jmp    80106129 <alltraps>
+
+801066b9 <vector30>:
+801066b9:	6a 00                	push   $0x0
+801066bb:	6a 1e                	push   $0x1e
+801066bd:	e9 67 fa ff ff       	jmp    80106129 <alltraps>
+
+801066c2 <vector31>:
+801066c2:	6a 00                	push   $0x0
+801066c4:	6a 1f                	push   $0x1f
+801066c6:	e9 5e fa ff ff       	jmp    80106129 <alltraps>
+
+801066cb <vector32>:
+801066cb:	6a 00                	push   $0x0
+801066cd:	6a 20                	push   $0x20
+801066cf:	e9 55 fa ff ff       	jmp    80106129 <alltraps>
+
+801066d4 <vector33>:
+801066d4:	6a 00                	push   $0x0
+801066d6:	6a 21                	push   $0x21
+801066d8:	e9 4c fa ff ff       	jmp    80106129 <alltraps>
+
+801066dd <vector34>:
+801066dd:	6a 00                	push   $0x0
+801066df:	6a 22                	push   $0x22
+801066e1:	e9 43 fa ff ff       	jmp    80106129 <alltraps>
+
+801066e6 <vector35>:
+801066e6:	6a 00                	push   $0x0
+801066e8:	6a 23                	push   $0x23
+801066ea:	e9 3a fa ff ff       	jmp    80106129 <alltraps>
+
+801066ef <vector36>:
+801066ef:	6a 00                	push   $0x0
+801066f1:	6a 24                	push   $0x24
+801066f3:	e9 31 fa ff ff       	jmp    80106129 <alltraps>
+
+801066f8 <vector37>:
+801066f8:	6a 00                	push   $0x0
+801066fa:	6a 25                	push   $0x25
+801066fc:	e9 28 fa ff ff       	jmp    80106129 <alltraps>
+
+80106701 <vector38>:
+80106701:	6a 00                	push   $0x0
+80106703:	6a 26                	push   $0x26
+80106705:	e9 1f fa ff ff       	jmp    80106129 <alltraps>
+
+8010670a <vector39>:
+8010670a:	6a 00                	push   $0x0
+8010670c:	6a 27                	push   $0x27
+8010670e:	e9 16 fa ff ff       	jmp    80106129 <alltraps>
+
+80106713 <vector40>:
+80106713:	6a 00                	push   $0x0
+80106715:	6a 28                	push   $0x28
+80106717:	e9 0d fa ff ff       	jmp    80106129 <alltraps>
+
+8010671c <vector41>:
+8010671c:	6a 00                	push   $0x0
+8010671e:	6a 29                	push   $0x29
+80106720:	e9 04 fa ff ff       	jmp    80106129 <alltraps>
+
+80106725 <vector42>:
+80106725:	6a 00                	push   $0x0
+80106727:	6a 2a                	push   $0x2a
+80106729:	e9 fb f9 ff ff       	jmp    80106129 <alltraps>
+
+8010672e <vector43>:
+8010672e:	6a 00                	push   $0x0
+80106730:	6a 2b                	push   $0x2b
+80106732:	e9 f2 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106737 <vector44>:
+80106737:	6a 00                	push   $0x0
+80106739:	6a 2c                	push   $0x2c
+8010673b:	e9 e9 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106740 <vector45>:
+80106740:	6a 00                	push   $0x0
+80106742:	6a 2d                	push   $0x2d
+80106744:	e9 e0 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106749 <vector46>:
+80106749:	6a 00                	push   $0x0
+8010674b:	6a 2e                	push   $0x2e
+8010674d:	e9 d7 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106752 <vector47>:
+80106752:	6a 00                	push   $0x0
+80106754:	6a 2f                	push   $0x2f
+80106756:	e9 ce f9 ff ff       	jmp    80106129 <alltraps>
+
+8010675b <vector48>:
+8010675b:	6a 00                	push   $0x0
+8010675d:	6a 30                	push   $0x30
+8010675f:	e9 c5 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106764 <vector49>:
+80106764:	6a 00                	push   $0x0
+80106766:	6a 31                	push   $0x31
+80106768:	e9 bc f9 ff ff       	jmp    80106129 <alltraps>
+
+8010676d <vector50>:
+8010676d:	6a 00                	push   $0x0
+8010676f:	6a 32                	push   $0x32
+80106771:	e9 b3 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106776 <vector51>:
+80106776:	6a 00                	push   $0x0
+80106778:	6a 33                	push   $0x33
+8010677a:	e9 aa f9 ff ff       	jmp    80106129 <alltraps>
+
+8010677f <vector52>:
+8010677f:	6a 00                	push   $0x0
+80106781:	6a 34                	push   $0x34
+80106783:	e9 a1 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106788 <vector53>:
+80106788:	6a 00                	push   $0x0
+8010678a:	6a 35                	push   $0x35
+8010678c:	e9 98 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106791 <vector54>:
+80106791:	6a 00                	push   $0x0
+80106793:	6a 36                	push   $0x36
+80106795:	e9 8f f9 ff ff       	jmp    80106129 <alltraps>
+
+8010679a <vector55>:
+8010679a:	6a 00                	push   $0x0
+8010679c:	6a 37                	push   $0x37
+8010679e:	e9 86 f9 ff ff       	jmp    80106129 <alltraps>
+
+801067a3 <vector56>:
+801067a3:	6a 00                	push   $0x0
+801067a5:	6a 38                	push   $0x38
+801067a7:	e9 7d f9 ff ff       	jmp    80106129 <alltraps>
+
+801067ac <vector57>:
+801067ac:	6a 00                	push   $0x0
+801067ae:	6a 39                	push   $0x39
+801067b0:	e9 74 f9 ff ff       	jmp    80106129 <alltraps>
+
+801067b5 <vector58>:
+801067b5:	6a 00                	push   $0x0
+801067b7:	6a 3a                	push   $0x3a
+801067b9:	e9 6b f9 ff ff       	jmp    80106129 <alltraps>
+
+801067be <vector59>:
+801067be:	6a 00                	push   $0x0
+801067c0:	6a 3b                	push   $0x3b
+801067c2:	e9 62 f9 ff ff       	jmp    80106129 <alltraps>
+
+801067c7 <vector60>:
+801067c7:	6a 00                	push   $0x0
+801067c9:	6a 3c                	push   $0x3c
+801067cb:	e9 59 f9 ff ff       	jmp    80106129 <alltraps>
+
+801067d0 <vector61>:
+801067d0:	6a 00                	push   $0x0
+801067d2:	6a 3d                	push   $0x3d
+801067d4:	e9 50 f9 ff ff       	jmp    80106129 <alltraps>
+
+801067d9 <vector62>:
+801067d9:	6a 00                	push   $0x0
+801067db:	6a 3e                	push   $0x3e
+801067dd:	e9 47 f9 ff ff       	jmp    80106129 <alltraps>
+
+801067e2 <vector63>:
+801067e2:	6a 00                	push   $0x0
+801067e4:	6a 3f                	push   $0x3f
+801067e6:	e9 3e f9 ff ff       	jmp    80106129 <alltraps>
+
+801067eb <vector64>:
+801067eb:	6a 00                	push   $0x0
+801067ed:	6a 40                	push   $0x40
+801067ef:	e9 35 f9 ff ff       	jmp    80106129 <alltraps>
+
+801067f4 <vector65>:
+801067f4:	6a 00                	push   $0x0
+801067f6:	6a 41                	push   $0x41
+801067f8:	e9 2c f9 ff ff       	jmp    80106129 <alltraps>
+
+801067fd <vector66>:
+801067fd:	6a 00                	push   $0x0
+801067ff:	6a 42                	push   $0x42
+80106801:	e9 23 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106806 <vector67>:
+80106806:	6a 00                	push   $0x0
+80106808:	6a 43                	push   $0x43
+8010680a:	e9 1a f9 ff ff       	jmp    80106129 <alltraps>
+
+8010680f <vector68>:
+8010680f:	6a 00                	push   $0x0
+80106811:	6a 44                	push   $0x44
+80106813:	e9 11 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106818 <vector69>:
+80106818:	6a 00                	push   $0x0
+8010681a:	6a 45                	push   $0x45
+8010681c:	e9 08 f9 ff ff       	jmp    80106129 <alltraps>
+
+80106821 <vector70>:
+80106821:	6a 00                	push   $0x0
+80106823:	6a 46                	push   $0x46
+80106825:	e9 ff f8 ff ff       	jmp    80106129 <alltraps>
+
+8010682a <vector71>:
+8010682a:	6a 00                	push   $0x0
+8010682c:	6a 47                	push   $0x47
+8010682e:	e9 f6 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106833 <vector72>:
+80106833:	6a 00                	push   $0x0
+80106835:	6a 48                	push   $0x48
+80106837:	e9 ed f8 ff ff       	jmp    80106129 <alltraps>
+
+8010683c <vector73>:
+8010683c:	6a 00                	push   $0x0
+8010683e:	6a 49                	push   $0x49
+80106840:	e9 e4 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106845 <vector74>:
+80106845:	6a 00                	push   $0x0
+80106847:	6a 4a                	push   $0x4a
+80106849:	e9 db f8 ff ff       	jmp    80106129 <alltraps>
+
+8010684e <vector75>:
+8010684e:	6a 00                	push   $0x0
+80106850:	6a 4b                	push   $0x4b
+80106852:	e9 d2 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106857 <vector76>:
+80106857:	6a 00                	push   $0x0
+80106859:	6a 4c                	push   $0x4c
+8010685b:	e9 c9 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106860 <vector77>:
+80106860:	6a 00                	push   $0x0
+80106862:	6a 4d                	push   $0x4d
+80106864:	e9 c0 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106869 <vector78>:
+80106869:	6a 00                	push   $0x0
+8010686b:	6a 4e                	push   $0x4e
+8010686d:	e9 b7 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106872 <vector79>:
+80106872:	6a 00                	push   $0x0
+80106874:	6a 4f                	push   $0x4f
+80106876:	e9 ae f8 ff ff       	jmp    80106129 <alltraps>
+
+8010687b <vector80>:
+8010687b:	6a 00                	push   $0x0
+8010687d:	6a 50                	push   $0x50
+8010687f:	e9 a5 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106884 <vector81>:
+80106884:	6a 00                	push   $0x0
+80106886:	6a 51                	push   $0x51
+80106888:	e9 9c f8 ff ff       	jmp    80106129 <alltraps>
+
+8010688d <vector82>:
+8010688d:	6a 00                	push   $0x0
+8010688f:	6a 52                	push   $0x52
+80106891:	e9 93 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106896 <vector83>:
+80106896:	6a 00                	push   $0x0
+80106898:	6a 53                	push   $0x53
+8010689a:	e9 8a f8 ff ff       	jmp    80106129 <alltraps>
+
+8010689f <vector84>:
+8010689f:	6a 00                	push   $0x0
+801068a1:	6a 54                	push   $0x54
+801068a3:	e9 81 f8 ff ff       	jmp    80106129 <alltraps>
+
+801068a8 <vector85>:
+801068a8:	6a 00                	push   $0x0
+801068aa:	6a 55                	push   $0x55
+801068ac:	e9 78 f8 ff ff       	jmp    80106129 <alltraps>
+
+801068b1 <vector86>:
+801068b1:	6a 00                	push   $0x0
+801068b3:	6a 56                	push   $0x56
+801068b5:	e9 6f f8 ff ff       	jmp    80106129 <alltraps>
+
+801068ba <vector87>:
+801068ba:	6a 00                	push   $0x0
+801068bc:	6a 57                	push   $0x57
+801068be:	e9 66 f8 ff ff       	jmp    80106129 <alltraps>
+
+801068c3 <vector88>:
+801068c3:	6a 00                	push   $0x0
+801068c5:	6a 58                	push   $0x58
+801068c7:	e9 5d f8 ff ff       	jmp    80106129 <alltraps>
+
+801068cc <vector89>:
+801068cc:	6a 00                	push   $0x0
+801068ce:	6a 59                	push   $0x59
+801068d0:	e9 54 f8 ff ff       	jmp    80106129 <alltraps>
+
+801068d5 <vector90>:
+801068d5:	6a 00                	push   $0x0
+801068d7:	6a 5a                	push   $0x5a
+801068d9:	e9 4b f8 ff ff       	jmp    80106129 <alltraps>
+
+801068de <vector91>:
+801068de:	6a 00                	push   $0x0
+801068e0:	6a 5b                	push   $0x5b
+801068e2:	e9 42 f8 ff ff       	jmp    80106129 <alltraps>
+
+801068e7 <vector92>:
+801068e7:	6a 00                	push   $0x0
+801068e9:	6a 5c                	push   $0x5c
+801068eb:	e9 39 f8 ff ff       	jmp    80106129 <alltraps>
+
+801068f0 <vector93>:
+801068f0:	6a 00                	push   $0x0
+801068f2:	6a 5d                	push   $0x5d
+801068f4:	e9 30 f8 ff ff       	jmp    80106129 <alltraps>
+
+801068f9 <vector94>:
+801068f9:	6a 00                	push   $0x0
+801068fb:	6a 5e                	push   $0x5e
+801068fd:	e9 27 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106902 <vector95>:
+80106902:	6a 00                	push   $0x0
+80106904:	6a 5f                	push   $0x5f
+80106906:	e9 1e f8 ff ff       	jmp    80106129 <alltraps>
+
+8010690b <vector96>:
+8010690b:	6a 00                	push   $0x0
+8010690d:	6a 60                	push   $0x60
+8010690f:	e9 15 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106914 <vector97>:
+80106914:	6a 00                	push   $0x0
+80106916:	6a 61                	push   $0x61
+80106918:	e9 0c f8 ff ff       	jmp    80106129 <alltraps>
+
+8010691d <vector98>:
+8010691d:	6a 00                	push   $0x0
+8010691f:	6a 62                	push   $0x62
+80106921:	e9 03 f8 ff ff       	jmp    80106129 <alltraps>
+
+80106926 <vector99>:
+80106926:	6a 00                	push   $0x0
+80106928:	6a 63                	push   $0x63
+8010692a:	e9 fa f7 ff ff       	jmp    80106129 <alltraps>
+
+8010692f <vector100>:
+8010692f:	6a 00                	push   $0x0
+80106931:	6a 64                	push   $0x64
+80106933:	e9 f1 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106938 <vector101>:
+80106938:	6a 00                	push   $0x0
+8010693a:	6a 65                	push   $0x65
+8010693c:	e9 e8 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106941 <vector102>:
+80106941:	6a 00                	push   $0x0
+80106943:	6a 66                	push   $0x66
+80106945:	e9 df f7 ff ff       	jmp    80106129 <alltraps>
+
+8010694a <vector103>:
+8010694a:	6a 00                	push   $0x0
+8010694c:	6a 67                	push   $0x67
+8010694e:	e9 d6 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106953 <vector104>:
+80106953:	6a 00                	push   $0x0
+80106955:	6a 68                	push   $0x68
+80106957:	e9 cd f7 ff ff       	jmp    80106129 <alltraps>
+
+8010695c <vector105>:
+8010695c:	6a 00                	push   $0x0
+8010695e:	6a 69                	push   $0x69
+80106960:	e9 c4 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106965 <vector106>:
+80106965:	6a 00                	push   $0x0
+80106967:	6a 6a                	push   $0x6a
+80106969:	e9 bb f7 ff ff       	jmp    80106129 <alltraps>
+
+8010696e <vector107>:
+8010696e:	6a 00                	push   $0x0
+80106970:	6a 6b                	push   $0x6b
+80106972:	e9 b2 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106977 <vector108>:
+80106977:	6a 00                	push   $0x0
+80106979:	6a 6c                	push   $0x6c
+8010697b:	e9 a9 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106980 <vector109>:
+80106980:	6a 00                	push   $0x0
+80106982:	6a 6d                	push   $0x6d
+80106984:	e9 a0 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106989 <vector110>:
+80106989:	6a 00                	push   $0x0
+8010698b:	6a 6e                	push   $0x6e
+8010698d:	e9 97 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106992 <vector111>:
+80106992:	6a 00                	push   $0x0
+80106994:	6a 6f                	push   $0x6f
+80106996:	e9 8e f7 ff ff       	jmp    80106129 <alltraps>
+
+8010699b <vector112>:
+8010699b:	6a 00                	push   $0x0
+8010699d:	6a 70                	push   $0x70
+8010699f:	e9 85 f7 ff ff       	jmp    80106129 <alltraps>
+
+801069a4 <vector113>:
+801069a4:	6a 00                	push   $0x0
+801069a6:	6a 71                	push   $0x71
+801069a8:	e9 7c f7 ff ff       	jmp    80106129 <alltraps>
+
+801069ad <vector114>:
+801069ad:	6a 00                	push   $0x0
+801069af:	6a 72                	push   $0x72
+801069b1:	e9 73 f7 ff ff       	jmp    80106129 <alltraps>
+
+801069b6 <vector115>:
+801069b6:	6a 00                	push   $0x0
+801069b8:	6a 73                	push   $0x73
+801069ba:	e9 6a f7 ff ff       	jmp    80106129 <alltraps>
+
+801069bf <vector116>:
+801069bf:	6a 00                	push   $0x0
+801069c1:	6a 74                	push   $0x74
+801069c3:	e9 61 f7 ff ff       	jmp    80106129 <alltraps>
+
+801069c8 <vector117>:
+801069c8:	6a 00                	push   $0x0
+801069ca:	6a 75                	push   $0x75
+801069cc:	e9 58 f7 ff ff       	jmp    80106129 <alltraps>
+
+801069d1 <vector118>:
+801069d1:	6a 00                	push   $0x0
+801069d3:	6a 76                	push   $0x76
+801069d5:	e9 4f f7 ff ff       	jmp    80106129 <alltraps>
+
+801069da <vector119>:
+801069da:	6a 00                	push   $0x0
+801069dc:	6a 77                	push   $0x77
+801069de:	e9 46 f7 ff ff       	jmp    80106129 <alltraps>
+
+801069e3 <vector120>:
+801069e3:	6a 00                	push   $0x0
+801069e5:	6a 78                	push   $0x78
+801069e7:	e9 3d f7 ff ff       	jmp    80106129 <alltraps>
+
+801069ec <vector121>:
+801069ec:	6a 00                	push   $0x0
+801069ee:	6a 79                	push   $0x79
+801069f0:	e9 34 f7 ff ff       	jmp    80106129 <alltraps>
+
+801069f5 <vector122>:
+801069f5:	6a 00                	push   $0x0
+801069f7:	6a 7a                	push   $0x7a
+801069f9:	e9 2b f7 ff ff       	jmp    80106129 <alltraps>
+
+801069fe <vector123>:
+801069fe:	6a 00                	push   $0x0
+80106a00:	6a 7b                	push   $0x7b
+80106a02:	e9 22 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106a07 <vector124>:
+80106a07:	6a 00                	push   $0x0
+80106a09:	6a 7c                	push   $0x7c
+80106a0b:	e9 19 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106a10 <vector125>:
+80106a10:	6a 00                	push   $0x0
+80106a12:	6a 7d                	push   $0x7d
+80106a14:	e9 10 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106a19 <vector126>:
+80106a19:	6a 00                	push   $0x0
+80106a1b:	6a 7e                	push   $0x7e
+80106a1d:	e9 07 f7 ff ff       	jmp    80106129 <alltraps>
+
+80106a22 <vector127>:
+80106a22:	6a 00                	push   $0x0
+80106a24:	6a 7f                	push   $0x7f
+80106a26:	e9 fe f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a2b <vector128>:
+80106a2b:	6a 00                	push   $0x0
+80106a2d:	68 80 00 00 00       	push   $0x80
+80106a32:	e9 f2 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a37 <vector129>:
+80106a37:	6a 00                	push   $0x0
+80106a39:	68 81 00 00 00       	push   $0x81
+80106a3e:	e9 e6 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a43 <vector130>:
+80106a43:	6a 00                	push   $0x0
+80106a45:	68 82 00 00 00       	push   $0x82
+80106a4a:	e9 da f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a4f <vector131>:
+80106a4f:	6a 00                	push   $0x0
+80106a51:	68 83 00 00 00       	push   $0x83
+80106a56:	e9 ce f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a5b <vector132>:
+80106a5b:	6a 00                	push   $0x0
+80106a5d:	68 84 00 00 00       	push   $0x84
+80106a62:	e9 c2 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a67 <vector133>:
+80106a67:	6a 00                	push   $0x0
+80106a69:	68 85 00 00 00       	push   $0x85
+80106a6e:	e9 b6 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a73 <vector134>:
+80106a73:	6a 00                	push   $0x0
+80106a75:	68 86 00 00 00       	push   $0x86
+80106a7a:	e9 aa f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a7f <vector135>:
+80106a7f:	6a 00                	push   $0x0
+80106a81:	68 87 00 00 00       	push   $0x87
+80106a86:	e9 9e f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a8b <vector136>:
+80106a8b:	6a 00                	push   $0x0
+80106a8d:	68 88 00 00 00       	push   $0x88
+80106a92:	e9 92 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106a97 <vector137>:
+80106a97:	6a 00                	push   $0x0
+80106a99:	68 89 00 00 00       	push   $0x89
+80106a9e:	e9 86 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106aa3 <vector138>:
+80106aa3:	6a 00                	push   $0x0
+80106aa5:	68 8a 00 00 00       	push   $0x8a
+80106aaa:	e9 7a f6 ff ff       	jmp    80106129 <alltraps>
+
+80106aaf <vector139>:
+80106aaf:	6a 00                	push   $0x0
+80106ab1:	68 8b 00 00 00       	push   $0x8b
+80106ab6:	e9 6e f6 ff ff       	jmp    80106129 <alltraps>
+
+80106abb <vector140>:
+80106abb:	6a 00                	push   $0x0
+80106abd:	68 8c 00 00 00       	push   $0x8c
+80106ac2:	e9 62 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106ac7 <vector141>:
+80106ac7:	6a 00                	push   $0x0
+80106ac9:	68 8d 00 00 00       	push   $0x8d
+80106ace:	e9 56 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106ad3 <vector142>:
+80106ad3:	6a 00                	push   $0x0
+80106ad5:	68 8e 00 00 00       	push   $0x8e
+80106ada:	e9 4a f6 ff ff       	jmp    80106129 <alltraps>
+
+80106adf <vector143>:
+80106adf:	6a 00                	push   $0x0
+80106ae1:	68 8f 00 00 00       	push   $0x8f
+80106ae6:	e9 3e f6 ff ff       	jmp    80106129 <alltraps>
+
+80106aeb <vector144>:
+80106aeb:	6a 00                	push   $0x0
+80106aed:	68 90 00 00 00       	push   $0x90
+80106af2:	e9 32 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106af7 <vector145>:
+80106af7:	6a 00                	push   $0x0
+80106af9:	68 91 00 00 00       	push   $0x91
+80106afe:	e9 26 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106b03 <vector146>:
+80106b03:	6a 00                	push   $0x0
+80106b05:	68 92 00 00 00       	push   $0x92
+80106b0a:	e9 1a f6 ff ff       	jmp    80106129 <alltraps>
+
+80106b0f <vector147>:
+80106b0f:	6a 00                	push   $0x0
+80106b11:	68 93 00 00 00       	push   $0x93
+80106b16:	e9 0e f6 ff ff       	jmp    80106129 <alltraps>
+
+80106b1b <vector148>:
+80106b1b:	6a 00                	push   $0x0
+80106b1d:	68 94 00 00 00       	push   $0x94
+80106b22:	e9 02 f6 ff ff       	jmp    80106129 <alltraps>
+
+80106b27 <vector149>:
+80106b27:	6a 00                	push   $0x0
+80106b29:	68 95 00 00 00       	push   $0x95
+80106b2e:	e9 f6 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b33 <vector150>:
+80106b33:	6a 00                	push   $0x0
+80106b35:	68 96 00 00 00       	push   $0x96
+80106b3a:	e9 ea f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b3f <vector151>:
+80106b3f:	6a 00                	push   $0x0
+80106b41:	68 97 00 00 00       	push   $0x97
+80106b46:	e9 de f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b4b <vector152>:
+80106b4b:	6a 00                	push   $0x0
+80106b4d:	68 98 00 00 00       	push   $0x98
+80106b52:	e9 d2 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b57 <vector153>:
+80106b57:	6a 00                	push   $0x0
+80106b59:	68 99 00 00 00       	push   $0x99
+80106b5e:	e9 c6 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b63 <vector154>:
+80106b63:	6a 00                	push   $0x0
+80106b65:	68 9a 00 00 00       	push   $0x9a
+80106b6a:	e9 ba f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b6f <vector155>:
+80106b6f:	6a 00                	push   $0x0
+80106b71:	68 9b 00 00 00       	push   $0x9b
+80106b76:	e9 ae f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b7b <vector156>:
+80106b7b:	6a 00                	push   $0x0
+80106b7d:	68 9c 00 00 00       	push   $0x9c
+80106b82:	e9 a2 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b87 <vector157>:
+80106b87:	6a 00                	push   $0x0
+80106b89:	68 9d 00 00 00       	push   $0x9d
+80106b8e:	e9 96 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b93 <vector158>:
+80106b93:	6a 00                	push   $0x0
+80106b95:	68 9e 00 00 00       	push   $0x9e
+80106b9a:	e9 8a f5 ff ff       	jmp    80106129 <alltraps>
+
+80106b9f <vector159>:
+80106b9f:	6a 00                	push   $0x0
+80106ba1:	68 9f 00 00 00       	push   $0x9f
+80106ba6:	e9 7e f5 ff ff       	jmp    80106129 <alltraps>
+
+80106bab <vector160>:
+80106bab:	6a 00                	push   $0x0
+80106bad:	68 a0 00 00 00       	push   $0xa0
+80106bb2:	e9 72 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106bb7 <vector161>:
+80106bb7:	6a 00                	push   $0x0
+80106bb9:	68 a1 00 00 00       	push   $0xa1
+80106bbe:	e9 66 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106bc3 <vector162>:
+80106bc3:	6a 00                	push   $0x0
+80106bc5:	68 a2 00 00 00       	push   $0xa2
+80106bca:	e9 5a f5 ff ff       	jmp    80106129 <alltraps>
+
+80106bcf <vector163>:
+80106bcf:	6a 00                	push   $0x0
+80106bd1:	68 a3 00 00 00       	push   $0xa3
+80106bd6:	e9 4e f5 ff ff       	jmp    80106129 <alltraps>
+
+80106bdb <vector164>:
+80106bdb:	6a 00                	push   $0x0
+80106bdd:	68 a4 00 00 00       	push   $0xa4
+80106be2:	e9 42 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106be7 <vector165>:
+80106be7:	6a 00                	push   $0x0
+80106be9:	68 a5 00 00 00       	push   $0xa5
+80106bee:	e9 36 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106bf3 <vector166>:
+80106bf3:	6a 00                	push   $0x0
+80106bf5:	68 a6 00 00 00       	push   $0xa6
+80106bfa:	e9 2a f5 ff ff       	jmp    80106129 <alltraps>
+
+80106bff <vector167>:
+80106bff:	6a 00                	push   $0x0
+80106c01:	68 a7 00 00 00       	push   $0xa7
+80106c06:	e9 1e f5 ff ff       	jmp    80106129 <alltraps>
+
+80106c0b <vector168>:
+80106c0b:	6a 00                	push   $0x0
+80106c0d:	68 a8 00 00 00       	push   $0xa8
+80106c12:	e9 12 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106c17 <vector169>:
+80106c17:	6a 00                	push   $0x0
+80106c19:	68 a9 00 00 00       	push   $0xa9
+80106c1e:	e9 06 f5 ff ff       	jmp    80106129 <alltraps>
+
+80106c23 <vector170>:
+80106c23:	6a 00                	push   $0x0
+80106c25:	68 aa 00 00 00       	push   $0xaa
+80106c2a:	e9 fa f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c2f <vector171>:
+80106c2f:	6a 00                	push   $0x0
+80106c31:	68 ab 00 00 00       	push   $0xab
+80106c36:	e9 ee f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c3b <vector172>:
+80106c3b:	6a 00                	push   $0x0
+80106c3d:	68 ac 00 00 00       	push   $0xac
+80106c42:	e9 e2 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c47 <vector173>:
+80106c47:	6a 00                	push   $0x0
+80106c49:	68 ad 00 00 00       	push   $0xad
+80106c4e:	e9 d6 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c53 <vector174>:
+80106c53:	6a 00                	push   $0x0
+80106c55:	68 ae 00 00 00       	push   $0xae
+80106c5a:	e9 ca f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c5f <vector175>:
+80106c5f:	6a 00                	push   $0x0
+80106c61:	68 af 00 00 00       	push   $0xaf
+80106c66:	e9 be f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c6b <vector176>:
+80106c6b:	6a 00                	push   $0x0
+80106c6d:	68 b0 00 00 00       	push   $0xb0
+80106c72:	e9 b2 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c77 <vector177>:
+80106c77:	6a 00                	push   $0x0
+80106c79:	68 b1 00 00 00       	push   $0xb1
+80106c7e:	e9 a6 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c83 <vector178>:
+80106c83:	6a 00                	push   $0x0
+80106c85:	68 b2 00 00 00       	push   $0xb2
+80106c8a:	e9 9a f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c8f <vector179>:
+80106c8f:	6a 00                	push   $0x0
+80106c91:	68 b3 00 00 00       	push   $0xb3
+80106c96:	e9 8e f4 ff ff       	jmp    80106129 <alltraps>
+
+80106c9b <vector180>:
+80106c9b:	6a 00                	push   $0x0
+80106c9d:	68 b4 00 00 00       	push   $0xb4
+80106ca2:	e9 82 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106ca7 <vector181>:
+80106ca7:	6a 00                	push   $0x0
+80106ca9:	68 b5 00 00 00       	push   $0xb5
+80106cae:	e9 76 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106cb3 <vector182>:
+80106cb3:	6a 00                	push   $0x0
+80106cb5:	68 b6 00 00 00       	push   $0xb6
+80106cba:	e9 6a f4 ff ff       	jmp    80106129 <alltraps>
+
+80106cbf <vector183>:
+80106cbf:	6a 00                	push   $0x0
+80106cc1:	68 b7 00 00 00       	push   $0xb7
+80106cc6:	e9 5e f4 ff ff       	jmp    80106129 <alltraps>
+
+80106ccb <vector184>:
+80106ccb:	6a 00                	push   $0x0
+80106ccd:	68 b8 00 00 00       	push   $0xb8
+80106cd2:	e9 52 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106cd7 <vector185>:
+80106cd7:	6a 00                	push   $0x0
+80106cd9:	68 b9 00 00 00       	push   $0xb9
+80106cde:	e9 46 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106ce3 <vector186>:
+80106ce3:	6a 00                	push   $0x0
+80106ce5:	68 ba 00 00 00       	push   $0xba
+80106cea:	e9 3a f4 ff ff       	jmp    80106129 <alltraps>
+
+80106cef <vector187>:
+80106cef:	6a 00                	push   $0x0
+80106cf1:	68 bb 00 00 00       	push   $0xbb
+80106cf6:	e9 2e f4 ff ff       	jmp    80106129 <alltraps>
+
+80106cfb <vector188>:
+80106cfb:	6a 00                	push   $0x0
+80106cfd:	68 bc 00 00 00       	push   $0xbc
+80106d02:	e9 22 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106d07 <vector189>:
+80106d07:	6a 00                	push   $0x0
+80106d09:	68 bd 00 00 00       	push   $0xbd
+80106d0e:	e9 16 f4 ff ff       	jmp    80106129 <alltraps>
+
+80106d13 <vector190>:
+80106d13:	6a 00                	push   $0x0
+80106d15:	68 be 00 00 00       	push   $0xbe
+80106d1a:	e9 0a f4 ff ff       	jmp    80106129 <alltraps>
+
+80106d1f <vector191>:
+80106d1f:	6a 00                	push   $0x0
+80106d21:	68 bf 00 00 00       	push   $0xbf
+80106d26:	e9 fe f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d2b <vector192>:
+80106d2b:	6a 00                	push   $0x0
+80106d2d:	68 c0 00 00 00       	push   $0xc0
+80106d32:	e9 f2 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d37 <vector193>:
+80106d37:	6a 00                	push   $0x0
+80106d39:	68 c1 00 00 00       	push   $0xc1
+80106d3e:	e9 e6 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d43 <vector194>:
+80106d43:	6a 00                	push   $0x0
+80106d45:	68 c2 00 00 00       	push   $0xc2
+80106d4a:	e9 da f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d4f <vector195>:
+80106d4f:	6a 00                	push   $0x0
+80106d51:	68 c3 00 00 00       	push   $0xc3
+80106d56:	e9 ce f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d5b <vector196>:
+80106d5b:	6a 00                	push   $0x0
+80106d5d:	68 c4 00 00 00       	push   $0xc4
+80106d62:	e9 c2 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d67 <vector197>:
+80106d67:	6a 00                	push   $0x0
+80106d69:	68 c5 00 00 00       	push   $0xc5
+80106d6e:	e9 b6 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d73 <vector198>:
+80106d73:	6a 00                	push   $0x0
+80106d75:	68 c6 00 00 00       	push   $0xc6
+80106d7a:	e9 aa f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d7f <vector199>:
+80106d7f:	6a 00                	push   $0x0
+80106d81:	68 c7 00 00 00       	push   $0xc7
+80106d86:	e9 9e f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d8b <vector200>:
+80106d8b:	6a 00                	push   $0x0
+80106d8d:	68 c8 00 00 00       	push   $0xc8
+80106d92:	e9 92 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106d97 <vector201>:
+80106d97:	6a 00                	push   $0x0
+80106d99:	68 c9 00 00 00       	push   $0xc9
+80106d9e:	e9 86 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106da3 <vector202>:
+80106da3:	6a 00                	push   $0x0
+80106da5:	68 ca 00 00 00       	push   $0xca
+80106daa:	e9 7a f3 ff ff       	jmp    80106129 <alltraps>
+
+80106daf <vector203>:
+80106daf:	6a 00                	push   $0x0
+80106db1:	68 cb 00 00 00       	push   $0xcb
+80106db6:	e9 6e f3 ff ff       	jmp    80106129 <alltraps>
+
+80106dbb <vector204>:
+80106dbb:	6a 00                	push   $0x0
+80106dbd:	68 cc 00 00 00       	push   $0xcc
+80106dc2:	e9 62 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106dc7 <vector205>:
+80106dc7:	6a 00                	push   $0x0
+80106dc9:	68 cd 00 00 00       	push   $0xcd
+80106dce:	e9 56 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106dd3 <vector206>:
+80106dd3:	6a 00                	push   $0x0
+80106dd5:	68 ce 00 00 00       	push   $0xce
+80106dda:	e9 4a f3 ff ff       	jmp    80106129 <alltraps>
+
+80106ddf <vector207>:
+80106ddf:	6a 00                	push   $0x0
+80106de1:	68 cf 00 00 00       	push   $0xcf
+80106de6:	e9 3e f3 ff ff       	jmp    80106129 <alltraps>
+
+80106deb <vector208>:
+80106deb:	6a 00                	push   $0x0
+80106ded:	68 d0 00 00 00       	push   $0xd0
+80106df2:	e9 32 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106df7 <vector209>:
+80106df7:	6a 00                	push   $0x0
+80106df9:	68 d1 00 00 00       	push   $0xd1
+80106dfe:	e9 26 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106e03 <vector210>:
+80106e03:	6a 00                	push   $0x0
+80106e05:	68 d2 00 00 00       	push   $0xd2
+80106e0a:	e9 1a f3 ff ff       	jmp    80106129 <alltraps>
+
+80106e0f <vector211>:
+80106e0f:	6a 00                	push   $0x0
+80106e11:	68 d3 00 00 00       	push   $0xd3
+80106e16:	e9 0e f3 ff ff       	jmp    80106129 <alltraps>
+
+80106e1b <vector212>:
+80106e1b:	6a 00                	push   $0x0
+80106e1d:	68 d4 00 00 00       	push   $0xd4
+80106e22:	e9 02 f3 ff ff       	jmp    80106129 <alltraps>
+
+80106e27 <vector213>:
+80106e27:	6a 00                	push   $0x0
+80106e29:	68 d5 00 00 00       	push   $0xd5
+80106e2e:	e9 f6 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e33 <vector214>:
+80106e33:	6a 00                	push   $0x0
+80106e35:	68 d6 00 00 00       	push   $0xd6
+80106e3a:	e9 ea f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e3f <vector215>:
+80106e3f:	6a 00                	push   $0x0
+80106e41:	68 d7 00 00 00       	push   $0xd7
+80106e46:	e9 de f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e4b <vector216>:
+80106e4b:	6a 00                	push   $0x0
+80106e4d:	68 d8 00 00 00       	push   $0xd8
+80106e52:	e9 d2 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e57 <vector217>:
+80106e57:	6a 00                	push   $0x0
+80106e59:	68 d9 00 00 00       	push   $0xd9
+80106e5e:	e9 c6 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e63 <vector218>:
+80106e63:	6a 00                	push   $0x0
+80106e65:	68 da 00 00 00       	push   $0xda
+80106e6a:	e9 ba f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e6f <vector219>:
+80106e6f:	6a 00                	push   $0x0
+80106e71:	68 db 00 00 00       	push   $0xdb
+80106e76:	e9 ae f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e7b <vector220>:
+80106e7b:	6a 00                	push   $0x0
+80106e7d:	68 dc 00 00 00       	push   $0xdc
+80106e82:	e9 a2 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e87 <vector221>:
+80106e87:	6a 00                	push   $0x0
+80106e89:	68 dd 00 00 00       	push   $0xdd
+80106e8e:	e9 96 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e93 <vector222>:
+80106e93:	6a 00                	push   $0x0
+80106e95:	68 de 00 00 00       	push   $0xde
+80106e9a:	e9 8a f2 ff ff       	jmp    80106129 <alltraps>
+
+80106e9f <vector223>:
+80106e9f:	6a 00                	push   $0x0
+80106ea1:	68 df 00 00 00       	push   $0xdf
+80106ea6:	e9 7e f2 ff ff       	jmp    80106129 <alltraps>
+
+80106eab <vector224>:
+80106eab:	6a 00                	push   $0x0
+80106ead:	68 e0 00 00 00       	push   $0xe0
+80106eb2:	e9 72 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106eb7 <vector225>:
+80106eb7:	6a 00                	push   $0x0
+80106eb9:	68 e1 00 00 00       	push   $0xe1
+80106ebe:	e9 66 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106ec3 <vector226>:
+80106ec3:	6a 00                	push   $0x0
+80106ec5:	68 e2 00 00 00       	push   $0xe2
+80106eca:	e9 5a f2 ff ff       	jmp    80106129 <alltraps>
+
+80106ecf <vector227>:
+80106ecf:	6a 00                	push   $0x0
+80106ed1:	68 e3 00 00 00       	push   $0xe3
+80106ed6:	e9 4e f2 ff ff       	jmp    80106129 <alltraps>
+
+80106edb <vector228>:
+80106edb:	6a 00                	push   $0x0
+80106edd:	68 e4 00 00 00       	push   $0xe4
+80106ee2:	e9 42 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106ee7 <vector229>:
+80106ee7:	6a 00                	push   $0x0
+80106ee9:	68 e5 00 00 00       	push   $0xe5
+80106eee:	e9 36 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106ef3 <vector230>:
+80106ef3:	6a 00                	push   $0x0
+80106ef5:	68 e6 00 00 00       	push   $0xe6
+80106efa:	e9 2a f2 ff ff       	jmp    80106129 <alltraps>
+
+80106eff <vector231>:
+80106eff:	6a 00                	push   $0x0
+80106f01:	68 e7 00 00 00       	push   $0xe7
+80106f06:	e9 1e f2 ff ff       	jmp    80106129 <alltraps>
+
+80106f0b <vector232>:
+80106f0b:	6a 00                	push   $0x0
+80106f0d:	68 e8 00 00 00       	push   $0xe8
+80106f12:	e9 12 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106f17 <vector233>:
+80106f17:	6a 00                	push   $0x0
+80106f19:	68 e9 00 00 00       	push   $0xe9
+80106f1e:	e9 06 f2 ff ff       	jmp    80106129 <alltraps>
+
+80106f23 <vector234>:
+80106f23:	6a 00                	push   $0x0
+80106f25:	68 ea 00 00 00       	push   $0xea
+80106f2a:	e9 fa f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f2f <vector235>:
+80106f2f:	6a 00                	push   $0x0
+80106f31:	68 eb 00 00 00       	push   $0xeb
+80106f36:	e9 ee f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f3b <vector236>:
+80106f3b:	6a 00                	push   $0x0
+80106f3d:	68 ec 00 00 00       	push   $0xec
+80106f42:	e9 e2 f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f47 <vector237>:
+80106f47:	6a 00                	push   $0x0
+80106f49:	68 ed 00 00 00       	push   $0xed
+80106f4e:	e9 d6 f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f53 <vector238>:
+80106f53:	6a 00                	push   $0x0
+80106f55:	68 ee 00 00 00       	push   $0xee
+80106f5a:	e9 ca f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f5f <vector239>:
+80106f5f:	6a 00                	push   $0x0
+80106f61:	68 ef 00 00 00       	push   $0xef
+80106f66:	e9 be f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f6b <vector240>:
+80106f6b:	6a 00                	push   $0x0
+80106f6d:	68 f0 00 00 00       	push   $0xf0
+80106f72:	e9 b2 f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f77 <vector241>:
+80106f77:	6a 00                	push   $0x0
+80106f79:	68 f1 00 00 00       	push   $0xf1
+80106f7e:	e9 a6 f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f83 <vector242>:
+80106f83:	6a 00                	push   $0x0
+80106f85:	68 f2 00 00 00       	push   $0xf2
+80106f8a:	e9 9a f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f8f <vector243>:
+80106f8f:	6a 00                	push   $0x0
+80106f91:	68 f3 00 00 00       	push   $0xf3
+80106f96:	e9 8e f1 ff ff       	jmp    80106129 <alltraps>
+
+80106f9b <vector244>:
+80106f9b:	6a 00                	push   $0x0
+80106f9d:	68 f4 00 00 00       	push   $0xf4
+80106fa2:	e9 82 f1 ff ff       	jmp    80106129 <alltraps>
+
+80106fa7 <vector245>:
+80106fa7:	6a 00                	push   $0x0
+80106fa9:	68 f5 00 00 00       	push   $0xf5
+80106fae:	e9 76 f1 ff ff       	jmp    80106129 <alltraps>
+
+80106fb3 <vector246>:
+80106fb3:	6a 00                	push   $0x0
+80106fb5:	68 f6 00 00 00       	push   $0xf6
+80106fba:	e9 6a f1 ff ff       	jmp    80106129 <alltraps>
+
+80106fbf <vector247>:
+80106fbf:	6a 00                	push   $0x0
+80106fc1:	68 f7 00 00 00       	push   $0xf7
+80106fc6:	e9 5e f1 ff ff       	jmp    80106129 <alltraps>
+
+80106fcb <vector248>:
+80106fcb:	6a 00                	push   $0x0
+80106fcd:	68 f8 00 00 00       	push   $0xf8
+80106fd2:	e9 52 f1 ff ff       	jmp    80106129 <alltraps>
+
+80106fd7 <vector249>:
+80106fd7:	6a 00                	push   $0x0
+80106fd9:	68 f9 00 00 00       	push   $0xf9
+80106fde:	e9 46 f1 ff ff       	jmp    80106129 <alltraps>
+
+80106fe3 <vector250>:
+80106fe3:	6a 00                	push   $0x0
+80106fe5:	68 fa 00 00 00       	push   $0xfa
+80106fea:	e9 3a f1 ff ff       	jmp    80106129 <alltraps>
+
+80106fef <vector251>:
+80106fef:	6a 00                	push   $0x0
+80106ff1:	68 fb 00 00 00       	push   $0xfb
+80106ff6:	e9 2e f1 ff ff       	jmp    80106129 <alltraps>
+
+80106ffb <vector252>:
+80106ffb:	6a 00                	push   $0x0
+80106ffd:	68 fc 00 00 00       	push   $0xfc
+80107002:	e9 22 f1 ff ff       	jmp    80106129 <alltraps>
+
+80107007 <vector253>:
+80107007:	6a 00                	push   $0x0
+80107009:	68 fd 00 00 00       	push   $0xfd
+8010700e:	e9 16 f1 ff ff       	jmp    80106129 <alltraps>
+
+80107013 <vector254>:
+80107013:	6a 00                	push   $0x0
+80107015:	68 fe 00 00 00       	push   $0xfe
+8010701a:	e9 0a f1 ff ff       	jmp    80106129 <alltraps>
+
+8010701f <vector255>:
+8010701f:	6a 00                	push   $0x0
+80107021:	68 ff 00 00 00       	push   $0xff
+80107026:	e9 fe f0 ff ff       	jmp    80106129 <alltraps>
+8010702b:	66 90                	xchg   %ax,%ax
+8010702d:	66 90                	xchg   %ax,%ax
+8010702f:	90                   	nop
+
+80107030 <walkpgdir>:
+80107030:	55                   	push   %ebp
+80107031:	89 e5                	mov    %esp,%ebp
+80107033:	57                   	push   %edi
+80107034:	56                   	push   %esi
+80107035:	89 d6                	mov    %edx,%esi
+80107037:	c1 ea 16             	shr    $0x16,%edx
+8010703a:	53                   	push   %ebx
+8010703b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+8010703e:	83 ec 0c             	sub    $0xc,%esp
+80107041:	8b 1f                	mov    (%edi),%ebx
+80107043:	f6 c3 01             	test   $0x1,%bl
+80107046:	74 28                	je     80107070 <walkpgdir+0x40>
+80107048:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010704e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80107054:	89 f0                	mov    %esi,%eax
+80107056:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107059:	c1 e8 0a             	shr    $0xa,%eax
+8010705c:	25 fc 0f 00 00       	and    $0xffc,%eax
+80107061:	01 d8                	add    %ebx,%eax
+80107063:	5b                   	pop    %ebx
+80107064:	5e                   	pop    %esi
+80107065:	5f                   	pop    %edi
+80107066:	5d                   	pop    %ebp
+80107067:	c3                   	ret    
+80107068:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010706f:	90                   	nop
+80107070:	85 c9                	test   %ecx,%ecx
+80107072:	74 2c                	je     801070a0 <walkpgdir+0x70>
+80107074:	e8 b7 b5 ff ff       	call   80102630 <kalloc>
+80107079:	89 c3                	mov    %eax,%ebx
+8010707b:	85 c0                	test   %eax,%eax
+8010707d:	74 21                	je     801070a0 <walkpgdir+0x70>
+8010707f:	83 ec 04             	sub    $0x4,%esp
+80107082:	68 00 10 00 00       	push   $0x1000
+80107087:	6a 00                	push   $0x0
+80107089:	50                   	push   %eax
+8010708a:	e8 81 dd ff ff       	call   80104e10 <memset>
+8010708f:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107095:	83 c4 10             	add    $0x10,%esp
+80107098:	83 c8 07             	or     $0x7,%eax
+8010709b:	89 07                	mov    %eax,(%edi)
+8010709d:	eb b5                	jmp    80107054 <walkpgdir+0x24>
+8010709f:	90                   	nop
+801070a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070a3:	31 c0                	xor    %eax,%eax
+801070a5:	5b                   	pop    %ebx
+801070a6:	5e                   	pop    %esi
+801070a7:	5f                   	pop    %edi
+801070a8:	5d                   	pop    %ebp
+801070a9:	c3                   	ret    
+801070aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801070b0 <mappages>:
+801070b0:	55                   	push   %ebp
+801070b1:	89 e5                	mov    %esp,%ebp
+801070b3:	57                   	push   %edi
+801070b4:	89 c7                	mov    %eax,%edi
+801070b6:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+801070ba:	56                   	push   %esi
+801070bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801070c0:	89 d6                	mov    %edx,%esi
+801070c2:	53                   	push   %ebx
+801070c3:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+801070c9:	83 ec 1c             	sub    $0x1c,%esp
+801070cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801070cf:	8b 45 08             	mov    0x8(%ebp),%eax
+801070d2:	29 f0                	sub    %esi,%eax
+801070d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801070d7:	eb 1f                	jmp    801070f8 <mappages+0x48>
+801070d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070e0:	f6 00 01             	testb  $0x1,(%eax)
+801070e3:	75 45                	jne    8010712a <mappages+0x7a>
+801070e5:	0b 5d 0c             	or     0xc(%ebp),%ebx
+801070e8:	83 cb 01             	or     $0x1,%ebx
+801070eb:	89 18                	mov    %ebx,(%eax)
+801070ed:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+801070f0:	74 2e                	je     80107120 <mappages+0x70>
+801070f2:	81 c6 00 10 00 00    	add    $0x1000,%esi
+801070f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801070fb:	b9 01 00 00 00       	mov    $0x1,%ecx
+80107100:	89 f2                	mov    %esi,%edx
+80107102:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+80107105:	89 f8                	mov    %edi,%eax
+80107107:	e8 24 ff ff ff       	call   80107030 <walkpgdir>
+8010710c:	85 c0                	test   %eax,%eax
+8010710e:	75 d0                	jne    801070e0 <mappages+0x30>
+80107110:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107113:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107118:	5b                   	pop    %ebx
+80107119:	5e                   	pop    %esi
+8010711a:	5f                   	pop    %edi
+8010711b:	5d                   	pop    %ebp
+8010711c:	c3                   	ret    
+8010711d:	8d 76 00             	lea    0x0(%esi),%esi
+80107120:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107123:	31 c0                	xor    %eax,%eax
+80107125:	5b                   	pop    %ebx
+80107126:	5e                   	pop    %esi
+80107127:	5f                   	pop    %edi
+80107128:	5d                   	pop    %ebp
+80107129:	c3                   	ret    
+8010712a:	83 ec 0c             	sub    $0xc,%esp
+8010712d:	68 68 82 10 80       	push   $0x80108268
+80107132:	e8 59 92 ff ff       	call   80100390 <panic>
+80107137:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010713e:	66 90                	xchg   %ax,%ax
+
+80107140 <deallocuvm.part.0>:
+80107140:	55                   	push   %ebp
+80107141:	89 e5                	mov    %esp,%ebp
+80107143:	57                   	push   %edi
+80107144:	56                   	push   %esi
+80107145:	89 c6                	mov    %eax,%esi
+80107147:	53                   	push   %ebx
+80107148:	89 d3                	mov    %edx,%ebx
+8010714a:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+80107150:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80107156:	83 ec 1c             	sub    $0x1c,%esp
+80107159:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+8010715c:	39 da                	cmp    %ebx,%edx
+8010715e:	73 5b                	jae    801071bb <deallocuvm.part.0+0x7b>
+80107160:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80107163:	89 d7                	mov    %edx,%edi
+80107165:	eb 14                	jmp    8010717b <deallocuvm.part.0+0x3b>
+80107167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010716e:	66 90                	xchg   %ax,%ax
+80107170:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80107176:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80107179:	76 40                	jbe    801071bb <deallocuvm.part.0+0x7b>
+8010717b:	31 c9                	xor    %ecx,%ecx
+8010717d:	89 fa                	mov    %edi,%edx
+8010717f:	89 f0                	mov    %esi,%eax
+80107181:	e8 aa fe ff ff       	call   80107030 <walkpgdir>
+80107186:	89 c3                	mov    %eax,%ebx
+80107188:	85 c0                	test   %eax,%eax
+8010718a:	74 44                	je     801071d0 <deallocuvm.part.0+0x90>
+8010718c:	8b 00                	mov    (%eax),%eax
+8010718e:	a8 01                	test   $0x1,%al
+80107190:	74 de                	je     80107170 <deallocuvm.part.0+0x30>
+80107192:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107197:	74 47                	je     801071e0 <deallocuvm.part.0+0xa0>
+80107199:	83 ec 0c             	sub    $0xc,%esp
+8010719c:	05 00 00 00 80       	add    $0x80000000,%eax
+801071a1:	81 c7 00 10 00 00    	add    $0x1000,%edi
+801071a7:	50                   	push   %eax
+801071a8:	e8 c3 b2 ff ff       	call   80102470 <kfree>
+801071ad:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801071b3:	83 c4 10             	add    $0x10,%esp
+801071b6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+801071b9:	77 c0                	ja     8010717b <deallocuvm.part.0+0x3b>
+801071bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801071be:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801071c1:	5b                   	pop    %ebx
+801071c2:	5e                   	pop    %esi
+801071c3:	5f                   	pop    %edi
+801071c4:	5d                   	pop    %ebp
+801071c5:	c3                   	ret    
+801071c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801071cd:	8d 76 00             	lea    0x0(%esi),%esi
+801071d0:	89 fa                	mov    %edi,%edx
+801071d2:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+801071d8:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+801071de:	eb 96                	jmp    80107176 <deallocuvm.part.0+0x36>
+801071e0:	83 ec 0c             	sub    $0xc,%esp
+801071e3:	68 e6 7b 10 80       	push   $0x80107be6
+801071e8:	e8 a3 91 ff ff       	call   80100390 <panic>
+801071ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801071f0 <seginit>:
+801071f0:	f3 0f 1e fb          	endbr32 
+801071f4:	55                   	push   %ebp
+801071f5:	89 e5                	mov    %esp,%ebp
+801071f7:	83 ec 18             	sub    $0x18,%esp
+801071fa:	e8 51 cb ff ff       	call   80103d50 <cpuid>
+801071ff:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80107204:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+8010720a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+8010720e:	c7 80 f8 37 11 80 ff 	movl   $0xffff,-0x7feec808(%eax)
+80107215:	ff 00 00 
+80107218:	c7 80 fc 37 11 80 00 	movl   $0xcf9a00,-0x7feec804(%eax)
+8010721f:	9a cf 00 
+80107222:	c7 80 00 38 11 80 ff 	movl   $0xffff,-0x7feec800(%eax)
+80107229:	ff 00 00 
+8010722c:	c7 80 04 38 11 80 00 	movl   $0xcf9200,-0x7feec7fc(%eax)
+80107233:	92 cf 00 
+80107236:	c7 80 08 38 11 80 ff 	movl   $0xffff,-0x7feec7f8(%eax)
+8010723d:	ff 00 00 
+80107240:	c7 80 0c 38 11 80 00 	movl   $0xcffa00,-0x7feec7f4(%eax)
+80107247:	fa cf 00 
+8010724a:	c7 80 10 38 11 80 ff 	movl   $0xffff,-0x7feec7f0(%eax)
+80107251:	ff 00 00 
+80107254:	c7 80 14 38 11 80 00 	movl   $0xcff200,-0x7feec7ec(%eax)
+8010725b:	f2 cf 00 
+8010725e:	05 f0 37 11 80       	add    $0x801137f0,%eax
+80107263:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80107267:	c1 e8 10             	shr    $0x10,%eax
+8010726a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+8010726e:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80107271:	0f 01 10             	lgdtl  (%eax)
+80107274:	c9                   	leave  
+80107275:	c3                   	ret    
+80107276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010727d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107280 <switchkvm>:
+80107280:	f3 0f 1e fb          	endbr32 
+80107284:	a1 a4 64 11 80       	mov    0x801164a4,%eax
+80107289:	05 00 00 00 80       	add    $0x80000000,%eax
+8010728e:	0f 22 d8             	mov    %eax,%cr3
+80107291:	c3                   	ret    
+80107292:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801072a0 <switchuvm>:
+801072a0:	f3 0f 1e fb          	endbr32 
+801072a4:	55                   	push   %ebp
+801072a5:	89 e5                	mov    %esp,%ebp
+801072a7:	57                   	push   %edi
+801072a8:	56                   	push   %esi
+801072a9:	53                   	push   %ebx
+801072aa:	83 ec 1c             	sub    $0x1c,%esp
+801072ad:	8b 75 08             	mov    0x8(%ebp),%esi
+801072b0:	85 f6                	test   %esi,%esi
+801072b2:	0f 84 cb 00 00 00    	je     80107383 <switchuvm+0xe3>
+801072b8:	8b 46 08             	mov    0x8(%esi),%eax
+801072bb:	85 c0                	test   %eax,%eax
+801072bd:	0f 84 da 00 00 00    	je     8010739d <switchuvm+0xfd>
+801072c3:	8b 46 04             	mov    0x4(%esi),%eax
+801072c6:	85 c0                	test   %eax,%eax
+801072c8:	0f 84 c2 00 00 00    	je     80107390 <switchuvm+0xf0>
+801072ce:	e8 2d d9 ff ff       	call   80104c00 <pushcli>
+801072d3:	e8 18 ca ff ff       	call   80103cf0 <mycpu>
+801072d8:	89 c3                	mov    %eax,%ebx
+801072da:	e8 11 ca ff ff       	call   80103cf0 <mycpu>
+801072df:	89 c7                	mov    %eax,%edi
+801072e1:	e8 0a ca ff ff       	call   80103cf0 <mycpu>
+801072e6:	83 c7 08             	add    $0x8,%edi
+801072e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801072ec:	e8 ff c9 ff ff       	call   80103cf0 <mycpu>
+801072f1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801072f4:	ba 67 00 00 00       	mov    $0x67,%edx
+801072f9:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80107300:	83 c0 08             	add    $0x8,%eax
+80107303:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+8010730a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+8010730f:	83 c1 08             	add    $0x8,%ecx
+80107312:	c1 e8 18             	shr    $0x18,%eax
+80107315:	c1 e9 10             	shr    $0x10,%ecx
+80107318:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+8010731e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80107324:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80107329:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+80107330:	bb 10 00 00 00       	mov    $0x10,%ebx
+80107335:	e8 b6 c9 ff ff       	call   80103cf0 <mycpu>
+8010733a:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80107341:	e8 aa c9 ff ff       	call   80103cf0 <mycpu>
+80107346:	66 89 58 10          	mov    %bx,0x10(%eax)
+8010734a:	8b 5e 08             	mov    0x8(%esi),%ebx
+8010734d:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107353:	e8 98 c9 ff ff       	call   80103cf0 <mycpu>
+80107358:	89 58 0c             	mov    %ebx,0xc(%eax)
+8010735b:	e8 90 c9 ff ff       	call   80103cf0 <mycpu>
+80107360:	66 89 78 6e          	mov    %di,0x6e(%eax)
+80107364:	b8 28 00 00 00       	mov    $0x28,%eax
+80107369:	0f 00 d8             	ltr    %ax
+8010736c:	8b 46 04             	mov    0x4(%esi),%eax
+8010736f:	05 00 00 00 80       	add    $0x80000000,%eax
+80107374:	0f 22 d8             	mov    %eax,%cr3
+80107377:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010737a:	5b                   	pop    %ebx
+8010737b:	5e                   	pop    %esi
+8010737c:	5f                   	pop    %edi
+8010737d:	5d                   	pop    %ebp
+8010737e:	e9 cd d8 ff ff       	jmp    80104c50 <popcli>
+80107383:	83 ec 0c             	sub    $0xc,%esp
+80107386:	68 6e 82 10 80       	push   $0x8010826e
+8010738b:	e8 00 90 ff ff       	call   80100390 <panic>
+80107390:	83 ec 0c             	sub    $0xc,%esp
+80107393:	68 99 82 10 80       	push   $0x80108299
+80107398:	e8 f3 8f ff ff       	call   80100390 <panic>
+8010739d:	83 ec 0c             	sub    $0xc,%esp
+801073a0:	68 84 82 10 80       	push   $0x80108284
+801073a5:	e8 e6 8f ff ff       	call   80100390 <panic>
+801073aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801073b0 <inituvm>:
+801073b0:	f3 0f 1e fb          	endbr32 
+801073b4:	55                   	push   %ebp
+801073b5:	89 e5                	mov    %esp,%ebp
+801073b7:	57                   	push   %edi
+801073b8:	56                   	push   %esi
+801073b9:	53                   	push   %ebx
+801073ba:	83 ec 1c             	sub    $0x1c,%esp
+801073bd:	8b 45 0c             	mov    0xc(%ebp),%eax
+801073c0:	8b 75 10             	mov    0x10(%ebp),%esi
+801073c3:	8b 7d 08             	mov    0x8(%ebp),%edi
+801073c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801073c9:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+801073cf:	77 4b                	ja     8010741c <inituvm+0x6c>
+801073d1:	e8 5a b2 ff ff       	call   80102630 <kalloc>
+801073d6:	83 ec 04             	sub    $0x4,%esp
+801073d9:	68 00 10 00 00       	push   $0x1000
+801073de:	89 c3                	mov    %eax,%ebx
+801073e0:	6a 00                	push   $0x0
+801073e2:	50                   	push   %eax
+801073e3:	e8 28 da ff ff       	call   80104e10 <memset>
+801073e8:	58                   	pop    %eax
+801073e9:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801073ef:	5a                   	pop    %edx
+801073f0:	6a 06                	push   $0x6
+801073f2:	b9 00 10 00 00       	mov    $0x1000,%ecx
+801073f7:	31 d2                	xor    %edx,%edx
+801073f9:	50                   	push   %eax
+801073fa:	89 f8                	mov    %edi,%eax
+801073fc:	e8 af fc ff ff       	call   801070b0 <mappages>
+80107401:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107404:	89 75 10             	mov    %esi,0x10(%ebp)
+80107407:	83 c4 10             	add    $0x10,%esp
+8010740a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010740d:	89 45 0c             	mov    %eax,0xc(%ebp)
+80107410:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107413:	5b                   	pop    %ebx
+80107414:	5e                   	pop    %esi
+80107415:	5f                   	pop    %edi
+80107416:	5d                   	pop    %ebp
+80107417:	e9 94 da ff ff       	jmp    80104eb0 <memmove>
+8010741c:	83 ec 0c             	sub    $0xc,%esp
+8010741f:	68 ad 82 10 80       	push   $0x801082ad
+80107424:	e8 67 8f ff ff       	call   80100390 <panic>
+80107429:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107430 <loaduvm>:
+80107430:	f3 0f 1e fb          	endbr32 
+80107434:	55                   	push   %ebp
+80107435:	89 e5                	mov    %esp,%ebp
+80107437:	57                   	push   %edi
+80107438:	56                   	push   %esi
+80107439:	53                   	push   %ebx
+8010743a:	83 ec 1c             	sub    $0x1c,%esp
+8010743d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107440:	8b 75 18             	mov    0x18(%ebp),%esi
+80107443:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80107448:	0f 85 99 00 00 00    	jne    801074e7 <loaduvm+0xb7>
+8010744e:	01 f0                	add    %esi,%eax
+80107450:	89 f3                	mov    %esi,%ebx
+80107452:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107455:	8b 45 14             	mov    0x14(%ebp),%eax
+80107458:	01 f0                	add    %esi,%eax
+8010745a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010745d:	85 f6                	test   %esi,%esi
+8010745f:	75 15                	jne    80107476 <loaduvm+0x46>
+80107461:	eb 6d                	jmp    801074d0 <loaduvm+0xa0>
+80107463:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107467:	90                   	nop
+80107468:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+8010746e:	89 f0                	mov    %esi,%eax
+80107470:	29 d8                	sub    %ebx,%eax
+80107472:	39 c6                	cmp    %eax,%esi
+80107474:	76 5a                	jbe    801074d0 <loaduvm+0xa0>
+80107476:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107479:	8b 45 08             	mov    0x8(%ebp),%eax
+8010747c:	31 c9                	xor    %ecx,%ecx
+8010747e:	29 da                	sub    %ebx,%edx
+80107480:	e8 ab fb ff ff       	call   80107030 <walkpgdir>
+80107485:	85 c0                	test   %eax,%eax
+80107487:	74 51                	je     801074da <loaduvm+0xaa>
+80107489:	8b 00                	mov    (%eax),%eax
+8010748b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010748e:	bf 00 10 00 00       	mov    $0x1000,%edi
+80107493:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107498:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+8010749e:	0f 46 fb             	cmovbe %ebx,%edi
+801074a1:	29 d9                	sub    %ebx,%ecx
+801074a3:	05 00 00 00 80       	add    $0x80000000,%eax
+801074a8:	57                   	push   %edi
+801074a9:	51                   	push   %ecx
+801074aa:	50                   	push   %eax
+801074ab:	ff 75 10             	pushl  0x10(%ebp)
+801074ae:	e8 ad a5 ff ff       	call   80101a60 <readi>
+801074b3:	83 c4 10             	add    $0x10,%esp
+801074b6:	39 f8                	cmp    %edi,%eax
+801074b8:	74 ae                	je     80107468 <loaduvm+0x38>
+801074ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801074bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801074c2:	5b                   	pop    %ebx
+801074c3:	5e                   	pop    %esi
+801074c4:	5f                   	pop    %edi
+801074c5:	5d                   	pop    %ebp
+801074c6:	c3                   	ret    
+801074c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801074ce:	66 90                	xchg   %ax,%ax
+801074d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801074d3:	31 c0                	xor    %eax,%eax
+801074d5:	5b                   	pop    %ebx
+801074d6:	5e                   	pop    %esi
+801074d7:	5f                   	pop    %edi
+801074d8:	5d                   	pop    %ebp
+801074d9:	c3                   	ret    
+801074da:	83 ec 0c             	sub    $0xc,%esp
+801074dd:	68 c7 82 10 80       	push   $0x801082c7
+801074e2:	e8 a9 8e ff ff       	call   80100390 <panic>
+801074e7:	83 ec 0c             	sub    $0xc,%esp
+801074ea:	68 68 83 10 80       	push   $0x80108368
+801074ef:	e8 9c 8e ff ff       	call   80100390 <panic>
+801074f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801074fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801074ff:	90                   	nop
+
+80107500 <allocuvm>:
+80107500:	f3 0f 1e fb          	endbr32 
+80107504:	55                   	push   %ebp
+80107505:	89 e5                	mov    %esp,%ebp
+80107507:	57                   	push   %edi
+80107508:	56                   	push   %esi
+80107509:	53                   	push   %ebx
+8010750a:	83 ec 1c             	sub    $0x1c,%esp
+8010750d:	8b 45 10             	mov    0x10(%ebp),%eax
+80107510:	8b 7d 08             	mov    0x8(%ebp),%edi
+80107513:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107516:	85 c0                	test   %eax,%eax
+80107518:	0f 88 b2 00 00 00    	js     801075d0 <allocuvm+0xd0>
+8010751e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80107521:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107524:	0f 82 96 00 00 00    	jb     801075c0 <allocuvm+0xc0>
+8010752a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80107530:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80107536:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107539:	77 40                	ja     8010757b <allocuvm+0x7b>
+8010753b:	e9 83 00 00 00       	jmp    801075c3 <allocuvm+0xc3>
+80107540:	83 ec 04             	sub    $0x4,%esp
+80107543:	68 00 10 00 00       	push   $0x1000
+80107548:	6a 00                	push   $0x0
+8010754a:	50                   	push   %eax
+8010754b:	e8 c0 d8 ff ff       	call   80104e10 <memset>
+80107550:	58                   	pop    %eax
+80107551:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107557:	5a                   	pop    %edx
+80107558:	6a 06                	push   $0x6
+8010755a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+8010755f:	89 f2                	mov    %esi,%edx
+80107561:	50                   	push   %eax
+80107562:	89 f8                	mov    %edi,%eax
+80107564:	e8 47 fb ff ff       	call   801070b0 <mappages>
+80107569:	83 c4 10             	add    $0x10,%esp
+8010756c:	85 c0                	test   %eax,%eax
+8010756e:	78 78                	js     801075e8 <allocuvm+0xe8>
+80107570:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107576:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107579:	76 48                	jbe    801075c3 <allocuvm+0xc3>
+8010757b:	e8 b0 b0 ff ff       	call   80102630 <kalloc>
+80107580:	89 c3                	mov    %eax,%ebx
+80107582:	85 c0                	test   %eax,%eax
+80107584:	75 ba                	jne    80107540 <allocuvm+0x40>
+80107586:	83 ec 0c             	sub    $0xc,%esp
+80107589:	68 e5 82 10 80       	push   $0x801082e5
+8010758e:	e8 1d 91 ff ff       	call   801006b0 <cprintf>
+80107593:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107596:	83 c4 10             	add    $0x10,%esp
+80107599:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010759c:	74 32                	je     801075d0 <allocuvm+0xd0>
+8010759e:	8b 55 10             	mov    0x10(%ebp),%edx
+801075a1:	89 c1                	mov    %eax,%ecx
+801075a3:	89 f8                	mov    %edi,%eax
+801075a5:	e8 96 fb ff ff       	call   80107140 <deallocuvm.part.0>
+801075aa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801075b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801075b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801075b7:	5b                   	pop    %ebx
+801075b8:	5e                   	pop    %esi
+801075b9:	5f                   	pop    %edi
+801075ba:	5d                   	pop    %ebp
+801075bb:	c3                   	ret    
+801075bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801075c0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801075c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801075c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801075c9:	5b                   	pop    %ebx
+801075ca:	5e                   	pop    %esi
+801075cb:	5f                   	pop    %edi
+801075cc:	5d                   	pop    %ebp
+801075cd:	c3                   	ret    
+801075ce:	66 90                	xchg   %ax,%ax
+801075d0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801075d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801075da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801075dd:	5b                   	pop    %ebx
+801075de:	5e                   	pop    %esi
+801075df:	5f                   	pop    %edi
+801075e0:	5d                   	pop    %ebp
+801075e1:	c3                   	ret    
+801075e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801075e8:	83 ec 0c             	sub    $0xc,%esp
+801075eb:	68 fd 82 10 80       	push   $0x801082fd
+801075f0:	e8 bb 90 ff ff       	call   801006b0 <cprintf>
+801075f5:	8b 45 0c             	mov    0xc(%ebp),%eax
+801075f8:	83 c4 10             	add    $0x10,%esp
+801075fb:	39 45 10             	cmp    %eax,0x10(%ebp)
+801075fe:	74 0c                	je     8010760c <allocuvm+0x10c>
+80107600:	8b 55 10             	mov    0x10(%ebp),%edx
+80107603:	89 c1                	mov    %eax,%ecx
+80107605:	89 f8                	mov    %edi,%eax
+80107607:	e8 34 fb ff ff       	call   80107140 <deallocuvm.part.0>
+8010760c:	83 ec 0c             	sub    $0xc,%esp
+8010760f:	53                   	push   %ebx
+80107610:	e8 5b ae ff ff       	call   80102470 <kfree>
+80107615:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010761c:	83 c4 10             	add    $0x10,%esp
+8010761f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107622:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107625:	5b                   	pop    %ebx
+80107626:	5e                   	pop    %esi
+80107627:	5f                   	pop    %edi
+80107628:	5d                   	pop    %ebp
+80107629:	c3                   	ret    
+8010762a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107630 <deallocuvm>:
+80107630:	f3 0f 1e fb          	endbr32 
+80107634:	55                   	push   %ebp
+80107635:	89 e5                	mov    %esp,%ebp
+80107637:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010763a:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010763d:	8b 45 08             	mov    0x8(%ebp),%eax
+80107640:	39 d1                	cmp    %edx,%ecx
+80107642:	73 0c                	jae    80107650 <deallocuvm+0x20>
+80107644:	5d                   	pop    %ebp
+80107645:	e9 f6 fa ff ff       	jmp    80107140 <deallocuvm.part.0>
+8010764a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107650:	89 d0                	mov    %edx,%eax
+80107652:	5d                   	pop    %ebp
+80107653:	c3                   	ret    
+80107654:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010765b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010765f:	90                   	nop
+
+80107660 <freevm>:
+80107660:	f3 0f 1e fb          	endbr32 
+80107664:	55                   	push   %ebp
+80107665:	89 e5                	mov    %esp,%ebp
+80107667:	57                   	push   %edi
+80107668:	56                   	push   %esi
+80107669:	53                   	push   %ebx
+8010766a:	83 ec 0c             	sub    $0xc,%esp
+8010766d:	8b 75 08             	mov    0x8(%ebp),%esi
+80107670:	85 f6                	test   %esi,%esi
+80107672:	74 55                	je     801076c9 <freevm+0x69>
+80107674:	31 c9                	xor    %ecx,%ecx
+80107676:	ba 00 00 00 80       	mov    $0x80000000,%edx
+8010767b:	89 f0                	mov    %esi,%eax
+8010767d:	89 f3                	mov    %esi,%ebx
+8010767f:	e8 bc fa ff ff       	call   80107140 <deallocuvm.part.0>
+80107684:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+8010768a:	eb 0b                	jmp    80107697 <freevm+0x37>
+8010768c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107690:	83 c3 04             	add    $0x4,%ebx
+80107693:	39 df                	cmp    %ebx,%edi
+80107695:	74 23                	je     801076ba <freevm+0x5a>
+80107697:	8b 03                	mov    (%ebx),%eax
+80107699:	a8 01                	test   $0x1,%al
+8010769b:	74 f3                	je     80107690 <freevm+0x30>
+8010769d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801076a2:	83 ec 0c             	sub    $0xc,%esp
+801076a5:	83 c3 04             	add    $0x4,%ebx
+801076a8:	05 00 00 00 80       	add    $0x80000000,%eax
+801076ad:	50                   	push   %eax
+801076ae:	e8 bd ad ff ff       	call   80102470 <kfree>
+801076b3:	83 c4 10             	add    $0x10,%esp
+801076b6:	39 df                	cmp    %ebx,%edi
+801076b8:	75 dd                	jne    80107697 <freevm+0x37>
+801076ba:	89 75 08             	mov    %esi,0x8(%ebp)
+801076bd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801076c0:	5b                   	pop    %ebx
+801076c1:	5e                   	pop    %esi
+801076c2:	5f                   	pop    %edi
+801076c3:	5d                   	pop    %ebp
+801076c4:	e9 a7 ad ff ff       	jmp    80102470 <kfree>
+801076c9:	83 ec 0c             	sub    $0xc,%esp
+801076cc:	68 19 83 10 80       	push   $0x80108319
+801076d1:	e8 ba 8c ff ff       	call   80100390 <panic>
+801076d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801076dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801076e0 <setupkvm>:
+801076e0:	f3 0f 1e fb          	endbr32 
+801076e4:	55                   	push   %ebp
+801076e5:	89 e5                	mov    %esp,%ebp
+801076e7:	56                   	push   %esi
+801076e8:	53                   	push   %ebx
+801076e9:	e8 42 af ff ff       	call   80102630 <kalloc>
+801076ee:	89 c6                	mov    %eax,%esi
+801076f0:	85 c0                	test   %eax,%eax
+801076f2:	74 42                	je     80107736 <setupkvm+0x56>
+801076f4:	83 ec 04             	sub    $0x4,%esp
+801076f7:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
+801076fc:	68 00 10 00 00       	push   $0x1000
+80107701:	6a 00                	push   $0x0
+80107703:	50                   	push   %eax
+80107704:	e8 07 d7 ff ff       	call   80104e10 <memset>
+80107709:	83 c4 10             	add    $0x10,%esp
+8010770c:	8b 43 04             	mov    0x4(%ebx),%eax
+8010770f:	83 ec 08             	sub    $0x8,%esp
+80107712:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80107715:	ff 73 0c             	pushl  0xc(%ebx)
+80107718:	8b 13                	mov    (%ebx),%edx
+8010771a:	50                   	push   %eax
+8010771b:	29 c1                	sub    %eax,%ecx
+8010771d:	89 f0                	mov    %esi,%eax
+8010771f:	e8 8c f9 ff ff       	call   801070b0 <mappages>
+80107724:	83 c4 10             	add    $0x10,%esp
+80107727:	85 c0                	test   %eax,%eax
+80107729:	78 15                	js     80107740 <setupkvm+0x60>
+8010772b:	83 c3 10             	add    $0x10,%ebx
+8010772e:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
+80107734:	75 d6                	jne    8010770c <setupkvm+0x2c>
+80107736:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107739:	89 f0                	mov    %esi,%eax
+8010773b:	5b                   	pop    %ebx
+8010773c:	5e                   	pop    %esi
+8010773d:	5d                   	pop    %ebp
+8010773e:	c3                   	ret    
+8010773f:	90                   	nop
+80107740:	83 ec 0c             	sub    $0xc,%esp
+80107743:	56                   	push   %esi
+80107744:	31 f6                	xor    %esi,%esi
+80107746:	e8 15 ff ff ff       	call   80107660 <freevm>
+8010774b:	83 c4 10             	add    $0x10,%esp
+8010774e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107751:	89 f0                	mov    %esi,%eax
+80107753:	5b                   	pop    %ebx
+80107754:	5e                   	pop    %esi
+80107755:	5d                   	pop    %ebp
+80107756:	c3                   	ret    
+80107757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010775e:	66 90                	xchg   %ax,%ax
+
+80107760 <kvmalloc>:
+80107760:	f3 0f 1e fb          	endbr32 
+80107764:	55                   	push   %ebp
+80107765:	89 e5                	mov    %esp,%ebp
+80107767:	83 ec 08             	sub    $0x8,%esp
+8010776a:	e8 71 ff ff ff       	call   801076e0 <setupkvm>
+8010776f:	a3 a4 64 11 80       	mov    %eax,0x801164a4
+80107774:	05 00 00 00 80       	add    $0x80000000,%eax
+80107779:	0f 22 d8             	mov    %eax,%cr3
+8010777c:	c9                   	leave  
+8010777d:	c3                   	ret    
+8010777e:	66 90                	xchg   %ax,%ax
+
+80107780 <clearpteu>:
+80107780:	f3 0f 1e fb          	endbr32 
+80107784:	55                   	push   %ebp
+80107785:	31 c9                	xor    %ecx,%ecx
+80107787:	89 e5                	mov    %esp,%ebp
+80107789:	83 ec 08             	sub    $0x8,%esp
+8010778c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010778f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107792:	e8 99 f8 ff ff       	call   80107030 <walkpgdir>
+80107797:	85 c0                	test   %eax,%eax
+80107799:	74 05                	je     801077a0 <clearpteu+0x20>
+8010779b:	83 20 fb             	andl   $0xfffffffb,(%eax)
+8010779e:	c9                   	leave  
+8010779f:	c3                   	ret    
+801077a0:	83 ec 0c             	sub    $0xc,%esp
+801077a3:	68 2a 83 10 80       	push   $0x8010832a
+801077a8:	e8 e3 8b ff ff       	call   80100390 <panic>
+801077ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801077b0 <copyuvm>:
+801077b0:	f3 0f 1e fb          	endbr32 
+801077b4:	55                   	push   %ebp
+801077b5:	89 e5                	mov    %esp,%ebp
+801077b7:	57                   	push   %edi
+801077b8:	56                   	push   %esi
+801077b9:	53                   	push   %ebx
+801077ba:	83 ec 1c             	sub    $0x1c,%esp
+801077bd:	e8 1e ff ff ff       	call   801076e0 <setupkvm>
+801077c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801077c5:	85 c0                	test   %eax,%eax
+801077c7:	0f 84 9b 00 00 00    	je     80107868 <copyuvm+0xb8>
+801077cd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801077d0:	85 c9                	test   %ecx,%ecx
+801077d2:	0f 84 90 00 00 00    	je     80107868 <copyuvm+0xb8>
+801077d8:	31 f6                	xor    %esi,%esi
+801077da:	eb 46                	jmp    80107822 <copyuvm+0x72>
+801077dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801077e0:	83 ec 04             	sub    $0x4,%esp
+801077e3:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+801077e9:	68 00 10 00 00       	push   $0x1000
+801077ee:	57                   	push   %edi
+801077ef:	50                   	push   %eax
+801077f0:	e8 bb d6 ff ff       	call   80104eb0 <memmove>
+801077f5:	58                   	pop    %eax
+801077f6:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801077fc:	5a                   	pop    %edx
+801077fd:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107800:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107805:	89 f2                	mov    %esi,%edx
+80107807:	50                   	push   %eax
+80107808:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010780b:	e8 a0 f8 ff ff       	call   801070b0 <mappages>
+80107810:	83 c4 10             	add    $0x10,%esp
+80107813:	85 c0                	test   %eax,%eax
+80107815:	78 61                	js     80107878 <copyuvm+0xc8>
+80107817:	81 c6 00 10 00 00    	add    $0x1000,%esi
+8010781d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107820:	76 46                	jbe    80107868 <copyuvm+0xb8>
+80107822:	8b 45 08             	mov    0x8(%ebp),%eax
+80107825:	31 c9                	xor    %ecx,%ecx
+80107827:	89 f2                	mov    %esi,%edx
+80107829:	e8 02 f8 ff ff       	call   80107030 <walkpgdir>
+8010782e:	85 c0                	test   %eax,%eax
+80107830:	74 61                	je     80107893 <copyuvm+0xe3>
+80107832:	8b 00                	mov    (%eax),%eax
+80107834:	a8 01                	test   $0x1,%al
+80107836:	74 4e                	je     80107886 <copyuvm+0xd6>
+80107838:	89 c7                	mov    %eax,%edi
+8010783a:	25 ff 0f 00 00       	and    $0xfff,%eax
+8010783f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107842:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107848:	e8 e3 ad ff ff       	call   80102630 <kalloc>
+8010784d:	89 c3                	mov    %eax,%ebx
+8010784f:	85 c0                	test   %eax,%eax
+80107851:	75 8d                	jne    801077e0 <copyuvm+0x30>
+80107853:	83 ec 0c             	sub    $0xc,%esp
+80107856:	ff 75 e0             	pushl  -0x20(%ebp)
+80107859:	e8 02 fe ff ff       	call   80107660 <freevm>
+8010785e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80107865:	83 c4 10             	add    $0x10,%esp
+80107868:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010786b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010786e:	5b                   	pop    %ebx
+8010786f:	5e                   	pop    %esi
+80107870:	5f                   	pop    %edi
+80107871:	5d                   	pop    %ebp
+80107872:	c3                   	ret    
+80107873:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107877:	90                   	nop
+80107878:	83 ec 0c             	sub    $0xc,%esp
+8010787b:	53                   	push   %ebx
+8010787c:	e8 ef ab ff ff       	call   80102470 <kfree>
+80107881:	83 c4 10             	add    $0x10,%esp
+80107884:	eb cd                	jmp    80107853 <copyuvm+0xa3>
+80107886:	83 ec 0c             	sub    $0xc,%esp
+80107889:	68 4e 83 10 80       	push   $0x8010834e
+8010788e:	e8 fd 8a ff ff       	call   80100390 <panic>
+80107893:	83 ec 0c             	sub    $0xc,%esp
+80107896:	68 34 83 10 80       	push   $0x80108334
+8010789b:	e8 f0 8a ff ff       	call   80100390 <panic>
+
+801078a0 <uva2ka>:
+801078a0:	f3 0f 1e fb          	endbr32 
+801078a4:	55                   	push   %ebp
+801078a5:	31 c9                	xor    %ecx,%ecx
+801078a7:	89 e5                	mov    %esp,%ebp
+801078a9:	83 ec 08             	sub    $0x8,%esp
+801078ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+801078af:	8b 45 08             	mov    0x8(%ebp),%eax
+801078b2:	e8 79 f7 ff ff       	call   80107030 <walkpgdir>
+801078b7:	8b 00                	mov    (%eax),%eax
+801078b9:	c9                   	leave  
+801078ba:	89 c2                	mov    %eax,%edx
+801078bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801078c1:	83 e2 05             	and    $0x5,%edx
+801078c4:	05 00 00 00 80       	add    $0x80000000,%eax
+801078c9:	83 fa 05             	cmp    $0x5,%edx
+801078cc:	ba 00 00 00 00       	mov    $0x0,%edx
+801078d1:	0f 45 c2             	cmovne %edx,%eax
+801078d4:	c3                   	ret    
+801078d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801078dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801078e0 <copyout>:
+801078e0:	f3 0f 1e fb          	endbr32 
+801078e4:	55                   	push   %ebp
+801078e5:	89 e5                	mov    %esp,%ebp
+801078e7:	57                   	push   %edi
+801078e8:	56                   	push   %esi
+801078e9:	53                   	push   %ebx
+801078ea:	83 ec 0c             	sub    $0xc,%esp
+801078ed:	8b 75 14             	mov    0x14(%ebp),%esi
+801078f0:	8b 55 0c             	mov    0xc(%ebp),%edx
+801078f3:	85 f6                	test   %esi,%esi
+801078f5:	75 3c                	jne    80107933 <copyout+0x53>
+801078f7:	eb 67                	jmp    80107960 <copyout+0x80>
+801078f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107900:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107903:	89 fb                	mov    %edi,%ebx
+80107905:	29 d3                	sub    %edx,%ebx
+80107907:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010790d:	39 f3                	cmp    %esi,%ebx
+8010790f:	0f 47 de             	cmova  %esi,%ebx
+80107912:	29 fa                	sub    %edi,%edx
+80107914:	83 ec 04             	sub    $0x4,%esp
+80107917:	01 c2                	add    %eax,%edx
+80107919:	53                   	push   %ebx
+8010791a:	ff 75 10             	pushl  0x10(%ebp)
+8010791d:	52                   	push   %edx
+8010791e:	e8 8d d5 ff ff       	call   80104eb0 <memmove>
+80107923:	01 5d 10             	add    %ebx,0x10(%ebp)
+80107926:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+8010792c:	83 c4 10             	add    $0x10,%esp
+8010792f:	29 de                	sub    %ebx,%esi
+80107931:	74 2d                	je     80107960 <copyout+0x80>
+80107933:	89 d7                	mov    %edx,%edi
+80107935:	83 ec 08             	sub    $0x8,%esp
+80107938:	89 55 0c             	mov    %edx,0xc(%ebp)
+8010793b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107941:	57                   	push   %edi
+80107942:	ff 75 08             	pushl  0x8(%ebp)
+80107945:	e8 56 ff ff ff       	call   801078a0 <uva2ka>
+8010794a:	83 c4 10             	add    $0x10,%esp
+8010794d:	85 c0                	test   %eax,%eax
+8010794f:	75 af                	jne    80107900 <copyout+0x20>
+80107951:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107954:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107959:	5b                   	pop    %ebx
+8010795a:	5e                   	pop    %esi
+8010795b:	5f                   	pop    %edi
+8010795c:	5d                   	pop    %ebp
+8010795d:	c3                   	ret    
+8010795e:	66 90                	xchg   %ax,%ax
+80107960:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107963:	31 c0                	xor    %eax,%eax
+80107965:	5b                   	pop    %ebx
+80107966:	5e                   	pop    %esi
+80107967:	5f                   	pop    %edi
+80107968:	5d                   	pop    %ebp
+80107969:	c3                   	ret    
diff -ruN xv6-public/kernel.sym xv6-public-partB_sjf/kernel.sym
--- xv6-public/kernel.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/kernel.sym	2022-10-07 23:09:15.822924498 +0530
@@ -0,0 +1,538 @@
+80100000 .text
+80107980 .rodata
+80109000 .data
+8010b520 .bss
+00000000 .debug_line
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_aranges
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 .comment
+00000000 bio.c
+00000000 console.c
+8010b520 cons
+8010b558 panicked
+80100410 consputc.part.0
+801005a0 printint
+801079f0 digits.1596
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+801011b0 bfree
+80101230 balloc
+80101340 iget
+80101430 bmap
+80101d70 namex
+00000000 ide.c
+80102070 idestart
+8010b580 idelock
+8010b560 havedisk1
+8010b564 idequeue
+00000000 ioapic.c
+00000000 kalloc.c
+00000000 kbd.c
+8010b5b4 shift.1422
+80107d20 shiftcode
+80107c20 togglecode
+80107c00 charcode.1423
+80109200 normalmap
+80109100 shiftmap
+80109000 ctlmap
+00000000 lapic.c
+00000000 log.c
+80102b90 install_trans
+80102c30 write_head
+00000000 main.c
+80102fe0 mpmain
+80103020 mpenter
+00000000 mp.c
+80103170 mpsearch1
+00000000 picirq.c
+00000000 pipe.c
+00000000 proc.c
+80103790 allocproc
+8010b000 first.1676
+801039d0 wakeup1
+8010b5b8 initproc
+80107fd4 states.1702
+00000000 sleeplock.c
+00000000 spinlock.c
+00000000 string.c
+00000000 syscall.c
+80108060 syscalls
+00000000 sysfile.c
+80105250 create
+801053f0 argfd.constprop.0
+00000000 sysproc.c
+00000000 trap.c
+00000000 uart.c
+80106430 uartgetc
+8010b5bc uart
+80106460 uartputc.part.0
+00000000 vm.c
+80107030 walkpgdir
+801070b0 mappages
+80107140 deallocuvm.part.0
+8010b420 kmap
+80100290 consoleread
+80106f83 vector242
+801069da vector119
+8010000c entry
+801068ba vector87
+801068b1 vector86
+80104fd0 safestrcpy
+80105590 sys_close
+80106fef vector251
+801068de vector91
+801066d4 vector33
+80106bc3 vector162
+80104300 yield
+80113680 log
+80113640 kmem
+80106e27 vector213
+80106977 vector108
+801064b0 uartinit
+8010672e vector43
+801028c0 lapiceoi
+80106be7 vector165
+80106cd7 vector185
+80102380 ioapicinit
+801069b6 vector115
+80100ff0 fileread
+801069f5 vector122
+80105ee0 sys_sbrk
+80113760 ioapicid
+80106b7b vector156
+80106fa7 vector245
+80113634 ioapic
+80106d07 vector189
+801065f8 vector7
+801067d0 vector61
+80106683 vector24
+80106992 vector111
+80106d8b vector200
+80106806 vector67
+80106aa3 vector138
+80106845 vector74
+80104140 sched
+80104eb0 memmove
+801067ac vector57
+801051e0 syscall
+80106e33 vector214
+80106926 vector99
+80103d50 cpuid
+80101b60 writei
+80106ac7 vector141
+80105e40 sys_fork
+8010c5c0 bcache
+80106c3b vector172
+80106f77 vector241
+80104ba0 getcallerpcs
+801048c0 set_burst_time_system
+80105aa0 sys_mkdir
+80107007 vector253
+801065d4 vector3
+801065cb vector2
+80101c90 namecmp
+80106ecf vector227
+80106e03 vector210
+801051a0 argstr
+80106eab vector224
+8010671c vector41
+801006b0 cprintf
+80100e70 filedup
+80102030 namei
+80106668 vector21
+80100040 binit
+80106c77 vector177
+801069d1 vector118
+80106821 vector70
+80106818 vector69
+80106f47 vector237
+801067eb vector64
+8010669e vector27
+80106a5b vector132
+80106ce3 vector186
+801054b0 sys_read
+80106e57 vector217
+80105050 fetchint
+801076e0 setupkvm
+80104f10 memcpy
+80107660 freevm
+801065c2 vector1
+80106c83 vector178
+80106701 vector38
+80102470 kfree
+80113840 pqueue
+80106f53 vector238
+80103cf0 mycpu
+80101890 iput
+80106a67 vector133
+8010683c vector73
+80106aeb vector144
+80107013 vector254
+80101500 readsb
+8010b004 nextpid
+80106938 vector101
+80106e0f vector211
+801031f0 mpinit
+80106c53 vector174
+80106f8f vector243
+80100de0 fileinit
+80106090 sys_set_burst_time
+80104b80 initlock
+80106a2b vector128
+801078e0 copyout
+80106884 vector81
+801043b0 sleep
+801028e0 microdelay
+80106626 vector13
+80106776 vector51
+8010663d vector16
+80110f20 input
+80106f6b vector240
+80106791 vector54
+80106656 vector19
+801068e7 vector92
+80106f9b vector244
+80101a30 stati
+80106abb vector140
+80105e80 sys_kill
+80106740 vector45
+80106872 vector79
+80103500 pipeclose
+80106ee7 vector229
+80106b93 vector158
+801055e0 sys_fstat
+80100640 consolewrite
+8010670a vector39
+80106c0b vector168
+80102da0 end_op
+801066e6 vector35
+801069a4 vector113
+80102510 freerange
+80106a10 vector125
+80107500 allocuvm
+80106141 trapret
+80106e4b vector216
+801067e2 vector63
+80106695 vector26
+80106d37 vector193
+801027a0 lapicinit
+80106d5b vector196
+80106df7 vector209
+801065dd vector4
+80106c23 vector170
+8010b5c0 stack
+80106a8b vector136
+80106611 vector10
+80106dd3 vector206
+80101840 iunlock
+80105f30 sys_sleep
+8010701f vector255
+80106ca7 vector181
+801067be vector59
+801068a8 vector85
+8010689f vector84
+80106cbf vector183
+80106b9f vector159
+80103b30 extractMin
+80106e1b vector212
+80105630 sys_link
+80106752 vector47
+80106edb vector228
+80106725 vector42
+801069ad vector114
+801078a0 uva2ka
+80106c5f vector175
+80106adf vector143
+80100e00 filealloc
+801045b0 wakeup
+80106a43 vector130
+80106fb3 vector246
+80106608 vector9
+80106ad3 vector142
+8010692f vector100
+80106d97 vector201
+80107780 clearpteu
+80103d70 myproc
+80106150 tvinit
+801060c0 sys_get_burst_time
+801067c7 vector60
+8010667a vector23
+80101730 idup
+80106f3b vector236
+80102780 kbdintr
+80105960 sys_open
+80106eff vector231
+801067fd vector66
+801066b0 vector29
+80101a60 readi
+80106a7f vector135
+80100860 consoleintr
+801045f0 kill
+80106860 vector77
+801015e0 ialloc
+80106c9b vector180
+801164a4 kpgdir
+80106deb vector208
+80102990 cmostime
+801065a0 uartintr
+8010691d vector98
+80106914 vector97
+80106c6b vector176
+80106d43 vector194
+801066cb vector32
+801049f0 getCurrentPID_system
+80106030 sys_getProcInfo
+801164a8 end
+80106d7f vector199
+80106a4f vector131
+80106ffb vector252
+80101090 filewrite
+801065b9 vector0
+801050f0 argint
+80100a80 exec
+80106af7 vector145
+80105520 sys_write
+80104dc0 release
+80105090 fetchstr
+8010696e vector107
+80113980 defaultParent
+80106713 vector40
+80104470 wait
+80106941 vector102
+8010a000 entrypgdir
+0010000c _start
+801067a3 vector56
+8010680f vector68
+801065ef vector6
+8010b48c _binary_initcode_end
+80100000 multiboot_header
+80106a37 vector129
+80104080 scheduler
+80101cb0 dirlookup
+80106d67 vector197
+80100ec0 fileclose
+80102d30 begin_op
+80106b4b vector152
+80107760 kvmalloc
+80106ef3 vector230
+80104f20 strncmp
+801066f8 vector37
+80106dc7 vector205
+80106bb7 vector161
+80115c60 tickslock
+801035a0 pipewrite
+80104f70 strncpy
+8010682a vector71
+801077b0 copyuvm
+80110fc0 ftable
+80106bab vector160
+80105140 argptr
+80106e3f vector215
+801060d0 sys_getCurrentInfo
+80106b87 vector157
+80105440 sys_dup
+8010699b vector112
+80100390 panic
+80103890 forkret
+80106cb3 vector182
+8010661f vector12
+80104e60 memcmp
+801026a0 kbdgetc
+80106980 vector109
+8010665f vector20
+80103f50 fork
+80106788 vector53
+8010664d vector18
+80103be0 changeKey
+0000008a _binary_entryother_size
+80113780 cpus
+80104ae0 releasesleep
+80106902 vector95
+80104cb0 holding
+801119c0 sb
+80104d00 acquire
+80106ec3 vector226
+80102050 nameiparent
+80106764 vector49
+80106737 vector44
+8011367c lapic
+80106869 vector78
+80106129 alltraps
+80106c47 vector173
+801069c8 vector117
+8010688d vector82
+80106e93 vector222
+80106010 sys_getNumProc
+80106601 vector8
+80106b27 vector149
+801016a0 iupdate
+80109000 data
+80104e10 memset
+80106f0b vector232
+80103040 main
+80107280 switchkvm
+80106965 vector106
+80106e7b vector220
+801068d5 vector90
+80106bcf vector163
+80106f23 vector234
+80102f10 log_write
+80104a80 acquiresleep
+80105780 sys_unlink
+801067d9 vector62
+8010668c vector25
+80106d73 vector198
+801069e3 vector120
+8010b48c _binary_entryother_start
+80102560 kinit1
+8010676d vector50
+80106634 vector15
+80106b3f vector151
+80103a30 fix
+80106896 vector83
+801068cc vector89
+801068c3 vector88
+80106200 trap
+80105fe0 sys_uptime
+80106c8f vector179
+801066dd vector34
+80106749 vector46
+80106a73 vector134
+80106e9f vector223
+80115ca0 idt
+80106e63 vector218
+80103cc0 pinit
+80107630 deallocuvm
+80106eb7 vector225
+801028a0 lapicid
+80106cef vector187
+80103ed0 growproc
+80104b20 holdingsleep
+80113830 ncpu
+801066b9 vector30
+80103da0 userinit
+801000d0 bread
+80106a22 vector127
+801036a0 piperead
+801164a0 ticks
+80106d2b vector192
+80106bf3 vector166
+80100a30 consoleinit
+80106857 vector76
+8010684e vector75
+801021e0 ideintr
+80106d4f vector195
+80106b33 vector150
+801067b5 vector58
+80106fcb vector248
+801069fe vector123
+8010690b vector96
+801066c2 vector31
+80106daf vector203
+80106aaf vector139
+80106b57 vector153
+80106bdb vector164
+80104690 procdump
+801069ec vector121
+80106570 uartputc
+801065e6 vector5
+80106bff vector167
+80106b6f vector155
+80106fd7 vector249
+801001f0 brelse
+80106fe3 vector250
+801047c0 getMaxPID_system
+80106a07 vector124
+80106989 vector110
+80106dbb vector204
+80101760 ilock
+80105c60 sys_exec
+80106a97 vector137
+8010b460 _binary_initcode_start
+80105033 swtch
+80106fbf vector247
+80106671 vector22
+80106da3 vector202
+801071f0 seginit
+80101a00 iunlockput
+80106833 vector72
+8010679a vector55
+80106a19 vector126
+801067f4 vector65
+801066a7 vector28
+8010b516 _binary_entryother_end
+80106c17 vector169
+80106120 sys_getCurrentPID
+801001b0 bwrite
+80106f17 vector233
+801061d0 idtinit
+80104200 exit
+80105e70 sys_wait
+80105e50 sys_exit
+80101f70 dirlink
+0000002c _binary_initcode_size
+80106b0f vector147
+80104a40 initsleeplock
+80102150 ideinit
+80107430 loaduvm
+80106953 vector104
+801069bf vector116
+80104930 getCurrentInfo_system
+80113a20 ptable
+80102430 ioapicenable
+80103940 insert
+80104900 get_burst_time_system
+80104c50 popcli
+8010b008 vectors
+8010677f vector52
+80106646 vector17
+80106ccb vector184
+80105010 strlen
+801038e0 isEmpty
+80105d60 sys_pipe
+80101540 iinit
+801033d0 picinit
+80106ddf vector207
+801073b0 inituvm
+80106d13 vector190
+80106f5f vector239
+801068f9 vector94
+801068f0 vector93
+80102c90 initlog
+80106cfb vector188
+8010675b vector48
+80102280 iderw
+80106e6f vector219
+80106b1b vector148
+80106e87 vector221
+80102630 kalloc
+80111960 devsw
+80105ec0 sys_getpid
+8010687b vector80
+80106c2f vector171
+80106b63 vector154
+801066ef vector36
+801033f0 pipealloc
+80106f2f vector235
+8010695c vector105
+80105bb0 sys_chdir
+801119e0 icache
+80104810 getProcInfo_system
+80106020 sys_getMaxPID
+80106b03 vector146
+80106d1f vector191
+8010694a vector103
+80105b10 sys_mknod
+801028f0 lapicstartap
+80104770 getNumProc_system
+801072a0 switchuvm
+80104c00 pushcli
+801025d0 kinit2
+80106618 vector11
+8010662d vector14
+80100fa0 filestat
Binary files xv6-public/_kill and xv6-public-partB_sjf/_kill differ
diff -ruN xv6-public/kill.asm xv6-public-partB_sjf/kill.asm
--- xv6-public/kill.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/kill.asm	2022-10-07 20:27:43.987115000 +0530
@@ -0,0 +1,1511 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 30                	jle    51 <main+0x51>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2e:	66 90                	xchg   %ax,%ax
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	e8 23 02 00 00       	call   260 <atoi>
+  3d:	89 04 24             	mov    %eax,(%esp)
+  40:	e8 be 02 00 00       	call   303 <kill>
+  for(i=1; i<argc; i++)
+  45:	83 c4 10             	add    $0x10,%esp
+  48:	39 f3                	cmp    %esi,%ebx
+  4a:	75 e4                	jne    30 <main+0x30>
+  exit();
+  4c:	e8 82 02 00 00       	call   2d3 <exit>
+    printf(2, "usage: kill pid...\n");
+  51:	50                   	push   %eax
+  52:	50                   	push   %eax
+  53:	68 00 0a 00 00       	push   $0xa00
+  58:	6a 02                	push   $0x2
+  5a:	e8 01 04 00 00       	call   460 <printf>
+    exit();
+  5f:	e8 6f 02 00 00       	call   2d3 <exit>
+  64:	66 90                	xchg   %ax,%ax
+  66:	66 90                	xchg   %ax,%ax
+  68:	66 90                	xchg   %ax,%ax
+  6a:	66 90                	xchg   %ax,%ax
+  6c:	66 90                	xchg   %ax,%ax
+  6e:	66 90                	xchg   %ax,%ax
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	f3 0f 1e fb          	endbr32 
+  74:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  75:	31 c0                	xor    %eax,%eax
+{
+  77:	89 e5                	mov    %esp,%ebp
+  79:	53                   	push   %ebx
+  7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  7d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  87:	83 c0 01             	add    $0x1,%eax
+  8a:	84 d2                	test   %dl,%dl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	89 c8                	mov    %ecx,%eax
+  90:	5b                   	pop    %ebx
+  91:	5d                   	pop    %ebp
+  92:	c3                   	ret    
+  93:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	53                   	push   %ebx
+  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  ae:	0f b6 01             	movzbl (%ecx),%eax
+  b1:	0f b6 1a             	movzbl (%edx),%ebx
+  b4:	84 c0                	test   %al,%al
+  b6:	75 19                	jne    d1 <strcmp+0x31>
+  b8:	eb 26                	jmp    e0 <strcmp+0x40>
+  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  c0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  c4:	83 c1 01             	add    $0x1,%ecx
+  c7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ca:	0f b6 1a             	movzbl (%edx),%ebx
+  cd:	84 c0                	test   %al,%al
+  cf:	74 0f                	je     e0 <strcmp+0x40>
+  d1:	38 d8                	cmp    %bl,%al
+  d3:	74 eb                	je     c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  d5:	29 d8                	sub    %ebx,%eax
+}
+  d7:	5b                   	pop    %ebx
+  d8:	5d                   	pop    %ebp
+  d9:	c3                   	ret    
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ee:	66 90                	xchg   %ax,%ax
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fa:	80 3a 00             	cmpb   $0x0,(%edx)
+  fd:	74 21                	je     120 <strlen+0x30>
+  ff:	31 c0                	xor    %eax,%eax
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 108:	83 c0 01             	add    $0x1,%eax
+ 10b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 10f:	89 c1                	mov    %eax,%ecx
+ 111:	75 f5                	jne    108 <strlen+0x18>
+    ;
+  return n;
+}
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	5d                   	pop    %ebp
+ 116:	c3                   	ret    
+ 117:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 120:	31 c9                	xor    %ecx,%ecx
+}
+ 122:	5d                   	pop    %ebp
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	c3                   	ret    
+ 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	f3 0f 1e fb          	endbr32 
+ 134:	55                   	push   %ebp
+ 135:	89 e5                	mov    %esp,%ebp
+ 137:	57                   	push   %edi
+ 138:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 13b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 141:	89 d7                	mov    %edx,%edi
+ 143:	fc                   	cld    
+ 144:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 146:	89 d0                	mov    %edx,%eax
+ 148:	5f                   	pop    %edi
+ 149:	5d                   	pop    %ebp
+ 14a:	c3                   	ret    
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	8b 45 08             	mov    0x8(%ebp),%eax
+ 15a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 15e:	0f b6 10             	movzbl (%eax),%edx
+ 161:	84 d2                	test   %dl,%dl
+ 163:	75 16                	jne    17b <strchr+0x2b>
+ 165:	eb 21                	jmp    188 <strchr+0x38>
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+ 170:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	84 d2                	test   %dl,%dl
+ 179:	74 0d                	je     188 <strchr+0x38>
+    if(*s == c)
+ 17b:	38 d1                	cmp    %dl,%cl
+ 17d:	75 f1                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 17f:	5d                   	pop    %ebp
+ 180:	c3                   	ret    
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 188:	31 c0                	xor    %eax,%eax
+}
+ 18a:	5d                   	pop    %ebp
+ 18b:	c3                   	ret    
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	57                   	push   %edi
+ 198:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 199:	31 f6                	xor    %esi,%esi
+{
+ 19b:	53                   	push   %ebx
+ 19c:	89 f3                	mov    %esi,%ebx
+ 19e:	83 ec 1c             	sub    $0x1c,%esp
+ 1a1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a4:	eb 33                	jmp    1d9 <gets+0x49>
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1b6:	6a 01                	push   $0x1
+ 1b8:	50                   	push   %eax
+ 1b9:	6a 00                	push   $0x0
+ 1bb:	e8 2b 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1c0:	83 c4 10             	add    $0x10,%esp
+ 1c3:	85 c0                	test   %eax,%eax
+ 1c5:	7e 1c                	jle    1e3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1cb:	83 c7 01             	add    $0x1,%edi
+ 1ce:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1d1:	3c 0a                	cmp    $0xa,%al
+ 1d3:	74 23                	je     1f8 <gets+0x68>
+ 1d5:	3c 0d                	cmp    $0xd,%al
+ 1d7:	74 1f                	je     1f8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	89 fe                	mov    %edi,%esi
+ 1de:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1e1:	7c cd                	jl     1b0 <gets+0x20>
+ 1e3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ee:	5b                   	pop    %ebx
+ 1ef:	5e                   	pop    %esi
+ 1f0:	5f                   	pop    %edi
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f7:	90                   	nop
+ 1f8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fe:	01 de                	add    %ebx,%esi
+ 200:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 202:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 205:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 208:	5b                   	pop    %ebx
+ 209:	5e                   	pop    %esi
+ 20a:	5f                   	pop    %edi
+ 20b:	5d                   	pop    %ebp
+ 20c:	c3                   	ret    
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	56                   	push   %esi
+ 218:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	6a 00                	push   $0x0
+ 21e:	ff 75 08             	pushl  0x8(%ebp)
+ 221:	e8 ed 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 226:	83 c4 10             	add    $0x10,%esp
+ 229:	85 c0                	test   %eax,%eax
+ 22b:	78 2b                	js     258 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 22d:	83 ec 08             	sub    $0x8,%esp
+ 230:	ff 75 0c             	pushl  0xc(%ebp)
+ 233:	89 c3                	mov    %eax,%ebx
+ 235:	50                   	push   %eax
+ 236:	e8 f0 00 00 00       	call   32b <fstat>
+  close(fd);
+ 23b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 240:	e8 b6 00 00 00       	call   2fb <close>
+  return r;
+ 245:	83 c4 10             	add    $0x10,%esp
+}
+ 248:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 24b:	89 f0                	mov    %esi,%eax
+ 24d:	5b                   	pop    %ebx
+ 24e:	5e                   	pop    %esi
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 258:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 25d:	eb e9                	jmp    248 <stat+0x38>
+ 25f:	90                   	nop
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	53                   	push   %ebx
+ 268:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 26b:	0f be 02             	movsbl (%edx),%eax
+ 26e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 271:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 274:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 279:	77 1a                	ja     295 <atoi+0x35>
+ 27b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	89 c8                	mov    %ecx,%eax
+ 297:	5b                   	pop    %ebx
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+ 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	f3 0f 1e fb          	endbr32 
+ 2a4:	55                   	push   %ebp
+ 2a5:	89 e5                	mov    %esp,%ebp
+ 2a7:	57                   	push   %edi
+ 2a8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2ab:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ae:	56                   	push   %esi
+ 2af:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b2:	85 c0                	test   %eax,%eax
+ 2b4:	7e 0f                	jle    2c5 <memmove+0x25>
+ 2b6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b8:	89 d7                	mov    %edx,%edi
+ 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getNumProc>:
+SYSCALL(getNumProc)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 37b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 383:	b8 18 00 00 00       	mov    $0x18,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 393:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 39b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <getCurrentPID>:
+ 3a3:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3bc:	89 d1                	mov    %edx,%ecx
+{
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
+    neg = 1;
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 1c 0a 00 00 	movzbl 0xa1c(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
+  if(neg)
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
+    buf[i++] = '-';
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 40f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 be fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 484:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
+  write(fd, &c, 1);
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 45 fe ff ff       	call   2f3 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
+      if(c == 'd'){
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
+  write(fd, &c, 1);
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 e5 fd ff ff       	call   2f3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 d1 fd ff ff       	call   2f3 <write>
+  for(i = 0; fmt[i]; i++){
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 529:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
+    }
+  }
+}
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 594:	e8 5a fd ff ff       	call   2f3 <write>
+        ap++;
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
+        while(*s != 0){
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
+          s = "(null)";
+ 5e6:	bb 14 0a 00 00       	mov    $0xa14,%ebx
+        while(*s != 0){
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 e1 fc ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 635:	a1 60 0d 00 00       	mov    0xd60,%eax
+{
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
+{
+ 658:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	a3 60 0d 00 00       	mov    %eax,0xd60
+}
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 60 0d 00 00       	mov    %eax,0xd60
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6d0:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
+ 71f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 2b fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
+  hp->s.size = nu;
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
+  return freep;
+ 747:	a1 60 0d 00 00       	mov    0xd60,%eax
+      if((p = morecore(nunits)) == 0)
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
+        return 0;
+  }
+}
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 756:	31 c0                	xor    %eax,%eax
+}
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 777:	a3 60 0d 00 00       	mov    %eax,0xd60
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 60 0d 00 00 64 	movl   $0xd64,0xd60
+ 797:	0d 00 00 
+    base.s.size = 0;
+ 79a:	bf 64 0d 00 00       	mov    $0xd64,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 64 0d 00 00 64 	movl   $0xd64,0xd64
+ 7a6:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7ab:	c7 05 68 0d 00 00 00 	movl   $0x0,0xd68
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
+ 7c6:	66 90                	xchg   %ax,%ax
+ 7c8:	66 90                	xchg   %ax,%ax
+ 7ca:	66 90                	xchg   %ax,%ax
+ 7cc:	66 90                	xchg   %ax,%ax
+ 7ce:	66 90                	xchg   %ax,%ax
+
+000007d0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7d0:	f3 0f 1e fb          	endbr32 
+ 7d4:	55                   	push   %ebp
+ 7d5:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 7da:	89 e5                	mov    %esp,%ebp
+ 7dc:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7df:	89 15 80 0d 00 00    	mov    %edx,0xd80
+    for (mti=1; mti<N; mti++)
+ 7e5:	eb 0c                	jmp    7f3 <sgenrand+0x23>
+ 7e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ee:	66 90                	xchg   %ax,%ax
+ 7f0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7f3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7f9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7fb:	3d 3c 17 00 00       	cmp    $0x173c,%eax
+ 800:	75 ee                	jne    7f0 <sgenrand+0x20>
+ 802:	c7 05 5c 0d 00 00 70 	movl   $0x270,0xd5c
+ 809:	02 00 00 
+}
+ 80c:	5d                   	pop    %ebp
+ 80d:	c3                   	ret    
+ 80e:	66 90                	xchg   %ax,%ax
+
+00000810 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 810:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 814:	a1 5c 0d 00 00       	mov    0xd5c,%eax
+ 819:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 81e:	7f 3c                	jg     85c <genrand+0x4c>
+ 820:	8d 50 01             	lea    0x1(%eax),%edx
+ 823:	8b 04 85 80 0d 00 00 	mov    0xd80(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 82a:	89 15 5c 0d 00 00    	mov    %edx,0xd5c
+    y ^= TEMPERING_SHIFT_U(y);
+ 830:	89 c2                	mov    %eax,%edx
+ 832:	c1 ea 0b             	shr    $0xb,%edx
+ 835:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 837:	89 d0                	mov    %edx,%eax
+ 839:	c1 e0 07             	shl    $0x7,%eax
+ 83c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 841:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 843:	89 d0                	mov    %edx,%eax
+ 845:	c1 e0 0f             	shl    $0xf,%eax
+ 848:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 84d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 84f:	89 c2                	mov    %eax,%edx
+ 851:	c1 ea 12             	shr    $0x12,%edx
+ 854:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 856:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 85b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 85c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 861:	0f 84 d2 00 00 00    	je     939 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 867:	31 c0                	xor    %eax,%eax
+ 869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 870:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 877:	83 c0 01             	add    $0x1,%eax
+ 87a:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 881:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 887:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 88d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 88f:	89 d1                	mov    %edx,%ecx
+ 891:	83 e2 01             	and    $0x1,%edx
+ 894:	d1 e9                	shr    %ecx
+ 896:	33 0c 85 b0 13 00 00 	xor    0x13b0(,%eax,4),%ecx
+ 89d:	33 0c 95 30 0a 00 00 	xor    0xa30(,%edx,4),%ecx
+ 8a4:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 8ab:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 8b0:	75 be                	jne    870 <genrand+0x60>
+ 8b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8b8:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 8bf:	83 c0 01             	add    $0x1,%eax
+ 8c2:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 8c9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8cf:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8d5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8d7:	89 d1                	mov    %edx,%ecx
+ 8d9:	83 e2 01             	and    $0x1,%edx
+ 8dc:	d1 e9                	shr    %ecx
+ 8de:	33 0c 85 f0 09 00 00 	xor    0x9f0(,%eax,4),%ecx
+ 8e5:	33 0c 95 30 0a 00 00 	xor    0xa30(,%edx,4),%ecx
+ 8ec:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8f3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8f8:	75 be                	jne    8b8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8fa:	a1 80 0d 00 00       	mov    0xd80,%eax
+ 8ff:	8b 0d 3c 17 00 00    	mov    0x173c,%ecx
+ 905:	89 c2                	mov    %eax,%edx
+ 907:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 90d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 913:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 915:	89 ca                	mov    %ecx,%edx
+ 917:	83 e1 01             	and    $0x1,%ecx
+ 91a:	d1 ea                	shr    %edx
+ 91c:	33 15 b0 13 00 00    	xor    0x13b0,%edx
+ 922:	33 14 8d 30 0a 00 00 	xor    0xa30(,%ecx,4),%edx
+ 929:	89 15 3c 17 00 00    	mov    %edx,0x173c
+ 92f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 934:	e9 f1 fe ff ff       	jmp    82a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 939:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 93e:	b9 3c 17 00 00       	mov    $0x173c,%ecx
+ 943:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 948:	c7 05 80 0d 00 00 05 	movl   $0x1105,0xd80
+ 94f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 952:	eb 07                	jmp    95b <genrand+0x14b>
+ 954:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 958:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 95b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 961:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 963:	39 c1                	cmp    %eax,%ecx
+ 965:	75 f1                	jne    958 <genrand+0x148>
+ 967:	e9 fb fe ff ff       	jmp    867 <genrand+0x57>
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 975:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 977:	89 e5                	mov    %esp,%ebp
+ 979:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 97a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 97d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 97e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 983:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 986:	89 d8                	mov    %ebx,%eax
+ 988:	f7 f1                	div    %ecx
+ 98a:	89 c6                	mov    %eax,%esi
+ 98c:	29 d3                	sub    %edx,%ebx
+ 98e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 990:	e8 7b fe ff ff       	call   810 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 995:	39 d8                	cmp    %ebx,%eax
+ 997:	73 f7                	jae    990 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 999:	31 d2                	xor    %edx,%edx
+}
+ 99b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 99c:	f7 f6                	div    %esi
+}
+ 99e:	5e                   	pop    %esi
+ 99f:	5d                   	pop    %ebp
+ 9a0:	c3                   	ret    
+ 9a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9af:	90                   	nop
+
+000009b0 <randomrange>:
+
+int randomrange(int low, int high){
+ 9b0:	f3 0f 1e fb          	endbr32 
+ 9b4:	55                   	push   %ebp
+ 9b5:	89 e5                	mov    %esp,%ebp
+ 9b7:	57                   	push   %edi
+ 9b8:	56                   	push   %esi
+ 9b9:	53                   	push   %ebx
+ 9ba:	83 ec 0c             	sub    $0xc,%esp
+ 9bd:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9c3:	39 f0                	cmp    %esi,%eax
+ 9c5:	7d 06                	jge    9cd <randomrange+0x1d>
+ 9c7:	89 f2                	mov    %esi,%edx
+ 9c9:	89 c6                	mov    %eax,%esi
+ 9cb:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9cd:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9cf:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9d4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9d6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9d9:	89 d8                	mov    %ebx,%eax
+ 9db:	f7 f1                	div    %ecx
+ 9dd:	89 c7                	mov    %eax,%edi
+ 9df:	29 d3                	sub    %edx,%ebx
+ 9e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9e8:	e8 23 fe ff ff       	call   810 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9ed:	39 d8                	cmp    %ebx,%eax
+ 9ef:	73 f7                	jae    9e8 <randomrange+0x38>
+  return x/bin_size;
+ 9f1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9f3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9f6:	f7 f7                	div    %edi
+ 9f8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9f9:	01 f0                	add    %esi,%eax
+ 9fb:	5e                   	pop    %esi
+ 9fc:	5f                   	pop    %edi
+ 9fd:	5d                   	pop    %ebp
+ 9fe:	c3                   	ret    
diff -ruN xv6-public/kill.d xv6-public-partB_sjf/kill.d
--- xv6-public/kill.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/kill.d	2022-10-07 20:27:43.963115000 +0530
@@ -0,0 +1,2 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/kill.o and xv6-public-partB_sjf/kill.o differ
diff -ruN xv6-public/kill.sym xv6-public-partB_sjf/kill.sym
--- xv6-public/kill.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/kill.sym	2022-10-07 20:27:43.991115000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+00000a00 .rodata
+00000a38 .eh_frame
+00000d5c .data
+00000d60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+00000a1c digits.1105
+00000000 umalloc.c
+00000d60 freep
+00000d64 base
+00000000 random.c
+00000d80 mt
+00000d5c mti
+00000a30 mag01.989
+00000070 strcpy
+000007d0 sgenrand
+00000460 printf
+000002a0 memmove
+0000031b mknod
+00000190 gets
+00000353 getpid
+000006c0 malloc
+00000363 sleep
+00000393 get_burst_time
+00000970 random_at_most
+0000039b getCurrentInfo
+000002e3 pipe
+000002f3 write
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000d60 __bss_start
+00000130 memset
+00000000 main
+0000038b set_burst_time
+000000a0 strcmp
+0000034b dup
+00000810 genrand
+00000373 getNumProc
+00000383 getProcInfo
+00000210 stat
+00000d60 _edata
+00001740 _end
+00000333 link
+000002d3 exit
+0000037b getMaxPID
+00000260 atoi
+000000f0 strlen
+00000313 open
+00000150 strchr
+000003a3 getCurrentPID
+000009b0 randomrange
+0000033b mkdir
+000002fb close
+00000630 free
diff -ruN xv6-public/lapic.d xv6-public-partB_sjf/lapic.d
--- xv6-public/lapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/lapic.d	2022-10-07 20:27:35.655042000 +0530
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Binary files xv6-public/lapic.o and xv6-public-partB_sjf/lapic.o differ
Binary files xv6-public/_ln and xv6-public-partB_sjf/_ln differ
diff -ruN xv6-public/ln.asm xv6-public-partB_sjf/ln.asm
--- xv6-public/ln.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ln.asm	2022-10-07 20:27:44.039116000 +0530
@@ -0,0 +1,1503 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+  if(argc != 3){
+   e:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+  11:	55                   	push   %ebp
+  12:	89 e5                	mov    %esp,%ebp
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  19:	74 13                	je     2e <main+0x2e>
+    printf(2, "Usage: ln old new\n");
+  1b:	52                   	push   %edx
+  1c:	52                   	push   %edx
+  1d:	68 f0 09 00 00       	push   $0x9f0
+  22:	6a 02                	push   $0x2
+  24:	e8 27 04 00 00       	call   450 <printf>
+    exit();
+  29:	e8 95 02 00 00       	call   2c3 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2e:	50                   	push   %eax
+  2f:	50                   	push   %eax
+  30:	ff 73 08             	pushl  0x8(%ebx)
+  33:	ff 73 04             	pushl  0x4(%ebx)
+  36:	e8 e8 02 00 00       	call   323 <link>
+  3b:	83 c4 10             	add    $0x10,%esp
+  3e:	85 c0                	test   %eax,%eax
+  40:	78 05                	js     47 <main+0x47>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  42:	e8 7c 02 00 00       	call   2c3 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  47:	ff 73 08             	pushl  0x8(%ebx)
+  4a:	ff 73 04             	pushl  0x4(%ebx)
+  4d:	68 03 0a 00 00       	push   $0xa03
+  52:	6a 02                	push   $0x2
+  54:	e8 f7 03 00 00       	call   450 <printf>
+  59:	83 c4 10             	add    $0x10,%esp
+  5c:	eb e4                	jmp    42 <main+0x42>
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  65:	31 c0                	xor    %eax,%eax
+{
+  67:	89 e5                	mov    %esp,%ebp
+  69:	53                   	push   %ebx
+  6a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  77:	83 c0 01             	add    $0x1,%eax
+  7a:	84 d2                	test   %dl,%dl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	89 c8                	mov    %ecx,%eax
+  80:	5b                   	pop    %ebx
+  81:	5d                   	pop    %ebp
+  82:	c3                   	ret    
+  83:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  95:	89 e5                	mov    %esp,%ebp
+  97:	53                   	push   %ebx
+  98:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  9b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  9e:	0f b6 01             	movzbl (%ecx),%eax
+  a1:	0f b6 1a             	movzbl (%edx),%ebx
+  a4:	84 c0                	test   %al,%al
+  a6:	75 19                	jne    c1 <strcmp+0x31>
+  a8:	eb 26                	jmp    d0 <strcmp+0x40>
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  b0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  b4:	83 c1 01             	add    $0x1,%ecx
+  b7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ba:	0f b6 1a             	movzbl (%edx),%ebx
+  bd:	84 c0                	test   %al,%al
+  bf:	74 0f                	je     d0 <strcmp+0x40>
+  c1:	38 d8                	cmp    %bl,%al
+  c3:	74 eb                	je     b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  c5:	29 d8                	sub    %ebx,%eax
+}
+  c7:	5b                   	pop    %ebx
+  c8:	5d                   	pop    %ebp
+  c9:	c3                   	ret    
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	f3 0f 1e fb          	endbr32 
+  e4:	55                   	push   %ebp
+  e5:	89 e5                	mov    %esp,%ebp
+  e7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ea:	80 3a 00             	cmpb   $0x0,(%edx)
+  ed:	74 21                	je     110 <strlen+0x30>
+  ef:	31 c0                	xor    %eax,%eax
+  f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f8:	83 c0 01             	add    $0x1,%eax
+  fb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  ff:	89 c1                	mov    %eax,%ecx
+ 101:	75 f5                	jne    f8 <strlen+0x18>
+    ;
+  return n;
+}
+ 103:	89 c8                	mov    %ecx,%eax
+ 105:	5d                   	pop    %ebp
+ 106:	c3                   	ret    
+ 107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 110:	31 c9                	xor    %ecx,%ecx
+}
+ 112:	5d                   	pop    %ebp
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	57                   	push   %edi
+ 128:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 12b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 131:	89 d7                	mov    %edx,%edi
+ 133:	fc                   	cld    
+ 134:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 136:	89 d0                	mov    %edx,%eax
+ 138:	5f                   	pop    %edi
+ 139:	5d                   	pop    %ebp
+ 13a:	c3                   	ret    
+ 13b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 13f:	90                   	nop
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	8b 45 08             	mov    0x8(%ebp),%eax
+ 14a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 14e:	0f b6 10             	movzbl (%eax),%edx
+ 151:	84 d2                	test   %dl,%dl
+ 153:	75 16                	jne    16b <strchr+0x2b>
+ 155:	eb 21                	jmp    178 <strchr+0x38>
+ 157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15e:	66 90                	xchg   %ax,%ax
+ 160:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	84 d2                	test   %dl,%dl
+ 169:	74 0d                	je     178 <strchr+0x38>
+    if(*s == c)
+ 16b:	38 d1                	cmp    %dl,%cl
+ 16d:	75 f1                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 16f:	5d                   	pop    %ebp
+ 170:	c3                   	ret    
+ 171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 178:	31 c0                	xor    %eax,%eax
+}
+ 17a:	5d                   	pop    %ebp
+ 17b:	c3                   	ret    
+ 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	57                   	push   %edi
+ 188:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 189:	31 f6                	xor    %esi,%esi
+{
+ 18b:	53                   	push   %ebx
+ 18c:	89 f3                	mov    %esi,%ebx
+ 18e:	83 ec 1c             	sub    $0x1c,%esp
+ 191:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 194:	eb 33                	jmp    1c9 <gets+0x49>
+ 196:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1a6:	6a 01                	push   $0x1
+ 1a8:	50                   	push   %eax
+ 1a9:	6a 00                	push   $0x0
+ 1ab:	e8 2b 01 00 00       	call   2db <read>
+    if(cc < 1)
+ 1b0:	83 c4 10             	add    $0x10,%esp
+ 1b3:	85 c0                	test   %eax,%eax
+ 1b5:	7e 1c                	jle    1d3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1b7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1bb:	83 c7 01             	add    $0x1,%edi
+ 1be:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c1:	3c 0a                	cmp    $0xa,%al
+ 1c3:	74 23                	je     1e8 <gets+0x68>
+ 1c5:	3c 0d                	cmp    $0xd,%al
+ 1c7:	74 1f                	je     1e8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1c9:	83 c3 01             	add    $0x1,%ebx
+ 1cc:	89 fe                	mov    %edi,%esi
+ 1ce:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d1:	7c cd                	jl     1a0 <gets+0x20>
+ 1d3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1db:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1de:	5b                   	pop    %ebx
+ 1df:	5e                   	pop    %esi
+ 1e0:	5f                   	pop    %edi
+ 1e1:	5d                   	pop    %ebp
+ 1e2:	c3                   	ret    
+ 1e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e7:	90                   	nop
+ 1e8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1eb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1ee:	01 de                	add    %ebx,%esi
+ 1f0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1f2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f8:	5b                   	pop    %ebx
+ 1f9:	5e                   	pop    %esi
+ 1fa:	5f                   	pop    %edi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	56                   	push   %esi
+ 208:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	6a 00                	push   $0x0
+ 20e:	ff 75 08             	pushl  0x8(%ebp)
+ 211:	e8 ed 00 00 00       	call   303 <open>
+  if(fd < 0)
+ 216:	83 c4 10             	add    $0x10,%esp
+ 219:	85 c0                	test   %eax,%eax
+ 21b:	78 2b                	js     248 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 21d:	83 ec 08             	sub    $0x8,%esp
+ 220:	ff 75 0c             	pushl  0xc(%ebp)
+ 223:	89 c3                	mov    %eax,%ebx
+ 225:	50                   	push   %eax
+ 226:	e8 f0 00 00 00       	call   31b <fstat>
+  close(fd);
+ 22b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 230:	e8 b6 00 00 00       	call   2eb <close>
+  return r;
+ 235:	83 c4 10             	add    $0x10,%esp
+}
+ 238:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 23b:	89 f0                	mov    %esi,%eax
+ 23d:	5b                   	pop    %ebx
+ 23e:	5e                   	pop    %esi
+ 23f:	5d                   	pop    %ebp
+ 240:	c3                   	ret    
+ 241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 248:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 24d:	eb e9                	jmp    238 <stat+0x38>
+ 24f:	90                   	nop
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	53                   	push   %ebx
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 25b:	0f be 02             	movsbl (%edx),%eax
+ 25e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 261:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 264:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 269:	77 1a                	ja     285 <atoi+0x35>
+ 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 26f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 270:	83 c2 01             	add    $0x1,%edx
+ 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 02             	movsbl (%edx),%eax
+ 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	89 c8                	mov    %ecx,%eax
+ 287:	5b                   	pop    %ebx
+ 288:	5d                   	pop    %ebp
+ 289:	c3                   	ret    
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	57                   	push   %edi
+ 298:	8b 45 10             	mov    0x10(%ebp),%eax
+ 29b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 29e:	56                   	push   %esi
+ 29f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2a2:	85 c0                	test   %eax,%eax
+ 2a4:	7e 0f                	jle    2b5 <memmove+0x25>
+ 2a6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2a8:	89 d7                	mov    %edx,%edi
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2b1:	39 f8                	cmp    %edi,%eax
+ 2b3:	75 fb                	jne    2b0 <memmove+0x20>
+  return vdst;
+}
+ 2b5:	5e                   	pop    %esi
+ 2b6:	89 d0                	mov    %edx,%eax
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+
+000002bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <exit>:
+SYSCALL(exit)
+ 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <wait>:
+SYSCALL(wait)
+ 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <pipe>:
+SYSCALL(pipe)
+ 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <read>:
+SYSCALL(read)
+ 2db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <write>:
+SYSCALL(write)
+ 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <close>:
+SYSCALL(close)
+ 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <kill>:
+SYSCALL(kill)
+ 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <exec>:
+SYSCALL(exec)
+ 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <open>:
+SYSCALL(open)
+ 303:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <mknod>:
+SYSCALL(mknod)
+ 30b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <unlink>:
+SYSCALL(unlink)
+ 313:	b8 12 00 00 00       	mov    $0x12,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <fstat>:
+SYSCALL(fstat)
+ 31b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <link>:
+SYSCALL(link)
+ 323:	b8 13 00 00 00       	mov    $0x13,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mkdir>:
+SYSCALL(mkdir)
+ 32b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <chdir>:
+SYSCALL(chdir)
+ 333:	b8 09 00 00 00       	mov    $0x9,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <dup>:
+SYSCALL(dup)
+ 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getpid>:
+SYSCALL(getpid)
+ 343:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <sbrk>:
+SYSCALL(sbrk)
+ 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <sleep>:
+SYSCALL(sleep)
+ 353:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <uptime>:
+SYSCALL(uptime)
+ 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getNumProc>:
+SYSCALL(getNumProc)
+ 363:	b8 16 00 00 00       	mov    $0x16,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 36b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 373:	b8 18 00 00 00       	mov    $0x18,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 37b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 383:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 38b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getCurrentPID>:
+ 393:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 20 0a 00 00 	movzbl 0xa20(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 be fe ff ff       	call   2e3 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 474:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 45 fe ff ff       	call   2e3 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4a1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
+      if(c == 'd'){
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
+  write(fd, &c, 1);
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 e5 fd ff ff       	call   2e3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 d1 fd ff ff       	call   2e3 <write>
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 516:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 519:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
+    }
+  }
+}
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 576:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 578:	6a 01                	push   $0x1
+        ap++;
+ 57a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 584:	e8 5a fd ff ff       	call   2e3 <write>
+        ap++;
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+        s = (char*)*ap;
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
+        while(*s != 0){
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5c2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
+          s = "(null)";
+ 5d6:	bb 17 0a 00 00       	mov    $0xa17,%ebx
+        while(*s != 0){
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 e1 fc ff ff       	call   2e3 <write>
+        while(*s != 0){
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 625:	a1 60 0d 00 00       	mov    0xd60,%eax
+{
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
+{
+ 648:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 671:	5b                   	pop    %ebx
+  freep = p;
+ 672:	a3 60 0d 00 00       	mov    %eax,0xd60
+}
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
+    p->s.size += bp->s.size;
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 69a:	a3 60 0d 00 00       	mov    %eax,0xd60
+    p->s.size += bp->s.size;
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
+}
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6c0:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 700:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
+ 70f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 2b fc ff ff       	call   34b <sbrk>
+  if(p == (char*)-1)
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
+  hp->s.size = nu;
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
+  return freep;
+ 737:	a1 60 0d 00 00       	mov    0xd60,%eax
+      if((p = morecore(nunits)) == 0)
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
+        return 0;
+  }
+}
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 746:	31 c0                	xor    %eax,%eax
+}
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
+        p->s.size -= nunits;
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 767:	a3 60 0d 00 00       	mov    %eax,0xd60
+}
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 60 0d 00 00 64 	movl   $0xd64,0xd60
+ 787:	0d 00 00 
+    base.s.size = 0;
+ 78a:	bf 64 0d 00 00       	mov    $0xd64,%edi
+    base.s.ptr = freep = prevp = &base;
+ 78f:	c7 05 64 0d 00 00 64 	movl   $0xd64,0xd64
+ 796:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 799:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 79b:	c7 05 68 0d 00 00 00 	movl   $0x0,0xd68
+ 7a2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
+ 7b6:	66 90                	xchg   %ax,%ax
+ 7b8:	66 90                	xchg   %ax,%ax
+ 7ba:	66 90                	xchg   %ax,%ax
+ 7bc:	66 90                	xchg   %ax,%ax
+ 7be:	66 90                	xchg   %ax,%ax
+
+000007c0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7c0:	f3 0f 1e fb          	endbr32 
+ 7c4:	55                   	push   %ebp
+ 7c5:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 7ca:	89 e5                	mov    %esp,%ebp
+ 7cc:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7cf:	89 15 80 0d 00 00    	mov    %edx,0xd80
+    for (mti=1; mti<N; mti++)
+ 7d5:	eb 0c                	jmp    7e3 <sgenrand+0x23>
+ 7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7de:	66 90                	xchg   %ax,%ax
+ 7e0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7e3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7e9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7eb:	3d 3c 17 00 00       	cmp    $0x173c,%eax
+ 7f0:	75 ee                	jne    7e0 <sgenrand+0x20>
+ 7f2:	c7 05 5c 0d 00 00 70 	movl   $0x270,0xd5c
+ 7f9:	02 00 00 
+}
+ 7fc:	5d                   	pop    %ebp
+ 7fd:	c3                   	ret    
+ 7fe:	66 90                	xchg   %ax,%ax
+
+00000800 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 800:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 804:	a1 5c 0d 00 00       	mov    0xd5c,%eax
+ 809:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 80e:	7f 3c                	jg     84c <genrand+0x4c>
+ 810:	8d 50 01             	lea    0x1(%eax),%edx
+ 813:	8b 04 85 80 0d 00 00 	mov    0xd80(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 81a:	89 15 5c 0d 00 00    	mov    %edx,0xd5c
+    y ^= TEMPERING_SHIFT_U(y);
+ 820:	89 c2                	mov    %eax,%edx
+ 822:	c1 ea 0b             	shr    $0xb,%edx
+ 825:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 827:	89 d0                	mov    %edx,%eax
+ 829:	c1 e0 07             	shl    $0x7,%eax
+ 82c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 831:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 833:	89 d0                	mov    %edx,%eax
+ 835:	c1 e0 0f             	shl    $0xf,%eax
+ 838:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 83d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 83f:	89 c2                	mov    %eax,%edx
+ 841:	c1 ea 12             	shr    $0x12,%edx
+ 844:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 846:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 84b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 84c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 851:	0f 84 d2 00 00 00    	je     929 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 857:	31 c0                	xor    %eax,%eax
+ 859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 860:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 867:	83 c0 01             	add    $0x1,%eax
+ 86a:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 871:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 877:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 87d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 87f:	89 d1                	mov    %edx,%ecx
+ 881:	83 e2 01             	and    $0x1,%edx
+ 884:	d1 e9                	shr    %ecx
+ 886:	33 0c 85 b0 13 00 00 	xor    0x13b0(,%eax,4),%ecx
+ 88d:	33 0c 95 34 0a 00 00 	xor    0xa34(,%edx,4),%ecx
+ 894:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 89b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 8a0:	75 be                	jne    860 <genrand+0x60>
+ 8a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8a8:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 8af:	83 c0 01             	add    $0x1,%eax
+ 8b2:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 8b9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8bf:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8c5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8c7:	89 d1                	mov    %edx,%ecx
+ 8c9:	83 e2 01             	and    $0x1,%edx
+ 8cc:	d1 e9                	shr    %ecx
+ 8ce:	33 0c 85 f0 09 00 00 	xor    0x9f0(,%eax,4),%ecx
+ 8d5:	33 0c 95 34 0a 00 00 	xor    0xa34(,%edx,4),%ecx
+ 8dc:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8e3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8e8:	75 be                	jne    8a8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ea:	a1 80 0d 00 00       	mov    0xd80,%eax
+ 8ef:	8b 0d 3c 17 00 00    	mov    0x173c,%ecx
+ 8f5:	89 c2                	mov    %eax,%edx
+ 8f7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8fd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 903:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 905:	89 ca                	mov    %ecx,%edx
+ 907:	83 e1 01             	and    $0x1,%ecx
+ 90a:	d1 ea                	shr    %edx
+ 90c:	33 15 b0 13 00 00    	xor    0x13b0,%edx
+ 912:	33 14 8d 34 0a 00 00 	xor    0xa34(,%ecx,4),%edx
+ 919:	89 15 3c 17 00 00    	mov    %edx,0x173c
+ 91f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 924:	e9 f1 fe ff ff       	jmp    81a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 929:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 92e:	b9 3c 17 00 00       	mov    $0x173c,%ecx
+ 933:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 938:	c7 05 80 0d 00 00 05 	movl   $0x1105,0xd80
+ 93f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 942:	eb 07                	jmp    94b <genrand+0x14b>
+ 944:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 948:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 94b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 951:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 953:	39 c1                	cmp    %eax,%ecx
+ 955:	75 f1                	jne    948 <genrand+0x148>
+ 957:	e9 fb fe ff ff       	jmp    857 <genrand+0x57>
+ 95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000960 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 960:	f3 0f 1e fb          	endbr32 
+ 964:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 965:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 967:	89 e5                	mov    %esp,%ebp
+ 969:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 96a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 96d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 96e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 973:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 976:	89 d8                	mov    %ebx,%eax
+ 978:	f7 f1                	div    %ecx
+ 97a:	89 c6                	mov    %eax,%esi
+ 97c:	29 d3                	sub    %edx,%ebx
+ 97e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 980:	e8 7b fe ff ff       	call   800 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 985:	39 d8                	cmp    %ebx,%eax
+ 987:	73 f7                	jae    980 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 989:	31 d2                	xor    %edx,%edx
+}
+ 98b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 98c:	f7 f6                	div    %esi
+}
+ 98e:	5e                   	pop    %esi
+ 98f:	5d                   	pop    %ebp
+ 990:	c3                   	ret    
+ 991:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 998:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 99f:	90                   	nop
+
+000009a0 <randomrange>:
+
+int randomrange(int low, int high){
+ 9a0:	f3 0f 1e fb          	endbr32 
+ 9a4:	55                   	push   %ebp
+ 9a5:	89 e5                	mov    %esp,%ebp
+ 9a7:	57                   	push   %edi
+ 9a8:	56                   	push   %esi
+ 9a9:	53                   	push   %ebx
+ 9aa:	83 ec 0c             	sub    $0xc,%esp
+ 9ad:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9b0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9b3:	39 f0                	cmp    %esi,%eax
+ 9b5:	7d 06                	jge    9bd <randomrange+0x1d>
+ 9b7:	89 f2                	mov    %esi,%edx
+ 9b9:	89 c6                	mov    %eax,%esi
+ 9bb:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9bd:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9bf:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9c4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9c6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9c9:	89 d8                	mov    %ebx,%eax
+ 9cb:	f7 f1                	div    %ecx
+ 9cd:	89 c7                	mov    %eax,%edi
+ 9cf:	29 d3                	sub    %edx,%ebx
+ 9d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9d8:	e8 23 fe ff ff       	call   800 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9dd:	39 d8                	cmp    %ebx,%eax
+ 9df:	73 f7                	jae    9d8 <randomrange+0x38>
+  return x/bin_size;
+ 9e1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9e3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9e6:	f7 f7                	div    %edi
+ 9e8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9e9:	01 f0                	add    %esi,%eax
+ 9eb:	5e                   	pop    %esi
+ 9ec:	5f                   	pop    %edi
+ 9ed:	5d                   	pop    %ebp
+ 9ee:	c3                   	ret    
diff -ruN xv6-public/ln.d xv6-public-partB_sjf/ln.d
--- xv6-public/ln.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ln.d	2022-10-07 20:27:44.015115000 +0530
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/ln.o and xv6-public-partB_sjf/ln.o differ
diff -ruN xv6-public/ln.sym xv6-public-partB_sjf/ln.sym
--- xv6-public/ln.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ln.sym	2022-10-07 20:27:44.043116000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+000009f0 .rodata
+00000a3c .eh_frame
+00000d5c .data
+00000d60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+00000a20 digits.1105
+00000000 umalloc.c
+00000d60 freep
+00000d64 base
+00000000 random.c
+00000d80 mt
+00000d5c mti
+00000a34 mag01.989
+00000060 strcpy
+000007c0 sgenrand
+00000450 printf
+00000290 memmove
+0000030b mknod
+00000180 gets
+00000343 getpid
+000006b0 malloc
+00000353 sleep
+00000383 get_burst_time
+00000960 random_at_most
+0000038b getCurrentInfo
+000002d3 pipe
+000002e3 write
+0000031b fstat
+000002f3 kill
+00000333 chdir
+000002fb exec
+000002cb wait
+000002db read
+00000313 unlink
+000002bb fork
+0000034b sbrk
+0000035b uptime
+00000d60 __bss_start
+00000120 memset
+00000000 main
+0000037b set_burst_time
+00000090 strcmp
+0000033b dup
+00000800 genrand
+00000363 getNumProc
+00000373 getProcInfo
+00000200 stat
+00000d60 _edata
+00001740 _end
+00000323 link
+000002c3 exit
+0000036b getMaxPID
+00000250 atoi
+000000e0 strlen
+00000303 open
+00000140 strchr
+00000393 getCurrentPID
+000009a0 randomrange
+0000032b mkdir
+000002eb close
+00000620 free
diff -ruN xv6-public/log.d xv6-public-partB_sjf/log.d
--- xv6-public/log.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/log.d	2022-10-07 20:27:35.755043000 +0530
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/log.o and xv6-public-partB_sjf/log.o differ
Binary files xv6-public/_ls and xv6-public-partB_sjf/_ls differ
diff -ruN xv6-public/ls.asm xv6-public-partB_sjf/ls.asm
--- xv6-public/ls.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ls.asm	2022-10-07 20:27:44.123116000 +0530
@@ -0,0 +1,1784 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 28                	jle    49 <main+0x49>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2e:	66 90                	xchg   %ax,%ax
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	e8 c3 00 00 00       	call   100 <ls>
+  for(i=1; i<argc; i++)
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	39 f3                	cmp    %esi,%ebx
+  42:	75 ec                	jne    30 <main+0x30>
+  exit();
+  44:	e8 5a 05 00 00       	call   5a3 <exit>
+    ls(".");
+  49:	83 ec 0c             	sub    $0xc,%esp
+  4c:	68 18 0d 00 00       	push   $0xd18
+  51:	e8 aa 00 00 00       	call   100 <ls>
+    exit();
+  56:	e8 48 05 00 00       	call   5a3 <exit>
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <fmtname>:
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	56                   	push   %esi
+  68:	53                   	push   %ebx
+  69:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  6c:	83 ec 0c             	sub    $0xc,%esp
+  6f:	56                   	push   %esi
+  70:	e8 4b 03 00 00       	call   3c0 <strlen>
+  75:	83 c4 10             	add    $0x10,%esp
+  78:	01 f0                	add    %esi,%eax
+  7a:	89 c3                	mov    %eax,%ebx
+  7c:	73 0b                	jae    89 <fmtname+0x29>
+  7e:	eb 0e                	jmp    8e <fmtname+0x2e>
+  80:	8d 43 ff             	lea    -0x1(%ebx),%eax
+  83:	39 c6                	cmp    %eax,%esi
+  85:	77 0a                	ja     91 <fmtname+0x31>
+  87:	89 c3                	mov    %eax,%ebx
+  89:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+  8c:	75 f2                	jne    80 <fmtname+0x20>
+  8e:	83 c3 01             	add    $0x1,%ebx
+  if(strlen(p) >= DIRSIZ)
+  91:	83 ec 0c             	sub    $0xc,%esp
+  94:	53                   	push   %ebx
+  95:	e8 26 03 00 00       	call   3c0 <strlen>
+  9a:	83 c4 10             	add    $0x10,%esp
+  9d:	83 f8 0d             	cmp    $0xd,%eax
+  a0:	77 4a                	ja     ec <fmtname+0x8c>
+  memmove(buf, p, strlen(p));
+  a2:	83 ec 0c             	sub    $0xc,%esp
+  a5:	53                   	push   %ebx
+  a6:	e8 15 03 00 00       	call   3c0 <strlen>
+  ab:	83 c4 0c             	add    $0xc,%esp
+  ae:	50                   	push   %eax
+  af:	53                   	push   %ebx
+  b0:	68 e0 10 00 00       	push   $0x10e0
+  b5:	e8 b6 04 00 00       	call   570 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ba:	89 1c 24             	mov    %ebx,(%esp)
+  bd:	e8 fe 02 00 00       	call   3c0 <strlen>
+  c2:	89 1c 24             	mov    %ebx,(%esp)
+  return buf;
+  c5:	bb e0 10 00 00       	mov    $0x10e0,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	89 c6                	mov    %eax,%esi
+  cc:	e8 ef 02 00 00       	call   3c0 <strlen>
+  d1:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d6:	83 c4 0c             	add    $0xc,%esp
+  d9:	29 f2                	sub    %esi,%edx
+  db:	05 e0 10 00 00       	add    $0x10e0,%eax
+  e0:	52                   	push   %edx
+  e1:	6a 20                	push   $0x20
+  e3:	50                   	push   %eax
+  e4:	e8 17 03 00 00       	call   400 <memset>
+  return buf;
+  e9:	83 c4 10             	add    $0x10,%esp
+}
+  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ef:	89 d8                	mov    %ebx,%eax
+  f1:	5b                   	pop    %ebx
+  f2:	5e                   	pop    %esi
+  f3:	5d                   	pop    %ebp
+  f4:	c3                   	ret    
+  f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <ls>:
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	57                   	push   %edi
+ 108:	56                   	push   %esi
+ 109:	53                   	push   %ebx
+ 10a:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 110:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 113:	6a 00                	push   $0x0
+ 115:	57                   	push   %edi
+ 116:	e8 c8 04 00 00       	call   5e3 <open>
+ 11b:	83 c4 10             	add    $0x10,%esp
+ 11e:	85 c0                	test   %eax,%eax
+ 120:	0f 88 9a 01 00 00    	js     2c0 <ls+0x1c0>
+  if(fstat(fd, &st) < 0){
+ 126:	83 ec 08             	sub    $0x8,%esp
+ 129:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 12f:	89 c3                	mov    %eax,%ebx
+ 131:	56                   	push   %esi
+ 132:	50                   	push   %eax
+ 133:	e8 c3 04 00 00       	call   5fb <fstat>
+ 138:	83 c4 10             	add    $0x10,%esp
+ 13b:	85 c0                	test   %eax,%eax
+ 13d:	0f 88 bd 01 00 00    	js     300 <ls+0x200>
+  switch(st.type){
+ 143:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 14a:	66 83 f8 01          	cmp    $0x1,%ax
+ 14e:	74 60                	je     1b0 <ls+0xb0>
+ 150:	66 83 f8 02          	cmp    $0x2,%ax
+ 154:	74 1a                	je     170 <ls+0x70>
+  close(fd);
+ 156:	83 ec 0c             	sub    $0xc,%esp
+ 159:	53                   	push   %ebx
+ 15a:	e8 6c 04 00 00       	call   5cb <close>
+ 15f:	83 c4 10             	add    $0x10,%esp
+}
+ 162:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 165:	5b                   	pop    %ebx
+ 166:	5e                   	pop    %esi
+ 167:	5f                   	pop    %edi
+ 168:	5d                   	pop    %ebp
+ 169:	c3                   	ret    
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 170:	83 ec 0c             	sub    $0xc,%esp
+ 173:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 179:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 17f:	57                   	push   %edi
+ 180:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 186:	e8 d5 fe ff ff       	call   60 <fmtname>
+ 18b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 191:	59                   	pop    %ecx
+ 192:	5f                   	pop    %edi
+ 193:	52                   	push   %edx
+ 194:	56                   	push   %esi
+ 195:	6a 02                	push   $0x2
+ 197:	50                   	push   %eax
+ 198:	68 f8 0c 00 00       	push   $0xcf8
+ 19d:	6a 01                	push   $0x1
+ 19f:	e8 8c 05 00 00       	call   730 <printf>
+    break;
+ 1a4:	83 c4 20             	add    $0x20,%esp
+ 1a7:	eb ad                	jmp    156 <ls+0x56>
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1b0:	83 ec 0c             	sub    $0xc,%esp
+ 1b3:	57                   	push   %edi
+ 1b4:	e8 07 02 00 00       	call   3c0 <strlen>
+ 1b9:	83 c4 10             	add    $0x10,%esp
+ 1bc:	83 c0 10             	add    $0x10,%eax
+ 1bf:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1c4:	0f 87 16 01 00 00    	ja     2e0 <ls+0x1e0>
+    strcpy(buf, path);
+ 1ca:	83 ec 08             	sub    $0x8,%esp
+ 1cd:	57                   	push   %edi
+ 1ce:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 1d4:	57                   	push   %edi
+ 1d5:	e8 66 01 00 00       	call   340 <strcpy>
+    p = buf+strlen(buf);
+ 1da:	89 3c 24             	mov    %edi,(%esp)
+ 1dd:	e8 de 01 00 00       	call   3c0 <strlen>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1e2:	83 c4 10             	add    $0x10,%esp
+    p = buf+strlen(buf);
+ 1e5:	01 f8                	add    %edi,%eax
+    *p++ = '/';
+ 1e7:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 1ea:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 1f0:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 1f6:	c6 00 2f             	movb   $0x2f,(%eax)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 209:	6a 10                	push   $0x10
+ 20b:	50                   	push   %eax
+ 20c:	53                   	push   %ebx
+ 20d:	e8 a9 03 00 00       	call   5bb <read>
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	83 f8 10             	cmp    $0x10,%eax
+ 218:	0f 85 38 ff ff ff    	jne    156 <ls+0x56>
+      if(de.inum == 0)
+ 21e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 225:	00 
+ 226:	74 d8                	je     200 <ls+0x100>
+      memmove(p, de.name, DIRSIZ);
+ 228:	83 ec 04             	sub    $0x4,%esp
+ 22b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 231:	6a 0e                	push   $0xe
+ 233:	50                   	push   %eax
+ 234:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
+ 23a:	e8 31 03 00 00       	call   570 <memmove>
+      p[DIRSIZ] = 0;
+ 23f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 245:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 249:	58                   	pop    %eax
+ 24a:	5a                   	pop    %edx
+ 24b:	56                   	push   %esi
+ 24c:	57                   	push   %edi
+ 24d:	e8 8e 02 00 00       	call   4e0 <stat>
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	0f 88 cb 00 00 00    	js     328 <ls+0x228>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 25d:	83 ec 0c             	sub    $0xc,%esp
+ 260:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 266:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 26c:	57                   	push   %edi
+ 26d:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 274:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 27a:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 280:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 286:	e8 d5 fd ff ff       	call   60 <fmtname>
+ 28b:	5a                   	pop    %edx
+ 28c:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 292:	59                   	pop    %ecx
+ 293:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 299:	51                   	push   %ecx
+ 29a:	52                   	push   %edx
+ 29b:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
+ 2a1:	50                   	push   %eax
+ 2a2:	68 f8 0c 00 00       	push   $0xcf8
+ 2a7:	6a 01                	push   $0x1
+ 2a9:	e8 82 04 00 00       	call   730 <printf>
+ 2ae:	83 c4 20             	add    $0x20,%esp
+ 2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot open %s\n", path);
+ 2c0:	83 ec 04             	sub    $0x4,%esp
+ 2c3:	57                   	push   %edi
+ 2c4:	68 d0 0c 00 00       	push   $0xcd0
+ 2c9:	6a 02                	push   $0x2
+ 2cb:	e8 60 04 00 00       	call   730 <printf>
+    return;
+ 2d0:	83 c4 10             	add    $0x10,%esp
+}
+ 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d6:	5b                   	pop    %ebx
+ 2d7:	5e                   	pop    %esi
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+ 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2df:	90                   	nop
+      printf(1, "ls: path too long\n");
+ 2e0:	83 ec 08             	sub    $0x8,%esp
+ 2e3:	68 05 0d 00 00       	push   $0xd05
+ 2e8:	6a 01                	push   $0x1
+ 2ea:	e8 41 04 00 00       	call   730 <printf>
+      break;
+ 2ef:	83 c4 10             	add    $0x10,%esp
+ 2f2:	e9 5f fe ff ff       	jmp    156 <ls+0x56>
+ 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2fe:	66 90                	xchg   %ax,%ax
+    printf(2, "ls: cannot stat %s\n", path);
+ 300:	83 ec 04             	sub    $0x4,%esp
+ 303:	57                   	push   %edi
+ 304:	68 e4 0c 00 00       	push   $0xce4
+ 309:	6a 02                	push   $0x2
+ 30b:	e8 20 04 00 00       	call   730 <printf>
+    close(fd);
+ 310:	89 1c 24             	mov    %ebx,(%esp)
+ 313:	e8 b3 02 00 00       	call   5cb <close>
+    return;
+ 318:	83 c4 10             	add    $0x10,%esp
+}
+ 31b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 31e:	5b                   	pop    %ebx
+ 31f:	5e                   	pop    %esi
+ 320:	5f                   	pop    %edi
+ 321:	5d                   	pop    %ebp
+ 322:	c3                   	ret    
+ 323:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 327:	90                   	nop
+        printf(1, "ls: cannot stat %s\n", buf);
+ 328:	83 ec 04             	sub    $0x4,%esp
+ 32b:	57                   	push   %edi
+ 32c:	68 e4 0c 00 00       	push   $0xce4
+ 331:	6a 01                	push   $0x1
+ 333:	e8 f8 03 00 00       	call   730 <printf>
+        continue;
+ 338:	83 c4 10             	add    $0x10,%esp
+ 33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 345:	31 c0                	xor    %eax,%eax
+{
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	53                   	push   %ebx
+ 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	89 c8                	mov    %ecx,%eax
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	53                   	push   %ebx
+ 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 37e:	0f b6 01             	movzbl (%ecx),%eax
+ 381:	0f b6 1a             	movzbl (%edx),%ebx
+ 384:	84 c0                	test   %al,%al
+ 386:	75 19                	jne    3a1 <strcmp+0x31>
+ 388:	eb 26                	jmp    3b0 <strcmp+0x40>
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 394:	83 c1 01             	add    $0x1,%ecx
+ 397:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 39a:	0f b6 1a             	movzbl (%edx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	38 d8                	cmp    %bl,%al
+ 3a3:	74 eb                	je     390 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3a5:	29 d8                	sub    %ebx,%eax
+}
+ 3a7:	5b                   	pop    %ebx
+ 3a8:	5d                   	pop    %ebp
+ 3a9:	c3                   	ret    
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5d                   	pop    %ebp
+ 3b6:	c3                   	ret    
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3cd:	74 21                	je     3f0 <strlen+0x30>
+ 3cf:	31 c0                	xor    %eax,%eax
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	83 c0 01             	add    $0x1,%eax
+ 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3df:	89 c1                	mov    %eax,%ecx
+ 3e1:	75 f5                	jne    3d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3e3:	89 c8                	mov    %ecx,%eax
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 411:	89 d7                	mov    %edx,%edi
+ 413:	fc                   	cld    
+ 414:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 416:	89 d0                	mov    %edx,%eax
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42e:	0f b6 10             	movzbl (%eax),%edx
+ 431:	84 d2                	test   %dl,%dl
+ 433:	75 16                	jne    44b <strchr+0x2b>
+ 435:	eb 21                	jmp    458 <strchr+0x38>
+ 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43e:	66 90                	xchg   %ax,%ax
+ 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	84 d2                	test   %dl,%dl
+ 449:	74 0d                	je     458 <strchr+0x38>
+    if(*s == c)
+ 44b:	38 d1                	cmp    %dl,%cl
+ 44d:	75 f1                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 44f:	5d                   	pop    %ebp
+ 450:	c3                   	ret    
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 458:	31 c0                	xor    %eax,%eax
+}
+ 45a:	5d                   	pop    %ebp
+ 45b:	c3                   	ret    
+ 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	31 f6                	xor    %esi,%esi
+{
+ 46b:	53                   	push   %ebx
+ 46c:	89 f3                	mov    %esi,%ebx
+ 46e:	83 ec 1c             	sub    $0x1c,%esp
+ 471:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 474:	eb 33                	jmp    4a9 <gets+0x49>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 486:	6a 01                	push   $0x1
+ 488:	50                   	push   %eax
+ 489:	6a 00                	push   $0x0
+ 48b:	e8 2b 01 00 00       	call   5bb <read>
+    if(cc < 1)
+ 490:	83 c4 10             	add    $0x10,%esp
+ 493:	85 c0                	test   %eax,%eax
+ 495:	7e 1c                	jle    4b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 49b:	83 c7 01             	add    $0x1,%edi
+ 49e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4a1:	3c 0a                	cmp    $0xa,%al
+ 4a3:	74 23                	je     4c8 <gets+0x68>
+ 4a5:	3c 0d                	cmp    $0xd,%al
+ 4a7:	74 1f                	je     4c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4a9:	83 c3 01             	add    $0x1,%ebx
+ 4ac:	89 fe                	mov    %edi,%esi
+ 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4b1:	7c cd                	jl     480 <gets+0x20>
+ 4b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4be:	5b                   	pop    %ebx
+ 4bf:	5e                   	pop    %esi
+ 4c0:	5f                   	pop    %edi
+ 4c1:	5d                   	pop    %ebp
+ 4c2:	c3                   	ret    
+ 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c7:	90                   	nop
+ 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ce:	01 de                	add    %ebx,%esi
+ 4d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d8:	5b                   	pop    %ebx
+ 4d9:	5e                   	pop    %esi
+ 4da:	5f                   	pop    %edi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	56                   	push   %esi
+ 4e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	6a 00                	push   $0x0
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ed 00 00 00       	call   5e3 <open>
+  if(fd < 0)
+ 4f6:	83 c4 10             	add    $0x10,%esp
+ 4f9:	85 c0                	test   %eax,%eax
+ 4fb:	78 2b                	js     528 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4fd:	83 ec 08             	sub    $0x8,%esp
+ 500:	ff 75 0c             	pushl  0xc(%ebp)
+ 503:	89 c3                	mov    %eax,%ebx
+ 505:	50                   	push   %eax
+ 506:	e8 f0 00 00 00       	call   5fb <fstat>
+  close(fd);
+ 50b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 510:	e8 b6 00 00 00       	call   5cb <close>
+  return r;
+ 515:	83 c4 10             	add    $0x10,%esp
+}
+ 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 51b:	89 f0                	mov    %esi,%eax
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5d                   	pop    %ebp
+ 520:	c3                   	ret    
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 52d:	eb e9                	jmp    518 <stat+0x38>
+ 52f:	90                   	nop
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	53                   	push   %ebx
+ 538:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53b:	0f be 02             	movsbl (%edx),%eax
+ 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 541:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 544:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 549:	77 1a                	ja     565 <atoi+0x35>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 550:	83 c2 01             	add    $0x1,%edx
+ 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 02             	movsbl (%edx),%eax
+ 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	89 c8                	mov    %ecx,%eax
+ 567:	5b                   	pop    %ebx
+ 568:	5d                   	pop    %ebp
+ 569:	c3                   	ret    
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	8b 45 10             	mov    0x10(%ebp),%eax
+ 57b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 57e:	56                   	push   %esi
+ 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 582:	85 c0                	test   %eax,%eax
+ 584:	7e 0f                	jle    595 <memmove+0x25>
+ 586:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 588:	89 d7                	mov    %edx,%edi
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 f8                	cmp    %edi,%eax
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	89 d0                	mov    %edx,%eax
+ 598:	5f                   	pop    %edi
+ 599:	5d                   	pop    %ebp
+ 59a:	c3                   	ret    
+
+0000059b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 59b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <exit>:
+SYSCALL(exit)
+ 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <wait>:
+SYSCALL(wait)
+ 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <pipe>:
+SYSCALL(pipe)
+ 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <read>:
+SYSCALL(read)
+ 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <write>:
+SYSCALL(write)
+ 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <close>:
+SYSCALL(close)
+ 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <kill>:
+SYSCALL(kill)
+ 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <exec>:
+SYSCALL(exec)
+ 5db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <open>:
+SYSCALL(open)
+ 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <mknod>:
+SYSCALL(mknod)
+ 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <unlink>:
+SYSCALL(unlink)
+ 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <fstat>:
+SYSCALL(fstat)
+ 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <link>:
+SYSCALL(link)
+ 603:	b8 13 00 00 00       	mov    $0x13,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mkdir>:
+SYSCALL(mkdir)
+ 60b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <chdir>:
+SYSCALL(chdir)
+ 613:	b8 09 00 00 00       	mov    $0x9,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <dup>:
+SYSCALL(dup)
+ 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getpid>:
+SYSCALL(getpid)
+ 623:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <sbrk>:
+SYSCALL(sbrk)
+ 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <sleep>:
+SYSCALL(sleep)
+ 633:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <uptime>:
+SYSCALL(uptime)
+ 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <getNumProc>:
+SYSCALL(getNumProc)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 653:	b8 18 00 00 00       	mov    $0x18,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 65b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 663:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 66b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+
+00000673 <getCurrentPID>:
+ 673:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 678:	cd 40                	int    $0x40
+ 67a:	c3                   	ret    
+ 67b:	66 90                	xchg   %ax,%ax
+ 67d:	66 90                	xchg   %ax,%ax
+ 67f:	90                   	nop
+
+00000680 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 3c             	sub    $0x3c,%esp
+ 689:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 68c:	89 d1                	mov    %edx,%ecx
+{
+ 68e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 691:	85 d2                	test   %edx,%edx
+ 693:	0f 89 7f 00 00 00    	jns    718 <printint+0x98>
+ 699:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 69d:	74 79                	je     718 <printint+0x98>
+    neg = 1;
+ 69f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 6a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 6a8:	31 db                	xor    %ebx,%ebx
+ 6aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6b0:	89 c8                	mov    %ecx,%eax
+ 6b2:	31 d2                	xor    %edx,%edx
+ 6b4:	89 cf                	mov    %ecx,%edi
+ 6b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6b9:	0f b6 92 24 0d 00 00 	movzbl 0xd24(%edx),%edx
+ 6c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6c3:	89 d8                	mov    %ebx,%eax
+ 6c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6d1:	76 dd                	jbe    6b0 <printint+0x30>
+  if(neg)
+ 6d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6d6:	85 c9                	test   %ecx,%ecx
+ 6d8:	74 0c                	je     6e6 <printint+0x66>
+    buf[i++] = '-';
+ 6da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6ed:	eb 07                	jmp    6f6 <printint+0x76>
+ 6ef:	90                   	nop
+ 6f0:	0f b6 13             	movzbl (%ebx),%edx
+ 6f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6f6:	83 ec 04             	sub    $0x4,%esp
+ 6f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6fc:	6a 01                	push   $0x1
+ 6fe:	56                   	push   %esi
+ 6ff:	57                   	push   %edi
+ 700:	e8 be fe ff ff       	call   5c3 <write>
+  while(--i >= 0)
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	39 de                	cmp    %ebx,%esi
+ 70a:	75 e4                	jne    6f0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70f:	5b                   	pop    %ebx
+ 710:	5e                   	pop    %esi
+ 711:	5f                   	pop    %edi
+ 712:	5d                   	pop    %ebp
+ 713:	c3                   	ret    
+ 714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 718:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 71f:	eb 87                	jmp    6a8 <printint+0x28>
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72f:	90                   	nop
+
+00000730 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
+ 735:	89 e5                	mov    %esp,%ebp
+ 737:	57                   	push   %edi
+ 738:	56                   	push   %esi
+ 739:	53                   	push   %ebx
+ 73a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 73d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 740:	0f b6 1e             	movzbl (%esi),%ebx
+ 743:	84 db                	test   %bl,%bl
+ 745:	0f 84 b4 00 00 00    	je     7ff <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 74b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 74e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 751:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 754:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 756:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 759:	eb 33                	jmp    78e <printf+0x5e>
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+ 760:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 763:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 768:	83 f8 25             	cmp    $0x25,%eax
+ 76b:	74 17                	je     784 <printf+0x54>
+  write(fd, &c, 1);
+ 76d:	83 ec 04             	sub    $0x4,%esp
+ 770:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 773:	6a 01                	push   $0x1
+ 775:	57                   	push   %edi
+ 776:	ff 75 08             	pushl  0x8(%ebp)
+ 779:	e8 45 fe ff ff       	call   5c3 <write>
+ 77e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 781:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 784:	0f b6 1e             	movzbl (%esi),%ebx
+ 787:	83 c6 01             	add    $0x1,%esi
+ 78a:	84 db                	test   %bl,%bl
+ 78c:	74 71                	je     7ff <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 78e:	0f be cb             	movsbl %bl,%ecx
+ 791:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 794:	85 d2                	test   %edx,%edx
+ 796:	74 c8                	je     760 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 798:	83 fa 25             	cmp    $0x25,%edx
+ 79b:	75 e7                	jne    784 <printf+0x54>
+      if(c == 'd'){
+ 79d:	83 f8 64             	cmp    $0x64,%eax
+ 7a0:	0f 84 9a 00 00 00    	je     840 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 7a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 7ac:	83 f9 70             	cmp    $0x70,%ecx
+ 7af:	74 5f                	je     810 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7b1:	83 f8 73             	cmp    $0x73,%eax
+ 7b4:	0f 84 d6 00 00 00    	je     890 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7ba:	83 f8 63             	cmp    $0x63,%eax
+ 7bd:	0f 84 8d 00 00 00    	je     850 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7c3:	83 f8 25             	cmp    $0x25,%eax
+ 7c6:	0f 84 b4 00 00 00    	je     880 <printf+0x150>
+  write(fd, &c, 1);
+ 7cc:	83 ec 04             	sub    $0x4,%esp
+ 7cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7d3:	6a 01                	push   $0x1
+ 7d5:	57                   	push   %edi
+ 7d6:	ff 75 08             	pushl  0x8(%ebp)
+ 7d9:	e8 e5 fd ff ff       	call   5c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7de:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7e1:	83 c4 0c             	add    $0xc,%esp
+ 7e4:	6a 01                	push   $0x1
+ 7e6:	83 c6 01             	add    $0x1,%esi
+ 7e9:	57                   	push   %edi
+ 7ea:	ff 75 08             	pushl  0x8(%ebp)
+ 7ed:	e8 d1 fd ff ff       	call   5c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7f6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7f9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7fb:	84 db                	test   %bl,%bl
+ 7fd:	75 8f                	jne    78e <printf+0x5e>
+    }
+  }
+}
+ 7ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 810:	83 ec 0c             	sub    $0xc,%esp
+ 813:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 818:	6a 00                	push   $0x0
+ 81a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 81d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 820:	8b 13                	mov    (%ebx),%edx
+ 822:	e8 59 fe ff ff       	call   680 <printint>
+        ap++;
+ 827:	89 d8                	mov    %ebx,%eax
+ 829:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 82c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 82e:	83 c0 04             	add    $0x4,%eax
+ 831:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 834:	e9 4b ff ff ff       	jmp    784 <printf+0x54>
+ 839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 840:	83 ec 0c             	sub    $0xc,%esp
+ 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 848:	6a 01                	push   $0x1
+ 84a:	eb ce                	jmp    81a <printf+0xea>
+ 84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 850:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 853:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 856:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 858:	6a 01                	push   $0x1
+        ap++;
+ 85a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 85d:	57                   	push   %edi
+ 85e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 861:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 864:	e8 5a fd ff ff       	call   5c3 <write>
+        ap++;
+ 869:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 86c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 86f:	31 d2                	xor    %edx,%edx
+ 871:	e9 0e ff ff ff       	jmp    784 <printf+0x54>
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 880:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 883:	83 ec 04             	sub    $0x4,%esp
+ 886:	e9 59 ff ff ff       	jmp    7e4 <printf+0xb4>
+ 88b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 88f:	90                   	nop
+        s = (char*)*ap;
+ 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 893:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 895:	83 c0 04             	add    $0x4,%eax
+ 898:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 89b:	85 db                	test   %ebx,%ebx
+ 89d:	74 17                	je     8b6 <printf+0x186>
+        while(*s != 0){
+ 89f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 8a2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 8a4:	84 c0                	test   %al,%al
+ 8a6:	0f 84 d8 fe ff ff    	je     784 <printf+0x54>
+ 8ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8af:	89 de                	mov    %ebx,%esi
+ 8b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b4:	eb 1a                	jmp    8d0 <printf+0x1a0>
+          s = "(null)";
+ 8b6:	bb 1a 0d 00 00       	mov    $0xd1a,%ebx
+        while(*s != 0){
+ 8bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8c3:	89 de                	mov    %ebx,%esi
+ 8c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8cf:	90                   	nop
+  write(fd, &c, 1);
+ 8d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8d3:	83 c6 01             	add    $0x1,%esi
+ 8d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8d9:	6a 01                	push   $0x1
+ 8db:	57                   	push   %edi
+ 8dc:	53                   	push   %ebx
+ 8dd:	e8 e1 fc ff ff       	call   5c3 <write>
+        while(*s != 0){
+ 8e2:	0f b6 06             	movzbl (%esi),%eax
+ 8e5:	83 c4 10             	add    $0x10,%esp
+ 8e8:	84 c0                	test   %al,%al
+ 8ea:	75 e4                	jne    8d0 <printf+0x1a0>
+ 8ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8ef:	31 d2                	xor    %edx,%edx
+ 8f1:	e9 8e fe ff ff       	jmp    784 <printf+0x54>
+ 8f6:	66 90                	xchg   %ax,%ax
+ 8f8:	66 90                	xchg   %ax,%ax
+ 8fa:	66 90                	xchg   %ax,%ax
+ 8fc:	66 90                	xchg   %ax,%ax
+ 8fe:	66 90                	xchg   %ax,%ax
+
+00000900 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 900:	f3 0f 1e fb          	endbr32 
+ 904:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 905:	a1 f0 10 00 00       	mov    0x10f0,%eax
+{
+ 90a:	89 e5                	mov    %esp,%ebp
+ 90c:	57                   	push   %edi
+ 90d:	56                   	push   %esi
+ 90e:	53                   	push   %ebx
+ 90f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 912:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 914:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 917:	39 c8                	cmp    %ecx,%eax
+ 919:	73 15                	jae    930 <free+0x30>
+ 91b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 91f:	90                   	nop
+ 920:	39 d1                	cmp    %edx,%ecx
+ 922:	72 14                	jb     938 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 924:	39 d0                	cmp    %edx,%eax
+ 926:	73 10                	jae    938 <free+0x38>
+{
+ 928:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 92a:	8b 10                	mov    (%eax),%edx
+ 92c:	39 c8                	cmp    %ecx,%eax
+ 92e:	72 f0                	jb     920 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 930:	39 d0                	cmp    %edx,%eax
+ 932:	72 f4                	jb     928 <free+0x28>
+ 934:	39 d1                	cmp    %edx,%ecx
+ 936:	73 f0                	jae    928 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 fa                	cmp    %edi,%edx
+ 940:	74 1e                	je     960 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 942:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 945:	8b 50 04             	mov    0x4(%eax),%edx
+ 948:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 94b:	39 f1                	cmp    %esi,%ecx
+ 94d:	74 28                	je     977 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 94f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 951:	5b                   	pop    %ebx
+  freep = p;
+ 952:	a3 f0 10 00 00       	mov    %eax,0x10f0
+}
+ 957:	5e                   	pop    %esi
+ 958:	5f                   	pop    %edi
+ 959:	5d                   	pop    %ebp
+ 95a:	c3                   	ret    
+ 95b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 95f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 960:	03 72 04             	add    0x4(%edx),%esi
+ 963:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 966:	8b 10                	mov    (%eax),%edx
+ 968:	8b 12                	mov    (%edx),%edx
+ 96a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 96d:	8b 50 04             	mov    0x4(%eax),%edx
+ 970:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 973:	39 f1                	cmp    %esi,%ecx
+ 975:	75 d8                	jne    94f <free+0x4f>
+    p->s.size += bp->s.size;
+ 977:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 97a:	a3 f0 10 00 00       	mov    %eax,0x10f0
+    p->s.size += bp->s.size;
+ 97f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 982:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 985:	89 10                	mov    %edx,(%eax)
+}
+ 987:	5b                   	pop    %ebx
+ 988:	5e                   	pop    %esi
+ 989:	5f                   	pop    %edi
+ 98a:	5d                   	pop    %ebp
+ 98b:	c3                   	ret    
+ 98c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000990 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	89 e5                	mov    %esp,%ebp
+ 997:	57                   	push   %edi
+ 998:	56                   	push   %esi
+ 999:	53                   	push   %ebx
+ 99a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 99d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 9a0:	8b 3d f0 10 00 00    	mov    0x10f0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 9a9:	c1 ee 03             	shr    $0x3,%esi
+ 9ac:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 9af:	85 ff                	test   %edi,%edi
+ 9b1:	0f 84 a9 00 00 00    	je     a60 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9b7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bc:	39 f1                	cmp    %esi,%ecx
+ 9be:	73 6d                	jae    a2d <malloc+0x9d>
+ 9c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9cb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9d8:	eb 17                	jmp    9f1 <malloc+0x61>
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9e0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9e5:	39 f1                	cmp    %esi,%ecx
+ 9e7:	73 4f                	jae    a38 <malloc+0xa8>
+ 9e9:	8b 3d f0 10 00 00    	mov    0x10f0,%edi
+ 9ef:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9f1:	39 c7                	cmp    %eax,%edi
+ 9f3:	75 eb                	jne    9e0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9f5:	83 ec 0c             	sub    $0xc,%esp
+ 9f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9fb:	e8 2b fc ff ff       	call   62b <sbrk>
+  if(p == (char*)-1)
+ a00:	83 c4 10             	add    $0x10,%esp
+ a03:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a06:	74 1b                	je     a23 <malloc+0x93>
+  hp->s.size = nu;
+ a08:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ a0b:	83 ec 0c             	sub    $0xc,%esp
+ a0e:	83 c0 08             	add    $0x8,%eax
+ a11:	50                   	push   %eax
+ a12:	e8 e9 fe ff ff       	call   900 <free>
+  return freep;
+ a17:	a1 f0 10 00 00       	mov    0x10f0,%eax
+      if((p = morecore(nunits)) == 0)
+ a1c:	83 c4 10             	add    $0x10,%esp
+ a1f:	85 c0                	test   %eax,%eax
+ a21:	75 bd                	jne    9e0 <malloc+0x50>
+        return 0;
+  }
+}
+ a23:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a26:	31 c0                	xor    %eax,%eax
+}
+ a28:	5b                   	pop    %ebx
+ a29:	5e                   	pop    %esi
+ a2a:	5f                   	pop    %edi
+ a2b:	5d                   	pop    %ebp
+ a2c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a2d:	89 c2                	mov    %eax,%edx
+ a2f:	89 f8                	mov    %edi,%eax
+ a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a38:	39 ce                	cmp    %ecx,%esi
+ a3a:	74 54                	je     a90 <malloc+0x100>
+        p->s.size -= nunits;
+ a3c:	29 f1                	sub    %esi,%ecx
+ a3e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a41:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a44:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a47:	a3 f0 10 00 00       	mov    %eax,0x10f0
+}
+ a4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a4f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a52:	5b                   	pop    %ebx
+ a53:	5e                   	pop    %esi
+ a54:	5f                   	pop    %edi
+ a55:	5d                   	pop    %ebp
+ a56:	c3                   	ret    
+ a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a5e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a60:	c7 05 f0 10 00 00 f4 	movl   $0x10f4,0x10f0
+ a67:	10 00 00 
+    base.s.size = 0;
+ a6a:	bf f4 10 00 00       	mov    $0x10f4,%edi
+    base.s.ptr = freep = prevp = &base;
+ a6f:	c7 05 f4 10 00 00 f4 	movl   $0x10f4,0x10f4
+ a76:	10 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a79:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a7b:	c7 05 f8 10 00 00 00 	movl   $0x0,0x10f8
+ a82:	00 00 00 
+    if(p->s.size >= nunits){
+ a85:	e9 36 ff ff ff       	jmp    9c0 <malloc+0x30>
+ a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a90:	8b 0a                	mov    (%edx),%ecx
+ a92:	89 08                	mov    %ecx,(%eax)
+ a94:	eb b1                	jmp    a47 <malloc+0xb7>
+ a96:	66 90                	xchg   %ax,%ax
+ a98:	66 90                	xchg   %ax,%ax
+ a9a:	66 90                	xchg   %ax,%ax
+ a9c:	66 90                	xchg   %ax,%ax
+ a9e:	66 90                	xchg   %ax,%ax
+
+00000aa0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ aa0:	f3 0f 1e fb          	endbr32 
+ aa4:	55                   	push   %ebp
+ aa5:	b8 04 11 00 00       	mov    $0x1104,%eax
+ aaa:	89 e5                	mov    %esp,%ebp
+ aac:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ aaf:	89 15 00 11 00 00    	mov    %edx,0x1100
+    for (mti=1; mti<N; mti++)
+ ab5:	eb 0c                	jmp    ac3 <sgenrand+0x23>
+ ab7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ abe:	66 90                	xchg   %ax,%ax
+ ac0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ ac3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ ac9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ acb:	3d bc 1a 00 00       	cmp    $0x1abc,%eax
+ ad0:	75 ee                	jne    ac0 <sgenrand+0x20>
+ ad2:	c7 05 dc 10 00 00 70 	movl   $0x270,0x10dc
+ ad9:	02 00 00 
+}
+ adc:	5d                   	pop    %ebp
+ add:	c3                   	ret    
+ ade:	66 90                	xchg   %ax,%ax
+
+00000ae0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ ae0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ ae4:	a1 dc 10 00 00       	mov    0x10dc,%eax
+ ae9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ aee:	7f 3c                	jg     b2c <genrand+0x4c>
+ af0:	8d 50 01             	lea    0x1(%eax),%edx
+ af3:	8b 04 85 00 11 00 00 	mov    0x1100(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ afa:	89 15 dc 10 00 00    	mov    %edx,0x10dc
+    y ^= TEMPERING_SHIFT_U(y);
+ b00:	89 c2                	mov    %eax,%edx
+ b02:	c1 ea 0b             	shr    $0xb,%edx
+ b05:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ b07:	89 d0                	mov    %edx,%eax
+ b09:	c1 e0 07             	shl    $0x7,%eax
+ b0c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ b11:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ b13:	89 d0                	mov    %edx,%eax
+ b15:	c1 e0 0f             	shl    $0xf,%eax
+ b18:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ b1d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ b1f:	89 c2                	mov    %eax,%edx
+ b21:	c1 ea 12             	shr    $0x12,%edx
+ b24:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ b26:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ b2b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ b2c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ b31:	0f 84 d2 00 00 00    	je     c09 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ b37:	31 c0                	xor    %eax,%eax
+ b39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b40:	8b 0c 85 00 11 00 00 	mov    0x1100(,%eax,4),%ecx
+ b47:	83 c0 01             	add    $0x1,%eax
+ b4a:	8b 14 85 00 11 00 00 	mov    0x1100(,%eax,4),%edx
+ b51:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b57:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b5d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ b5f:	89 d1                	mov    %edx,%ecx
+ b61:	83 e2 01             	and    $0x1,%edx
+ b64:	d1 e9                	shr    %ecx
+ b66:	33 0c 85 30 17 00 00 	xor    0x1730(,%eax,4),%ecx
+ b6d:	33 0c 95 38 0d 00 00 	xor    0xd38(,%edx,4),%ecx
+ b74:	89 0c 85 fc 10 00 00 	mov    %ecx,0x10fc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ b7b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ b80:	75 be                	jne    b40 <genrand+0x60>
+ b82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b88:	8b 0c 85 00 11 00 00 	mov    0x1100(,%eax,4),%ecx
+ b8f:	83 c0 01             	add    $0x1,%eax
+ b92:	8b 14 85 00 11 00 00 	mov    0x1100(,%eax,4),%edx
+ b99:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b9f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ ba5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ ba7:	89 d1                	mov    %edx,%ecx
+ ba9:	83 e2 01             	and    $0x1,%edx
+ bac:	d1 e9                	shr    %ecx
+ bae:	33 0c 85 70 0d 00 00 	xor    0xd70(,%eax,4),%ecx
+ bb5:	33 0c 95 38 0d 00 00 	xor    0xd38(,%edx,4),%ecx
+ bbc:	89 0c 85 fc 10 00 00 	mov    %ecx,0x10fc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ bc3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ bc8:	75 be                	jne    b88 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ bca:	a1 00 11 00 00       	mov    0x1100,%eax
+ bcf:	8b 0d bc 1a 00 00    	mov    0x1abc,%ecx
+ bd5:	89 c2                	mov    %eax,%edx
+ bd7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ bdd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ be3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ be5:	89 ca                	mov    %ecx,%edx
+ be7:	83 e1 01             	and    $0x1,%ecx
+ bea:	d1 ea                	shr    %edx
+ bec:	33 15 30 17 00 00    	xor    0x1730,%edx
+ bf2:	33 14 8d 38 0d 00 00 	xor    0xd38(,%ecx,4),%edx
+ bf9:	89 15 bc 1a 00 00    	mov    %edx,0x1abc
+ bff:	ba 01 00 00 00       	mov    $0x1,%edx
+ c04:	e9 f1 fe ff ff       	jmp    afa <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ c09:	b8 04 11 00 00       	mov    $0x1104,%eax
+ c0e:	b9 bc 1a 00 00       	mov    $0x1abc,%ecx
+ c13:	ba 05 11 00 00       	mov    $0x1105,%edx
+ c18:	c7 05 00 11 00 00 05 	movl   $0x1105,0x1100
+ c1f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ c22:	eb 07                	jmp    c2b <genrand+0x14b>
+ c24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ c28:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ c2b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ c31:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ c33:	39 c1                	cmp    %eax,%ecx
+ c35:	75 f1                	jne    c28 <genrand+0x148>
+ c37:	e9 fb fe ff ff       	jmp    b37 <genrand+0x57>
+ c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c40 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ c40:	f3 0f 1e fb          	endbr32 
+ c44:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ c45:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ c47:	89 e5                	mov    %esp,%ebp
+ c49:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ c4a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ c4d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ c4e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ c53:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c56:	89 d8                	mov    %ebx,%eax
+ c58:	f7 f1                	div    %ecx
+ c5a:	89 c6                	mov    %eax,%esi
+ c5c:	29 d3                	sub    %edx,%ebx
+ c5e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ c60:	e8 7b fe ff ff       	call   ae0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ c65:	39 d8                	cmp    %ebx,%eax
+ c67:	73 f7                	jae    c60 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ c69:	31 d2                	xor    %edx,%edx
+}
+ c6b:	5b                   	pop    %ebx
+  return x/bin_size;
+ c6c:	f7 f6                	div    %esi
+}
+ c6e:	5e                   	pop    %esi
+ c6f:	5d                   	pop    %ebp
+ c70:	c3                   	ret    
+ c71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c7f:	90                   	nop
+
+00000c80 <randomrange>:
+
+int randomrange(int low, int high){
+ c80:	f3 0f 1e fb          	endbr32 
+ c84:	55                   	push   %ebp
+ c85:	89 e5                	mov    %esp,%ebp
+ c87:	57                   	push   %edi
+ c88:	56                   	push   %esi
+ c89:	53                   	push   %ebx
+ c8a:	83 ec 0c             	sub    $0xc,%esp
+ c8d:	8b 75 08             	mov    0x8(%ebp),%esi
+ c90:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ c93:	39 f0                	cmp    %esi,%eax
+ c95:	7d 06                	jge    c9d <randomrange+0x1d>
+ c97:	89 f2                	mov    %esi,%edx
+ c99:	89 c6                	mov    %eax,%esi
+ c9b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ c9d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ c9f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ ca4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ ca6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ ca9:	89 d8                	mov    %ebx,%eax
+ cab:	f7 f1                	div    %ecx
+ cad:	89 c7                	mov    %eax,%edi
+ caf:	29 d3                	sub    %edx,%ebx
+ cb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ cb8:	e8 23 fe ff ff       	call   ae0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ cbd:	39 d8                	cmp    %ebx,%eax
+ cbf:	73 f7                	jae    cb8 <randomrange+0x38>
+  return x/bin_size;
+ cc1:	31 d2                	xor    %edx,%edx
+  return val;
+ cc3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ cc6:	f7 f7                	div    %edi
+ cc8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ cc9:	01 f0                	add    %esi,%eax
+ ccb:	5e                   	pop    %esi
+ ccc:	5f                   	pop    %edi
+ ccd:	5d                   	pop    %ebp
+ cce:	c3                   	ret    
diff -ruN xv6-public/ls.d xv6-public-partB_sjf/ls.d
--- xv6-public/ls.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ls.d	2022-10-07 20:27:44.099116000 +0530
@@ -0,0 +1,2 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h \
+ fs.h
Binary files xv6-public/ls.o and xv6-public-partB_sjf/ls.o differ
diff -ruN xv6-public/ls.sym xv6-public-partB_sjf/ls.sym
--- xv6-public/ls.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ls.sym	2022-10-07 20:27:44.127116000 +0530
@@ -0,0 +1,76 @@
+00000000 .text
+00000cd0 .rodata
+00000d40 .eh_frame
+000010dc .data
+000010e0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ls.c
+000010e0 buf.1116
+00000000 ulib.c
+00000000 printf.c
+00000680 printint
+00000d24 digits.1105
+00000000 umalloc.c
+000010f0 freep
+000010f4 base
+00000000 random.c
+00001100 mt
+000010dc mti
+00000d38 mag01.989
+00000340 strcpy
+00000060 fmtname
+00000aa0 sgenrand
+00000730 printf
+00000570 memmove
+000005eb mknod
+00000460 gets
+00000623 getpid
+00000990 malloc
+00000633 sleep
+00000663 get_burst_time
+00000c40 random_at_most
+0000066b getCurrentInfo
+000005b3 pipe
+000005c3 write
+000005fb fstat
+000005d3 kill
+00000613 chdir
+000005db exec
+000005ab wait
+000005bb read
+000005f3 unlink
+0000059b fork
+0000062b sbrk
+0000063b uptime
+000010e0 __bss_start
+00000400 memset
+00000000 main
+0000065b set_burst_time
+00000370 strcmp
+0000061b dup
+00000ae0 genrand
+00000643 getNumProc
+00000653 getProcInfo
+000004e0 stat
+000010e0 _edata
+00001ac0 _end
+00000603 link
+00000100 ls
+000005a3 exit
+0000064b getMaxPID
+00000530 atoi
+000003c0 strlen
+000005e3 open
+00000420 strchr
+00000673 getCurrentPID
+00000c80 randomrange
+0000060b mkdir
+000005cb close
+00000900 free
diff -ruN xv6-public/main.d xv6-public-partB_sjf/main.d
--- xv6-public/main.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/main.d	2022-10-07 20:27:35.815044000 +0530
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Binary files xv6-public/main.o and xv6-public-partB_sjf/main.o differ
diff -ruN xv6-public/Makefile xv6-public-partB_sjf/Makefile
--- xv6-public/Makefile	2022-10-06 22:50:49.445046000 +0530
+++ xv6-public-partB_sjf/Makefile	2022-10-07 22:38:53.003193000 +0530
@@ -143,7 +143,7 @@
 vectors.S: vectors.pl
 	./vectors.pl > vectors.S
 
-ULIB = ulib.o usys.o printf.o umalloc.o
+ULIB = ulib.o usys.o printf.o umalloc.o random.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
@@ -181,6 +181,11 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_getNumProcTest\
+	_getMaxPIDTest\
+	_getProcInfoTest\
+	_test_scheduler\
+	_burstTimeTest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -249,8 +254,8 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c getNumProcTest.c getMaxPIDTest.c getProcInfoTest.c burstTimeTest.c test_scheduler.c\
+	printf.c umalloc.c random.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
Binary files xv6-public/_mkdir and xv6-public-partB_sjf/_mkdir differ
diff -ruN xv6-public/mkdir.asm xv6-public-partB_sjf/mkdir.asm
--- xv6-public/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/mkdir.asm	2022-10-07 20:27:44.179117000 +0530
@@ -0,0 +1,1526 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	bf 01 00 00 00       	mov    $0x1,%edi
+  17:	56                   	push   %esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 08             	sub    $0x8,%esp
+  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
+  20:	8b 31                	mov    (%ecx),%esi
+  22:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  25:	83 fe 01             	cmp    $0x1,%esi
+  28:	7e 3a                	jle    64 <main+0x64>
+  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 11 03 00 00       	call   34b <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 93 02 00 00       	call   2e3 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 27 0a 00 00       	push   $0xa27
+  58:	6a 02                	push   $0x2
+  5a:	e8 11 04 00 00       	call   470 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 10 0a 00 00       	push   $0xa10
+  6b:	6a 02                	push   $0x2
+  6d:	e8 fe 03 00 00       	call   470 <printf>
+    exit();
+  72:	e8 6c 02 00 00       	call   2e3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getNumProc>:
+SYSCALL(getNumProc)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 3ab:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <getCurrentPID>:
+ 3b3:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3cc:	89 d1                	mov    %edx,%ecx
+{
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
+    neg = 1;
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3e6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 4c 0a 00 00 	movzbl 0xa4c(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
+  if(neg)
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
+    buf[i++] = '-';
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 41f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 be fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+
+00000470 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 470:	f3 0f 1e fb          	endbr32 
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	57                   	push   %edi
+ 478:	56                   	push   %esi
+ 479:	53                   	push   %ebx
+ 47a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 47d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 480:	0f b6 1e             	movzbl (%esi),%ebx
+ 483:	84 db                	test   %bl,%bl
+ 485:	0f 84 b4 00 00 00    	je     53f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 48b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 48e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 491:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 494:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 496:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 499:	eb 33                	jmp    4ce <printf+0x5e>
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+ 4a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4a3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 17                	je     4c4 <printf+0x54>
+  write(fd, &c, 1);
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 45 fe ff ff       	call   303 <write>
+ 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4c1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c7:	83 c6 01             	add    $0x1,%esi
+ 4ca:	84 db                	test   %bl,%bl
+ 4cc:	74 71                	je     53f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ce:	0f be cb             	movsbl %bl,%ecx
+ 4d1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4d4:	85 d2                	test   %edx,%edx
+ 4d6:	74 c8                	je     4a0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4d8:	83 fa 25             	cmp    $0x25,%edx
+ 4db:	75 e7                	jne    4c4 <printf+0x54>
+      if(c == 'd'){
+ 4dd:	83 f8 64             	cmp    $0x64,%eax
+ 4e0:	0f 84 9a 00 00 00    	je     580 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ec:	83 f9 70             	cmp    $0x70,%ecx
+ 4ef:	74 5f                	je     550 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4f1:	83 f8 73             	cmp    $0x73,%eax
+ 4f4:	0f 84 d6 00 00 00    	je     5d0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4fa:	83 f8 63             	cmp    $0x63,%eax
+ 4fd:	0f 84 8d 00 00 00    	je     590 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 503:	83 f8 25             	cmp    $0x25,%eax
+ 506:	0f 84 b4 00 00 00    	je     5c0 <printf+0x150>
+  write(fd, &c, 1);
+ 50c:	83 ec 04             	sub    $0x4,%esp
+ 50f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 e5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 51e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 521:	83 c4 0c             	add    $0xc,%esp
+ 524:	6a 01                	push   $0x1
+ 526:	83 c6 01             	add    $0x1,%esi
+ 529:	57                   	push   %edi
+ 52a:	ff 75 08             	pushl  0x8(%ebp)
+ 52d:	e8 d1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 532:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 536:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 539:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 53b:	84 db                	test   %bl,%bl
+ 53d:	75 8f                	jne    4ce <printf+0x5e>
+    }
+  }
+}
+ 53f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 542:	5b                   	pop    %ebx
+ 543:	5e                   	pop    %esi
+ 544:	5f                   	pop    %edi
+ 545:	5d                   	pop    %ebp
+ 546:	c3                   	ret    
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 558:	6a 00                	push   $0x0
+ 55a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 55d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 560:	8b 13                	mov    (%ebx),%edx
+ 562:	e8 59 fe ff ff       	call   3c0 <printint>
+        ap++;
+ 567:	89 d8                	mov    %ebx,%eax
+ 569:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 56e:	83 c0 04             	add    $0x4,%eax
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	e9 4b ff ff ff       	jmp    4c4 <printf+0x54>
+ 579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	eb ce                	jmp    55a <printf+0xea>
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 590:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 596:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 598:	6a 01                	push   $0x1
+        ap++;
+ 59a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 59d:	57                   	push   %edi
+ 59e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5a1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a4:	e8 5a fd ff ff       	call   303 <write>
+        ap++;
+ 5a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ac:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5af:	31 d2                	xor    %edx,%edx
+ 5b1:	e9 0e ff ff ff       	jmp    4c4 <printf+0x54>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+ 5c6:	e9 59 ff ff ff       	jmp    524 <printf+0xb4>
+ 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+        s = (char*)*ap;
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5d5:	83 c0 04             	add    $0x4,%eax
+ 5d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5db:	85 db                	test   %ebx,%ebx
+ 5dd:	74 17                	je     5f6 <printf+0x186>
+        while(*s != 0){
+ 5df:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5e2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5e4:	84 c0                	test   %al,%al
+ 5e6:	0f 84 d8 fe ff ff    	je     4c4 <printf+0x54>
+ 5ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ef:	89 de                	mov    %ebx,%esi
+ 5f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f4:	eb 1a                	jmp    610 <printf+0x1a0>
+          s = "(null)";
+ 5f6:	bb 43 0a 00 00       	mov    $0xa43,%ebx
+        while(*s != 0){
+ 5fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	89 de                	mov    %ebx,%esi
+ 605:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+  write(fd, &c, 1);
+ 610:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 613:	83 c6 01             	add    $0x1,%esi
+ 616:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 619:	6a 01                	push   $0x1
+ 61b:	57                   	push   %edi
+ 61c:	53                   	push   %ebx
+ 61d:	e8 e1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 622:	0f b6 06             	movzbl (%esi),%eax
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 e4                	jne    610 <printf+0x1a0>
+ 62c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 8e fe ff ff       	jmp    4c4 <printf+0x54>
+ 636:	66 90                	xchg   %ax,%ax
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
+
+00000640 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 640:	f3 0f 1e fb          	endbr32 
+ 644:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 645:	a1 a0 0d 00 00       	mov    0xda0,%eax
+{
+ 64a:	89 e5                	mov    %esp,%ebp
+ 64c:	57                   	push   %edi
+ 64d:	56                   	push   %esi
+ 64e:	53                   	push   %ebx
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 654:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 657:	39 c8                	cmp    %ecx,%eax
+ 659:	73 15                	jae    670 <free+0x30>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+ 660:	39 d1                	cmp    %edx,%ecx
+ 662:	72 14                	jb     678 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 664:	39 d0                	cmp    %edx,%eax
+ 666:	73 10                	jae    678 <free+0x38>
+{
+ 668:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	39 c8                	cmp    %ecx,%eax
+ 66e:	72 f0                	jb     660 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 670:	39 d0                	cmp    %edx,%eax
+ 672:	72 f4                	jb     668 <free+0x28>
+ 674:	39 d1                	cmp    %edx,%ecx
+ 676:	73 f0                	jae    668 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 fa                	cmp    %edi,%edx
+ 680:	74 1e                	je     6a0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 682:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 685:	8b 50 04             	mov    0x4(%eax),%edx
+ 688:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 68b:	39 f1                	cmp    %esi,%ecx
+ 68d:	74 28                	je     6b7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 68f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 691:	5b                   	pop    %ebx
+  freep = p;
+ 692:	a3 a0 0d 00 00       	mov    %eax,0xda0
+}
+ 697:	5e                   	pop    %esi
+ 698:	5f                   	pop    %edi
+ 699:	5d                   	pop    %ebp
+ 69a:	c3                   	ret    
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6a0:	03 72 04             	add    0x4(%edx),%esi
+ 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6a6:	8b 10                	mov    (%eax),%edx
+ 6a8:	8b 12                	mov    (%edx),%edx
+ 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b3:	39 f1                	cmp    %esi,%ecx
+ 6b5:	75 d8                	jne    68f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6ba:	a3 a0 0d 00 00       	mov    %eax,0xda0
+    p->s.size += bp->s.size;
+ 6bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6c5:	89 10                	mov    %edx,(%eax)
+}
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
+ 6d5:	89 e5                	mov    %esp,%ebp
+ 6d7:	57                   	push   %edi
+ 6d8:	56                   	push   %esi
+ 6d9:	53                   	push   %ebx
+ 6da:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6e0:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e9:	c1 ee 03             	shr    $0x3,%esi
+ 6ec:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6ef:	85 ff                	test   %edi,%edi
+ 6f1:	0f 84 a9 00 00 00    	je     7a0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fc:	39 f1                	cmp    %esi,%ecx
+ 6fe:	73 6d                	jae    76d <malloc+0x9d>
+ 700:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 706:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 70b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 70e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 715:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 718:	eb 17                	jmp    731 <malloc+0x61>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 720:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 722:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	73 4f                	jae    778 <malloc+0xa8>
+ 729:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
+ 72f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 731:	39 c7                	cmp    %eax,%edi
+ 733:	75 eb                	jne    720 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 735:	83 ec 0c             	sub    $0xc,%esp
+ 738:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 73b:	e8 2b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 740:	83 c4 10             	add    $0x10,%esp
+ 743:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 746:	74 1b                	je     763 <malloc+0x93>
+  hp->s.size = nu;
+ 748:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	83 c0 08             	add    $0x8,%eax
+ 751:	50                   	push   %eax
+ 752:	e8 e9 fe ff ff       	call   640 <free>
+  return freep;
+ 757:	a1 a0 0d 00 00       	mov    0xda0,%eax
+      if((p = morecore(nunits)) == 0)
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	85 c0                	test   %eax,%eax
+ 761:	75 bd                	jne    720 <malloc+0x50>
+        return 0;
+  }
+}
+ 763:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 766:	31 c0                	xor    %eax,%eax
+}
+ 768:	5b                   	pop    %ebx
+ 769:	5e                   	pop    %esi
+ 76a:	5f                   	pop    %edi
+ 76b:	5d                   	pop    %ebp
+ 76c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 76d:	89 c2                	mov    %eax,%edx
+ 76f:	89 f8                	mov    %edi,%eax
+ 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 778:	39 ce                	cmp    %ecx,%esi
+ 77a:	74 54                	je     7d0 <malloc+0x100>
+        p->s.size -= nunits;
+ 77c:	29 f1                	sub    %esi,%ecx
+ 77e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 781:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 784:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 787:	a3 a0 0d 00 00       	mov    %eax,0xda0
+}
+ 78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 78f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 792:	5b                   	pop    %ebx
+ 793:	5e                   	pop    %esi
+ 794:	5f                   	pop    %edi
+ 795:	5d                   	pop    %ebp
+ 796:	c3                   	ret    
+ 797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 7a0:	c7 05 a0 0d 00 00 a4 	movl   $0xda4,0xda0
+ 7a7:	0d 00 00 
+    base.s.size = 0;
+ 7aa:	bf a4 0d 00 00       	mov    $0xda4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7af:	c7 05 a4 0d 00 00 a4 	movl   $0xda4,0xda4
+ 7b6:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7bb:	c7 05 a8 0d 00 00 00 	movl   $0x0,0xda8
+ 7c2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7c5:	e9 36 ff ff ff       	jmp    700 <malloc+0x30>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7d0:	8b 0a                	mov    (%edx),%ecx
+ 7d2:	89 08                	mov    %ecx,(%eax)
+ 7d4:	eb b1                	jmp    787 <malloc+0xb7>
+ 7d6:	66 90                	xchg   %ax,%ax
+ 7d8:	66 90                	xchg   %ax,%ax
+ 7da:	66 90                	xchg   %ax,%ax
+ 7dc:	66 90                	xchg   %ax,%ax
+ 7de:	66 90                	xchg   %ax,%ax
+
+000007e0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7e0:	f3 0f 1e fb          	endbr32 
+ 7e4:	55                   	push   %ebp
+ 7e5:	b8 c4 0d 00 00       	mov    $0xdc4,%eax
+ 7ea:	89 e5                	mov    %esp,%ebp
+ 7ec:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7ef:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
+    for (mti=1; mti<N; mti++)
+ 7f5:	eb 0c                	jmp    803 <sgenrand+0x23>
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+ 800:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 803:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 809:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 80b:	3d 7c 17 00 00       	cmp    $0x177c,%eax
+ 810:	75 ee                	jne    800 <sgenrand+0x20>
+ 812:	c7 05 94 0d 00 00 70 	movl   $0x270,0xd94
+ 819:	02 00 00 
+}
+ 81c:	5d                   	pop    %ebp
+ 81d:	c3                   	ret    
+ 81e:	66 90                	xchg   %ax,%ax
+
+00000820 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 820:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 824:	a1 94 0d 00 00       	mov    0xd94,%eax
+ 829:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 82e:	7f 3c                	jg     86c <genrand+0x4c>
+ 830:	8d 50 01             	lea    0x1(%eax),%edx
+ 833:	8b 04 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 83a:	89 15 94 0d 00 00    	mov    %edx,0xd94
+    y ^= TEMPERING_SHIFT_U(y);
+ 840:	89 c2                	mov    %eax,%edx
+ 842:	c1 ea 0b             	shr    $0xb,%edx
+ 845:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 847:	89 d0                	mov    %edx,%eax
+ 849:	c1 e0 07             	shl    $0x7,%eax
+ 84c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 851:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 853:	89 d0                	mov    %edx,%eax
+ 855:	c1 e0 0f             	shl    $0xf,%eax
+ 858:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 85d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 85f:	89 c2                	mov    %eax,%edx
+ 861:	c1 ea 12             	shr    $0x12,%edx
+ 864:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 866:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 86b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 86c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 871:	0f 84 d2 00 00 00    	je     949 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 877:	31 c0                	xor    %eax,%eax
+ 879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 880:	8b 0c 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%ecx
+ 887:	83 c0 01             	add    $0x1,%eax
+ 88a:	8b 14 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%edx
+ 891:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 897:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 89d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 89f:	89 d1                	mov    %edx,%ecx
+ 8a1:	83 e2 01             	and    $0x1,%edx
+ 8a4:	d1 e9                	shr    %ecx
+ 8a6:	33 0c 85 f0 13 00 00 	xor    0x13f0(,%eax,4),%ecx
+ 8ad:	33 0c 95 60 0a 00 00 	xor    0xa60(,%edx,4),%ecx
+ 8b4:	89 0c 85 bc 0d 00 00 	mov    %ecx,0xdbc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 8bb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 8c0:	75 be                	jne    880 <genrand+0x60>
+ 8c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8c8:	8b 0c 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%ecx
+ 8cf:	83 c0 01             	add    $0x1,%eax
+ 8d2:	8b 14 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%edx
+ 8d9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8df:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8e5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8e7:	89 d1                	mov    %edx,%ecx
+ 8e9:	83 e2 01             	and    $0x1,%edx
+ 8ec:	d1 e9                	shr    %ecx
+ 8ee:	33 0c 85 30 0a 00 00 	xor    0xa30(,%eax,4),%ecx
+ 8f5:	33 0c 95 60 0a 00 00 	xor    0xa60(,%edx,4),%ecx
+ 8fc:	89 0c 85 bc 0d 00 00 	mov    %ecx,0xdbc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 903:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 908:	75 be                	jne    8c8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 90a:	a1 c0 0d 00 00       	mov    0xdc0,%eax
+ 90f:	8b 0d 7c 17 00 00    	mov    0x177c,%ecx
+ 915:	89 c2                	mov    %eax,%edx
+ 917:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 91d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 923:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 925:	89 ca                	mov    %ecx,%edx
+ 927:	83 e1 01             	and    $0x1,%ecx
+ 92a:	d1 ea                	shr    %edx
+ 92c:	33 15 f0 13 00 00    	xor    0x13f0,%edx
+ 932:	33 14 8d 60 0a 00 00 	xor    0xa60(,%ecx,4),%edx
+ 939:	89 15 7c 17 00 00    	mov    %edx,0x177c
+ 93f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 944:	e9 f1 fe ff ff       	jmp    83a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 949:	b8 c4 0d 00 00       	mov    $0xdc4,%eax
+ 94e:	b9 7c 17 00 00       	mov    $0x177c,%ecx
+ 953:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 958:	c7 05 c0 0d 00 00 05 	movl   $0x1105,0xdc0
+ 95f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 962:	eb 07                	jmp    96b <genrand+0x14b>
+ 964:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 968:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 96b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 971:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 973:	39 c1                	cmp    %eax,%ecx
+ 975:	75 f1                	jne    968 <genrand+0x148>
+ 977:	e9 fb fe ff ff       	jmp    877 <genrand+0x57>
+ 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000980 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 980:	f3 0f 1e fb          	endbr32 
+ 984:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 985:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 987:	89 e5                	mov    %esp,%ebp
+ 989:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 98a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 98d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 98e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 993:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 996:	89 d8                	mov    %ebx,%eax
+ 998:	f7 f1                	div    %ecx
+ 99a:	89 c6                	mov    %eax,%esi
+ 99c:	29 d3                	sub    %edx,%ebx
+ 99e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 9a0:	e8 7b fe ff ff       	call   820 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 9a5:	39 d8                	cmp    %ebx,%eax
+ 9a7:	73 f7                	jae    9a0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 9a9:	31 d2                	xor    %edx,%edx
+}
+ 9ab:	5b                   	pop    %ebx
+  return x/bin_size;
+ 9ac:	f7 f6                	div    %esi
+}
+ 9ae:	5e                   	pop    %esi
+ 9af:	5d                   	pop    %ebp
+ 9b0:	c3                   	ret    
+ 9b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9bf:	90                   	nop
+
+000009c0 <randomrange>:
+
+int randomrange(int low, int high){
+ 9c0:	f3 0f 1e fb          	endbr32 
+ 9c4:	55                   	push   %ebp
+ 9c5:	89 e5                	mov    %esp,%ebp
+ 9c7:	57                   	push   %edi
+ 9c8:	56                   	push   %esi
+ 9c9:	53                   	push   %ebx
+ 9ca:	83 ec 0c             	sub    $0xc,%esp
+ 9cd:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9d3:	39 f0                	cmp    %esi,%eax
+ 9d5:	7d 06                	jge    9dd <randomrange+0x1d>
+ 9d7:	89 f2                	mov    %esi,%edx
+ 9d9:	89 c6                	mov    %eax,%esi
+ 9db:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9dd:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9df:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9e4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9e6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9e9:	89 d8                	mov    %ebx,%eax
+ 9eb:	f7 f1                	div    %ecx
+ 9ed:	89 c7                	mov    %eax,%edi
+ 9ef:	29 d3                	sub    %edx,%ebx
+ 9f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9f8:	e8 23 fe ff ff       	call   820 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9fd:	39 d8                	cmp    %ebx,%eax
+ 9ff:	73 f7                	jae    9f8 <randomrange+0x38>
+  return x/bin_size;
+ a01:	31 d2                	xor    %edx,%edx
+  return val;
+ a03:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a06:	f7 f7                	div    %edi
+ a08:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a09:	01 f0                	add    %esi,%eax
+ a0b:	5e                   	pop    %esi
+ a0c:	5f                   	pop    %edi
+ a0d:	5d                   	pop    %ebp
+ a0e:	c3                   	ret    
diff -ruN xv6-public/mkdir.d xv6-public-partB_sjf/mkdir.d
--- xv6-public/mkdir.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/mkdir.d	2022-10-07 20:27:44.155117000 +0530
@@ -0,0 +1,2 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/mkdir.o and xv6-public-partB_sjf/mkdir.o differ
diff -ruN xv6-public/mkdir.sym xv6-public-partB_sjf/mkdir.sym
--- xv6-public/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/mkdir.sym	2022-10-07 20:27:44.183117000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+00000a10 .rodata
+00000a68 .eh_frame
+00000d94 .data
+00000da0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+000003c0 printint
+00000a4c digits.1105
+00000000 umalloc.c
+00000da0 freep
+00000da4 base
+00000000 random.c
+00000dc0 mt
+00000d94 mti
+00000a60 mag01.989
+00000080 strcpy
+000007e0 sgenrand
+00000470 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006d0 malloc
+00000373 sleep
+000003a3 get_burst_time
+00000980 random_at_most
+000003ab getCurrentInfo
+000002f3 pipe
+00000303 write
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000d98 __bss_start
+00000140 memset
+00000000 main
+0000039b set_burst_time
+000000b0 strcmp
+0000035b dup
+00000820 genrand
+00000383 getNumProc
+00000393 getProcInfo
+00000220 stat
+00000d98 _edata
+00001780 _end
+00000343 link
+000002e3 exit
+0000038b getMaxPID
+00000270 atoi
+00000100 strlen
+00000323 open
+00000160 strchr
+000003b3 getCurrentPID
+000009c0 randomrange
+0000034b mkdir
+0000030b close
+00000640 free
Binary files xv6-public/mkfs and xv6-public-partB_sjf/mkfs differ
diff -ruN xv6-public/mp.d xv6-public-partB_sjf/mp.d
--- xv6-public/mp.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/mp.d	2022-10-07 20:27:35.887044000 +0530
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Binary files xv6-public/mp.o and xv6-public-partB_sjf/mp.o differ
diff -ruN xv6-public/param.h xv6-public-partB_sjf/param.h
--- xv6-public/param.h	2022-10-06 22:50:49.449046000 +0530
+++ xv6-public-partB_sjf/param.h	2022-10-06 23:27:48.630266000 +0530
@@ -1,6 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
diff -ruN xv6-public/picirq.d xv6-public-partB_sjf/picirq.d
--- xv6-public/picirq.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/picirq.d	2022-10-07 20:27:35.919045000 +0530
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files xv6-public/picirq.o and xv6-public-partB_sjf/picirq.o differ
diff -ruN xv6-public/pipe.d xv6-public-partB_sjf/pipe.d
--- xv6-public/pipe.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/pipe.d	2022-10-07 20:27:36.003045000 +0530
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h spinlock.h sleeplock.h file.h
Binary files xv6-public/pipe.o and xv6-public-partB_sjf/pipe.o differ
diff -ruN xv6-public/printf.d xv6-public-partB_sjf/printf.d
--- xv6-public/printf.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/printf.d	2022-10-07 20:27:43.203108000 +0530
@@ -0,0 +1,2 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/printf.o and xv6-public-partB_sjf/printf.o differ
diff -ruN xv6-public/proc.c xv6-public-partB_sjf/proc.c
--- xv6-public/proc.c	2022-10-06 22:50:49.449046000 +0530
+++ xv6-public-partB_sjf/proc.c	2022-10-07 23:09:12.930899758 +0530
@@ -6,12 +6,19 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+struct {
+  struct spinlock lock;
+  int siz;
+  struct proc* proc[NPROC+1];
+} pqueue;
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -20,10 +27,137 @@
 
 static void wakeup1(void *chan);
 
+struct proc defaultParent;
+
+int isEmpty(){
+  acquire(&pqueue.lock);
+  if(pqueue.siz == 0){
+    release(&pqueue.lock);
+    return 1;
+  }
+  else{
+    release(&pqueue.lock);
+    return 0;
+  }
+}
+
+void insert(struct proc *p){
+  acquire(&pqueue.lock);
+  if(pqueue.siz==NPROC){
+    release(&pqueue.lock);
+    return;
+  }
+
+  pqueue.siz++;
+  pqueue.proc[pqueue.siz]=p;
+  int curr=pqueue.siz;
+  while(curr>1 && ((pqueue.proc[curr]->burst_time)<(pqueue.proc[curr/2]->burst_time))){
+    struct proc* temp=pqueue.proc[curr];
+    pqueue.proc[curr]=pqueue.proc[curr/2];
+    pqueue.proc[curr/2]=temp;
+    curr/=2;
+  }
+  release(&pqueue.lock);
+}
+
+void fix(int curr){
+  acquire(&pqueue.lock);
+  while(curr*2<=pqueue.siz){
+    if(curr*2+1<=pqueue.siz){
+      if((pqueue.proc[curr]->burst_time)<=(pqueue.proc[curr*2]->burst_time)&&(pqueue.proc[curr]->burst_time)<=(pqueue.proc[curr*2+1]->burst_time))
+        break;
+      else{
+        if((pqueue.proc[curr*2]->burst_time)<=(pqueue.proc[curr*2+1]->burst_time)){
+          struct proc* temp=pqueue.proc[curr*2];
+          pqueue.proc[curr*2]=pqueue.proc[curr];
+          pqueue.proc[curr]=temp;
+          curr*=2;
+        } else {
+          struct proc* temp=pqueue.proc[curr*2+1];
+          pqueue.proc[curr*2+1]=pqueue.proc[curr];
+          pqueue.proc[curr]=temp;
+          curr*=2;
+          curr++;
+        }
+      }
+    } else {
+      if((pqueue.proc[curr]->burst_time)<=(pqueue.proc[curr*2]->burst_time))
+        break;
+      else{
+        struct proc* temp=pqueue.proc[curr*2];
+        pqueue.proc[curr*2]=pqueue.proc[curr];
+        pqueue.proc[curr]=temp;
+        curr*=2;
+      }
+    }
+  }
+  release(&pqueue.lock);
+}
+
+struct proc * extractMin(){
+  acquire(&pqueue.lock);
+  if(pqueue.siz == 0){
+    release(&pqueue.lock);
+    return 0;
+  }
+
+  struct proc* min=pqueue.proc[1];
+  if(pqueue.siz==1)
+  {
+    pqueue.siz=0;
+    release(&pqueue.lock);
+  }
+  else{
+    pqueue.proc[1] = pqueue.proc[pqueue.siz];
+    pqueue.siz--;
+    release(&pqueue.lock);
+
+    fix(1);
+  }
+  return min;
+}
+
+void changeKey(int pid, int x){
+
+	acquire(&pqueue.lock);
+
+	struct proc* p;
+	int curr=-1;
+	for(int i=1;i<=pqueue.siz;i++){
+		if(pqueue.proc[i]->pid == pid){
+			p=pqueue.proc[i];
+			curr=i;
+			break;
+		}
+	}
+
+	if(curr==-1){
+		release(&pqueue.lock);
+		return;
+	}
+
+	if(curr==pqueue.siz){
+		pqueue.siz--;
+		release(&pqueue.lock);
+	}
+	else{
+		pqueue.proc[curr]=pqueue.proc[pqueue.siz];
+		pqueue.siz--;
+		release(&pqueue.lock);
+
+		fix(curr);
+	}
+
+	p->burst_time=x;
+	insert(p);
+
+}
+
 void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  initlock(&pqueue.lock, "pqueue");
 }
 
 // Must be called with interrupts disabled
@@ -88,7 +222,10 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->nocs = 0;
+  p->parent = &defaultParent;
+  p->burst_time = 0;
+  p->rt = 0;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -120,6 +257,10 @@
 void
 userinit(void)
 {
+  acquire(&pqueue.lock);
+  pqueue.siz = 0;
+  release(&pqueue.lock);
+
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
@@ -148,7 +289,12 @@
   // because the assignment might not be atomic.
   acquire(&ptable.lock);
 
-  p->state = RUNNABLE;
+  if(p->state != RUNNABLE){
+    p->state = RUNNABLE;
+    insert(p);
+  }else{
+    p->state = RUNNABLE;
+  }
 
   release(&ptable.lock);
 }
@@ -214,7 +360,12 @@
 
   acquire(&ptable.lock);
 
-  np->state = RUNNABLE;
+  if(np->state != RUNNABLE){
+    np->state = RUNNABLE;
+    insert(np);
+  }else{
+    np->state = RUNNABLE;
+  }
 
   release(&ptable.lock);
 
@@ -286,6 +437,15 @@
       havekids = 1;
       if(p->state == ZOMBIE){
         // Found one.
+
+        //Remove p from pqueue.
+        changeKey(p->pid, 0);
+        // acquire(&pqueue.lock);
+
+        if((pqueue.proc[1]->burst_time == 0) && (pqueue.proc[1]->pid == p->pid))
+          extractMin(0);
+
+        
         pid = p->pid;
         kfree(p->kstack);
         p->kstack = 0;
@@ -322,6 +482,7 @@
 void
 scheduler(void)
 {
+	defaultParent.pid = -2;
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
@@ -329,27 +490,54 @@
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
-    // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
+    // //new SJF SCHEDULER
+  	if((p = extractMin(0)) == 0){
+      release(&ptable.lock);
+      continue;
+    }
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+  	if(p->state!=RUNNABLE)
+  	{
+      release(&ptable.lock);
+      continue;
     }
+
+  	c->proc = p;
+  	switchuvm(p);
+
+  	p->state = RUNNING;
+  	(p->nocs)++;
+
+  	swtch(&(c->scheduler), p->context);
+
+  	switchkvm();
+
+  	c->proc = 0;
+
+    // old round robin scheduler
+
+    // Loop over process table looking for process to run.
+    // for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    //   if(p->state != RUNNABLE)
+    //     continue;
+
+    //   // Switch to chosen process.  It is the process's job
+    //   // to release ptable.lock and then reacquire it
+    //   // before jumping back to us.
+    //   c->proc = p;
+    //   switchuvm(p);
+    //   p->state = RUNNING;
+    //   (p->nocs)++;
+    //   swtch(&(c->scheduler), p->context);
+
+    //   switchkvm();
+
+    //   // Process is done running for now.
+    //   // It should have changed its p->state before coming back.
+    //   c->proc = 0;
+    // }
+
     release(&ptable.lock);
 
   }
@@ -386,7 +574,14 @@
 yield(void)
 {
   acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
+
+  if(myproc()->state != RUNNABLE){
+    myproc()->state = RUNNABLE;
+    insert(myproc());
+  }else{
+    myproc()->state = RUNNABLE;
+  }
+
   sched();
   release(&ptable.lock);
 }
@@ -460,8 +655,16 @@
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
-      p->state = RUNNABLE;
+    if(p->state == SLEEPING && p->chan == chan){
+
+      if(p->state != RUNNABLE){
+        p->state = RUNNABLE;
+        insert(p);
+      }else{
+        p->state = RUNNABLE;
+      }
+    }
+      
 }
 
 // Wake up all processes sleeping on chan.
@@ -486,8 +689,15 @@
     if(p->pid == pid){
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-        p->state = RUNNABLE;
+      if(p->state == SLEEPING){
+
+        if(p->state != RUNNABLE){
+          p->state = RUNNABLE;
+          insert(p);
+        }else{
+          p->state = RUNNABLE;
+        }
+      }
       release(&ptable.lock);
       return 0;
     }
@@ -532,3 +742,113 @@
     cprintf("\n");
   }
 }
+
+int getNumProc_system(void){
+
+	int num_processes;
+	struct proc *p;
+
+  num_processes = 0;
+	acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED){
+      num_processes ++;
+    }
+  }
+  release(&ptable.lock);
+
+  return num_processes ;
+}
+
+int getMaxPID_system(void){
+
+	int max_pid;
+	struct proc *p;
+
+  max_pid = 0;
+	acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED){
+      if(p->pid > max_pid){
+        max_pid = p->pid;
+      }
+    }
+  }
+  release(&ptable.lock);
+
+  return max_pid;
+}
+
+
+struct processInfo getProcInfo_system(int pid){
+
+	struct proc *p;
+	struct processInfo temporary_info = {-1,0,0};
+
+	acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED){
+      if(p->pid == pid) {
+        temporary_info.ppid = p->parent->pid;
+        temporary_info.psize = p->sz;
+        temporary_info.numberContextSwitches = p->nocs;
+        release(&ptable.lock);
+        return temporary_info;
+      }
+    }
+  }
+  release(&ptable.lock);
+
+  return temporary_info;
+
+}
+
+int
+set_burst_time_system(int burst_time)
+{
+	struct proc *p = myproc();
+	p->burst_time = burst_time;
+  yield();
+
+	return 0;
+}
+
+int 
+get_burst_time_system()
+{
+	struct proc *p = myproc();
+
+	return p->burst_time;
+
+}
+
+struct processInfo
+getCurrentInfo_system(){
+
+  struct proc *p;
+  struct processInfo temporaryInfo = {-1,0,0};
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED){
+      if(p == myproc()) {
+        temporaryInfo.ppid = p->parent->pid;
+        temporaryInfo.psize = p->sz;
+        temporaryInfo.numberContextSwitches = p->nocs;
+        release(&ptable.lock);
+        return temporaryInfo;
+      }
+    }
+  }
+  release(&ptable.lock);
+
+  return temporaryInfo ;
+}
+
+int getCurrentPID_system(void){
+
+  if(!myproc())return -1;
+
+  return myproc()->pid;
+}
+
diff -ruN xv6-public/proc.d xv6-public-partB_sjf/proc.d
--- xv6-public/proc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/proc.d	2022-10-07 23:09:15.650923026 +0530
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h processInfo.h
diff -ruN xv6-public/processInfo.h xv6-public-partB_sjf/processInfo.h
--- xv6-public/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/processInfo.h	2020-06-12 12:22:40.000000000 +0530
@@ -0,0 +1,6 @@
+struct processInfo
+{
+    int ppid;
+    int psize;
+    int numberContextSwitches;
+};
diff -ruN xv6-public/proc.h xv6-public-partB_sjf/proc.h
--- xv6-public/proc.h	2022-10-06 22:50:49.453046000 +0530
+++ xv6-public-partB_sjf/proc.h	2022-10-07 18:09:42.479033000 +0530
@@ -49,8 +49,18 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int nocs;                    //Number of context switches
+  int burst_time;              //Burst time duhhh
+  int rt;                      //running time
 };
 
+int getNumProc_system(void);
+int getMaxPID_system(void);
+struct processInfo getProcInfo_system(int pid);
+int set_burst_time_system(int burst_time);
+int get_burst_time_system();
+struct processInfo getCurrentInfo_system();
+int getCurrentPID_system(void);
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
Binary files xv6-public/proc.o and xv6-public-partB_sjf/proc.o differ
diff -ruN xv6-public/random.c xv6-public-partB_sjf/random.c
--- xv6-public/random.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/random.c	2022-10-07 11:37:47.643876000 +0530
@@ -0,0 +1,101 @@
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
+
+int randomrange(int low, int high){
+  if(high<low){
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+  return val;
+}
\ No newline at end of file
diff -ruN xv6-public/random.d xv6-public-partB_sjf/random.d
--- xv6-public/random.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/random.d	2022-10-07 20:27:43.479111000 +0530
@@ -0,0 +1 @@
+random.o: random.c /usr/include/stdc-predef.h
Binary files xv6-public/random.o and xv6-public-partB_sjf/random.o differ
Binary files xv6-public/_rm and xv6-public-partB_sjf/_rm differ
diff -ruN xv6-public/rm.asm xv6-public-partB_sjf/rm.asm
--- xv6-public/rm.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/rm.asm	2022-10-07 20:27:44.235117000 +0530
@@ -0,0 +1,1526 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	bf 01 00 00 00       	mov    $0x1,%edi
+  17:	56                   	push   %esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 08             	sub    $0x8,%esp
+  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
+  20:	8b 31                	mov    (%ecx),%esi
+  22:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  25:	83 fe 01             	cmp    $0x1,%esi
+  28:	7e 3a                	jle    64 <main+0x64>
+  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 f9 02 00 00       	call   333 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 93 02 00 00       	call   2e3 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 24 0a 00 00       	push   $0xa24
+  58:	6a 02                	push   $0x2
+  5a:	e8 11 04 00 00       	call   470 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 10 0a 00 00       	push   $0xa10
+  6b:	6a 02                	push   $0x2
+  6d:	e8 fe 03 00 00       	call   470 <printf>
+    exit();
+  72:	e8 6c 02 00 00       	call   2e3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getNumProc>:
+SYSCALL(getNumProc)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 3ab:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <getCurrentPID>:
+ 3b3:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3cc:	89 d1                	mov    %edx,%ecx
+{
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
+    neg = 1;
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3e6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 44 0a 00 00 	movzbl 0xa44(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
+  if(neg)
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
+    buf[i++] = '-';
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 41f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 be fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+
+00000470 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 470:	f3 0f 1e fb          	endbr32 
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	57                   	push   %edi
+ 478:	56                   	push   %esi
+ 479:	53                   	push   %ebx
+ 47a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 47d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 480:	0f b6 1e             	movzbl (%esi),%ebx
+ 483:	84 db                	test   %bl,%bl
+ 485:	0f 84 b4 00 00 00    	je     53f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 48b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 48e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 491:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 494:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 496:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 499:	eb 33                	jmp    4ce <printf+0x5e>
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+ 4a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4a3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 17                	je     4c4 <printf+0x54>
+  write(fd, &c, 1);
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 45 fe ff ff       	call   303 <write>
+ 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4c1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c7:	83 c6 01             	add    $0x1,%esi
+ 4ca:	84 db                	test   %bl,%bl
+ 4cc:	74 71                	je     53f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ce:	0f be cb             	movsbl %bl,%ecx
+ 4d1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4d4:	85 d2                	test   %edx,%edx
+ 4d6:	74 c8                	je     4a0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4d8:	83 fa 25             	cmp    $0x25,%edx
+ 4db:	75 e7                	jne    4c4 <printf+0x54>
+      if(c == 'd'){
+ 4dd:	83 f8 64             	cmp    $0x64,%eax
+ 4e0:	0f 84 9a 00 00 00    	je     580 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ec:	83 f9 70             	cmp    $0x70,%ecx
+ 4ef:	74 5f                	je     550 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4f1:	83 f8 73             	cmp    $0x73,%eax
+ 4f4:	0f 84 d6 00 00 00    	je     5d0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4fa:	83 f8 63             	cmp    $0x63,%eax
+ 4fd:	0f 84 8d 00 00 00    	je     590 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 503:	83 f8 25             	cmp    $0x25,%eax
+ 506:	0f 84 b4 00 00 00    	je     5c0 <printf+0x150>
+  write(fd, &c, 1);
+ 50c:	83 ec 04             	sub    $0x4,%esp
+ 50f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 e5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 51e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 521:	83 c4 0c             	add    $0xc,%esp
+ 524:	6a 01                	push   $0x1
+ 526:	83 c6 01             	add    $0x1,%esi
+ 529:	57                   	push   %edi
+ 52a:	ff 75 08             	pushl  0x8(%ebp)
+ 52d:	e8 d1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 532:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 536:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 539:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 53b:	84 db                	test   %bl,%bl
+ 53d:	75 8f                	jne    4ce <printf+0x5e>
+    }
+  }
+}
+ 53f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 542:	5b                   	pop    %ebx
+ 543:	5e                   	pop    %esi
+ 544:	5f                   	pop    %edi
+ 545:	5d                   	pop    %ebp
+ 546:	c3                   	ret    
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 558:	6a 00                	push   $0x0
+ 55a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 55d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 560:	8b 13                	mov    (%ebx),%edx
+ 562:	e8 59 fe ff ff       	call   3c0 <printint>
+        ap++;
+ 567:	89 d8                	mov    %ebx,%eax
+ 569:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 56e:	83 c0 04             	add    $0x4,%eax
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	e9 4b ff ff ff       	jmp    4c4 <printf+0x54>
+ 579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	eb ce                	jmp    55a <printf+0xea>
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 590:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 596:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 598:	6a 01                	push   $0x1
+        ap++;
+ 59a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 59d:	57                   	push   %edi
+ 59e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5a1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a4:	e8 5a fd ff ff       	call   303 <write>
+        ap++;
+ 5a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ac:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5af:	31 d2                	xor    %edx,%edx
+ 5b1:	e9 0e ff ff ff       	jmp    4c4 <printf+0x54>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+ 5c6:	e9 59 ff ff ff       	jmp    524 <printf+0xb4>
+ 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+        s = (char*)*ap;
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5d5:	83 c0 04             	add    $0x4,%eax
+ 5d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5db:	85 db                	test   %ebx,%ebx
+ 5dd:	74 17                	je     5f6 <printf+0x186>
+        while(*s != 0){
+ 5df:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5e2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5e4:	84 c0                	test   %al,%al
+ 5e6:	0f 84 d8 fe ff ff    	je     4c4 <printf+0x54>
+ 5ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ef:	89 de                	mov    %ebx,%esi
+ 5f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f4:	eb 1a                	jmp    610 <printf+0x1a0>
+          s = "(null)";
+ 5f6:	bb 3d 0a 00 00       	mov    $0xa3d,%ebx
+        while(*s != 0){
+ 5fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	89 de                	mov    %ebx,%esi
+ 605:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+  write(fd, &c, 1);
+ 610:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 613:	83 c6 01             	add    $0x1,%esi
+ 616:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 619:	6a 01                	push   $0x1
+ 61b:	57                   	push   %edi
+ 61c:	53                   	push   %ebx
+ 61d:	e8 e1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 622:	0f b6 06             	movzbl (%esi),%eax
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 e4                	jne    610 <printf+0x1a0>
+ 62c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 8e fe ff ff       	jmp    4c4 <printf+0x54>
+ 636:	66 90                	xchg   %ax,%ax
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
+
+00000640 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 640:	f3 0f 1e fb          	endbr32 
+ 644:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 645:	a1 a0 0d 00 00       	mov    0xda0,%eax
+{
+ 64a:	89 e5                	mov    %esp,%ebp
+ 64c:	57                   	push   %edi
+ 64d:	56                   	push   %esi
+ 64e:	53                   	push   %ebx
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 654:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 657:	39 c8                	cmp    %ecx,%eax
+ 659:	73 15                	jae    670 <free+0x30>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+ 660:	39 d1                	cmp    %edx,%ecx
+ 662:	72 14                	jb     678 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 664:	39 d0                	cmp    %edx,%eax
+ 666:	73 10                	jae    678 <free+0x38>
+{
+ 668:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	39 c8                	cmp    %ecx,%eax
+ 66e:	72 f0                	jb     660 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 670:	39 d0                	cmp    %edx,%eax
+ 672:	72 f4                	jb     668 <free+0x28>
+ 674:	39 d1                	cmp    %edx,%ecx
+ 676:	73 f0                	jae    668 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 fa                	cmp    %edi,%edx
+ 680:	74 1e                	je     6a0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 682:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 685:	8b 50 04             	mov    0x4(%eax),%edx
+ 688:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 68b:	39 f1                	cmp    %esi,%ecx
+ 68d:	74 28                	je     6b7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 68f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 691:	5b                   	pop    %ebx
+  freep = p;
+ 692:	a3 a0 0d 00 00       	mov    %eax,0xda0
+}
+ 697:	5e                   	pop    %esi
+ 698:	5f                   	pop    %edi
+ 699:	5d                   	pop    %ebp
+ 69a:	c3                   	ret    
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6a0:	03 72 04             	add    0x4(%edx),%esi
+ 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6a6:	8b 10                	mov    (%eax),%edx
+ 6a8:	8b 12                	mov    (%edx),%edx
+ 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b3:	39 f1                	cmp    %esi,%ecx
+ 6b5:	75 d8                	jne    68f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6ba:	a3 a0 0d 00 00       	mov    %eax,0xda0
+    p->s.size += bp->s.size;
+ 6bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6c5:	89 10                	mov    %edx,(%eax)
+}
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
+ 6d5:	89 e5                	mov    %esp,%ebp
+ 6d7:	57                   	push   %edi
+ 6d8:	56                   	push   %esi
+ 6d9:	53                   	push   %ebx
+ 6da:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6e0:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e9:	c1 ee 03             	shr    $0x3,%esi
+ 6ec:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6ef:	85 ff                	test   %edi,%edi
+ 6f1:	0f 84 a9 00 00 00    	je     7a0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fc:	39 f1                	cmp    %esi,%ecx
+ 6fe:	73 6d                	jae    76d <malloc+0x9d>
+ 700:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 706:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 70b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 70e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 715:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 718:	eb 17                	jmp    731 <malloc+0x61>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 720:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 722:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	73 4f                	jae    778 <malloc+0xa8>
+ 729:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
+ 72f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 731:	39 c7                	cmp    %eax,%edi
+ 733:	75 eb                	jne    720 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 735:	83 ec 0c             	sub    $0xc,%esp
+ 738:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 73b:	e8 2b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 740:	83 c4 10             	add    $0x10,%esp
+ 743:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 746:	74 1b                	je     763 <malloc+0x93>
+  hp->s.size = nu;
+ 748:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	83 c0 08             	add    $0x8,%eax
+ 751:	50                   	push   %eax
+ 752:	e8 e9 fe ff ff       	call   640 <free>
+  return freep;
+ 757:	a1 a0 0d 00 00       	mov    0xda0,%eax
+      if((p = morecore(nunits)) == 0)
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	85 c0                	test   %eax,%eax
+ 761:	75 bd                	jne    720 <malloc+0x50>
+        return 0;
+  }
+}
+ 763:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 766:	31 c0                	xor    %eax,%eax
+}
+ 768:	5b                   	pop    %ebx
+ 769:	5e                   	pop    %esi
+ 76a:	5f                   	pop    %edi
+ 76b:	5d                   	pop    %ebp
+ 76c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 76d:	89 c2                	mov    %eax,%edx
+ 76f:	89 f8                	mov    %edi,%eax
+ 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 778:	39 ce                	cmp    %ecx,%esi
+ 77a:	74 54                	je     7d0 <malloc+0x100>
+        p->s.size -= nunits;
+ 77c:	29 f1                	sub    %esi,%ecx
+ 77e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 781:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 784:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 787:	a3 a0 0d 00 00       	mov    %eax,0xda0
+}
+ 78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 78f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 792:	5b                   	pop    %ebx
+ 793:	5e                   	pop    %esi
+ 794:	5f                   	pop    %edi
+ 795:	5d                   	pop    %ebp
+ 796:	c3                   	ret    
+ 797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 7a0:	c7 05 a0 0d 00 00 a4 	movl   $0xda4,0xda0
+ 7a7:	0d 00 00 
+    base.s.size = 0;
+ 7aa:	bf a4 0d 00 00       	mov    $0xda4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7af:	c7 05 a4 0d 00 00 a4 	movl   $0xda4,0xda4
+ 7b6:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7bb:	c7 05 a8 0d 00 00 00 	movl   $0x0,0xda8
+ 7c2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7c5:	e9 36 ff ff ff       	jmp    700 <malloc+0x30>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7d0:	8b 0a                	mov    (%edx),%ecx
+ 7d2:	89 08                	mov    %ecx,(%eax)
+ 7d4:	eb b1                	jmp    787 <malloc+0xb7>
+ 7d6:	66 90                	xchg   %ax,%ax
+ 7d8:	66 90                	xchg   %ax,%ax
+ 7da:	66 90                	xchg   %ax,%ax
+ 7dc:	66 90                	xchg   %ax,%ax
+ 7de:	66 90                	xchg   %ax,%ax
+
+000007e0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7e0:	f3 0f 1e fb          	endbr32 
+ 7e4:	55                   	push   %ebp
+ 7e5:	b8 c4 0d 00 00       	mov    $0xdc4,%eax
+ 7ea:	89 e5                	mov    %esp,%ebp
+ 7ec:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7ef:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
+    for (mti=1; mti<N; mti++)
+ 7f5:	eb 0c                	jmp    803 <sgenrand+0x23>
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+ 800:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 803:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 809:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 80b:	3d 7c 17 00 00       	cmp    $0x177c,%eax
+ 810:	75 ee                	jne    800 <sgenrand+0x20>
+ 812:	c7 05 8c 0d 00 00 70 	movl   $0x270,0xd8c
+ 819:	02 00 00 
+}
+ 81c:	5d                   	pop    %ebp
+ 81d:	c3                   	ret    
+ 81e:	66 90                	xchg   %ax,%ax
+
+00000820 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 820:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 824:	a1 8c 0d 00 00       	mov    0xd8c,%eax
+ 829:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 82e:	7f 3c                	jg     86c <genrand+0x4c>
+ 830:	8d 50 01             	lea    0x1(%eax),%edx
+ 833:	8b 04 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 83a:	89 15 8c 0d 00 00    	mov    %edx,0xd8c
+    y ^= TEMPERING_SHIFT_U(y);
+ 840:	89 c2                	mov    %eax,%edx
+ 842:	c1 ea 0b             	shr    $0xb,%edx
+ 845:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 847:	89 d0                	mov    %edx,%eax
+ 849:	c1 e0 07             	shl    $0x7,%eax
+ 84c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 851:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 853:	89 d0                	mov    %edx,%eax
+ 855:	c1 e0 0f             	shl    $0xf,%eax
+ 858:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 85d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 85f:	89 c2                	mov    %eax,%edx
+ 861:	c1 ea 12             	shr    $0x12,%edx
+ 864:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 866:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 86b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 86c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 871:	0f 84 d2 00 00 00    	je     949 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 877:	31 c0                	xor    %eax,%eax
+ 879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 880:	8b 0c 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%ecx
+ 887:	83 c0 01             	add    $0x1,%eax
+ 88a:	8b 14 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%edx
+ 891:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 897:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 89d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 89f:	89 d1                	mov    %edx,%ecx
+ 8a1:	83 e2 01             	and    $0x1,%edx
+ 8a4:	d1 e9                	shr    %ecx
+ 8a6:	33 0c 85 f0 13 00 00 	xor    0x13f0(,%eax,4),%ecx
+ 8ad:	33 0c 95 58 0a 00 00 	xor    0xa58(,%edx,4),%ecx
+ 8b4:	89 0c 85 bc 0d 00 00 	mov    %ecx,0xdbc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 8bb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 8c0:	75 be                	jne    880 <genrand+0x60>
+ 8c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8c8:	8b 0c 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%ecx
+ 8cf:	83 c0 01             	add    $0x1,%eax
+ 8d2:	8b 14 85 c0 0d 00 00 	mov    0xdc0(,%eax,4),%edx
+ 8d9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8df:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8e5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8e7:	89 d1                	mov    %edx,%ecx
+ 8e9:	83 e2 01             	and    $0x1,%edx
+ 8ec:	d1 e9                	shr    %ecx
+ 8ee:	33 0c 85 30 0a 00 00 	xor    0xa30(,%eax,4),%ecx
+ 8f5:	33 0c 95 58 0a 00 00 	xor    0xa58(,%edx,4),%ecx
+ 8fc:	89 0c 85 bc 0d 00 00 	mov    %ecx,0xdbc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 903:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 908:	75 be                	jne    8c8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 90a:	a1 c0 0d 00 00       	mov    0xdc0,%eax
+ 90f:	8b 0d 7c 17 00 00    	mov    0x177c,%ecx
+ 915:	89 c2                	mov    %eax,%edx
+ 917:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 91d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 923:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 925:	89 ca                	mov    %ecx,%edx
+ 927:	83 e1 01             	and    $0x1,%ecx
+ 92a:	d1 ea                	shr    %edx
+ 92c:	33 15 f0 13 00 00    	xor    0x13f0,%edx
+ 932:	33 14 8d 58 0a 00 00 	xor    0xa58(,%ecx,4),%edx
+ 939:	89 15 7c 17 00 00    	mov    %edx,0x177c
+ 93f:	ba 01 00 00 00       	mov    $0x1,%edx
+ 944:	e9 f1 fe ff ff       	jmp    83a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 949:	b8 c4 0d 00 00       	mov    $0xdc4,%eax
+ 94e:	b9 7c 17 00 00       	mov    $0x177c,%ecx
+ 953:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 958:	c7 05 c0 0d 00 00 05 	movl   $0x1105,0xdc0
+ 95f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 962:	eb 07                	jmp    96b <genrand+0x14b>
+ 964:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 968:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 96b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 971:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 973:	39 c1                	cmp    %eax,%ecx
+ 975:	75 f1                	jne    968 <genrand+0x148>
+ 977:	e9 fb fe ff ff       	jmp    877 <genrand+0x57>
+ 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000980 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 980:	f3 0f 1e fb          	endbr32 
+ 984:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 985:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 987:	89 e5                	mov    %esp,%ebp
+ 989:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 98a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 98d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 98e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 993:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 996:	89 d8                	mov    %ebx,%eax
+ 998:	f7 f1                	div    %ecx
+ 99a:	89 c6                	mov    %eax,%esi
+ 99c:	29 d3                	sub    %edx,%ebx
+ 99e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 9a0:	e8 7b fe ff ff       	call   820 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 9a5:	39 d8                	cmp    %ebx,%eax
+ 9a7:	73 f7                	jae    9a0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 9a9:	31 d2                	xor    %edx,%edx
+}
+ 9ab:	5b                   	pop    %ebx
+  return x/bin_size;
+ 9ac:	f7 f6                	div    %esi
+}
+ 9ae:	5e                   	pop    %esi
+ 9af:	5d                   	pop    %ebp
+ 9b0:	c3                   	ret    
+ 9b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9bf:	90                   	nop
+
+000009c0 <randomrange>:
+
+int randomrange(int low, int high){
+ 9c0:	f3 0f 1e fb          	endbr32 
+ 9c4:	55                   	push   %ebp
+ 9c5:	89 e5                	mov    %esp,%ebp
+ 9c7:	57                   	push   %edi
+ 9c8:	56                   	push   %esi
+ 9c9:	53                   	push   %ebx
+ 9ca:	83 ec 0c             	sub    $0xc,%esp
+ 9cd:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9d3:	39 f0                	cmp    %esi,%eax
+ 9d5:	7d 06                	jge    9dd <randomrange+0x1d>
+ 9d7:	89 f2                	mov    %esi,%edx
+ 9d9:	89 c6                	mov    %eax,%esi
+ 9db:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9dd:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9df:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9e4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9e6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9e9:	89 d8                	mov    %ebx,%eax
+ 9eb:	f7 f1                	div    %ecx
+ 9ed:	89 c7                	mov    %eax,%edi
+ 9ef:	29 d3                	sub    %edx,%ebx
+ 9f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9f8:	e8 23 fe ff ff       	call   820 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9fd:	39 d8                	cmp    %ebx,%eax
+ 9ff:	73 f7                	jae    9f8 <randomrange+0x38>
+  return x/bin_size;
+ a01:	31 d2                	xor    %edx,%edx
+  return val;
+ a03:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a06:	f7 f7                	div    %edi
+ a08:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a09:	01 f0                	add    %esi,%eax
+ a0b:	5e                   	pop    %esi
+ a0c:	5f                   	pop    %edi
+ a0d:	5d                   	pop    %ebp
+ a0e:	c3                   	ret    
diff -ruN xv6-public/rm.d xv6-public-partB_sjf/rm.d
--- xv6-public/rm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/rm.d	2022-10-07 20:27:44.215117000 +0530
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/rm.o and xv6-public-partB_sjf/rm.o differ
diff -ruN xv6-public/rm.sym xv6-public-partB_sjf/rm.sym
--- xv6-public/rm.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/rm.sym	2022-10-07 20:27:44.239117000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+00000a10 .rodata
+00000a60 .eh_frame
+00000d8c .data
+00000da0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+000003c0 printint
+00000a44 digits.1105
+00000000 umalloc.c
+00000da0 freep
+00000da4 base
+00000000 random.c
+00000dc0 mt
+00000d8c mti
+00000a58 mag01.989
+00000080 strcpy
+000007e0 sgenrand
+00000470 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006d0 malloc
+00000373 sleep
+000003a3 get_burst_time
+00000980 random_at_most
+000003ab getCurrentInfo
+000002f3 pipe
+00000303 write
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000d90 __bss_start
+00000140 memset
+00000000 main
+0000039b set_burst_time
+000000b0 strcmp
+0000035b dup
+00000820 genrand
+00000383 getNumProc
+00000393 getProcInfo
+00000220 stat
+00000d90 _edata
+00001780 _end
+00000343 link
+000002e3 exit
+0000038b getMaxPID
+00000270 atoi
+00000100 strlen
+00000323 open
+00000160 strchr
+000003b3 getCurrentPID
+000009c0 randomrange
+0000034b mkdir
+0000030b close
+00000640 free
Binary files xv6-public/_sh and xv6-public-partB_sjf/_sh differ
diff -ruN xv6-public/sh.asm xv6-public-partB_sjf/sh.asm
--- xv6-public/sh.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/sh.asm	2022-10-07 20:27:44.423119000 +0530
@@ -0,0 +1,2930 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return 0;
+}
+
+int
+main(void)
+{
+       0:	f3 0f 1e fb          	endbr32 
+       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       8:	83 e4 f0             	and    $0xfffffff0,%esp
+       b:	ff 71 fc             	pushl  -0x4(%ecx)
+       e:	55                   	push   %ebp
+       f:	89 e5                	mov    %esp,%ebp
+      11:	51                   	push   %ecx
+      12:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      15:	eb 12                	jmp    29 <main+0x29>
+      17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      1e:	66 90                	xchg   %ax,%ax
+    if(fd >= 3){
+      20:	83 f8 02             	cmp    $0x2,%eax
+      23:	0f 8f b7 00 00 00    	jg     e0 <main+0xe0>
+  while((fd = open("console", O_RDWR)) >= 0){
+      29:	83 ec 08             	sub    $0x8,%esp
+      2c:	6a 02                	push   $0x2
+      2e:	68 61 15 00 00       	push   $0x1561
+      33:	e8 9b 0d 00 00       	call   dd3 <open>
+      38:	83 c4 10             	add    $0x10,%esp
+      3b:	85 c0                	test   %eax,%eax
+      3d:	79 e1                	jns    20 <main+0x20>
+      3f:	eb 32                	jmp    73 <main+0x73>
+      41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      48:	80 3d 42 1c 00 00 20 	cmpb   $0x20,0x1c42
+      4f:	74 51                	je     a2 <main+0xa2>
+      51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      58:	e8 2e 0d 00 00       	call   d8b <fork>
+  if(pid == -1)
+      5d:	83 f8 ff             	cmp    $0xffffffff,%eax
+      60:	0f 84 9d 00 00 00    	je     103 <main+0x103>
+    if(fork1() == 0)
+      66:	85 c0                	test   %eax,%eax
+      68:	0f 84 80 00 00 00    	je     ee <main+0xee>
+    wait();
+      6e:	e8 28 0d 00 00       	call   d9b <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+      73:	83 ec 08             	sub    $0x8,%esp
+      76:	6a 64                	push   $0x64
+      78:	68 40 1c 00 00       	push   $0x1c40
+      7d:	e8 8e 00 00 00       	call   110 <getcmd>
+      82:	83 c4 10             	add    $0x10,%esp
+      85:	85 c0                	test   %eax,%eax
+      87:	78 14                	js     9d <main+0x9d>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      89:	80 3d 40 1c 00 00 63 	cmpb   $0x63,0x1c40
+      90:	75 c6                	jne    58 <main+0x58>
+      92:	80 3d 41 1c 00 00 64 	cmpb   $0x64,0x1c41
+      99:	75 bd                	jne    58 <main+0x58>
+      9b:	eb ab                	jmp    48 <main+0x48>
+  exit();
+      9d:	e8 f1 0c 00 00       	call   d93 <exit>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      a2:	83 ec 0c             	sub    $0xc,%esp
+      a5:	68 40 1c 00 00       	push   $0x1c40
+      aa:	e8 01 0b 00 00       	call   bb0 <strlen>
+      if(chdir(buf+3) < 0)
+      af:	c7 04 24 43 1c 00 00 	movl   $0x1c43,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      b6:	c6 80 3f 1c 00 00 00 	movb   $0x0,0x1c3f(%eax)
+      if(chdir(buf+3) < 0)
+      bd:	e8 41 0d 00 00       	call   e03 <chdir>
+      c2:	83 c4 10             	add    $0x10,%esp
+      c5:	85 c0                	test   %eax,%eax
+      c7:	79 aa                	jns    73 <main+0x73>
+        printf(2, "cannot cd %s\n", buf+3);
+      c9:	50                   	push   %eax
+      ca:	68 43 1c 00 00       	push   $0x1c43
+      cf:	68 69 15 00 00       	push   $0x1569
+      d4:	6a 02                	push   $0x2
+      d6:	e8 45 0e 00 00       	call   f20 <printf>
+      db:	83 c4 10             	add    $0x10,%esp
+      de:	eb 93                	jmp    73 <main+0x73>
+      close(fd);
+      e0:	83 ec 0c             	sub    $0xc,%esp
+      e3:	50                   	push   %eax
+      e4:	e8 d2 0c 00 00       	call   dbb <close>
+      break;
+      e9:	83 c4 10             	add    $0x10,%esp
+      ec:	eb 85                	jmp    73 <main+0x73>
+      runcmd(parsecmd(buf));
+      ee:	83 ec 0c             	sub    $0xc,%esp
+      f1:	68 40 1c 00 00       	push   $0x1c40
+      f6:	e8 c5 09 00 00       	call   ac0 <parsecmd>
+      fb:	89 04 24             	mov    %eax,(%esp)
+      fe:	e8 7d 00 00 00       	call   180 <runcmd>
+    panic("fork");
+     103:	83 ec 0c             	sub    $0xc,%esp
+     106:	68 ea 14 00 00       	push   $0x14ea
+     10b:	e8 50 00 00 00       	call   160 <panic>
+
+00000110 <getcmd>:
+{
+     110:	f3 0f 1e fb          	endbr32 
+     114:	55                   	push   %ebp
+     115:	89 e5                	mov    %esp,%ebp
+     117:	56                   	push   %esi
+     118:	53                   	push   %ebx
+     119:	8b 75 0c             	mov    0xc(%ebp),%esi
+     11c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     11f:	83 ec 08             	sub    $0x8,%esp
+     122:	68 c0 14 00 00       	push   $0x14c0
+     127:	6a 02                	push   $0x2
+     129:	e8 f2 0d 00 00       	call   f20 <printf>
+  memset(buf, 0, nbuf);
+     12e:	83 c4 0c             	add    $0xc,%esp
+     131:	56                   	push   %esi
+     132:	6a 00                	push   $0x0
+     134:	53                   	push   %ebx
+     135:	e8 b6 0a 00 00       	call   bf0 <memset>
+  gets(buf, nbuf);
+     13a:	58                   	pop    %eax
+     13b:	5a                   	pop    %edx
+     13c:	56                   	push   %esi
+     13d:	53                   	push   %ebx
+     13e:	e8 0d 0b 00 00       	call   c50 <gets>
+  if(buf[0] == 0) // EOF
+     143:	83 c4 10             	add    $0x10,%esp
+     146:	31 c0                	xor    %eax,%eax
+     148:	80 3b 00             	cmpb   $0x0,(%ebx)
+     14b:	0f 94 c0             	sete   %al
+}
+     14e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     151:	5b                   	pop    %ebx
+  if(buf[0] == 0) // EOF
+     152:	f7 d8                	neg    %eax
+}
+     154:	5e                   	pop    %esi
+     155:	5d                   	pop    %ebp
+     156:	c3                   	ret    
+     157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     15e:	66 90                	xchg   %ax,%ax
+
+00000160 <panic>:
+{
+     160:	f3 0f 1e fb          	endbr32 
+     164:	55                   	push   %ebp
+     165:	89 e5                	mov    %esp,%ebp
+     167:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     16a:	ff 75 08             	pushl  0x8(%ebp)
+     16d:	68 5d 15 00 00       	push   $0x155d
+     172:	6a 02                	push   $0x2
+     174:	e8 a7 0d 00 00       	call   f20 <printf>
+  exit();
+     179:	e8 15 0c 00 00       	call   d93 <exit>
+     17e:	66 90                	xchg   %ax,%ax
+
+00000180 <runcmd>:
+{
+     180:	f3 0f 1e fb          	endbr32 
+     184:	55                   	push   %ebp
+     185:	89 e5                	mov    %esp,%ebp
+     187:	53                   	push   %ebx
+     188:	83 ec 14             	sub    $0x14,%esp
+     18b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     18e:	85 db                	test   %ebx,%ebx
+     190:	74 7e                	je     210 <runcmd+0x90>
+  switch(cmd->type){
+     192:	83 3b 05             	cmpl   $0x5,(%ebx)
+     195:	0f 87 04 01 00 00    	ja     29f <runcmd+0x11f>
+     19b:	8b 03                	mov    (%ebx),%eax
+     19d:	3e ff 24 85 78 15 00 	notrack jmp *0x1578(,%eax,4)
+     1a4:	00 
+    if(pipe(p) < 0)
+     1a5:	83 ec 0c             	sub    $0xc,%esp
+     1a8:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     1ab:	50                   	push   %eax
+     1ac:	e8 f2 0b 00 00       	call   da3 <pipe>
+     1b1:	83 c4 10             	add    $0x10,%esp
+     1b4:	85 c0                	test   %eax,%eax
+     1b6:	0f 88 05 01 00 00    	js     2c1 <runcmd+0x141>
+  pid = fork();
+     1bc:	e8 ca 0b 00 00       	call   d8b <fork>
+  if(pid == -1)
+     1c1:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1c4:	0f 84 60 01 00 00    	je     32a <runcmd+0x1aa>
+    if(fork1() == 0){
+     1ca:	85 c0                	test   %eax,%eax
+     1cc:	0f 84 fc 00 00 00    	je     2ce <runcmd+0x14e>
+  pid = fork();
+     1d2:	e8 b4 0b 00 00       	call   d8b <fork>
+  if(pid == -1)
+     1d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1da:	0f 84 4a 01 00 00    	je     32a <runcmd+0x1aa>
+    if(fork1() == 0){
+     1e0:	85 c0                	test   %eax,%eax
+     1e2:	0f 84 14 01 00 00    	je     2fc <runcmd+0x17c>
+    close(p[0]);
+     1e8:	83 ec 0c             	sub    $0xc,%esp
+     1eb:	ff 75 f0             	pushl  -0x10(%ebp)
+     1ee:	e8 c8 0b 00 00       	call   dbb <close>
+    close(p[1]);
+     1f3:	58                   	pop    %eax
+     1f4:	ff 75 f4             	pushl  -0xc(%ebp)
+     1f7:	e8 bf 0b 00 00       	call   dbb <close>
+    wait();
+     1fc:	e8 9a 0b 00 00       	call   d9b <wait>
+    wait();
+     201:	e8 95 0b 00 00       	call   d9b <wait>
+    break;
+     206:	83 c4 10             	add    $0x10,%esp
+     209:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    exit();
+     210:	e8 7e 0b 00 00       	call   d93 <exit>
+  pid = fork();
+     215:	e8 71 0b 00 00       	call   d8b <fork>
+  if(pid == -1)
+     21a:	83 f8 ff             	cmp    $0xffffffff,%eax
+     21d:	0f 84 07 01 00 00    	je     32a <runcmd+0x1aa>
+    if(fork1() == 0)
+     223:	85 c0                	test   %eax,%eax
+     225:	75 e9                	jne    210 <runcmd+0x90>
+     227:	eb 6b                	jmp    294 <runcmd+0x114>
+    if(ecmd->argv[0] == 0)
+     229:	8b 43 04             	mov    0x4(%ebx),%eax
+     22c:	85 c0                	test   %eax,%eax
+     22e:	74 e0                	je     210 <runcmd+0x90>
+    exec(ecmd->argv[0], ecmd->argv);
+     230:	8d 53 04             	lea    0x4(%ebx),%edx
+     233:	51                   	push   %ecx
+     234:	51                   	push   %ecx
+     235:	52                   	push   %edx
+     236:	50                   	push   %eax
+     237:	e8 8f 0b 00 00       	call   dcb <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     23c:	83 c4 0c             	add    $0xc,%esp
+     23f:	ff 73 04             	pushl  0x4(%ebx)
+     242:	68 ca 14 00 00       	push   $0x14ca
+     247:	6a 02                	push   $0x2
+     249:	e8 d2 0c 00 00       	call   f20 <printf>
+    break;
+     24e:	83 c4 10             	add    $0x10,%esp
+     251:	eb bd                	jmp    210 <runcmd+0x90>
+  pid = fork();
+     253:	e8 33 0b 00 00       	call   d8b <fork>
+  if(pid == -1)
+     258:	83 f8 ff             	cmp    $0xffffffff,%eax
+     25b:	0f 84 c9 00 00 00    	je     32a <runcmd+0x1aa>
+    if(fork1() == 0)
+     261:	85 c0                	test   %eax,%eax
+     263:	74 2f                	je     294 <runcmd+0x114>
+    wait();
+     265:	e8 31 0b 00 00       	call   d9b <wait>
+    runcmd(lcmd->right);
+     26a:	83 ec 0c             	sub    $0xc,%esp
+     26d:	ff 73 08             	pushl  0x8(%ebx)
+     270:	e8 0b ff ff ff       	call   180 <runcmd>
+    close(rcmd->fd);
+     275:	83 ec 0c             	sub    $0xc,%esp
+     278:	ff 73 14             	pushl  0x14(%ebx)
+     27b:	e8 3b 0b 00 00       	call   dbb <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     280:	58                   	pop    %eax
+     281:	5a                   	pop    %edx
+     282:	ff 73 10             	pushl  0x10(%ebx)
+     285:	ff 73 08             	pushl  0x8(%ebx)
+     288:	e8 46 0b 00 00       	call   dd3 <open>
+     28d:	83 c4 10             	add    $0x10,%esp
+     290:	85 c0                	test   %eax,%eax
+     292:	78 18                	js     2ac <runcmd+0x12c>
+      runcmd(bcmd->cmd);
+     294:	83 ec 0c             	sub    $0xc,%esp
+     297:	ff 73 04             	pushl  0x4(%ebx)
+     29a:	e8 e1 fe ff ff       	call   180 <runcmd>
+    panic("runcmd");
+     29f:	83 ec 0c             	sub    $0xc,%esp
+     2a2:	68 c3 14 00 00       	push   $0x14c3
+     2a7:	e8 b4 fe ff ff       	call   160 <panic>
+      printf(2, "open %s failed\n", rcmd->file);
+     2ac:	51                   	push   %ecx
+     2ad:	ff 73 08             	pushl  0x8(%ebx)
+     2b0:	68 da 14 00 00       	push   $0x14da
+     2b5:	6a 02                	push   $0x2
+     2b7:	e8 64 0c 00 00       	call   f20 <printf>
+      exit();
+     2bc:	e8 d2 0a 00 00       	call   d93 <exit>
+      panic("pipe");
+     2c1:	83 ec 0c             	sub    $0xc,%esp
+     2c4:	68 ef 14 00 00       	push   $0x14ef
+     2c9:	e8 92 fe ff ff       	call   160 <panic>
+      close(1);
+     2ce:	83 ec 0c             	sub    $0xc,%esp
+     2d1:	6a 01                	push   $0x1
+     2d3:	e8 e3 0a 00 00       	call   dbb <close>
+      dup(p[1]);
+     2d8:	58                   	pop    %eax
+     2d9:	ff 75 f4             	pushl  -0xc(%ebp)
+     2dc:	e8 2a 0b 00 00       	call   e0b <dup>
+      close(p[0]);
+     2e1:	58                   	pop    %eax
+     2e2:	ff 75 f0             	pushl  -0x10(%ebp)
+     2e5:	e8 d1 0a 00 00       	call   dbb <close>
+      close(p[1]);
+     2ea:	58                   	pop    %eax
+     2eb:	ff 75 f4             	pushl  -0xc(%ebp)
+     2ee:	e8 c8 0a 00 00       	call   dbb <close>
+      runcmd(pcmd->left);
+     2f3:	5a                   	pop    %edx
+     2f4:	ff 73 04             	pushl  0x4(%ebx)
+     2f7:	e8 84 fe ff ff       	call   180 <runcmd>
+      close(0);
+     2fc:	83 ec 0c             	sub    $0xc,%esp
+     2ff:	6a 00                	push   $0x0
+     301:	e8 b5 0a 00 00       	call   dbb <close>
+      dup(p[0]);
+     306:	5a                   	pop    %edx
+     307:	ff 75 f0             	pushl  -0x10(%ebp)
+     30a:	e8 fc 0a 00 00       	call   e0b <dup>
+      close(p[0]);
+     30f:	59                   	pop    %ecx
+     310:	ff 75 f0             	pushl  -0x10(%ebp)
+     313:	e8 a3 0a 00 00       	call   dbb <close>
+      close(p[1]);
+     318:	58                   	pop    %eax
+     319:	ff 75 f4             	pushl  -0xc(%ebp)
+     31c:	e8 9a 0a 00 00       	call   dbb <close>
+      runcmd(pcmd->right);
+     321:	58                   	pop    %eax
+     322:	ff 73 08             	pushl  0x8(%ebx)
+     325:	e8 56 fe ff ff       	call   180 <runcmd>
+    panic("fork");
+     32a:	83 ec 0c             	sub    $0xc,%esp
+     32d:	68 ea 14 00 00       	push   $0x14ea
+     332:	e8 29 fe ff ff       	call   160 <panic>
+     337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     33e:	66 90                	xchg   %ax,%ax
+
+00000340 <fork1>:
+{
+     340:	f3 0f 1e fb          	endbr32 
+     344:	55                   	push   %ebp
+     345:	89 e5                	mov    %esp,%ebp
+     347:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     34a:	e8 3c 0a 00 00       	call   d8b <fork>
+  if(pid == -1)
+     34f:	83 f8 ff             	cmp    $0xffffffff,%eax
+     352:	74 02                	je     356 <fork1+0x16>
+  return pid;
+}
+     354:	c9                   	leave  
+     355:	c3                   	ret    
+    panic("fork");
+     356:	83 ec 0c             	sub    $0xc,%esp
+     359:	68 ea 14 00 00       	push   $0x14ea
+     35e:	e8 fd fd ff ff       	call   160 <panic>
+     363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     370:	f3 0f 1e fb          	endbr32 
+     374:	55                   	push   %ebp
+     375:	89 e5                	mov    %esp,%ebp
+     377:	53                   	push   %ebx
+     378:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     37b:	6a 54                	push   $0x54
+     37d:	e8 fe 0d 00 00       	call   1180 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     382:	83 c4 0c             	add    $0xc,%esp
+     385:	6a 54                	push   $0x54
+  cmd = malloc(sizeof(*cmd));
+     387:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     389:	6a 00                	push   $0x0
+     38b:	50                   	push   %eax
+     38c:	e8 5f 08 00 00       	call   bf0 <memset>
+  cmd->type = EXEC;
+     391:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     397:	89 d8                	mov    %ebx,%eax
+     399:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     39c:	c9                   	leave  
+     39d:	c3                   	ret    
+     39e:	66 90                	xchg   %ax,%ax
+
+000003a0 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     3a0:	f3 0f 1e fb          	endbr32 
+     3a4:	55                   	push   %ebp
+     3a5:	89 e5                	mov    %esp,%ebp
+     3a7:	53                   	push   %ebx
+     3a8:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3ab:	6a 18                	push   $0x18
+     3ad:	e8 ce 0d 00 00       	call   1180 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3b2:	83 c4 0c             	add    $0xc,%esp
+     3b5:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     3b7:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     3b9:	6a 00                	push   $0x0
+     3bb:	50                   	push   %eax
+     3bc:	e8 2f 08 00 00       	call   bf0 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     3c1:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     3c4:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     3ca:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     3cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3d0:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     3d3:	8b 45 10             	mov    0x10(%ebp),%eax
+     3d6:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     3d9:	8b 45 14             	mov    0x14(%ebp),%eax
+     3dc:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     3df:	8b 45 18             	mov    0x18(%ebp),%eax
+     3e2:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     3e5:	89 d8                	mov    %ebx,%eax
+     3e7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3ea:	c9                   	leave  
+     3eb:	c3                   	ret    
+     3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003f0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     3f0:	f3 0f 1e fb          	endbr32 
+     3f4:	55                   	push   %ebp
+     3f5:	89 e5                	mov    %esp,%ebp
+     3f7:	53                   	push   %ebx
+     3f8:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3fb:	6a 0c                	push   $0xc
+     3fd:	e8 7e 0d 00 00       	call   1180 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     402:	83 c4 0c             	add    $0xc,%esp
+     405:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     407:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     409:	6a 00                	push   $0x0
+     40b:	50                   	push   %eax
+     40c:	e8 df 07 00 00       	call   bf0 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     411:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     414:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     41a:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     41d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     420:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     423:	89 d8                	mov    %ebx,%eax
+     425:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     428:	c9                   	leave  
+     429:	c3                   	ret    
+     42a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000430 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     430:	f3 0f 1e fb          	endbr32 
+     434:	55                   	push   %ebp
+     435:	89 e5                	mov    %esp,%ebp
+     437:	53                   	push   %ebx
+     438:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     43b:	6a 0c                	push   $0xc
+     43d:	e8 3e 0d 00 00       	call   1180 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     442:	83 c4 0c             	add    $0xc,%esp
+     445:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     447:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     449:	6a 00                	push   $0x0
+     44b:	50                   	push   %eax
+     44c:	e8 9f 07 00 00       	call   bf0 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     451:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     454:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     45a:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     45d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     460:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     463:	89 d8                	mov    %ebx,%eax
+     465:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     468:	c9                   	leave  
+     469:	c3                   	ret    
+     46a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000470 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     470:	f3 0f 1e fb          	endbr32 
+     474:	55                   	push   %ebp
+     475:	89 e5                	mov    %esp,%ebp
+     477:	53                   	push   %ebx
+     478:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     47b:	6a 08                	push   $0x8
+     47d:	e8 fe 0c 00 00       	call   1180 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     482:	83 c4 0c             	add    $0xc,%esp
+     485:	6a 08                	push   $0x8
+  cmd = malloc(sizeof(*cmd));
+     487:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     489:	6a 00                	push   $0x0
+     48b:	50                   	push   %eax
+     48c:	e8 5f 07 00 00       	call   bf0 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     491:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     494:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     49a:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     49d:	89 d8                	mov    %ebx,%eax
+     49f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     4a2:	c9                   	leave  
+     4a3:	c3                   	ret    
+     4a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     4ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     4af:	90                   	nop
+
+000004b0 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     4b0:	f3 0f 1e fb          	endbr32 
+     4b4:	55                   	push   %ebp
+     4b5:	89 e5                	mov    %esp,%ebp
+     4b7:	57                   	push   %edi
+     4b8:	56                   	push   %esi
+     4b9:	53                   	push   %ebx
+     4ba:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     4bd:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     4c0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     4c3:	8b 75 10             	mov    0x10(%ebp),%esi
+  s = *ps;
+     4c6:	8b 38                	mov    (%eax),%edi
+  while(s < es && strchr(whitespace, *s))
+     4c8:	39 df                	cmp    %ebx,%edi
+     4ca:	72 0b                	jb     4d7 <gettoken+0x27>
+     4cc:	eb 21                	jmp    4ef <gettoken+0x3f>
+     4ce:	66 90                	xchg   %ax,%ax
+    s++;
+     4d0:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     4d3:	39 fb                	cmp    %edi,%ebx
+     4d5:	74 18                	je     4ef <gettoken+0x3f>
+     4d7:	0f be 07             	movsbl (%edi),%eax
+     4da:	83 ec 08             	sub    $0x8,%esp
+     4dd:	50                   	push   %eax
+     4de:	68 18 1c 00 00       	push   $0x1c18
+     4e3:	e8 28 07 00 00       	call   c10 <strchr>
+     4e8:	83 c4 10             	add    $0x10,%esp
+     4eb:	85 c0                	test   %eax,%eax
+     4ed:	75 e1                	jne    4d0 <gettoken+0x20>
+  if(q)
+     4ef:	85 f6                	test   %esi,%esi
+     4f1:	74 02                	je     4f5 <gettoken+0x45>
+    *q = s;
+     4f3:	89 3e                	mov    %edi,(%esi)
+  ret = *s;
+     4f5:	0f b6 07             	movzbl (%edi),%eax
+  switch(*s){
+     4f8:	3c 3c                	cmp    $0x3c,%al
+     4fa:	0f 8f d0 00 00 00    	jg     5d0 <gettoken+0x120>
+     500:	3c 3a                	cmp    $0x3a,%al
+     502:	0f 8f b4 00 00 00    	jg     5bc <gettoken+0x10c>
+     508:	84 c0                	test   %al,%al
+     50a:	75 44                	jne    550 <gettoken+0xa0>
+     50c:	31 f6                	xor    %esi,%esi
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     50e:	8b 55 14             	mov    0x14(%ebp),%edx
+     511:	85 d2                	test   %edx,%edx
+     513:	74 05                	je     51a <gettoken+0x6a>
+    *eq = s;
+     515:	8b 45 14             	mov    0x14(%ebp),%eax
+     518:	89 38                	mov    %edi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     51a:	39 df                	cmp    %ebx,%edi
+     51c:	72 09                	jb     527 <gettoken+0x77>
+     51e:	eb 1f                	jmp    53f <gettoken+0x8f>
+    s++;
+     520:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     523:	39 fb                	cmp    %edi,%ebx
+     525:	74 18                	je     53f <gettoken+0x8f>
+     527:	0f be 07             	movsbl (%edi),%eax
+     52a:	83 ec 08             	sub    $0x8,%esp
+     52d:	50                   	push   %eax
+     52e:	68 18 1c 00 00       	push   $0x1c18
+     533:	e8 d8 06 00 00       	call   c10 <strchr>
+     538:	83 c4 10             	add    $0x10,%esp
+     53b:	85 c0                	test   %eax,%eax
+     53d:	75 e1                	jne    520 <gettoken+0x70>
+  *ps = s;
+     53f:	8b 45 08             	mov    0x8(%ebp),%eax
+     542:	89 38                	mov    %edi,(%eax)
+  return ret;
+}
+     544:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     547:	89 f0                	mov    %esi,%eax
+     549:	5b                   	pop    %ebx
+     54a:	5e                   	pop    %esi
+     54b:	5f                   	pop    %edi
+     54c:	5d                   	pop    %ebp
+     54d:	c3                   	ret    
+     54e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     550:	79 5e                	jns    5b0 <gettoken+0x100>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     552:	39 fb                	cmp    %edi,%ebx
+     554:	77 34                	ja     58a <gettoken+0xda>
+  if(eq)
+     556:	8b 45 14             	mov    0x14(%ebp),%eax
+     559:	be 61 00 00 00       	mov    $0x61,%esi
+     55e:	85 c0                	test   %eax,%eax
+     560:	75 b3                	jne    515 <gettoken+0x65>
+     562:	eb db                	jmp    53f <gettoken+0x8f>
+     564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     568:	0f be 07             	movsbl (%edi),%eax
+     56b:	83 ec 08             	sub    $0x8,%esp
+     56e:	50                   	push   %eax
+     56f:	68 10 1c 00 00       	push   $0x1c10
+     574:	e8 97 06 00 00       	call   c10 <strchr>
+     579:	83 c4 10             	add    $0x10,%esp
+     57c:	85 c0                	test   %eax,%eax
+     57e:	75 22                	jne    5a2 <gettoken+0xf2>
+      s++;
+     580:	83 c7 01             	add    $0x1,%edi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     583:	39 fb                	cmp    %edi,%ebx
+     585:	74 cf                	je     556 <gettoken+0xa6>
+     587:	0f b6 07             	movzbl (%edi),%eax
+     58a:	83 ec 08             	sub    $0x8,%esp
+     58d:	0f be f0             	movsbl %al,%esi
+     590:	56                   	push   %esi
+     591:	68 18 1c 00 00       	push   $0x1c18
+     596:	e8 75 06 00 00       	call   c10 <strchr>
+     59b:	83 c4 10             	add    $0x10,%esp
+     59e:	85 c0                	test   %eax,%eax
+     5a0:	74 c6                	je     568 <gettoken+0xb8>
+    ret = 'a';
+     5a2:	be 61 00 00 00       	mov    $0x61,%esi
+     5a7:	e9 62 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     5b0:	3c 26                	cmp    $0x26,%al
+     5b2:	74 08                	je     5bc <gettoken+0x10c>
+     5b4:	8d 48 d8             	lea    -0x28(%eax),%ecx
+     5b7:	80 f9 01             	cmp    $0x1,%cl
+     5ba:	77 96                	ja     552 <gettoken+0xa2>
+  ret = *s;
+     5bc:	0f be f0             	movsbl %al,%esi
+    s++;
+     5bf:	83 c7 01             	add    $0x1,%edi
+    break;
+     5c2:	e9 47 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5ce:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     5d0:	3c 3e                	cmp    $0x3e,%al
+     5d2:	75 1c                	jne    5f0 <gettoken+0x140>
+    if(*s == '>'){
+     5d4:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+    s++;
+     5d8:	8d 47 01             	lea    0x1(%edi),%eax
+    if(*s == '>'){
+     5db:	74 1c                	je     5f9 <gettoken+0x149>
+    s++;
+     5dd:	89 c7                	mov    %eax,%edi
+     5df:	be 3e 00 00 00       	mov    $0x3e,%esi
+     5e4:	e9 25 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     5f0:	3c 7c                	cmp    $0x7c,%al
+     5f2:	74 c8                	je     5bc <gettoken+0x10c>
+     5f4:	e9 59 ff ff ff       	jmp    552 <gettoken+0xa2>
+      s++;
+     5f9:	83 c7 02             	add    $0x2,%edi
+      ret = '+';
+     5fc:	be 2b 00 00 00       	mov    $0x2b,%esi
+     601:	e9 08 ff ff ff       	jmp    50e <gettoken+0x5e>
+     606:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     60d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000610 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     610:	f3 0f 1e fb          	endbr32 
+     614:	55                   	push   %ebp
+     615:	89 e5                	mov    %esp,%ebp
+     617:	57                   	push   %edi
+     618:	56                   	push   %esi
+     619:	53                   	push   %ebx
+     61a:	83 ec 0c             	sub    $0xc,%esp
+     61d:	8b 7d 08             	mov    0x8(%ebp),%edi
+     620:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     623:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     625:	39 f3                	cmp    %esi,%ebx
+     627:	72 0e                	jb     637 <peek+0x27>
+     629:	eb 24                	jmp    64f <peek+0x3f>
+     62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     62f:	90                   	nop
+    s++;
+     630:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     633:	39 de                	cmp    %ebx,%esi
+     635:	74 18                	je     64f <peek+0x3f>
+     637:	0f be 03             	movsbl (%ebx),%eax
+     63a:	83 ec 08             	sub    $0x8,%esp
+     63d:	50                   	push   %eax
+     63e:	68 18 1c 00 00       	push   $0x1c18
+     643:	e8 c8 05 00 00       	call   c10 <strchr>
+     648:	83 c4 10             	add    $0x10,%esp
+     64b:	85 c0                	test   %eax,%eax
+     64d:	75 e1                	jne    630 <peek+0x20>
+  *ps = s;
+     64f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     651:	0f be 03             	movsbl (%ebx),%eax
+     654:	31 d2                	xor    %edx,%edx
+     656:	84 c0                	test   %al,%al
+     658:	75 0e                	jne    668 <peek+0x58>
+}
+     65a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     65d:	89 d0                	mov    %edx,%eax
+     65f:	5b                   	pop    %ebx
+     660:	5e                   	pop    %esi
+     661:	5f                   	pop    %edi
+     662:	5d                   	pop    %ebp
+     663:	c3                   	ret    
+     664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return *s && strchr(toks, *s);
+     668:	83 ec 08             	sub    $0x8,%esp
+     66b:	50                   	push   %eax
+     66c:	ff 75 10             	pushl  0x10(%ebp)
+     66f:	e8 9c 05 00 00       	call   c10 <strchr>
+     674:	83 c4 10             	add    $0x10,%esp
+     677:	31 d2                	xor    %edx,%edx
+     679:	85 c0                	test   %eax,%eax
+     67b:	0f 95 c2             	setne  %dl
+}
+     67e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     681:	5b                   	pop    %ebx
+     682:	89 d0                	mov    %edx,%eax
+     684:	5e                   	pop    %esi
+     685:	5f                   	pop    %edi
+     686:	5d                   	pop    %ebp
+     687:	c3                   	ret    
+     688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     68f:	90                   	nop
+
+00000690 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     690:	f3 0f 1e fb          	endbr32 
+     694:	55                   	push   %ebp
+     695:	89 e5                	mov    %esp,%ebp
+     697:	57                   	push   %edi
+     698:	56                   	push   %esi
+     699:	53                   	push   %ebx
+     69a:	83 ec 1c             	sub    $0x1c,%esp
+     69d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     6a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     6a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     6a7:	90                   	nop
+     6a8:	83 ec 04             	sub    $0x4,%esp
+     6ab:	68 11 15 00 00       	push   $0x1511
+     6b0:	53                   	push   %ebx
+     6b1:	56                   	push   %esi
+     6b2:	e8 59 ff ff ff       	call   610 <peek>
+     6b7:	83 c4 10             	add    $0x10,%esp
+     6ba:	85 c0                	test   %eax,%eax
+     6bc:	74 6a                	je     728 <parseredirs+0x98>
+    tok = gettoken(ps, es, 0, 0);
+     6be:	6a 00                	push   $0x0
+     6c0:	6a 00                	push   $0x0
+     6c2:	53                   	push   %ebx
+     6c3:	56                   	push   %esi
+     6c4:	e8 e7 fd ff ff       	call   4b0 <gettoken>
+     6c9:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     6cb:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     6ce:	50                   	push   %eax
+     6cf:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     6d2:	50                   	push   %eax
+     6d3:	53                   	push   %ebx
+     6d4:	56                   	push   %esi
+     6d5:	e8 d6 fd ff ff       	call   4b0 <gettoken>
+     6da:	83 c4 20             	add    $0x20,%esp
+     6dd:	83 f8 61             	cmp    $0x61,%eax
+     6e0:	75 51                	jne    733 <parseredirs+0xa3>
+      panic("missing file for redirection");
+    switch(tok){
+     6e2:	83 ff 3c             	cmp    $0x3c,%edi
+     6e5:	74 31                	je     718 <parseredirs+0x88>
+     6e7:	83 ff 3e             	cmp    $0x3e,%edi
+     6ea:	74 05                	je     6f1 <parseredirs+0x61>
+     6ec:	83 ff 2b             	cmp    $0x2b,%edi
+     6ef:	75 b7                	jne    6a8 <parseredirs+0x18>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6f1:	83 ec 0c             	sub    $0xc,%esp
+     6f4:	6a 01                	push   $0x1
+     6f6:	68 01 02 00 00       	push   $0x201
+     6fb:	ff 75 e4             	pushl  -0x1c(%ebp)
+     6fe:	ff 75 e0             	pushl  -0x20(%ebp)
+     701:	ff 75 08             	pushl  0x8(%ebp)
+     704:	e8 97 fc ff ff       	call   3a0 <redircmd>
+      break;
+     709:	83 c4 20             	add    $0x20,%esp
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     70c:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     70f:	eb 97                	jmp    6a8 <parseredirs+0x18>
+     711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     718:	83 ec 0c             	sub    $0xc,%esp
+     71b:	6a 00                	push   $0x0
+     71d:	6a 00                	push   $0x0
+     71f:	eb da                	jmp    6fb <parseredirs+0x6b>
+     721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+  return cmd;
+}
+     728:	8b 45 08             	mov    0x8(%ebp),%eax
+     72b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     72e:	5b                   	pop    %ebx
+     72f:	5e                   	pop    %esi
+     730:	5f                   	pop    %edi
+     731:	5d                   	pop    %ebp
+     732:	c3                   	ret    
+      panic("missing file for redirection");
+     733:	83 ec 0c             	sub    $0xc,%esp
+     736:	68 f4 14 00 00       	push   $0x14f4
+     73b:	e8 20 fa ff ff       	call   160 <panic>
+
+00000740 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     740:	f3 0f 1e fb          	endbr32 
+     744:	55                   	push   %ebp
+     745:	89 e5                	mov    %esp,%ebp
+     747:	57                   	push   %edi
+     748:	56                   	push   %esi
+     749:	53                   	push   %ebx
+     74a:	83 ec 30             	sub    $0x30,%esp
+     74d:	8b 75 08             	mov    0x8(%ebp),%esi
+     750:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     753:	68 14 15 00 00       	push   $0x1514
+     758:	57                   	push   %edi
+     759:	56                   	push   %esi
+     75a:	e8 b1 fe ff ff       	call   610 <peek>
+     75f:	83 c4 10             	add    $0x10,%esp
+     762:	85 c0                	test   %eax,%eax
+     764:	0f 85 96 00 00 00    	jne    800 <parseexec+0xc0>
+     76a:	89 c3                	mov    %eax,%ebx
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     76c:	e8 ff fb ff ff       	call   370 <execcmd>
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     771:	83 ec 04             	sub    $0x4,%esp
+     774:	57                   	push   %edi
+     775:	56                   	push   %esi
+     776:	50                   	push   %eax
+  ret = execcmd();
+     777:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  ret = parseredirs(ret, ps, es);
+     77a:	e8 11 ff ff ff       	call   690 <parseredirs>
+  while(!peek(ps, es, "|)&;")){
+     77f:	83 c4 10             	add    $0x10,%esp
+  ret = parseredirs(ret, ps, es);
+     782:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     785:	eb 1c                	jmp    7a3 <parseexec+0x63>
+     787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     78e:	66 90                	xchg   %ax,%ax
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     790:	83 ec 04             	sub    $0x4,%esp
+     793:	57                   	push   %edi
+     794:	56                   	push   %esi
+     795:	ff 75 d4             	pushl  -0x2c(%ebp)
+     798:	e8 f3 fe ff ff       	call   690 <parseredirs>
+     79d:	83 c4 10             	add    $0x10,%esp
+     7a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     7a3:	83 ec 04             	sub    $0x4,%esp
+     7a6:	68 2b 15 00 00       	push   $0x152b
+     7ab:	57                   	push   %edi
+     7ac:	56                   	push   %esi
+     7ad:	e8 5e fe ff ff       	call   610 <peek>
+     7b2:	83 c4 10             	add    $0x10,%esp
+     7b5:	85 c0                	test   %eax,%eax
+     7b7:	75 67                	jne    820 <parseexec+0xe0>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     7b9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     7bc:	50                   	push   %eax
+     7bd:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     7c0:	50                   	push   %eax
+     7c1:	57                   	push   %edi
+     7c2:	56                   	push   %esi
+     7c3:	e8 e8 fc ff ff       	call   4b0 <gettoken>
+     7c8:	83 c4 10             	add    $0x10,%esp
+     7cb:	85 c0                	test   %eax,%eax
+     7cd:	74 51                	je     820 <parseexec+0xe0>
+    if(tok != 'a')
+     7cf:	83 f8 61             	cmp    $0x61,%eax
+     7d2:	75 6b                	jne    83f <parseexec+0xff>
+    cmd->argv[argc] = q;
+     7d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     7d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     7da:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     7de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     7e1:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     7e5:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     7e8:	83 fb 0a             	cmp    $0xa,%ebx
+     7eb:	75 a3                	jne    790 <parseexec+0x50>
+      panic("too many args");
+     7ed:	83 ec 0c             	sub    $0xc,%esp
+     7f0:	68 1d 15 00 00       	push   $0x151d
+     7f5:	e8 66 f9 ff ff       	call   160 <panic>
+     7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     800:	83 ec 08             	sub    $0x8,%esp
+     803:	57                   	push   %edi
+     804:	56                   	push   %esi
+     805:	e8 66 01 00 00       	call   970 <parseblock>
+     80a:	83 c4 10             	add    $0x10,%esp
+     80d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     810:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     813:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     816:	5b                   	pop    %ebx
+     817:	5e                   	pop    %esi
+     818:	5f                   	pop    %edi
+     819:	5d                   	pop    %ebp
+     81a:	c3                   	ret    
+     81b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     81f:	90                   	nop
+  cmd->argv[argc] = 0;
+     820:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     823:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+     826:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  cmd->eargv[argc] = 0;
+     82d:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+}
+     834:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     837:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     83a:	5b                   	pop    %ebx
+     83b:	5e                   	pop    %esi
+     83c:	5f                   	pop    %edi
+     83d:	5d                   	pop    %ebp
+     83e:	c3                   	ret    
+      panic("syntax");
+     83f:	83 ec 0c             	sub    $0xc,%esp
+     842:	68 16 15 00 00       	push   $0x1516
+     847:	e8 14 f9 ff ff       	call   160 <panic>
+     84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000850 <parsepipe>:
+{
+     850:	f3 0f 1e fb          	endbr32 
+     854:	55                   	push   %ebp
+     855:	89 e5                	mov    %esp,%ebp
+     857:	57                   	push   %edi
+     858:	56                   	push   %esi
+     859:	53                   	push   %ebx
+     85a:	83 ec 14             	sub    $0x14,%esp
+     85d:	8b 75 08             	mov    0x8(%ebp),%esi
+     860:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parseexec(ps, es);
+     863:	57                   	push   %edi
+     864:	56                   	push   %esi
+     865:	e8 d6 fe ff ff       	call   740 <parseexec>
+  if(peek(ps, es, "|")){
+     86a:	83 c4 0c             	add    $0xc,%esp
+     86d:	68 30 15 00 00       	push   $0x1530
+  cmd = parseexec(ps, es);
+     872:	89 c3                	mov    %eax,%ebx
+  if(peek(ps, es, "|")){
+     874:	57                   	push   %edi
+     875:	56                   	push   %esi
+     876:	e8 95 fd ff ff       	call   610 <peek>
+     87b:	83 c4 10             	add    $0x10,%esp
+     87e:	85 c0                	test   %eax,%eax
+     880:	75 0e                	jne    890 <parsepipe+0x40>
+}
+     882:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     885:	89 d8                	mov    %ebx,%eax
+     887:	5b                   	pop    %ebx
+     888:	5e                   	pop    %esi
+     889:	5f                   	pop    %edi
+     88a:	5d                   	pop    %ebp
+     88b:	c3                   	ret    
+     88c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     890:	6a 00                	push   $0x0
+     892:	6a 00                	push   $0x0
+     894:	57                   	push   %edi
+     895:	56                   	push   %esi
+     896:	e8 15 fc ff ff       	call   4b0 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     89b:	58                   	pop    %eax
+     89c:	5a                   	pop    %edx
+     89d:	57                   	push   %edi
+     89e:	56                   	push   %esi
+     89f:	e8 ac ff ff ff       	call   850 <parsepipe>
+     8a4:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     8a7:	83 c4 10             	add    $0x10,%esp
+     8aa:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     8ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8b0:	5b                   	pop    %ebx
+     8b1:	5e                   	pop    %esi
+     8b2:	5f                   	pop    %edi
+     8b3:	5d                   	pop    %ebp
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     8b4:	e9 37 fb ff ff       	jmp    3f0 <pipecmd>
+     8b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008c0 <parseline>:
+{
+     8c0:	f3 0f 1e fb          	endbr32 
+     8c4:	55                   	push   %ebp
+     8c5:	89 e5                	mov    %esp,%ebp
+     8c7:	57                   	push   %edi
+     8c8:	56                   	push   %esi
+     8c9:	53                   	push   %ebx
+     8ca:	83 ec 14             	sub    $0x14,%esp
+     8cd:	8b 75 08             	mov    0x8(%ebp),%esi
+     8d0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parsepipe(ps, es);
+     8d3:	57                   	push   %edi
+     8d4:	56                   	push   %esi
+     8d5:	e8 76 ff ff ff       	call   850 <parsepipe>
+  while(peek(ps, es, "&")){
+     8da:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     8dd:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     8df:	eb 1f                	jmp    900 <parseline+0x40>
+     8e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     8e8:	6a 00                	push   $0x0
+     8ea:	6a 00                	push   $0x0
+     8ec:	57                   	push   %edi
+     8ed:	56                   	push   %esi
+     8ee:	e8 bd fb ff ff       	call   4b0 <gettoken>
+    cmd = backcmd(cmd);
+     8f3:	89 1c 24             	mov    %ebx,(%esp)
+     8f6:	e8 75 fb ff ff       	call   470 <backcmd>
+     8fb:	83 c4 10             	add    $0x10,%esp
+     8fe:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     900:	83 ec 04             	sub    $0x4,%esp
+     903:	68 32 15 00 00       	push   $0x1532
+     908:	57                   	push   %edi
+     909:	56                   	push   %esi
+     90a:	e8 01 fd ff ff       	call   610 <peek>
+     90f:	83 c4 10             	add    $0x10,%esp
+     912:	85 c0                	test   %eax,%eax
+     914:	75 d2                	jne    8e8 <parseline+0x28>
+  if(peek(ps, es, ";")){
+     916:	83 ec 04             	sub    $0x4,%esp
+     919:	68 2e 15 00 00       	push   $0x152e
+     91e:	57                   	push   %edi
+     91f:	56                   	push   %esi
+     920:	e8 eb fc ff ff       	call   610 <peek>
+     925:	83 c4 10             	add    $0x10,%esp
+     928:	85 c0                	test   %eax,%eax
+     92a:	75 14                	jne    940 <parseline+0x80>
+}
+     92c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     92f:	89 d8                	mov    %ebx,%eax
+     931:	5b                   	pop    %ebx
+     932:	5e                   	pop    %esi
+     933:	5f                   	pop    %edi
+     934:	5d                   	pop    %ebp
+     935:	c3                   	ret    
+     936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     93d:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     940:	6a 00                	push   $0x0
+     942:	6a 00                	push   $0x0
+     944:	57                   	push   %edi
+     945:	56                   	push   %esi
+     946:	e8 65 fb ff ff       	call   4b0 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     94b:	58                   	pop    %eax
+     94c:	5a                   	pop    %edx
+     94d:	57                   	push   %edi
+     94e:	56                   	push   %esi
+     94f:	e8 6c ff ff ff       	call   8c0 <parseline>
+     954:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     957:	83 c4 10             	add    $0x10,%esp
+     95a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     95d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     960:	5b                   	pop    %ebx
+     961:	5e                   	pop    %esi
+     962:	5f                   	pop    %edi
+     963:	5d                   	pop    %ebp
+    cmd = listcmd(cmd, parseline(ps, es));
+     964:	e9 c7 fa ff ff       	jmp    430 <listcmd>
+     969:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <parseblock>:
+{
+     970:	f3 0f 1e fb          	endbr32 
+     974:	55                   	push   %ebp
+     975:	89 e5                	mov    %esp,%ebp
+     977:	57                   	push   %edi
+     978:	56                   	push   %esi
+     979:	53                   	push   %ebx
+     97a:	83 ec 10             	sub    $0x10,%esp
+     97d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     980:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     983:	68 14 15 00 00       	push   $0x1514
+     988:	56                   	push   %esi
+     989:	53                   	push   %ebx
+     98a:	e8 81 fc ff ff       	call   610 <peek>
+     98f:	83 c4 10             	add    $0x10,%esp
+     992:	85 c0                	test   %eax,%eax
+     994:	74 4a                	je     9e0 <parseblock+0x70>
+  gettoken(ps, es, 0, 0);
+     996:	6a 00                	push   $0x0
+     998:	6a 00                	push   $0x0
+     99a:	56                   	push   %esi
+     99b:	53                   	push   %ebx
+     99c:	e8 0f fb ff ff       	call   4b0 <gettoken>
+  cmd = parseline(ps, es);
+     9a1:	58                   	pop    %eax
+     9a2:	5a                   	pop    %edx
+     9a3:	56                   	push   %esi
+     9a4:	53                   	push   %ebx
+     9a5:	e8 16 ff ff ff       	call   8c0 <parseline>
+  if(!peek(ps, es, ")"))
+     9aa:	83 c4 0c             	add    $0xc,%esp
+     9ad:	68 50 15 00 00       	push   $0x1550
+  cmd = parseline(ps, es);
+     9b2:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     9b4:	56                   	push   %esi
+     9b5:	53                   	push   %ebx
+     9b6:	e8 55 fc ff ff       	call   610 <peek>
+     9bb:	83 c4 10             	add    $0x10,%esp
+     9be:	85 c0                	test   %eax,%eax
+     9c0:	74 2b                	je     9ed <parseblock+0x7d>
+  gettoken(ps, es, 0, 0);
+     9c2:	6a 00                	push   $0x0
+     9c4:	6a 00                	push   $0x0
+     9c6:	56                   	push   %esi
+     9c7:	53                   	push   %ebx
+     9c8:	e8 e3 fa ff ff       	call   4b0 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     9cd:	83 c4 0c             	add    $0xc,%esp
+     9d0:	56                   	push   %esi
+     9d1:	53                   	push   %ebx
+     9d2:	57                   	push   %edi
+     9d3:	e8 b8 fc ff ff       	call   690 <parseredirs>
+}
+     9d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     9db:	5b                   	pop    %ebx
+     9dc:	5e                   	pop    %esi
+     9dd:	5f                   	pop    %edi
+     9de:	5d                   	pop    %ebp
+     9df:	c3                   	ret    
+    panic("parseblock");
+     9e0:	83 ec 0c             	sub    $0xc,%esp
+     9e3:	68 34 15 00 00       	push   $0x1534
+     9e8:	e8 73 f7 ff ff       	call   160 <panic>
+    panic("syntax - missing )");
+     9ed:	83 ec 0c             	sub    $0xc,%esp
+     9f0:	68 3f 15 00 00       	push   $0x153f
+     9f5:	e8 66 f7 ff ff       	call   160 <panic>
+     9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000a00 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     a00:	f3 0f 1e fb          	endbr32 
+     a04:	55                   	push   %ebp
+     a05:	89 e5                	mov    %esp,%ebp
+     a07:	53                   	push   %ebx
+     a08:	83 ec 04             	sub    $0x4,%esp
+     a0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     a0e:	85 db                	test   %ebx,%ebx
+     a10:	0f 84 9a 00 00 00    	je     ab0 <nulterminate+0xb0>
+    return 0;
+
+  switch(cmd->type){
+     a16:	83 3b 05             	cmpl   $0x5,(%ebx)
+     a19:	77 6d                	ja     a88 <nulterminate+0x88>
+     a1b:	8b 03                	mov    (%ebx),%eax
+     a1d:	3e ff 24 85 90 15 00 	notrack jmp *0x1590(,%eax,4)
+     a24:	00 
+     a25:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(pcmd->right);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+     a28:	83 ec 0c             	sub    $0xc,%esp
+     a2b:	ff 73 04             	pushl  0x4(%ebx)
+     a2e:	e8 cd ff ff ff       	call   a00 <nulterminate>
+    nulterminate(lcmd->right);
+     a33:	58                   	pop    %eax
+     a34:	ff 73 08             	pushl  0x8(%ebx)
+     a37:	e8 c4 ff ff ff       	call   a00 <nulterminate>
+    break;
+     a3c:	83 c4 10             	add    $0x10,%esp
+     a3f:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     a41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a44:	c9                   	leave  
+     a45:	c3                   	ret    
+     a46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a4d:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(bcmd->cmd);
+     a50:	83 ec 0c             	sub    $0xc,%esp
+     a53:	ff 73 04             	pushl  0x4(%ebx)
+     a56:	e8 a5 ff ff ff       	call   a00 <nulterminate>
+    break;
+     a5b:	89 d8                	mov    %ebx,%eax
+     a5d:	83 c4 10             	add    $0x10,%esp
+}
+     a60:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a63:	c9                   	leave  
+     a64:	c3                   	ret    
+     a65:	8d 76 00             	lea    0x0(%esi),%esi
+    for(i=0; ecmd->argv[i]; i++)
+     a68:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     a6b:	8d 43 08             	lea    0x8(%ebx),%eax
+     a6e:	85 c9                	test   %ecx,%ecx
+     a70:	74 16                	je     a88 <nulterminate+0x88>
+     a72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     a78:	8b 50 24             	mov    0x24(%eax),%edx
+     a7b:	83 c0 04             	add    $0x4,%eax
+     a7e:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     a81:	8b 50 fc             	mov    -0x4(%eax),%edx
+     a84:	85 d2                	test   %edx,%edx
+     a86:	75 f0                	jne    a78 <nulterminate+0x78>
+  switch(cmd->type){
+     a88:	89 d8                	mov    %ebx,%eax
+}
+     a8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a8d:	c9                   	leave  
+     a8e:	c3                   	ret    
+     a8f:	90                   	nop
+    nulterminate(rcmd->cmd);
+     a90:	83 ec 0c             	sub    $0xc,%esp
+     a93:	ff 73 04             	pushl  0x4(%ebx)
+     a96:	e8 65 ff ff ff       	call   a00 <nulterminate>
+    *rcmd->efile = 0;
+     a9b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     a9e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     aa1:	c6 00 00             	movb   $0x0,(%eax)
+    break;
+     aa4:	89 d8                	mov    %ebx,%eax
+}
+     aa6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     aa9:	c9                   	leave  
+     aaa:	c3                   	ret    
+     aab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     aaf:	90                   	nop
+    return 0;
+     ab0:	31 c0                	xor    %eax,%eax
+     ab2:	eb 8d                	jmp    a41 <nulterminate+0x41>
+     ab4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     abb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     abf:	90                   	nop
+
+00000ac0 <parsecmd>:
+{
+     ac0:	f3 0f 1e fb          	endbr32 
+     ac4:	55                   	push   %ebp
+     ac5:	89 e5                	mov    %esp,%ebp
+     ac7:	56                   	push   %esi
+     ac8:	53                   	push   %ebx
+  es = s + strlen(s);
+     ac9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     acc:	83 ec 0c             	sub    $0xc,%esp
+     acf:	53                   	push   %ebx
+     ad0:	e8 db 00 00 00       	call   bb0 <strlen>
+  cmd = parseline(&s, es);
+     ad5:	59                   	pop    %ecx
+     ad6:	5e                   	pop    %esi
+  es = s + strlen(s);
+     ad7:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     ad9:	8d 45 08             	lea    0x8(%ebp),%eax
+     adc:	53                   	push   %ebx
+     add:	50                   	push   %eax
+     ade:	e8 dd fd ff ff       	call   8c0 <parseline>
+  peek(&s, es, "");
+     ae3:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseline(&s, es);
+     ae6:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     ae8:	8d 45 08             	lea    0x8(%ebp),%eax
+     aeb:	68 d9 14 00 00       	push   $0x14d9
+     af0:	53                   	push   %ebx
+     af1:	50                   	push   %eax
+     af2:	e8 19 fb ff ff       	call   610 <peek>
+  if(s != es){
+     af7:	8b 45 08             	mov    0x8(%ebp),%eax
+     afa:	83 c4 10             	add    $0x10,%esp
+     afd:	39 d8                	cmp    %ebx,%eax
+     aff:	75 12                	jne    b13 <parsecmd+0x53>
+  nulterminate(cmd);
+     b01:	83 ec 0c             	sub    $0xc,%esp
+     b04:	56                   	push   %esi
+     b05:	e8 f6 fe ff ff       	call   a00 <nulterminate>
+}
+     b0a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     b0d:	89 f0                	mov    %esi,%eax
+     b0f:	5b                   	pop    %ebx
+     b10:	5e                   	pop    %esi
+     b11:	5d                   	pop    %ebp
+     b12:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     b13:	52                   	push   %edx
+     b14:	50                   	push   %eax
+     b15:	68 52 15 00 00       	push   $0x1552
+     b1a:	6a 02                	push   $0x2
+     b1c:	e8 ff 03 00 00       	call   f20 <printf>
+    panic("syntax");
+     b21:	c7 04 24 16 15 00 00 	movl   $0x1516,(%esp)
+     b28:	e8 33 f6 ff ff       	call   160 <panic>
+     b2d:	66 90                	xchg   %ax,%ax
+     b2f:	90                   	nop
+
+00000b30 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     b30:	f3 0f 1e fb          	endbr32 
+     b34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     b35:	31 c0                	xor    %eax,%eax
+{
+     b37:	89 e5                	mov    %esp,%ebp
+     b39:	53                   	push   %ebx
+     b3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     b3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+     b40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+     b44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+     b47:	83 c0 01             	add    $0x1,%eax
+     b4a:	84 d2                	test   %dl,%dl
+     b4c:	75 f2                	jne    b40 <strcpy+0x10>
+    ;
+  return os;
+}
+     b4e:	89 c8                	mov    %ecx,%eax
+     b50:	5b                   	pop    %ebx
+     b51:	5d                   	pop    %ebp
+     b52:	c3                   	ret    
+     b53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000b60 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     b60:	f3 0f 1e fb          	endbr32 
+     b64:	55                   	push   %ebp
+     b65:	89 e5                	mov    %esp,%ebp
+     b67:	53                   	push   %ebx
+     b68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     b6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+     b6e:	0f b6 01             	movzbl (%ecx),%eax
+     b71:	0f b6 1a             	movzbl (%edx),%ebx
+     b74:	84 c0                	test   %al,%al
+     b76:	75 19                	jne    b91 <strcmp+0x31>
+     b78:	eb 26                	jmp    ba0 <strcmp+0x40>
+     b7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     b80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+     b84:	83 c1 01             	add    $0x1,%ecx
+     b87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+     b8a:	0f b6 1a             	movzbl (%edx),%ebx
+     b8d:	84 c0                	test   %al,%al
+     b8f:	74 0f                	je     ba0 <strcmp+0x40>
+     b91:	38 d8                	cmp    %bl,%al
+     b93:	74 eb                	je     b80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+     b95:	29 d8                	sub    %ebx,%eax
+}
+     b97:	5b                   	pop    %ebx
+     b98:	5d                   	pop    %ebp
+     b99:	c3                   	ret    
+     b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     ba0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+     ba2:	29 d8                	sub    %ebx,%eax
+}
+     ba4:	5b                   	pop    %ebx
+     ba5:	5d                   	pop    %ebp
+     ba6:	c3                   	ret    
+     ba7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bae:	66 90                	xchg   %ax,%ax
+
+00000bb0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     bb0:	f3 0f 1e fb          	endbr32 
+     bb4:	55                   	push   %ebp
+     bb5:	89 e5                	mov    %esp,%ebp
+     bb7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     bba:	80 3a 00             	cmpb   $0x0,(%edx)
+     bbd:	74 21                	je     be0 <strlen+0x30>
+     bbf:	31 c0                	xor    %eax,%eax
+     bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bc8:	83 c0 01             	add    $0x1,%eax
+     bcb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+     bcf:	89 c1                	mov    %eax,%ecx
+     bd1:	75 f5                	jne    bc8 <strlen+0x18>
+    ;
+  return n;
+}
+     bd3:	89 c8                	mov    %ecx,%eax
+     bd5:	5d                   	pop    %ebp
+     bd6:	c3                   	ret    
+     bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bde:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+     be0:	31 c9                	xor    %ecx,%ecx
+}
+     be2:	5d                   	pop    %ebp
+     be3:	89 c8                	mov    %ecx,%eax
+     be5:	c3                   	ret    
+     be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bed:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000bf0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     bf0:	f3 0f 1e fb          	endbr32 
+     bf4:	55                   	push   %ebp
+     bf5:	89 e5                	mov    %esp,%ebp
+     bf7:	57                   	push   %edi
+     bf8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     bfb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     bfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+     c01:	89 d7                	mov    %edx,%edi
+     c03:	fc                   	cld    
+     c04:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     c06:	89 d0                	mov    %edx,%eax
+     c08:	5f                   	pop    %edi
+     c09:	5d                   	pop    %ebp
+     c0a:	c3                   	ret    
+     c0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c0f:	90                   	nop
+
+00000c10 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     c10:	f3 0f 1e fb          	endbr32 
+     c14:	55                   	push   %ebp
+     c15:	89 e5                	mov    %esp,%ebp
+     c17:	8b 45 08             	mov    0x8(%ebp),%eax
+     c1a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+     c1e:	0f b6 10             	movzbl (%eax),%edx
+     c21:	84 d2                	test   %dl,%dl
+     c23:	75 16                	jne    c3b <strchr+0x2b>
+     c25:	eb 21                	jmp    c48 <strchr+0x38>
+     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2e:	66 90                	xchg   %ax,%ax
+     c30:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+     c34:	83 c0 01             	add    $0x1,%eax
+     c37:	84 d2                	test   %dl,%dl
+     c39:	74 0d                	je     c48 <strchr+0x38>
+    if(*s == c)
+     c3b:	38 d1                	cmp    %dl,%cl
+     c3d:	75 f1                	jne    c30 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+     c3f:	5d                   	pop    %ebp
+     c40:	c3                   	ret    
+     c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+     c48:	31 c0                	xor    %eax,%eax
+}
+     c4a:	5d                   	pop    %ebp
+     c4b:	c3                   	ret    
+     c4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c50 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     c50:	f3 0f 1e fb          	endbr32 
+     c54:	55                   	push   %ebp
+     c55:	89 e5                	mov    %esp,%ebp
+     c57:	57                   	push   %edi
+     c58:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     c59:	31 f6                	xor    %esi,%esi
+{
+     c5b:	53                   	push   %ebx
+     c5c:	89 f3                	mov    %esi,%ebx
+     c5e:	83 ec 1c             	sub    $0x1c,%esp
+     c61:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+     c64:	eb 33                	jmp    c99 <gets+0x49>
+     c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c6d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+     c70:	83 ec 04             	sub    $0x4,%esp
+     c73:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     c76:	6a 01                	push   $0x1
+     c78:	50                   	push   %eax
+     c79:	6a 00                	push   $0x0
+     c7b:	e8 2b 01 00 00       	call   dab <read>
+    if(cc < 1)
+     c80:	83 c4 10             	add    $0x10,%esp
+     c83:	85 c0                	test   %eax,%eax
+     c85:	7e 1c                	jle    ca3 <gets+0x53>
+      break;
+    buf[i++] = c;
+     c87:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     c8b:	83 c7 01             	add    $0x1,%edi
+     c8e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+     c91:	3c 0a                	cmp    $0xa,%al
+     c93:	74 23                	je     cb8 <gets+0x68>
+     c95:	3c 0d                	cmp    $0xd,%al
+     c97:	74 1f                	je     cb8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+     c99:	83 c3 01             	add    $0x1,%ebx
+     c9c:	89 fe                	mov    %edi,%esi
+     c9e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     ca1:	7c cd                	jl     c70 <gets+0x20>
+     ca3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+     ca5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+     ca8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     cab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cae:	5b                   	pop    %ebx
+     caf:	5e                   	pop    %esi
+     cb0:	5f                   	pop    %edi
+     cb1:	5d                   	pop    %ebp
+     cb2:	c3                   	ret    
+     cb3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cb7:	90                   	nop
+     cb8:	8b 75 08             	mov    0x8(%ebp),%esi
+     cbb:	8b 45 08             	mov    0x8(%ebp),%eax
+     cbe:	01 de                	add    %ebx,%esi
+     cc0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+     cc2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     cc5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cc8:	5b                   	pop    %ebx
+     cc9:	5e                   	pop    %esi
+     cca:	5f                   	pop    %edi
+     ccb:	5d                   	pop    %ebp
+     ccc:	c3                   	ret    
+     ccd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000cd0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     cd0:	f3 0f 1e fb          	endbr32 
+     cd4:	55                   	push   %ebp
+     cd5:	89 e5                	mov    %esp,%ebp
+     cd7:	56                   	push   %esi
+     cd8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     cd9:	83 ec 08             	sub    $0x8,%esp
+     cdc:	6a 00                	push   $0x0
+     cde:	ff 75 08             	pushl  0x8(%ebp)
+     ce1:	e8 ed 00 00 00       	call   dd3 <open>
+  if(fd < 0)
+     ce6:	83 c4 10             	add    $0x10,%esp
+     ce9:	85 c0                	test   %eax,%eax
+     ceb:	78 2b                	js     d18 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+     ced:	83 ec 08             	sub    $0x8,%esp
+     cf0:	ff 75 0c             	pushl  0xc(%ebp)
+     cf3:	89 c3                	mov    %eax,%ebx
+     cf5:	50                   	push   %eax
+     cf6:	e8 f0 00 00 00       	call   deb <fstat>
+  close(fd);
+     cfb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     cfe:	89 c6                	mov    %eax,%esi
+  close(fd);
+     d00:	e8 b6 00 00 00       	call   dbb <close>
+  return r;
+     d05:	83 c4 10             	add    $0x10,%esp
+}
+     d08:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d0b:	89 f0                	mov    %esi,%eax
+     d0d:	5b                   	pop    %ebx
+     d0e:	5e                   	pop    %esi
+     d0f:	5d                   	pop    %ebp
+     d10:	c3                   	ret    
+     d11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+     d18:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     d1d:	eb e9                	jmp    d08 <stat+0x38>
+     d1f:	90                   	nop
+
+00000d20 <atoi>:
+
+int
+atoi(const char *s)
+{
+     d20:	f3 0f 1e fb          	endbr32 
+     d24:	55                   	push   %ebp
+     d25:	89 e5                	mov    %esp,%ebp
+     d27:	53                   	push   %ebx
+     d28:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     d2b:	0f be 02             	movsbl (%edx),%eax
+     d2e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+     d31:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+     d34:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+     d39:	77 1a                	ja     d55 <atoi+0x35>
+     d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     d3f:	90                   	nop
+    n = n*10 + *s++ - '0';
+     d40:	83 c2 01             	add    $0x1,%edx
+     d43:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+     d46:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+     d4a:	0f be 02             	movsbl (%edx),%eax
+     d4d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+     d50:	80 fb 09             	cmp    $0x9,%bl
+     d53:	76 eb                	jbe    d40 <atoi+0x20>
+  return n;
+}
+     d55:	89 c8                	mov    %ecx,%eax
+     d57:	5b                   	pop    %ebx
+     d58:	5d                   	pop    %ebp
+     d59:	c3                   	ret    
+     d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000d60 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     d60:	f3 0f 1e fb          	endbr32 
+     d64:	55                   	push   %ebp
+     d65:	89 e5                	mov    %esp,%ebp
+     d67:	57                   	push   %edi
+     d68:	8b 45 10             	mov    0x10(%ebp),%eax
+     d6b:	8b 55 08             	mov    0x8(%ebp),%edx
+     d6e:	56                   	push   %esi
+     d6f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     d72:	85 c0                	test   %eax,%eax
+     d74:	7e 0f                	jle    d85 <memmove+0x25>
+     d76:	01 d0                	add    %edx,%eax
+  dst = vdst;
+     d78:	89 d7                	mov    %edx,%edi
+     d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+     d80:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+     d81:	39 f8                	cmp    %edi,%eax
+     d83:	75 fb                	jne    d80 <memmove+0x20>
+  return vdst;
+}
+     d85:	5e                   	pop    %esi
+     d86:	89 d0                	mov    %edx,%eax
+     d88:	5f                   	pop    %edi
+     d89:	5d                   	pop    %ebp
+     d8a:	c3                   	ret    
+
+00000d8b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     d8b:	b8 01 00 00 00       	mov    $0x1,%eax
+     d90:	cd 40                	int    $0x40
+     d92:	c3                   	ret    
+
+00000d93 <exit>:
+SYSCALL(exit)
+     d93:	b8 02 00 00 00       	mov    $0x2,%eax
+     d98:	cd 40                	int    $0x40
+     d9a:	c3                   	ret    
+
+00000d9b <wait>:
+SYSCALL(wait)
+     d9b:	b8 03 00 00 00       	mov    $0x3,%eax
+     da0:	cd 40                	int    $0x40
+     da2:	c3                   	ret    
+
+00000da3 <pipe>:
+SYSCALL(pipe)
+     da3:	b8 04 00 00 00       	mov    $0x4,%eax
+     da8:	cd 40                	int    $0x40
+     daa:	c3                   	ret    
+
+00000dab <read>:
+SYSCALL(read)
+     dab:	b8 05 00 00 00       	mov    $0x5,%eax
+     db0:	cd 40                	int    $0x40
+     db2:	c3                   	ret    
+
+00000db3 <write>:
+SYSCALL(write)
+     db3:	b8 10 00 00 00       	mov    $0x10,%eax
+     db8:	cd 40                	int    $0x40
+     dba:	c3                   	ret    
+
+00000dbb <close>:
+SYSCALL(close)
+     dbb:	b8 15 00 00 00       	mov    $0x15,%eax
+     dc0:	cd 40                	int    $0x40
+     dc2:	c3                   	ret    
+
+00000dc3 <kill>:
+SYSCALL(kill)
+     dc3:	b8 06 00 00 00       	mov    $0x6,%eax
+     dc8:	cd 40                	int    $0x40
+     dca:	c3                   	ret    
+
+00000dcb <exec>:
+SYSCALL(exec)
+     dcb:	b8 07 00 00 00       	mov    $0x7,%eax
+     dd0:	cd 40                	int    $0x40
+     dd2:	c3                   	ret    
+
+00000dd3 <open>:
+SYSCALL(open)
+     dd3:	b8 0f 00 00 00       	mov    $0xf,%eax
+     dd8:	cd 40                	int    $0x40
+     dda:	c3                   	ret    
+
+00000ddb <mknod>:
+SYSCALL(mknod)
+     ddb:	b8 11 00 00 00       	mov    $0x11,%eax
+     de0:	cd 40                	int    $0x40
+     de2:	c3                   	ret    
+
+00000de3 <unlink>:
+SYSCALL(unlink)
+     de3:	b8 12 00 00 00       	mov    $0x12,%eax
+     de8:	cd 40                	int    $0x40
+     dea:	c3                   	ret    
+
+00000deb <fstat>:
+SYSCALL(fstat)
+     deb:	b8 08 00 00 00       	mov    $0x8,%eax
+     df0:	cd 40                	int    $0x40
+     df2:	c3                   	ret    
+
+00000df3 <link>:
+SYSCALL(link)
+     df3:	b8 13 00 00 00       	mov    $0x13,%eax
+     df8:	cd 40                	int    $0x40
+     dfa:	c3                   	ret    
+
+00000dfb <mkdir>:
+SYSCALL(mkdir)
+     dfb:	b8 14 00 00 00       	mov    $0x14,%eax
+     e00:	cd 40                	int    $0x40
+     e02:	c3                   	ret    
+
+00000e03 <chdir>:
+SYSCALL(chdir)
+     e03:	b8 09 00 00 00       	mov    $0x9,%eax
+     e08:	cd 40                	int    $0x40
+     e0a:	c3                   	ret    
+
+00000e0b <dup>:
+SYSCALL(dup)
+     e0b:	b8 0a 00 00 00       	mov    $0xa,%eax
+     e10:	cd 40                	int    $0x40
+     e12:	c3                   	ret    
+
+00000e13 <getpid>:
+SYSCALL(getpid)
+     e13:	b8 0b 00 00 00       	mov    $0xb,%eax
+     e18:	cd 40                	int    $0x40
+     e1a:	c3                   	ret    
+
+00000e1b <sbrk>:
+SYSCALL(sbrk)
+     e1b:	b8 0c 00 00 00       	mov    $0xc,%eax
+     e20:	cd 40                	int    $0x40
+     e22:	c3                   	ret    
+
+00000e23 <sleep>:
+SYSCALL(sleep)
+     e23:	b8 0d 00 00 00       	mov    $0xd,%eax
+     e28:	cd 40                	int    $0x40
+     e2a:	c3                   	ret    
+
+00000e2b <uptime>:
+SYSCALL(uptime)
+     e2b:	b8 0e 00 00 00       	mov    $0xe,%eax
+     e30:	cd 40                	int    $0x40
+     e32:	c3                   	ret    
+
+00000e33 <getNumProc>:
+SYSCALL(getNumProc)
+     e33:	b8 16 00 00 00       	mov    $0x16,%eax
+     e38:	cd 40                	int    $0x40
+     e3a:	c3                   	ret    
+
+00000e3b <getMaxPID>:
+SYSCALL(getMaxPID)
+     e3b:	b8 17 00 00 00       	mov    $0x17,%eax
+     e40:	cd 40                	int    $0x40
+     e42:	c3                   	ret    
+
+00000e43 <getProcInfo>:
+SYSCALL(getProcInfo)
+     e43:	b8 18 00 00 00       	mov    $0x18,%eax
+     e48:	cd 40                	int    $0x40
+     e4a:	c3                   	ret    
+
+00000e4b <set_burst_time>:
+SYSCALL(set_burst_time)
+     e4b:	b8 19 00 00 00       	mov    $0x19,%eax
+     e50:	cd 40                	int    $0x40
+     e52:	c3                   	ret    
+
+00000e53 <get_burst_time>:
+SYSCALL(get_burst_time)
+     e53:	b8 1a 00 00 00       	mov    $0x1a,%eax
+     e58:	cd 40                	int    $0x40
+     e5a:	c3                   	ret    
+
+00000e5b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+     e5b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+     e60:	cd 40                	int    $0x40
+     e62:	c3                   	ret    
+
+00000e63 <getCurrentPID>:
+     e63:	b8 1d 00 00 00       	mov    $0x1d,%eax
+     e68:	cd 40                	int    $0x40
+     e6a:	c3                   	ret    
+     e6b:	66 90                	xchg   %ax,%ax
+     e6d:	66 90                	xchg   %ax,%ax
+     e6f:	90                   	nop
+
+00000e70 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     e70:	55                   	push   %ebp
+     e71:	89 e5                	mov    %esp,%ebp
+     e73:	57                   	push   %edi
+     e74:	56                   	push   %esi
+     e75:	53                   	push   %ebx
+     e76:	83 ec 3c             	sub    $0x3c,%esp
+     e79:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+     e7c:	89 d1                	mov    %edx,%ecx
+{
+     e7e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+     e81:	85 d2                	test   %edx,%edx
+     e83:	0f 89 7f 00 00 00    	jns    f08 <printint+0x98>
+     e89:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     e8d:	74 79                	je     f08 <printint+0x98>
+    neg = 1;
+     e8f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+     e96:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     e98:	31 db                	xor    %ebx,%ebx
+     e9a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     e9d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+     ea0:	89 c8                	mov    %ecx,%eax
+     ea2:	31 d2                	xor    %edx,%edx
+     ea4:	89 cf                	mov    %ecx,%edi
+     ea6:	f7 75 c4             	divl   -0x3c(%ebp)
+     ea9:	0f b6 92 b0 15 00 00 	movzbl 0x15b0(%edx),%edx
+     eb0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     eb3:	89 d8                	mov    %ebx,%eax
+     eb5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+     eb8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+     ebb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+     ebe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     ec1:	76 dd                	jbe    ea0 <printint+0x30>
+  if(neg)
+     ec3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     ec6:	85 c9                	test   %ecx,%ecx
+     ec8:	74 0c                	je     ed6 <printint+0x66>
+    buf[i++] = '-';
+     eca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+     ecf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+     ed1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+     ed6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     ed9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     edd:	eb 07                	jmp    ee6 <printint+0x76>
+     edf:	90                   	nop
+     ee0:	0f b6 13             	movzbl (%ebx),%edx
+     ee3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+     ee6:	83 ec 04             	sub    $0x4,%esp
+     ee9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     eec:	6a 01                	push   $0x1
+     eee:	56                   	push   %esi
+     eef:	57                   	push   %edi
+     ef0:	e8 be fe ff ff       	call   db3 <write>
+  while(--i >= 0)
+     ef5:	83 c4 10             	add    $0x10,%esp
+     ef8:	39 de                	cmp    %ebx,%esi
+     efa:	75 e4                	jne    ee0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+     efc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     eff:	5b                   	pop    %ebx
+     f00:	5e                   	pop    %esi
+     f01:	5f                   	pop    %edi
+     f02:	5d                   	pop    %ebp
+     f03:	c3                   	ret    
+     f04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     f08:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     f0f:	eb 87                	jmp    e98 <printint+0x28>
+     f11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f1f:	90                   	nop
+
+00000f20 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     f20:	f3 0f 1e fb          	endbr32 
+     f24:	55                   	push   %ebp
+     f25:	89 e5                	mov    %esp,%ebp
+     f27:	57                   	push   %edi
+     f28:	56                   	push   %esi
+     f29:	53                   	push   %ebx
+     f2a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     f2d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     f30:	0f b6 1e             	movzbl (%esi),%ebx
+     f33:	84 db                	test   %bl,%bl
+     f35:	0f 84 b4 00 00 00    	je     fef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+     f3b:	8d 45 10             	lea    0x10(%ebp),%eax
+     f3e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+     f41:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+     f44:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+     f46:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     f49:	eb 33                	jmp    f7e <printf+0x5e>
+     f4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     f4f:	90                   	nop
+     f50:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+     f53:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+     f58:	83 f8 25             	cmp    $0x25,%eax
+     f5b:	74 17                	je     f74 <printf+0x54>
+  write(fd, &c, 1);
+     f5d:	83 ec 04             	sub    $0x4,%esp
+     f60:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     f63:	6a 01                	push   $0x1
+     f65:	57                   	push   %edi
+     f66:	ff 75 08             	pushl  0x8(%ebp)
+     f69:	e8 45 fe ff ff       	call   db3 <write>
+     f6e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+     f71:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+     f74:	0f b6 1e             	movzbl (%esi),%ebx
+     f77:	83 c6 01             	add    $0x1,%esi
+     f7a:	84 db                	test   %bl,%bl
+     f7c:	74 71                	je     fef <printf+0xcf>
+    c = fmt[i] & 0xff;
+     f7e:	0f be cb             	movsbl %bl,%ecx
+     f81:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+     f84:	85 d2                	test   %edx,%edx
+     f86:	74 c8                	je     f50 <printf+0x30>
+      }
+    } else if(state == '%'){
+     f88:	83 fa 25             	cmp    $0x25,%edx
+     f8b:	75 e7                	jne    f74 <printf+0x54>
+      if(c == 'd'){
+     f8d:	83 f8 64             	cmp    $0x64,%eax
+     f90:	0f 84 9a 00 00 00    	je     1030 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+     f96:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     f9c:	83 f9 70             	cmp    $0x70,%ecx
+     f9f:	74 5f                	je     1000 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+     fa1:	83 f8 73             	cmp    $0x73,%eax
+     fa4:	0f 84 d6 00 00 00    	je     1080 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+     faa:	83 f8 63             	cmp    $0x63,%eax
+     fad:	0f 84 8d 00 00 00    	je     1040 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+     fb3:	83 f8 25             	cmp    $0x25,%eax
+     fb6:	0f 84 b4 00 00 00    	je     1070 <printf+0x150>
+  write(fd, &c, 1);
+     fbc:	83 ec 04             	sub    $0x4,%esp
+     fbf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     fc3:	6a 01                	push   $0x1
+     fc5:	57                   	push   %edi
+     fc6:	ff 75 08             	pushl  0x8(%ebp)
+     fc9:	e8 e5 fd ff ff       	call   db3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+     fce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+     fd1:	83 c4 0c             	add    $0xc,%esp
+     fd4:	6a 01                	push   $0x1
+     fd6:	83 c6 01             	add    $0x1,%esi
+     fd9:	57                   	push   %edi
+     fda:	ff 75 08             	pushl  0x8(%ebp)
+     fdd:	e8 d1 fd ff ff       	call   db3 <write>
+  for(i = 0; fmt[i]; i++){
+     fe2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+     fe6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+     fe9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+     feb:	84 db                	test   %bl,%bl
+     fed:	75 8f                	jne    f7e <printf+0x5e>
+    }
+  }
+}
+     fef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ff2:	5b                   	pop    %ebx
+     ff3:	5e                   	pop    %esi
+     ff4:	5f                   	pop    %edi
+     ff5:	5d                   	pop    %ebp
+     ff6:	c3                   	ret    
+     ff7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ffe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+    1000:	83 ec 0c             	sub    $0xc,%esp
+    1003:	b9 10 00 00 00       	mov    $0x10,%ecx
+    1008:	6a 00                	push   $0x0
+    100a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    100d:	8b 45 08             	mov    0x8(%ebp),%eax
+    1010:	8b 13                	mov    (%ebx),%edx
+    1012:	e8 59 fe ff ff       	call   e70 <printint>
+        ap++;
+    1017:	89 d8                	mov    %ebx,%eax
+    1019:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    101c:	31 d2                	xor    %edx,%edx
+        ap++;
+    101e:	83 c0 04             	add    $0x4,%eax
+    1021:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1024:	e9 4b ff ff ff       	jmp    f74 <printf+0x54>
+    1029:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    1030:	83 ec 0c             	sub    $0xc,%esp
+    1033:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    1038:	6a 01                	push   $0x1
+    103a:	eb ce                	jmp    100a <printf+0xea>
+    103c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    1040:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    1043:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    1046:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    1048:	6a 01                	push   $0x1
+        ap++;
+    104a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    104d:	57                   	push   %edi
+    104e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    1051:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    1054:	e8 5a fd ff ff       	call   db3 <write>
+        ap++;
+    1059:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    105c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    105f:	31 d2                	xor    %edx,%edx
+    1061:	e9 0e ff ff ff       	jmp    f74 <printf+0x54>
+    1066:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    106d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    1070:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    1073:	83 ec 04             	sub    $0x4,%esp
+    1076:	e9 59 ff ff ff       	jmp    fd4 <printf+0xb4>
+    107b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    107f:	90                   	nop
+        s = (char*)*ap;
+    1080:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1083:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    1085:	83 c0 04             	add    $0x4,%eax
+    1088:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    108b:	85 db                	test   %ebx,%ebx
+    108d:	74 17                	je     10a6 <printf+0x186>
+        while(*s != 0){
+    108f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    1092:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    1094:	84 c0                	test   %al,%al
+    1096:	0f 84 d8 fe ff ff    	je     f74 <printf+0x54>
+    109c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    109f:	89 de                	mov    %ebx,%esi
+    10a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    10a4:	eb 1a                	jmp    10c0 <printf+0x1a0>
+          s = "(null)";
+    10a6:	bb a8 15 00 00       	mov    $0x15a8,%ebx
+        while(*s != 0){
+    10ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    10ae:	b8 28 00 00 00       	mov    $0x28,%eax
+    10b3:	89 de                	mov    %ebx,%esi
+    10b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    10b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10bf:	90                   	nop
+  write(fd, &c, 1);
+    10c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    10c3:	83 c6 01             	add    $0x1,%esi
+    10c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    10c9:	6a 01                	push   $0x1
+    10cb:	57                   	push   %edi
+    10cc:	53                   	push   %ebx
+    10cd:	e8 e1 fc ff ff       	call   db3 <write>
+        while(*s != 0){
+    10d2:	0f b6 06             	movzbl (%esi),%eax
+    10d5:	83 c4 10             	add    $0x10,%esp
+    10d8:	84 c0                	test   %al,%al
+    10da:	75 e4                	jne    10c0 <printf+0x1a0>
+    10dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    10df:	31 d2                	xor    %edx,%edx
+    10e1:	e9 8e fe ff ff       	jmp    f74 <printf+0x54>
+    10e6:	66 90                	xchg   %ax,%ax
+    10e8:	66 90                	xchg   %ax,%ax
+    10ea:	66 90                	xchg   %ax,%ax
+    10ec:	66 90                	xchg   %ax,%ax
+    10ee:	66 90                	xchg   %ax,%ax
+
+000010f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    10f0:	f3 0f 1e fb          	endbr32 
+    10f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    10f5:	a1 a4 1c 00 00       	mov    0x1ca4,%eax
+{
+    10fa:	89 e5                	mov    %esp,%ebp
+    10fc:	57                   	push   %edi
+    10fd:	56                   	push   %esi
+    10fe:	53                   	push   %ebx
+    10ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1102:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    1104:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1107:	39 c8                	cmp    %ecx,%eax
+    1109:	73 15                	jae    1120 <free+0x30>
+    110b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    110f:	90                   	nop
+    1110:	39 d1                	cmp    %edx,%ecx
+    1112:	72 14                	jb     1128 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1114:	39 d0                	cmp    %edx,%eax
+    1116:	73 10                	jae    1128 <free+0x38>
+{
+    1118:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    111a:	8b 10                	mov    (%eax),%edx
+    111c:	39 c8                	cmp    %ecx,%eax
+    111e:	72 f0                	jb     1110 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1120:	39 d0                	cmp    %edx,%eax
+    1122:	72 f4                	jb     1118 <free+0x28>
+    1124:	39 d1                	cmp    %edx,%ecx
+    1126:	73 f0                	jae    1118 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    1128:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    112b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    112e:	39 fa                	cmp    %edi,%edx
+    1130:	74 1e                	je     1150 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    1132:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    1135:	8b 50 04             	mov    0x4(%eax),%edx
+    1138:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    113b:	39 f1                	cmp    %esi,%ecx
+    113d:	74 28                	je     1167 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    113f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    1141:	5b                   	pop    %ebx
+  freep = p;
+    1142:	a3 a4 1c 00 00       	mov    %eax,0x1ca4
+}
+    1147:	5e                   	pop    %esi
+    1148:	5f                   	pop    %edi
+    1149:	5d                   	pop    %ebp
+    114a:	c3                   	ret    
+    114b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    114f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    1150:	03 72 04             	add    0x4(%edx),%esi
+    1153:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1156:	8b 10                	mov    (%eax),%edx
+    1158:	8b 12                	mov    (%edx),%edx
+    115a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    115d:	8b 50 04             	mov    0x4(%eax),%edx
+    1160:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1163:	39 f1                	cmp    %esi,%ecx
+    1165:	75 d8                	jne    113f <free+0x4f>
+    p->s.size += bp->s.size;
+    1167:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    116a:	a3 a4 1c 00 00       	mov    %eax,0x1ca4
+    p->s.size += bp->s.size;
+    116f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    1172:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    1175:	89 10                	mov    %edx,(%eax)
+}
+    1177:	5b                   	pop    %ebx
+    1178:	5e                   	pop    %esi
+    1179:	5f                   	pop    %edi
+    117a:	5d                   	pop    %ebp
+    117b:	c3                   	ret    
+    117c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001180 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    1180:	f3 0f 1e fb          	endbr32 
+    1184:	55                   	push   %ebp
+    1185:	89 e5                	mov    %esp,%ebp
+    1187:	57                   	push   %edi
+    1188:	56                   	push   %esi
+    1189:	53                   	push   %ebx
+    118a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    118d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    1190:	8b 3d a4 1c 00 00    	mov    0x1ca4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    1196:	8d 70 07             	lea    0x7(%eax),%esi
+    1199:	c1 ee 03             	shr    $0x3,%esi
+    119c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    119f:	85 ff                	test   %edi,%edi
+    11a1:	0f 84 a9 00 00 00    	je     1250 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    11a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+    11a9:	8b 48 04             	mov    0x4(%eax),%ecx
+    11ac:	39 f1                	cmp    %esi,%ecx
+    11ae:	73 6d                	jae    121d <malloc+0x9d>
+    11b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    11b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    11bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    11be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    11c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    11c8:	eb 17                	jmp    11e1 <malloc+0x61>
+    11ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    11d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+    11d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    11d5:	39 f1                	cmp    %esi,%ecx
+    11d7:	73 4f                	jae    1228 <malloc+0xa8>
+    11d9:	8b 3d a4 1c 00 00    	mov    0x1ca4,%edi
+    11df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    11e1:	39 c7                	cmp    %eax,%edi
+    11e3:	75 eb                	jne    11d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    11e5:	83 ec 0c             	sub    $0xc,%esp
+    11e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    11eb:	e8 2b fc ff ff       	call   e1b <sbrk>
+  if(p == (char*)-1)
+    11f0:	83 c4 10             	add    $0x10,%esp
+    11f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    11f6:	74 1b                	je     1213 <malloc+0x93>
+  hp->s.size = nu;
+    11f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    11fb:	83 ec 0c             	sub    $0xc,%esp
+    11fe:	83 c0 08             	add    $0x8,%eax
+    1201:	50                   	push   %eax
+    1202:	e8 e9 fe ff ff       	call   10f0 <free>
+  return freep;
+    1207:	a1 a4 1c 00 00       	mov    0x1ca4,%eax
+      if((p = morecore(nunits)) == 0)
+    120c:	83 c4 10             	add    $0x10,%esp
+    120f:	85 c0                	test   %eax,%eax
+    1211:	75 bd                	jne    11d0 <malloc+0x50>
+        return 0;
+  }
+}
+    1213:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    1216:	31 c0                	xor    %eax,%eax
+}
+    1218:	5b                   	pop    %ebx
+    1219:	5e                   	pop    %esi
+    121a:	5f                   	pop    %edi
+    121b:	5d                   	pop    %ebp
+    121c:	c3                   	ret    
+    if(p->s.size >= nunits){
+    121d:	89 c2                	mov    %eax,%edx
+    121f:	89 f8                	mov    %edi,%eax
+    1221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+    1228:	39 ce                	cmp    %ecx,%esi
+    122a:	74 54                	je     1280 <malloc+0x100>
+        p->s.size -= nunits;
+    122c:	29 f1                	sub    %esi,%ecx
+    122e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+    1231:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+    1234:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+    1237:	a3 a4 1c 00 00       	mov    %eax,0x1ca4
+}
+    123c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    123f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+    1242:	5b                   	pop    %ebx
+    1243:	5e                   	pop    %esi
+    1244:	5f                   	pop    %edi
+    1245:	5d                   	pop    %ebp
+    1246:	c3                   	ret    
+    1247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    124e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+    1250:	c7 05 a4 1c 00 00 a8 	movl   $0x1ca8,0x1ca4
+    1257:	1c 00 00 
+    base.s.size = 0;
+    125a:	bf a8 1c 00 00       	mov    $0x1ca8,%edi
+    base.s.ptr = freep = prevp = &base;
+    125f:	c7 05 a8 1c 00 00 a8 	movl   $0x1ca8,0x1ca8
+    1266:	1c 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1269:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+    126b:	c7 05 ac 1c 00 00 00 	movl   $0x0,0x1cac
+    1272:	00 00 00 
+    if(p->s.size >= nunits){
+    1275:	e9 36 ff ff ff       	jmp    11b0 <malloc+0x30>
+    127a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    1280:	8b 0a                	mov    (%edx),%ecx
+    1282:	89 08                	mov    %ecx,(%eax)
+    1284:	eb b1                	jmp    1237 <malloc+0xb7>
+    1286:	66 90                	xchg   %ax,%ax
+    1288:	66 90                	xchg   %ax,%ax
+    128a:	66 90                	xchg   %ax,%ax
+    128c:	66 90                	xchg   %ax,%ax
+    128e:	66 90                	xchg   %ax,%ax
+
+00001290 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    1290:	f3 0f 1e fb          	endbr32 
+    1294:	55                   	push   %ebp
+    1295:	b8 c4 1c 00 00       	mov    $0x1cc4,%eax
+    129a:	89 e5                	mov    %esp,%ebp
+    129c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    129f:	89 15 c0 1c 00 00    	mov    %edx,0x1cc0
+    for (mti=1; mti<N; mti++)
+    12a5:	eb 0c                	jmp    12b3 <sgenrand+0x23>
+    12a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    12ae:	66 90                	xchg   %ax,%ax
+    12b0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    12b3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    12b9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    12bb:	3d 7c 26 00 00       	cmp    $0x267c,%eax
+    12c0:	75 ee                	jne    12b0 <sgenrand+0x20>
+    12c2:	c7 05 20 1c 00 00 70 	movl   $0x270,0x1c20
+    12c9:	02 00 00 
+}
+    12cc:	5d                   	pop    %ebp
+    12cd:	c3                   	ret    
+    12ce:	66 90                	xchg   %ax,%ax
+
+000012d0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+    12d0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+    12d4:	a1 20 1c 00 00       	mov    0x1c20,%eax
+    12d9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    12de:	7f 3c                	jg     131c <genrand+0x4c>
+    12e0:	8d 50 01             	lea    0x1(%eax),%edx
+    12e3:	8b 04 85 c0 1c 00 00 	mov    0x1cc0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    12ea:	89 15 20 1c 00 00    	mov    %edx,0x1c20
+    y ^= TEMPERING_SHIFT_U(y);
+    12f0:	89 c2                	mov    %eax,%edx
+    12f2:	c1 ea 0b             	shr    $0xb,%edx
+    12f5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    12f7:	89 d0                	mov    %edx,%eax
+    12f9:	c1 e0 07             	shl    $0x7,%eax
+    12fc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+    1301:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    1303:	89 d0                	mov    %edx,%eax
+    1305:	c1 e0 0f             	shl    $0xf,%eax
+    1308:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+    130d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+    130f:	89 c2                	mov    %eax,%edx
+    1311:	c1 ea 12             	shr    $0x12,%edx
+    1314:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+    1316:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+    131b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+    131c:	3d 71 02 00 00       	cmp    $0x271,%eax
+    1321:	0f 84 d2 00 00 00    	je     13f9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+    1327:	31 c0                	xor    %eax,%eax
+    1329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    1330:	8b 0c 85 c0 1c 00 00 	mov    0x1cc0(,%eax,4),%ecx
+    1337:	83 c0 01             	add    $0x1,%eax
+    133a:	8b 14 85 c0 1c 00 00 	mov    0x1cc0(,%eax,4),%edx
+    1341:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    1347:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    134d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+    134f:	89 d1                	mov    %edx,%ecx
+    1351:	83 e2 01             	and    $0x1,%edx
+    1354:	d1 e9                	shr    %ecx
+    1356:	33 0c 85 f0 22 00 00 	xor    0x22f0(,%eax,4),%ecx
+    135d:	33 0c 95 c4 15 00 00 	xor    0x15c4(,%edx,4),%ecx
+    1364:	89 0c 85 bc 1c 00 00 	mov    %ecx,0x1cbc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+    136b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+    1370:	75 be                	jne    1330 <genrand+0x60>
+    1372:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    1378:	8b 0c 85 c0 1c 00 00 	mov    0x1cc0(,%eax,4),%ecx
+    137f:	83 c0 01             	add    $0x1,%eax
+    1382:	8b 14 85 c0 1c 00 00 	mov    0x1cc0(,%eax,4),%edx
+    1389:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    138f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    1395:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+    1397:	89 d1                	mov    %edx,%ecx
+    1399:	83 e2 01             	and    $0x1,%edx
+    139c:	d1 e9                	shr    %ecx
+    139e:	33 0c 85 30 19 00 00 	xor    0x1930(,%eax,4),%ecx
+    13a5:	33 0c 95 c4 15 00 00 	xor    0x15c4(,%edx,4),%ecx
+    13ac:	89 0c 85 bc 1c 00 00 	mov    %ecx,0x1cbc(,%eax,4)
+        for (;kk<N-1;kk++) {
+    13b3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    13b8:	75 be                	jne    1378 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+    13ba:	a1 c0 1c 00 00       	mov    0x1cc0,%eax
+    13bf:	8b 0d 7c 26 00 00    	mov    0x267c,%ecx
+    13c5:	89 c2                	mov    %eax,%edx
+    13c7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    13cd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    13d3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+    13d5:	89 ca                	mov    %ecx,%edx
+    13d7:	83 e1 01             	and    $0x1,%ecx
+    13da:	d1 ea                	shr    %edx
+    13dc:	33 15 f0 22 00 00    	xor    0x22f0,%edx
+    13e2:	33 14 8d c4 15 00 00 	xor    0x15c4(,%ecx,4),%edx
+    13e9:	89 15 7c 26 00 00    	mov    %edx,0x267c
+    13ef:	ba 01 00 00 00       	mov    $0x1,%edx
+    13f4:	e9 f1 fe ff ff       	jmp    12ea <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+    13f9:	b8 c4 1c 00 00       	mov    $0x1cc4,%eax
+    13fe:	b9 7c 26 00 00       	mov    $0x267c,%ecx
+    1403:	ba 05 11 00 00       	mov    $0x1105,%edx
+    1408:	c7 05 c0 1c 00 00 05 	movl   $0x1105,0x1cc0
+    140f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+    1412:	eb 07                	jmp    141b <genrand+0x14b>
+    1414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1418:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    141b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    1421:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    1423:	39 c1                	cmp    %eax,%ecx
+    1425:	75 f1                	jne    1418 <genrand+0x148>
+    1427:	e9 fb fe ff ff       	jmp    1327 <genrand+0x57>
+    142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001430 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+    1430:	f3 0f 1e fb          	endbr32 
+    1434:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    1435:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+    1437:	89 e5                	mov    %esp,%ebp
+    1439:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+    143a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+    143d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+    143e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+    1443:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    1446:	89 d8                	mov    %ebx,%eax
+    1448:	f7 f1                	div    %ecx
+    144a:	89 c6                	mov    %eax,%esi
+    144c:	29 d3                	sub    %edx,%ebx
+    144e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+    1450:	e8 7b fe ff ff       	call   12d0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+    1455:	39 d8                	cmp    %ebx,%eax
+    1457:	73 f7                	jae    1450 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+    1459:	31 d2                	xor    %edx,%edx
+}
+    145b:	5b                   	pop    %ebx
+  return x/bin_size;
+    145c:	f7 f6                	div    %esi
+}
+    145e:	5e                   	pop    %esi
+    145f:	5d                   	pop    %ebp
+    1460:	c3                   	ret    
+    1461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    146f:	90                   	nop
+
+00001470 <randomrange>:
+
+int randomrange(int low, int high){
+    1470:	f3 0f 1e fb          	endbr32 
+    1474:	55                   	push   %ebp
+    1475:	89 e5                	mov    %esp,%ebp
+    1477:	57                   	push   %edi
+    1478:	56                   	push   %esi
+    1479:	53                   	push   %ebx
+    147a:	83 ec 0c             	sub    $0xc,%esp
+    147d:	8b 75 08             	mov    0x8(%ebp),%esi
+    1480:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+    1483:	39 f0                	cmp    %esi,%eax
+    1485:	7d 06                	jge    148d <randomrange+0x1d>
+    1487:	89 f2                	mov    %esi,%edx
+    1489:	89 c6                	mov    %eax,%esi
+    148b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+    148d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+    148f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    1494:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+    1496:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    1499:	89 d8                	mov    %ebx,%eax
+    149b:	f7 f1                	div    %ecx
+    149d:	89 c7                	mov    %eax,%edi
+    149f:	29 d3                	sub    %edx,%ebx
+    14a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+    14a8:	e8 23 fe ff ff       	call   12d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+    14ad:	39 d8                	cmp    %ebx,%eax
+    14af:	73 f7                	jae    14a8 <randomrange+0x38>
+  return x/bin_size;
+    14b1:	31 d2                	xor    %edx,%edx
+  return val;
+    14b3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+    14b6:	f7 f7                	div    %edi
+    14b8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+    14b9:	01 f0                	add    %esi,%eax
+    14bb:	5e                   	pop    %esi
+    14bc:	5f                   	pop    %edi
+    14bd:	5d                   	pop    %ebp
+    14be:	c3                   	ret    
diff -ruN xv6-public/sh.d xv6-public-partB_sjf/sh.d
--- xv6-public/sh.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/sh.d	2022-10-07 20:27:44.395119000 +0530
@@ -0,0 +1,2 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h processInfo.h \
+ fcntl.h
Binary files xv6-public/sh.o and xv6-public-partB_sjf/sh.o differ
diff -ruN xv6-public/sh.sym xv6-public-partB_sjf/sh.sym
--- xv6-public/sh.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/sh.sym	2022-10-07 20:27:44.427119000 +0530
@@ -0,0 +1,94 @@
+00000000 .text
+000014c0 .rodata
+000015cc .eh_frame
+00001c10 .data
+00001c40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sh.c
+00001c40 buf.1143
+00000000 ulib.c
+00000000 printf.c
+00000e70 printint
+000015b0 digits.1105
+00000000 umalloc.c
+00001ca4 freep
+00001ca8 base
+00000000 random.c
+00001cc0 mt
+00001c20 mti
+000015c4 mag01.989
+00000b30 strcpy
+00001290 sgenrand
+00000f20 printf
+00000d60 memmove
+00000ddb mknod
+00000370 execcmd
+00000c50 gets
+00000e13 getpid
+00000850 parsepipe
+00000ac0 parsecmd
+00000470 backcmd
+00000610 peek
+00000690 parseredirs
+000004b0 gettoken
+00001180 malloc
+00000e23 sleep
+00000e53 get_burst_time
+00001c18 whitespace
+00001430 random_at_most
+00000340 fork1
+00000e5b getCurrentInfo
+00000a00 nulterminate
+00000da3 pipe
+00000110 getcmd
+00000db3 write
+00000deb fstat
+00000dc3 kill
+00000e03 chdir
+000008c0 parseline
+00000180 runcmd
+00000970 parseblock
+00000dcb exec
+00000d9b wait
+00001c10 symbols
+00000dab read
+00000740 parseexec
+00000de3 unlink
+00000160 panic
+00000d8b fork
+00000e1b sbrk
+00000e2b uptime
+00001c24 __bss_start
+00000bf0 memset
+00000000 main
+00000e4b set_burst_time
+00000b60 strcmp
+00000e0b dup
+000003f0 pipecmd
+000003a0 redircmd
+000012d0 genrand
+00000e33 getNumProc
+00000e43 getProcInfo
+00000cd0 stat
+00001c24 _edata
+00002680 _end
+00000df3 link
+00000d93 exit
+00000e3b getMaxPID
+00000d20 atoi
+00000bb0 strlen
+00000dd3 open
+00000c10 strchr
+00000e63 getCurrentPID
+00001470 randomrange
+00000dfb mkdir
+00000dbb close
+00000430 listcmd
+000010f0 free
diff -ruN xv6-public/sleeplock.d xv6-public-partB_sjf/sleeplock.d
--- xv6-public/sleeplock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/sleeplock.d	2022-10-07 20:27:36.343048000 +0530
@@ -0,0 +1,2 @@
+sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
+ param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
Binary files xv6-public/sleeplock.o and xv6-public-partB_sjf/sleeplock.o differ
diff -ruN xv6-public/spinlock.d xv6-public-partB_sjf/spinlock.d
--- xv6-public/spinlock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/spinlock.d	2022-10-07 20:27:36.419049000 +0530
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Binary files xv6-public/spinlock.o and xv6-public-partB_sjf/spinlock.o differ
Binary files xv6-public/_stressfs and xv6-public-partB_sjf/_stressfs differ
diff -ruN xv6-public/stressfs.asm xv6-public-partB_sjf/stressfs.asm
--- xv6-public/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/stressfs.asm	2022-10-07 20:27:44.491120000 +0530
@@ -0,0 +1,1605 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   b:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+  10:	ff 71 fc             	pushl  -0x4(%ecx)
+  13:	55                   	push   %ebp
+  14:	89 e5                	mov    %esp,%ebp
+  16:	57                   	push   %edi
+  17:	56                   	push   %esi
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  18:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+{
+  1e:	53                   	push   %ebx
+
+  for(i = 0; i < 4; i++)
+  1f:	31 db                	xor    %ebx,%ebx
+{
+  21:	51                   	push   %ecx
+  22:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  28:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  printf(1, "stressfs starting\n");
+  2f:	68 d0 0a 00 00       	push   $0xad0
+  34:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  36:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  3d:	74 72 65 
+  40:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  47:	73 66 73 
+  printf(1, "stressfs starting\n");
+  4a:	e8 e1 04 00 00       	call   530 <printf>
+  memset(data, 'a', sizeof(data));
+  4f:	83 c4 0c             	add    $0xc,%esp
+  52:	68 00 02 00 00       	push   $0x200
+  57:	6a 61                	push   $0x61
+  59:	56                   	push   %esi
+  5a:	e8 a1 01 00 00       	call   200 <memset>
+  5f:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  62:	e8 34 03 00 00       	call   39b <fork>
+  67:	85 c0                	test   %eax,%eax
+  69:	0f 8f bb 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6f:	83 c3 01             	add    $0x1,%ebx
+  72:	83 fb 04             	cmp    $0x4,%ebx
+  75:	75 eb                	jne    62 <main+0x62>
+  77:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  7c:	83 ec 04             	sub    $0x4,%esp
+  7f:	53                   	push   %ebx
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  80:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  85:	68 e3 0a 00 00       	push   $0xae3
+  8a:	6a 01                	push   $0x1
+  8c:	e8 9f 04 00 00       	call   530 <printf>
+  path[8] += i;
+  91:	89 f8                	mov    %edi,%eax
+  fd = open(path, O_CREATE | O_RDWR);
+  93:	5f                   	pop    %edi
+  path[8] += i;
+  94:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  9a:	58                   	pop    %eax
+  9b:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  a1:	68 02 02 00 00       	push   $0x202
+  a6:	50                   	push   %eax
+  a7:	e8 37 03 00 00       	call   3e3 <open>
+  ac:	83 c4 10             	add    $0x10,%esp
+  af:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < 20; i++)
+  b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b8:	83 ec 04             	sub    $0x4,%esp
+  bb:	68 00 02 00 00       	push   $0x200
+  c0:	56                   	push   %esi
+  c1:	57                   	push   %edi
+  c2:	e8 fc 02 00 00       	call   3c3 <write>
+  for(i = 0; i < 20; i++)
+  c7:	83 c4 10             	add    $0x10,%esp
+  ca:	83 eb 01             	sub    $0x1,%ebx
+  cd:	75 e9                	jne    b8 <main+0xb8>
+  close(fd);
+  cf:	83 ec 0c             	sub    $0xc,%esp
+  d2:	57                   	push   %edi
+  d3:	e8 f3 02 00 00       	call   3cb <close>
+
+  printf(1, "read\n");
+  d8:	58                   	pop    %eax
+  d9:	5a                   	pop    %edx
+  da:	68 ed 0a 00 00       	push   $0xaed
+  df:	6a 01                	push   $0x1
+  e1:	e8 4a 04 00 00       	call   530 <printf>
+
+  fd = open(path, O_RDONLY);
+  e6:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  ec:	59                   	pop    %ecx
+  ed:	5b                   	pop    %ebx
+  ee:	6a 00                	push   $0x0
+  f0:	bb 14 00 00 00       	mov    $0x14,%ebx
+  f5:	50                   	push   %eax
+  f6:	e8 e8 02 00 00       	call   3e3 <open>
+  fb:	83 c4 10             	add    $0x10,%esp
+  fe:	89 c7                	mov    %eax,%edi
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 ac 02 00 00       	call   3bb <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 ab 02 00 00       	call   3cb <close>
+
+  wait();
+ 120:	e8 86 02 00 00       	call   3ab <wait>
+
+  exit();
+ 125:	e8 79 02 00 00       	call   3a3 <exit>
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 4b ff ff ff       	jmp    7c <main+0x7c>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 145:	31 c0                	xor    %eax,%eax
+{
+ 147:	89 e5                	mov    %esp,%ebp
+ 149:	53                   	push   %ebx
+ 14a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 14d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 150:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 154:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 157:	83 c0 01             	add    $0x1,%eax
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 15e:	89 c8                	mov    %ecx,%eax
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	53                   	push   %ebx
+ 178:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 17b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 17e:	0f b6 01             	movzbl (%ecx),%eax
+ 181:	0f b6 1a             	movzbl (%edx),%ebx
+ 184:	84 c0                	test   %al,%al
+ 186:	75 19                	jne    1a1 <strcmp+0x31>
+ 188:	eb 26                	jmp    1b0 <strcmp+0x40>
+ 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 190:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 194:	83 c1 01             	add    $0x1,%ecx
+ 197:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 19a:	0f b6 1a             	movzbl (%edx),%ebx
+ 19d:	84 c0                	test   %al,%al
+ 19f:	74 0f                	je     1b0 <strcmp+0x40>
+ 1a1:	38 d8                	cmp    %bl,%al
+ 1a3:	74 eb                	je     190 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1a5:	29 d8                	sub    %ebx,%eax
+}
+ 1a7:	5b                   	pop    %ebx
+ 1a8:	5d                   	pop    %ebp
+ 1a9:	c3                   	ret    
+ 1aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1b2:	29 d8                	sub    %ebx,%eax
+}
+ 1b4:	5b                   	pop    %ebx
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1cd:	74 21                	je     1f0 <strlen+0x30>
+ 1cf:	31 c0                	xor    %eax,%eax
+ 1d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1d8:	83 c0 01             	add    $0x1,%eax
+ 1db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1df:	89 c1                	mov    %eax,%ecx
+ 1e1:	75 f5                	jne    1d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1e3:	89 c8                	mov    %ecx,%eax
+ 1e5:	5d                   	pop    %ebp
+ 1e6:	c3                   	ret    
+ 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c9                	xor    %ecx,%ecx
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	c3                   	ret    
+ 1f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	57                   	push   %edi
+ 208:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 20b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 211:	89 d7                	mov    %edx,%edi
+ 213:	fc                   	cld    
+ 214:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 216:	89 d0                	mov    %edx,%eax
+ 218:	5f                   	pop    %edi
+ 219:	5d                   	pop    %ebp
+ 21a:	c3                   	ret    
+ 21b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 21f:	90                   	nop
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	8b 45 08             	mov    0x8(%ebp),%eax
+ 22a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 22e:	0f b6 10             	movzbl (%eax),%edx
+ 231:	84 d2                	test   %dl,%dl
+ 233:	75 16                	jne    24b <strchr+0x2b>
+ 235:	eb 21                	jmp    258 <strchr+0x38>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+ 240:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	84 d2                	test   %dl,%dl
+ 249:	74 0d                	je     258 <strchr+0x38>
+    if(*s == c)
+ 24b:	38 d1                	cmp    %dl,%cl
+ 24d:	75 f1                	jne    240 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 258:	31 c0                	xor    %eax,%eax
+}
+ 25a:	5d                   	pop    %ebp
+ 25b:	c3                   	ret    
+ 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 269:	31 f6                	xor    %esi,%esi
+{
+ 26b:	53                   	push   %ebx
+ 26c:	89 f3                	mov    %esi,%ebx
+ 26e:	83 ec 1c             	sub    $0x1c,%esp
+ 271:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 274:	eb 33                	jmp    2a9 <gets+0x49>
+ 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 280:	83 ec 04             	sub    $0x4,%esp
+ 283:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 286:	6a 01                	push   $0x1
+ 288:	50                   	push   %eax
+ 289:	6a 00                	push   $0x0
+ 28b:	e8 2b 01 00 00       	call   3bb <read>
+    if(cc < 1)
+ 290:	83 c4 10             	add    $0x10,%esp
+ 293:	85 c0                	test   %eax,%eax
+ 295:	7e 1c                	jle    2b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 297:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 29b:	83 c7 01             	add    $0x1,%edi
+ 29e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2a1:	3c 0a                	cmp    $0xa,%al
+ 2a3:	74 23                	je     2c8 <gets+0x68>
+ 2a5:	3c 0d                	cmp    $0xd,%al
+ 2a7:	74 1f                	je     2c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2a9:	83 c3 01             	add    $0x1,%ebx
+ 2ac:	89 fe                	mov    %edi,%esi
+ 2ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2b1:	7c cd                	jl     280 <gets+0x20>
+ 2b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2be:	5b                   	pop    %ebx
+ 2bf:	5e                   	pop    %esi
+ 2c0:	5f                   	pop    %edi
+ 2c1:	5d                   	pop    %ebp
+ 2c2:	c3                   	ret    
+ 2c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c7:	90                   	nop
+ 2c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ce:	01 de                	add    %ebx,%esi
+ 2d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d8:	5b                   	pop    %ebx
+ 2d9:	5e                   	pop    %esi
+ 2da:	5f                   	pop    %edi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	56                   	push   %esi
+ 2e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	6a 00                	push   $0x0
+ 2ee:	ff 75 08             	pushl  0x8(%ebp)
+ 2f1:	e8 ed 00 00 00       	call   3e3 <open>
+  if(fd < 0)
+ 2f6:	83 c4 10             	add    $0x10,%esp
+ 2f9:	85 c0                	test   %eax,%eax
+ 2fb:	78 2b                	js     328 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2fd:	83 ec 08             	sub    $0x8,%esp
+ 300:	ff 75 0c             	pushl  0xc(%ebp)
+ 303:	89 c3                	mov    %eax,%ebx
+ 305:	50                   	push   %eax
+ 306:	e8 f0 00 00 00       	call   3fb <fstat>
+  close(fd);
+ 30b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 30e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 310:	e8 b6 00 00 00       	call   3cb <close>
+  return r;
+ 315:	83 c4 10             	add    $0x10,%esp
+}
+ 318:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 31b:	89 f0                	mov    %esi,%eax
+ 31d:	5b                   	pop    %ebx
+ 31e:	5e                   	pop    %esi
+ 31f:	5d                   	pop    %ebp
+ 320:	c3                   	ret    
+ 321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 328:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 32d:	eb e9                	jmp    318 <stat+0x38>
+ 32f:	90                   	nop
+
+00000330 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	53                   	push   %ebx
+ 338:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 33b:	0f be 02             	movsbl (%edx),%eax
+ 33e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 341:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 344:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 349:	77 1a                	ja     365 <atoi+0x35>
+ 34b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 34f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 350:	83 c2 01             	add    $0x1,%edx
+ 353:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 356:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 35a:	0f be 02             	movsbl (%edx),%eax
+ 35d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 360:	80 fb 09             	cmp    $0x9,%bl
+ 363:	76 eb                	jbe    350 <atoi+0x20>
+  return n;
+}
+ 365:	89 c8                	mov    %ecx,%eax
+ 367:	5b                   	pop    %ebx
+ 368:	5d                   	pop    %ebp
+ 369:	c3                   	ret    
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	57                   	push   %edi
+ 378:	8b 45 10             	mov    0x10(%ebp),%eax
+ 37b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 37e:	56                   	push   %esi
+ 37f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 382:	85 c0                	test   %eax,%eax
+ 384:	7e 0f                	jle    395 <memmove+0x25>
+ 386:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 388:	89 d7                	mov    %edx,%edi
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 390:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 391:	39 f8                	cmp    %edi,%eax
+ 393:	75 fb                	jne    390 <memmove+0x20>
+  return vdst;
+}
+ 395:	5e                   	pop    %esi
+ 396:	89 d0                	mov    %edx,%eax
+ 398:	5f                   	pop    %edi
+ 399:	5d                   	pop    %ebp
+ 39a:	c3                   	ret    
+
+0000039b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 39b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <exit>:
+SYSCALL(exit)
+ 3a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <wait>:
+SYSCALL(wait)
+ 3ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <pipe>:
+SYSCALL(pipe)
+ 3b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <read>:
+SYSCALL(read)
+ 3bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <write>:
+SYSCALL(write)
+ 3c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <close>:
+SYSCALL(close)
+ 3cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <kill>:
+SYSCALL(kill)
+ 3d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <exec>:
+SYSCALL(exec)
+ 3db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <open>:
+SYSCALL(open)
+ 3e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <mknod>:
+SYSCALL(mknod)
+ 3eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <unlink>:
+SYSCALL(unlink)
+ 3f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <fstat>:
+SYSCALL(fstat)
+ 3fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <link>:
+SYSCALL(link)
+ 403:	b8 13 00 00 00       	mov    $0x13,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <mkdir>:
+SYSCALL(mkdir)
+ 40b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <chdir>:
+SYSCALL(chdir)
+ 413:	b8 09 00 00 00       	mov    $0x9,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <dup>:
+SYSCALL(dup)
+ 41b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getpid>:
+SYSCALL(getpid)
+ 423:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <sbrk>:
+SYSCALL(sbrk)
+ 42b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <sleep>:
+SYSCALL(sleep)
+ 433:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <uptime>:
+SYSCALL(uptime)
+ 43b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <getNumProc>:
+SYSCALL(getNumProc)
+ 443:	b8 16 00 00 00       	mov    $0x16,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 44b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 453:	b8 18 00 00 00       	mov    $0x18,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 45b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 463:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 46b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <getCurrentPID>:
+ 473:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+ 47b:	66 90                	xchg   %ax,%ax
+ 47d:	66 90                	xchg   %ax,%ax
+ 47f:	90                   	nop
+
+00000480 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 3c             	sub    $0x3c,%esp
+ 489:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 48c:	89 d1                	mov    %edx,%ecx
+{
+ 48e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 491:	85 d2                	test   %edx,%edx
+ 493:	0f 89 7f 00 00 00    	jns    518 <printint+0x98>
+ 499:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 49d:	74 79                	je     518 <printint+0x98>
+    neg = 1;
+ 49f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 4a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4a8:	31 db                	xor    %ebx,%ebx
+ 4aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4b0:	89 c8                	mov    %ecx,%eax
+ 4b2:	31 d2                	xor    %edx,%edx
+ 4b4:	89 cf                	mov    %ecx,%edi
+ 4b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4b9:	0f b6 92 fc 0a 00 00 	movzbl 0xafc(%edx),%edx
+ 4c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4c3:	89 d8                	mov    %ebx,%eax
+ 4c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4d1:	76 dd                	jbe    4b0 <printint+0x30>
+  if(neg)
+ 4d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4d6:	85 c9                	test   %ecx,%ecx
+ 4d8:	74 0c                	je     4e6 <printint+0x66>
+    buf[i++] = '-';
+ 4da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4ed:	eb 07                	jmp    4f6 <printint+0x76>
+ 4ef:	90                   	nop
+ 4f0:	0f b6 13             	movzbl (%ebx),%edx
+ 4f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4f6:	83 ec 04             	sub    $0x4,%esp
+ 4f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4fc:	6a 01                	push   $0x1
+ 4fe:	56                   	push   %esi
+ 4ff:	57                   	push   %edi
+ 500:	e8 be fe ff ff       	call   3c3 <write>
+  while(--i >= 0)
+ 505:	83 c4 10             	add    $0x10,%esp
+ 508:	39 de                	cmp    %ebx,%esi
+ 50a:	75 e4                	jne    4f0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 50c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 50f:	5b                   	pop    %ebx
+ 510:	5e                   	pop    %esi
+ 511:	5f                   	pop    %edi
+ 512:	5d                   	pop    %ebp
+ 513:	c3                   	ret    
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 518:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 51f:	eb 87                	jmp    4a8 <printint+0x28>
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52f:	90                   	nop
+
+00000530 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	57                   	push   %edi
+ 538:	56                   	push   %esi
+ 539:	53                   	push   %ebx
+ 53a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 53d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 540:	0f b6 1e             	movzbl (%esi),%ebx
+ 543:	84 db                	test   %bl,%bl
+ 545:	0f 84 b4 00 00 00    	je     5ff <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 54b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 54e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 551:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 554:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 556:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 559:	eb 33                	jmp    58e <printf+0x5e>
+ 55b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55f:	90                   	nop
+ 560:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 563:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 568:	83 f8 25             	cmp    $0x25,%eax
+ 56b:	74 17                	je     584 <printf+0x54>
+  write(fd, &c, 1);
+ 56d:	83 ec 04             	sub    $0x4,%esp
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 573:	6a 01                	push   $0x1
+ 575:	57                   	push   %edi
+ 576:	ff 75 08             	pushl  0x8(%ebp)
+ 579:	e8 45 fe ff ff       	call   3c3 <write>
+ 57e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 581:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 584:	0f b6 1e             	movzbl (%esi),%ebx
+ 587:	83 c6 01             	add    $0x1,%esi
+ 58a:	84 db                	test   %bl,%bl
+ 58c:	74 71                	je     5ff <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 58e:	0f be cb             	movsbl %bl,%ecx
+ 591:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 594:	85 d2                	test   %edx,%edx
+ 596:	74 c8                	je     560 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 598:	83 fa 25             	cmp    $0x25,%edx
+ 59b:	75 e7                	jne    584 <printf+0x54>
+      if(c == 'd'){
+ 59d:	83 f8 64             	cmp    $0x64,%eax
+ 5a0:	0f 84 9a 00 00 00    	je     640 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 5a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5ac:	83 f9 70             	cmp    $0x70,%ecx
+ 5af:	74 5f                	je     610 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5b1:	83 f8 73             	cmp    $0x73,%eax
+ 5b4:	0f 84 d6 00 00 00    	je     690 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5ba:	83 f8 63             	cmp    $0x63,%eax
+ 5bd:	0f 84 8d 00 00 00    	je     650 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5c3:	83 f8 25             	cmp    $0x25,%eax
+ 5c6:	0f 84 b4 00 00 00    	je     680 <printf+0x150>
+  write(fd, &c, 1);
+ 5cc:	83 ec 04             	sub    $0x4,%esp
+ 5cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5d3:	6a 01                	push   $0x1
+ 5d5:	57                   	push   %edi
+ 5d6:	ff 75 08             	pushl  0x8(%ebp)
+ 5d9:	e8 e5 fd ff ff       	call   3c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 5de:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e1:	83 c4 0c             	add    $0xc,%esp
+ 5e4:	6a 01                	push   $0x1
+ 5e6:	83 c6 01             	add    $0x1,%esi
+ 5e9:	57                   	push   %edi
+ 5ea:	ff 75 08             	pushl  0x8(%ebp)
+ 5ed:	e8 d1 fd ff ff       	call   3c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 5f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5f6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5f9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5fb:	84 db                	test   %bl,%bl
+ 5fd:	75 8f                	jne    58e <printf+0x5e>
+    }
+  }
+}
+ 5ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 602:	5b                   	pop    %ebx
+ 603:	5e                   	pop    %esi
+ 604:	5f                   	pop    %edi
+ 605:	5d                   	pop    %ebp
+ 606:	c3                   	ret    
+ 607:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 610:	83 ec 0c             	sub    $0xc,%esp
+ 613:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 618:	6a 00                	push   $0x0
+ 61a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 61d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 620:	8b 13                	mov    (%ebx),%edx
+ 622:	e8 59 fe ff ff       	call   480 <printint>
+        ap++;
+ 627:	89 d8                	mov    %ebx,%eax
+ 629:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 62c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 62e:	83 c0 04             	add    $0x4,%eax
+ 631:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 634:	e9 4b ff ff ff       	jmp    584 <printf+0x54>
+ 639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 640:	83 ec 0c             	sub    $0xc,%esp
+ 643:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 648:	6a 01                	push   $0x1
+ 64a:	eb ce                	jmp    61a <printf+0xea>
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 650:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 653:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 656:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 658:	6a 01                	push   $0x1
+        ap++;
+ 65a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 65d:	57                   	push   %edi
+ 65e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 661:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 664:	e8 5a fd ff ff       	call   3c3 <write>
+        ap++;
+ 669:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 66c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 66f:	31 d2                	xor    %edx,%edx
+ 671:	e9 0e ff ff ff       	jmp    584 <printf+0x54>
+ 676:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 680:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 683:	83 ec 04             	sub    $0x4,%esp
+ 686:	e9 59 ff ff ff       	jmp    5e4 <printf+0xb4>
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+        s = (char*)*ap;
+ 690:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 693:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 695:	83 c0 04             	add    $0x4,%eax
+ 698:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 69b:	85 db                	test   %ebx,%ebx
+ 69d:	74 17                	je     6b6 <printf+0x186>
+        while(*s != 0){
+ 69f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 6a2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 6a4:	84 c0                	test   %al,%al
+ 6a6:	0f 84 d8 fe ff ff    	je     584 <printf+0x54>
+ 6ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6af:	89 de                	mov    %ebx,%esi
+ 6b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b4:	eb 1a                	jmp    6d0 <printf+0x1a0>
+          s = "(null)";
+ 6b6:	bb f3 0a 00 00       	mov    $0xaf3,%ebx
+        while(*s != 0){
+ 6bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6c3:	89 de                	mov    %ebx,%esi
+ 6c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
+  write(fd, &c, 1);
+ 6d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6d3:	83 c6 01             	add    $0x1,%esi
+ 6d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6d9:	6a 01                	push   $0x1
+ 6db:	57                   	push   %edi
+ 6dc:	53                   	push   %ebx
+ 6dd:	e8 e1 fc ff ff       	call   3c3 <write>
+        while(*s != 0){
+ 6e2:	0f b6 06             	movzbl (%esi),%eax
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	84 c0                	test   %al,%al
+ 6ea:	75 e4                	jne    6d0 <printf+0x1a0>
+ 6ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6ef:	31 d2                	xor    %edx,%edx
+ 6f1:	e9 8e fe ff ff       	jmp    584 <printf+0x54>
+ 6f6:	66 90                	xchg   %ax,%ax
+ 6f8:	66 90                	xchg   %ax,%ax
+ 6fa:	66 90                	xchg   %ax,%ax
+ 6fc:	66 90                	xchg   %ax,%ax
+ 6fe:	66 90                	xchg   %ax,%ax
+
+00000700 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 700:	f3 0f 1e fb          	endbr32 
+ 704:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 705:	a1 60 0e 00 00       	mov    0xe60,%eax
+{
+ 70a:	89 e5                	mov    %esp,%ebp
+ 70c:	57                   	push   %edi
+ 70d:	56                   	push   %esi
+ 70e:	53                   	push   %ebx
+ 70f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 712:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 714:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 717:	39 c8                	cmp    %ecx,%eax
+ 719:	73 15                	jae    730 <free+0x30>
+ 71b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+ 720:	39 d1                	cmp    %edx,%ecx
+ 722:	72 14                	jb     738 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 724:	39 d0                	cmp    %edx,%eax
+ 726:	73 10                	jae    738 <free+0x38>
+{
+ 728:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 72a:	8b 10                	mov    (%eax),%edx
+ 72c:	39 c8                	cmp    %ecx,%eax
+ 72e:	72 f0                	jb     720 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 730:	39 d0                	cmp    %edx,%eax
+ 732:	72 f4                	jb     728 <free+0x28>
+ 734:	39 d1                	cmp    %edx,%ecx
+ 736:	73 f0                	jae    728 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 738:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 73b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 73e:	39 fa                	cmp    %edi,%edx
+ 740:	74 1e                	je     760 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 742:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 745:	8b 50 04             	mov    0x4(%eax),%edx
+ 748:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 74b:	39 f1                	cmp    %esi,%ecx
+ 74d:	74 28                	je     777 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 74f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 751:	5b                   	pop    %ebx
+  freep = p;
+ 752:	a3 60 0e 00 00       	mov    %eax,0xe60
+}
+ 757:	5e                   	pop    %esi
+ 758:	5f                   	pop    %edi
+ 759:	5d                   	pop    %ebp
+ 75a:	c3                   	ret    
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 760:	03 72 04             	add    0x4(%edx),%esi
+ 763:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 766:	8b 10                	mov    (%eax),%edx
+ 768:	8b 12                	mov    (%edx),%edx
+ 76a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 76d:	8b 50 04             	mov    0x4(%eax),%edx
+ 770:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 773:	39 f1                	cmp    %esi,%ecx
+ 775:	75 d8                	jne    74f <free+0x4f>
+    p->s.size += bp->s.size;
+ 777:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 77a:	a3 60 0e 00 00       	mov    %eax,0xe60
+    p->s.size += bp->s.size;
+ 77f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 782:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 785:	89 10                	mov    %edx,(%eax)
+}
+ 787:	5b                   	pop    %ebx
+ 788:	5e                   	pop    %esi
+ 789:	5f                   	pop    %edi
+ 78a:	5d                   	pop    %ebp
+ 78b:	c3                   	ret    
+ 78c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000790 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 790:	f3 0f 1e fb          	endbr32 
+ 794:	55                   	push   %ebp
+ 795:	89 e5                	mov    %esp,%ebp
+ 797:	57                   	push   %edi
+ 798:	56                   	push   %esi
+ 799:	53                   	push   %ebx
+ 79a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 79d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7a0:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 7a9:	c1 ee 03             	shr    $0x3,%esi
+ 7ac:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 7af:	85 ff                	test   %edi,%edi
+ 7b1:	0f 84 a9 00 00 00    	je     860 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 7b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7bc:	39 f1                	cmp    %esi,%ecx
+ 7be:	73 6d                	jae    82d <malloc+0x9d>
+ 7c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7cb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7d8:	eb 17                	jmp    7f1 <malloc+0x61>
+ 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7e0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 7e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7e5:	39 f1                	cmp    %esi,%ecx
+ 7e7:	73 4f                	jae    838 <malloc+0xa8>
+ 7e9:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 7ef:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7f1:	39 c7                	cmp    %eax,%edi
+ 7f3:	75 eb                	jne    7e0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7f5:	83 ec 0c             	sub    $0xc,%esp
+ 7f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7fb:	e8 2b fc ff ff       	call   42b <sbrk>
+  if(p == (char*)-1)
+ 800:	83 c4 10             	add    $0x10,%esp
+ 803:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 806:	74 1b                	je     823 <malloc+0x93>
+  hp->s.size = nu;
+ 808:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 80b:	83 ec 0c             	sub    $0xc,%esp
+ 80e:	83 c0 08             	add    $0x8,%eax
+ 811:	50                   	push   %eax
+ 812:	e8 e9 fe ff ff       	call   700 <free>
+  return freep;
+ 817:	a1 60 0e 00 00       	mov    0xe60,%eax
+      if((p = morecore(nunits)) == 0)
+ 81c:	83 c4 10             	add    $0x10,%esp
+ 81f:	85 c0                	test   %eax,%eax
+ 821:	75 bd                	jne    7e0 <malloc+0x50>
+        return 0;
+  }
+}
+ 823:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 826:	31 c0                	xor    %eax,%eax
+}
+ 828:	5b                   	pop    %ebx
+ 829:	5e                   	pop    %esi
+ 82a:	5f                   	pop    %edi
+ 82b:	5d                   	pop    %ebp
+ 82c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 82d:	89 c2                	mov    %eax,%edx
+ 82f:	89 f8                	mov    %edi,%eax
+ 831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 838:	39 ce                	cmp    %ecx,%esi
+ 83a:	74 54                	je     890 <malloc+0x100>
+        p->s.size -= nunits;
+ 83c:	29 f1                	sub    %esi,%ecx
+ 83e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 841:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 844:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 847:	a3 60 0e 00 00       	mov    %eax,0xe60
+}
+ 84c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 84f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 852:	5b                   	pop    %ebx
+ 853:	5e                   	pop    %esi
+ 854:	5f                   	pop    %edi
+ 855:	5d                   	pop    %ebp
+ 856:	c3                   	ret    
+ 857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 860:	c7 05 60 0e 00 00 64 	movl   $0xe64,0xe60
+ 867:	0e 00 00 
+    base.s.size = 0;
+ 86a:	bf 64 0e 00 00       	mov    $0xe64,%edi
+    base.s.ptr = freep = prevp = &base;
+ 86f:	c7 05 64 0e 00 00 64 	movl   $0xe64,0xe64
+ 876:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 879:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 87b:	c7 05 68 0e 00 00 00 	movl   $0x0,0xe68
+ 882:	00 00 00 
+    if(p->s.size >= nunits){
+ 885:	e9 36 ff ff ff       	jmp    7c0 <malloc+0x30>
+ 88a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 890:	8b 0a                	mov    (%edx),%ecx
+ 892:	89 08                	mov    %ecx,(%eax)
+ 894:	eb b1                	jmp    847 <malloc+0xb7>
+ 896:	66 90                	xchg   %ax,%ax
+ 898:	66 90                	xchg   %ax,%ax
+ 89a:	66 90                	xchg   %ax,%ax
+ 89c:	66 90                	xchg   %ax,%ax
+ 89e:	66 90                	xchg   %ax,%ax
+
+000008a0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 8a0:	f3 0f 1e fb          	endbr32 
+ 8a4:	55                   	push   %ebp
+ 8a5:	b8 84 0e 00 00       	mov    $0xe84,%eax
+ 8aa:	89 e5                	mov    %esp,%ebp
+ 8ac:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 8af:	89 15 80 0e 00 00    	mov    %edx,0xe80
+    for (mti=1; mti<N; mti++)
+ 8b5:	eb 0c                	jmp    8c3 <sgenrand+0x23>
+ 8b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8be:	66 90                	xchg   %ax,%ax
+ 8c0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8c3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 8c9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 8cb:	3d 3c 18 00 00       	cmp    $0x183c,%eax
+ 8d0:	75 ee                	jne    8c0 <sgenrand+0x20>
+ 8d2:	c7 05 44 0e 00 00 70 	movl   $0x270,0xe44
+ 8d9:	02 00 00 
+}
+ 8dc:	5d                   	pop    %ebp
+ 8dd:	c3                   	ret    
+ 8de:	66 90                	xchg   %ax,%ax
+
+000008e0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 8e0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 8e4:	a1 44 0e 00 00       	mov    0xe44,%eax
+ 8e9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8ee:	7f 3c                	jg     92c <genrand+0x4c>
+ 8f0:	8d 50 01             	lea    0x1(%eax),%edx
+ 8f3:	8b 04 85 80 0e 00 00 	mov    0xe80(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 8fa:	89 15 44 0e 00 00    	mov    %edx,0xe44
+    y ^= TEMPERING_SHIFT_U(y);
+ 900:	89 c2                	mov    %eax,%edx
+ 902:	c1 ea 0b             	shr    $0xb,%edx
+ 905:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 907:	89 d0                	mov    %edx,%eax
+ 909:	c1 e0 07             	shl    $0x7,%eax
+ 90c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 911:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 913:	89 d0                	mov    %edx,%eax
+ 915:	c1 e0 0f             	shl    $0xf,%eax
+ 918:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 91d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 91f:	89 c2                	mov    %eax,%edx
+ 921:	c1 ea 12             	shr    $0x12,%edx
+ 924:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 926:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 92b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 92c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 931:	0f 84 d2 00 00 00    	je     a09 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 937:	31 c0                	xor    %eax,%eax
+ 939:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 940:	8b 0c 85 80 0e 00 00 	mov    0xe80(,%eax,4),%ecx
+ 947:	83 c0 01             	add    $0x1,%eax
+ 94a:	8b 14 85 80 0e 00 00 	mov    0xe80(,%eax,4),%edx
+ 951:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 957:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 95d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 95f:	89 d1                	mov    %edx,%ecx
+ 961:	83 e2 01             	and    $0x1,%edx
+ 964:	d1 e9                	shr    %ecx
+ 966:	33 0c 85 b0 14 00 00 	xor    0x14b0(,%eax,4),%ecx
+ 96d:	33 0c 95 10 0b 00 00 	xor    0xb10(,%edx,4),%ecx
+ 974:	89 0c 85 7c 0e 00 00 	mov    %ecx,0xe7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 97b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 980:	75 be                	jne    940 <genrand+0x60>
+ 982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 988:	8b 0c 85 80 0e 00 00 	mov    0xe80(,%eax,4),%ecx
+ 98f:	83 c0 01             	add    $0x1,%eax
+ 992:	8b 14 85 80 0e 00 00 	mov    0xe80(,%eax,4),%edx
+ 999:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 99f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9a5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9a7:	89 d1                	mov    %edx,%ecx
+ 9a9:	83 e2 01             	and    $0x1,%edx
+ 9ac:	d1 e9                	shr    %ecx
+ 9ae:	33 0c 85 f0 0a 00 00 	xor    0xaf0(,%eax,4),%ecx
+ 9b5:	33 0c 95 10 0b 00 00 	xor    0xb10(,%edx,4),%ecx
+ 9bc:	89 0c 85 7c 0e 00 00 	mov    %ecx,0xe7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 9c3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 9c8:	75 be                	jne    988 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 9ca:	a1 80 0e 00 00       	mov    0xe80,%eax
+ 9cf:	8b 0d 3c 18 00 00    	mov    0x183c,%ecx
+ 9d5:	89 c2                	mov    %eax,%edx
+ 9d7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9dd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9e3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9e5:	89 ca                	mov    %ecx,%edx
+ 9e7:	83 e1 01             	and    $0x1,%ecx
+ 9ea:	d1 ea                	shr    %edx
+ 9ec:	33 15 b0 14 00 00    	xor    0x14b0,%edx
+ 9f2:	33 14 8d 10 0b 00 00 	xor    0xb10(,%ecx,4),%edx
+ 9f9:	89 15 3c 18 00 00    	mov    %edx,0x183c
+ 9ff:	ba 01 00 00 00       	mov    $0x1,%edx
+ a04:	e9 f1 fe ff ff       	jmp    8fa <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ a09:	b8 84 0e 00 00       	mov    $0xe84,%eax
+ a0e:	b9 3c 18 00 00       	mov    $0x183c,%ecx
+ a13:	ba 05 11 00 00       	mov    $0x1105,%edx
+ a18:	c7 05 80 0e 00 00 05 	movl   $0x1105,0xe80
+ a1f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ a22:	eb 07                	jmp    a2b <genrand+0x14b>
+ a24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a28:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a2b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a31:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a33:	39 c1                	cmp    %eax,%ecx
+ a35:	75 f1                	jne    a28 <genrand+0x148>
+ a37:	e9 fb fe ff ff       	jmp    937 <genrand+0x57>
+ a3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a40 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a40:	f3 0f 1e fb          	endbr32 
+ a44:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a45:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a47:	89 e5                	mov    %esp,%ebp
+ a49:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a4a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a4d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a4e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a53:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a56:	89 d8                	mov    %ebx,%eax
+ a58:	f7 f1                	div    %ecx
+ a5a:	89 c6                	mov    %eax,%esi
+ a5c:	29 d3                	sub    %edx,%ebx
+ a5e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ a60:	e8 7b fe ff ff       	call   8e0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a65:	39 d8                	cmp    %ebx,%eax
+ a67:	73 f7                	jae    a60 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a69:	31 d2                	xor    %edx,%edx
+}
+ a6b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a6c:	f7 f6                	div    %esi
+}
+ a6e:	5e                   	pop    %esi
+ a6f:	5d                   	pop    %ebp
+ a70:	c3                   	ret    
+ a71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a7f:	90                   	nop
+
+00000a80 <randomrange>:
+
+int randomrange(int low, int high){
+ a80:	f3 0f 1e fb          	endbr32 
+ a84:	55                   	push   %ebp
+ a85:	89 e5                	mov    %esp,%ebp
+ a87:	57                   	push   %edi
+ a88:	56                   	push   %esi
+ a89:	53                   	push   %ebx
+ a8a:	83 ec 0c             	sub    $0xc,%esp
+ a8d:	8b 75 08             	mov    0x8(%ebp),%esi
+ a90:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a93:	39 f0                	cmp    %esi,%eax
+ a95:	7d 06                	jge    a9d <randomrange+0x1d>
+ a97:	89 f2                	mov    %esi,%edx
+ a99:	89 c6                	mov    %eax,%esi
+ a9b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a9d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a9f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ aa4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ aa6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ aa9:	89 d8                	mov    %ebx,%eax
+ aab:	f7 f1                	div    %ecx
+ aad:	89 c7                	mov    %eax,%edi
+ aaf:	29 d3                	sub    %edx,%ebx
+ ab1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ ab8:	e8 23 fe ff ff       	call   8e0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ abd:	39 d8                	cmp    %ebx,%eax
+ abf:	73 f7                	jae    ab8 <randomrange+0x38>
+  return x/bin_size;
+ ac1:	31 d2                	xor    %edx,%edx
+  return val;
+ ac3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ ac6:	f7 f7                	div    %edi
+ ac8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ ac9:	01 f0                	add    %esi,%eax
+ acb:	5e                   	pop    %esi
+ acc:	5f                   	pop    %edi
+ acd:	5d                   	pop    %ebp
+ ace:	c3                   	ret    
diff -ruN xv6-public/stressfs.d xv6-public-partB_sjf/stressfs.d
--- xv6-public/stressfs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/stressfs.d	2022-10-07 20:27:44.463119000 +0530
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h fs.h fcntl.h
Binary files xv6-public/stressfs.o and xv6-public-partB_sjf/stressfs.o differ
diff -ruN xv6-public/stressfs.sym xv6-public-partB_sjf/stressfs.sym
--- xv6-public/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/stressfs.sym	2022-10-07 20:27:44.495120000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+00000ad0 .rodata
+00000b18 .eh_frame
+00000e44 .data
+00000e60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000480 printint
+00000afc digits.1105
+00000000 umalloc.c
+00000e60 freep
+00000e64 base
+00000000 random.c
+00000e80 mt
+00000e44 mti
+00000b10 mag01.989
+00000140 strcpy
+000008a0 sgenrand
+00000530 printf
+00000370 memmove
+000003eb mknod
+00000260 gets
+00000423 getpid
+00000790 malloc
+00000433 sleep
+00000463 get_burst_time
+00000a40 random_at_most
+0000046b getCurrentInfo
+000003b3 pipe
+000003c3 write
+000003fb fstat
+000003d3 kill
+00000413 chdir
+000003db exec
+000003ab wait
+000003bb read
+000003f3 unlink
+0000039b fork
+0000042b sbrk
+0000043b uptime
+00000e48 __bss_start
+00000200 memset
+00000000 main
+0000045b set_burst_time
+00000170 strcmp
+0000041b dup
+000008e0 genrand
+00000443 getNumProc
+00000453 getProcInfo
+000002e0 stat
+00000e48 _edata
+00001840 _end
+00000403 link
+000003a3 exit
+0000044b getMaxPID
+00000330 atoi
+000001c0 strlen
+000003e3 open
+00000220 strchr
+00000473 getCurrentPID
+00000a80 randomrange
+0000040b mkdir
+000003cb close
+00000700 free
diff -ruN xv6-public/string.d xv6-public-partB_sjf/string.d
--- xv6-public/string.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/string.d	2022-10-07 20:27:36.499050000 +0530
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files xv6-public/string.o and xv6-public-partB_sjf/string.o differ
Binary files xv6-public/swtch.o and xv6-public-partB_sjf/swtch.o differ
diff -ruN xv6-public/syscall.c xv6-public-partB_sjf/syscall.c
--- xv6-public/syscall.c	2022-10-06 22:50:49.453046000 +0530
+++ xv6-public-partB_sjf/syscall.c	2022-10-07 20:17:14.485600000 +0530
@@ -103,6 +103,13 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPID(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
+extern int sys_getCurrentInfo(void);
+extern int sys_getCurrentPID(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +133,13 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getNumProc] sys_getNumProc,
+[SYS_getMaxPID] sys_getMaxPID,
+[SYS_getProcInfo] sys_getProcInfo,
+[SYS_set_burst_time] sys_set_burst_time,
+[SYS_get_burst_time] sys_get_burst_time,
+[SYS_getCurrentInfo] sys_getCurrentInfo,
+[SYS_getCurrentPID] sys_getCurrentPID,
 };
 
 void
diff -ruN xv6-public/syscall.d xv6-public-partB_sjf/syscall.d
--- xv6-public/syscall.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/syscall.d	2022-10-07 20:27:36.583050000 +0530
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h
diff -ruN xv6-public/syscall.h xv6-public-partB_sjf/syscall.h
--- xv6-public/syscall.h	2022-10-06 22:50:49.453046000 +0530
+++ xv6-public-partB_sjf/syscall.h	2022-10-07 20:14:49.724332000 +0530
@@ -20,3 +20,11 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc 22
+#define SYS_getMaxPID 23
+#define SYS_getProcInfo 24
+#define SYS_set_burst_time 25
+#define SYS_get_burst_time 26
+#define SYS_test_scheduler 27
+#define SYS_getCurrentInfo 28
+#define SYS_getCurrentPID 29
Binary files xv6-public/syscall.o and xv6-public-partB_sjf/syscall.o differ
diff -ruN xv6-public/sysfile.d xv6-public-partB_sjf/sysfile.d
--- xv6-public/sysfile.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/sysfile.d	2022-10-07 20:27:36.755052000 +0530
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files xv6-public/sysfile.o and xv6-public-partB_sjf/sysfile.o differ
diff -ruN xv6-public/sysproc.c xv6-public-partB_sjf/sysproc.c
--- xv6-public/sysproc.c	2022-10-06 22:50:49.453046000 +0530
+++ xv6-public-partB_sjf/sysproc.c	2022-10-07 18:10:19.091351000 +0530
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "processInfo.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,66 @@
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_getNumProc(void)
+{
+	return getNumProc_system();
+}
+
+int 
+sys_getMaxPID(void)
+{
+	return getMaxPID_system();
+}
+
+int
+sys_getProcInfo(void){
+	int pid;
+	struct processInfo *info;
+	argptr(0,(void *)&pid, sizeof(pid));
+	argptr(1,(void *)&info, sizeof(info));
+
+	struct processInfo tempInfo = getProcInfo_system(pid);
+	
+	if(tempInfo.ppid == -1) return -1;
+	info->ppid = tempInfo.ppid;
+	info->psize = tempInfo.psize;
+  info->numberContextSwitches = tempInfo.numberContextSwitches;
+	return 0;
+}
+
+int
+sys_set_burst_time(void)
+{
+  int burst_time;
+  argptr(0,(void *)&burst_time, sizeof(burst_time));
+
+  return set_burst_time_system(burst_time);
+}
+
+int
+sys_get_burst_time(void)
+{
+  return get_burst_time_system();
+}
+
+int
+sys_getCurrentInfo(void)
+{
+  struct processInfo *info;
+  argptr(0,(void *)&info, sizeof(info));
+
+  struct processInfo temporaryInfo = getCurrentInfo_system();
+
+  if(temporaryInfo.ppid == -1)return -1;
+
+  info->ppid = temporaryInfo.ppid;
+  info->psize = temporaryInfo.psize;
+  info->numberContextSwitches = temporaryInfo.numberContextSwitches;
+  return 0;
+}
+
+int sys_getCurrentPID(void){
+  return getCurrentPID_system();
+}
\ No newline at end of file
diff -ruN xv6-public/sysproc.d xv6-public-partB_sjf/sysproc.d
--- xv6-public/sysproc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/sysproc.d	2022-10-07 20:27:36.835053000 +0530
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h processInfo.h
Binary files xv6-public/sysproc.o and xv6-public-partB_sjf/sysproc.o differ
Binary files xv6-public/_test_scheduler and xv6-public-partB_sjf/_test_scheduler differ
diff -ruN xv6-public/test_scheduler.asm xv6-public-partB_sjf/test_scheduler.asm
--- xv6-public/test_scheduler.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/test_scheduler.asm	2022-10-07 23:09:17.582939550 +0530
@@ -0,0 +1,1244 @@
+
+_test_scheduler:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "user.h"
+
+int add;
+
+int
+main(int argv, char* argc[]){
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 28             	sub    $0x28,%esp
+
+	if(argv<2){
+  18:	83 39 01             	cmpl   $0x1,(%ecx)
+main(int argv, char* argc[]){
+  1b:	8b 51 04             	mov    0x4(%ecx),%edx
+	if(argv<2){
+  1e:	7e 3c                	jle    5c <main+0x5c>
+		printf(1, "Incorrect format!\nFormat: test_scheduler <number of fork processes>\n");
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+  20:	83 ec 0c             	sub    $0xc,%esp
+  23:	ff 72 04             	pushl  0x4(%edx)
+  26:	e8 f5 03 00 00       	call   420 <atoi>
+
+	int burst_times[n];
+  2b:	83 c4 10             	add    $0x10,%esp
+  2e:	8d 14 85 0f 00 00 00 	lea    0xf(,%eax,4),%edx
+	int n=atoi(argc[1]);
+  35:	89 c7                	mov    %eax,%edi
+	int burst_times[n];
+  37:	89 e6                	mov    %esp,%esi
+  39:	89 d0                	mov    %edx,%eax
+  3b:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+  41:	29 d6                	sub    %edx,%esi
+  43:	83 e0 f0             	and    $0xfffffff0,%eax
+  46:	89 f2                	mov    %esi,%edx
+  48:	39 d4                	cmp    %edx,%esp
+  4a:	74 23                	je     6f <main+0x6f>
+  4c:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  52:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  59:	00 
+  5a:	eb ec                	jmp    48 <main+0x48>
+		printf(1, "Incorrect format!\nFormat: test_scheduler <number of fork processes>\n");
+  5c:	50                   	push   %eax
+  5d:	50                   	push   %eax
+  5e:	68 c0 0b 00 00       	push   $0xbc0
+  63:	6a 01                	push   $0x1
+  65:	e8 b6 05 00 00       	call   620 <printf>
+		exit();
+  6a:	e8 24 04 00 00       	call   493 <exit>
+	int burst_times[n];
+  6f:	25 ff 0f 00 00       	and    $0xfff,%eax
+  74:	29 c4                	sub    %eax,%esp
+  76:	85 c0                	test   %eax,%eax
+  78:	74 05                	je     7f <main+0x7f>
+  7a:	83 4c 04 fc 00       	orl    $0x0,-0x4(%esp,%eax,1)
+  7f:	89 e6                	mov    %esp,%esi
+  81:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+
+	for(int i=0;i<n;i++){
+  84:	85 ff                	test   %edi,%edi
+  86:	0f 8e 16 01 00 00    	jle    1a2 <main+0x1a2>
+  8c:	31 db                	xor    %ebx,%ebx
+		burst_times[i] = randomrange(1,500);
+  8e:	83 ec 08             	sub    $0x8,%esp
+  91:	68 f4 01 00 00       	push   $0x1f4
+  96:	6a 01                	push   $0x1
+  98:	e8 d3 0a 00 00       	call   b70 <randomrange>
+	for(int i=0;i<n;i++){
+  9d:	83 c4 10             	add    $0x10,%esp
+		burst_times[i] = randomrange(1,500);
+  a0:	89 04 9e             	mov    %eax,(%esi,%ebx,4)
+	for(int i=0;i<n;i++){
+  a3:	89 d8                	mov    %ebx,%eax
+  a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  a8:	39 df                	cmp    %ebx,%edi
+  aa:	75 e2                	jne    8e <main+0x8e>
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+  ac:	53                   	push   %ebx
+  ad:	89 c6                	mov    %eax,%esi
+  af:	53                   	push   %ebx
+  b0:	68 5c 0c 00 00       	push   $0xc5c
+  b5:	6a 01                	push   $0x1
+  b7:	e8 64 05 00 00       	call   620 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+  bc:	5f                   	pop    %edi
+  bd:	58                   	pop    %eax
+  be:	68 8c 0c 00 00       	push   $0xc8c
+  c3:	6a 01                	push   $0x1
+  c5:	31 ff                	xor    %edi,%edi
+  c7:	e8 54 05 00 00       	call   620 <printf>
+  cc:	83 c4 10             	add    $0x10,%esp
+  cf:	eb 0d                	jmp    de <main+0xde>
+
+	for(int i=0;i<n;i++){
+  d1:	8d 47 01             	lea    0x1(%edi),%eax
+  d4:	39 fe                	cmp    %edi,%esi
+  d6:	0f 84 e5 00 00 00    	je     1c1 <main+0x1c1>
+  dc:	89 c7                	mov    %eax,%edi
+		if(!fork()){
+  de:	e8 a8 03 00 00       	call   48b <fork>
+  e3:	89 c3                	mov    %eax,%ebx
+  e5:	85 c0                	test   %eax,%eax
+  e7:	75 e8                	jne    d1 <main+0xd1>
+
+			if(i%2){
+  e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+  ec:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+  ef:	83 e7 01             	and    $0x1,%edi
+  f2:	0f 84 d8 00 00 00    	je     1d0 <main+0x1d0>
+				// CPU Bound process
+				set_burst_time(burst_times[i]);
+  f8:	83 ec 0c             	sub    $0xc,%esp
+				int x=0;
+
+				//program 1
+				for(int j=0;j<10000;j++){
+  fb:	31 f6                	xor    %esi,%esi
+				set_burst_time(burst_times[i]);
+  fd:	50                   	push   %eax
+  fe:	e8 48 04 00 00       	call   54b <set_burst_time>
+ 103:	83 c4 10             	add    $0x10,%esp
+					for(int k=0;k<10000;k++){
+ 106:	89 f1                	mov    %esi,%ecx
+ 108:	b8 10 27 00 00       	mov    $0x2710,%eax
+ 10d:	83 e1 03             	and    $0x3,%ecx
+						if(j%4) x--;
+ 110:	8d 53 ff             	lea    -0x1(%ebx),%edx
+ 113:	83 c3 01             	add    $0x1,%ebx
+ 116:	85 c9                	test   %ecx,%ecx
+ 118:	0f 45 da             	cmovne %edx,%ebx
+					for(int k=0;k<10000;k++){
+ 11b:	83 e8 01             	sub    $0x1,%eax
+ 11e:	75 f0                	jne    110 <main+0x110>
+				for(int j=0;j<10000;j++){
+ 120:	83 c6 01             	add    $0x1,%esi
+ 123:	81 fe 10 27 00 00    	cmp    $0x2710,%esi
+ 129:	75 db                	jne    106 <main+0x106>
+ 12b:	c7 45 d4 e8 03 00 00 	movl   $0x3e8,-0x2c(%ebp)
+
+				//program 2
+				for(int j=0;j<1000;j++){
+					for(int k=0;k<100000;k++){
+						x++;
+						if(x%6 >= 5) x--;
+ 132:	bf ab aa aa 2a       	mov    $0x2aaaaaab,%edi
+				for(int j=0;j<10000;j++){
+ 137:	be a0 86 01 00       	mov    $0x186a0,%esi
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+						x++;
+ 140:	8d 4b 01             	lea    0x1(%ebx),%ecx
+						if(x%6 >= 5) x--;
+ 143:	89 c8                	mov    %ecx,%eax
+ 145:	f7 ef                	imul   %edi
+ 147:	89 c8                	mov    %ecx,%eax
+ 149:	c1 f8 1f             	sar    $0x1f,%eax
+ 14c:	29 c2                	sub    %eax,%edx
+ 14e:	8d 04 52             	lea    (%edx,%edx,2),%eax
+ 151:	89 ca                	mov    %ecx,%edx
+ 153:	01 c0                	add    %eax,%eax
+ 155:	29 c2                	sub    %eax,%edx
+						x++;
+ 157:	83 fa 05             	cmp    $0x5,%edx
+ 15a:	0f 45 d9             	cmovne %ecx,%ebx
+					for(int k=0;k<100000;k++){
+ 15d:	83 ee 01             	sub    $0x1,%esi
+ 160:	75 de                	jne    140 <main+0x140>
+				for(int j=0;j<1000;j++){
+ 162:	83 6d d4 01          	subl   $0x1,-0x2c(%ebp)
+ 166:	75 cf                	jne    137 <main+0x137>
+					}
+				}
+				add = add + x;
+				struct processInfo info;
+				getCurrentInfo(&info);
+ 168:	83 ec 0c             	sub    $0xc,%esp
+ 16b:	8d 45 dc             	lea    -0x24(%ebp),%eax
+				add = add + x;
+ 16e:	01 1d 00 1a 00 00    	add    %ebx,0x1a00
+				getCurrentInfo(&info);
+ 174:	50                   	push   %eax
+ 175:	e8 e1 03 00 00       	call   55b <getCurrentInfo>
+				int bt = get_burst_time();
+ 17a:	e8 d4 03 00 00       	call   553 <get_burst_time>
+				printf(1, "\t%d \t CPU         %d             %d\n", getCurrentPID(), bt, info.numberContextSwitches);	
+ 17f:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+				int bt = get_burst_time();
+ 182:	89 c3                	mov    %eax,%ebx
+				printf(1, "\t%d \t CPU         %d             %d\n", getCurrentPID(), bt, info.numberContextSwitches);	
+ 184:	e8 da 03 00 00       	call   563 <getCurrentPID>
+ 189:	89 34 24             	mov    %esi,(%esp)
+ 18c:	53                   	push   %ebx
+ 18d:	50                   	push   %eax
+ 18e:	68 08 0c 00 00       	push   $0xc08
+ 193:	6a 01                	push   $0x1
+ 195:	e8 86 04 00 00       	call   620 <printf>
+				exit();	
+ 19a:	83 c4 20             	add    $0x20,%esp
+ 19d:	e8 f1 02 00 00       	call   493 <exit>
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+ 1a2:	50                   	push   %eax
+ 1a3:	50                   	push   %eax
+ 1a4:	68 5c 0c 00 00       	push   $0xc5c
+ 1a9:	6a 01                	push   $0x1
+ 1ab:	e8 70 04 00 00       	call   620 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+ 1b0:	5a                   	pop    %edx
+ 1b1:	59                   	pop    %ecx
+ 1b2:	68 8c 0c 00 00       	push   $0xc8c
+ 1b7:	6a 01                	push   $0x1
+ 1b9:	e8 62 04 00 00       	call   620 <printf>
+ 1be:	83 c4 10             	add    $0x10,%esp
+
+			}
+		}
+	}
+
+	while(wait()!=-1);
+ 1c1:	e8 d5 02 00 00       	call   49b <wait>
+ 1c6:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 1c9:	75 f6                	jne    1c1 <main+0x1c1>
+	exit();
+ 1cb:	e8 c3 02 00 00       	call   493 <exit>
+				set_burst_time(burst_times[i]);
+ 1d0:	83 ec 0c             	sub    $0xc,%esp
+ 1d3:	bb 32 00 00 00       	mov    $0x32,%ebx
+ 1d8:	50                   	push   %eax
+ 1d9:	e8 6d 03 00 00       	call   54b <set_burst_time>
+ 1de:	83 c4 10             	add    $0x10,%esp
+					sleep(1);
+ 1e1:	83 ec 0c             	sub    $0xc,%esp
+ 1e4:	6a 01                	push   $0x1
+ 1e6:	e8 38 03 00 00       	call   523 <sleep>
+				for(int i=0;i<50;i++){
+ 1eb:	83 c4 10             	add    $0x10,%esp
+ 1ee:	83 eb 01             	sub    $0x1,%ebx
+ 1f1:	75 ee                	jne    1e1 <main+0x1e1>
+				getCurrentInfo(&info);
+ 1f3:	83 ec 0c             	sub    $0xc,%esp
+ 1f6:	8d 45 dc             	lea    -0x24(%ebp),%eax
+ 1f9:	50                   	push   %eax
+ 1fa:	e8 5c 03 00 00       	call   55b <getCurrentInfo>
+				int bt = get_burst_time();
+ 1ff:	e8 4f 03 00 00       	call   553 <get_burst_time>
+				printf(1, "\t%d \t I/O         %d                   %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 204:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+				int bt = get_burst_time();
+ 207:	89 c3                	mov    %eax,%ebx
+				printf(1, "\t%d \t I/O         %d                   %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 209:	e8 55 03 00 00       	call   563 <getCurrentPID>
+ 20e:	89 34 24             	mov    %esi,(%esp)
+ 211:	53                   	push   %ebx
+ 212:	50                   	push   %eax
+ 213:	68 30 0c 00 00       	push   $0xc30
+ 218:	6a 01                	push   $0x1
+ 21a:	e8 01 04 00 00       	call   620 <printf>
+				exit();
+ 21f:	83 c4 20             	add    $0x20,%esp
+ 222:	e8 6c 02 00 00       	call   493 <exit>
+ 227:	66 90                	xchg   %ax,%ax
+ 229:	66 90                	xchg   %ax,%ax
+ 22b:	66 90                	xchg   %ax,%ax
+ 22d:	66 90                	xchg   %ax,%ax
+ 22f:	90                   	nop
+
+00000230 <strcpy>:
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	31 c0                	xor    %eax,%eax
+ 237:	89 e5                	mov    %esp,%ebp
+ 239:	53                   	push   %ebx
+ 23a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 23d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 240:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 244:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 247:	83 c0 01             	add    $0x1,%eax
+ 24a:	84 d2                	test   %dl,%dl
+ 24c:	75 f2                	jne    240 <strcpy+0x10>
+ 24e:	89 c8                	mov    %ecx,%eax
+ 250:	5b                   	pop    %ebx
+ 251:	5d                   	pop    %ebp
+ 252:	c3                   	ret    
+ 253:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000260 <strcmp>:
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	53                   	push   %ebx
+ 268:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 26b:	8b 55 0c             	mov    0xc(%ebp),%edx
+ 26e:	0f b6 01             	movzbl (%ecx),%eax
+ 271:	0f b6 1a             	movzbl (%edx),%ebx
+ 274:	84 c0                	test   %al,%al
+ 276:	75 19                	jne    291 <strcmp+0x31>
+ 278:	eb 26                	jmp    2a0 <strcmp+0x40>
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 280:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+ 284:	83 c1 01             	add    $0x1,%ecx
+ 287:	83 c2 01             	add    $0x1,%edx
+ 28a:	0f b6 1a             	movzbl (%edx),%ebx
+ 28d:	84 c0                	test   %al,%al
+ 28f:	74 0f                	je     2a0 <strcmp+0x40>
+ 291:	38 d8                	cmp    %bl,%al
+ 293:	74 eb                	je     280 <strcmp+0x20>
+ 295:	29 d8                	sub    %ebx,%eax
+ 297:	5b                   	pop    %ebx
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+ 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 2a0:	31 c0                	xor    %eax,%eax
+ 2a2:	29 d8                	sub    %ebx,%eax
+ 2a4:	5b                   	pop    %ebx
+ 2a5:	5d                   	pop    %ebp
+ 2a6:	c3                   	ret    
+ 2a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ae:	66 90                	xchg   %ax,%ax
+
+000002b0 <strlen>:
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ba:	80 3a 00             	cmpb   $0x0,(%edx)
+ 2bd:	74 21                	je     2e0 <strlen+0x30>
+ 2bf:	31 c0                	xor    %eax,%eax
+ 2c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2c8:	83 c0 01             	add    $0x1,%eax
+ 2cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 2cf:	89 c1                	mov    %eax,%ecx
+ 2d1:	75 f5                	jne    2c8 <strlen+0x18>
+ 2d3:	89 c8                	mov    %ecx,%eax
+ 2d5:	5d                   	pop    %ebp
+ 2d6:	c3                   	ret    
+ 2d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2de:	66 90                	xchg   %ax,%ax
+ 2e0:	31 c9                	xor    %ecx,%ecx
+ 2e2:	5d                   	pop    %ebp
+ 2e3:	89 c8                	mov    %ecx,%eax
+ 2e5:	c3                   	ret    
+ 2e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <memset>:
+ 2f0:	f3 0f 1e fb          	endbr32 
+ 2f4:	55                   	push   %ebp
+ 2f5:	89 e5                	mov    %esp,%ebp
+ 2f7:	57                   	push   %edi
+ 2f8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 2fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 301:	89 d7                	mov    %edx,%edi
+ 303:	fc                   	cld    
+ 304:	f3 aa                	rep stos %al,%es:(%edi)
+ 306:	89 d0                	mov    %edx,%eax
+ 308:	5f                   	pop    %edi
+ 309:	5d                   	pop    %ebp
+ 30a:	c3                   	ret    
+ 30b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 30f:	90                   	nop
+
+00000310 <strchr>:
+ 310:	f3 0f 1e fb          	endbr32 
+ 314:	55                   	push   %ebp
+ 315:	89 e5                	mov    %esp,%ebp
+ 317:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+ 31e:	0f b6 10             	movzbl (%eax),%edx
+ 321:	84 d2                	test   %dl,%dl
+ 323:	75 16                	jne    33b <strchr+0x2b>
+ 325:	eb 21                	jmp    348 <strchr+0x38>
+ 327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32e:	66 90                	xchg   %ax,%ax
+ 330:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 334:	83 c0 01             	add    $0x1,%eax
+ 337:	84 d2                	test   %dl,%dl
+ 339:	74 0d                	je     348 <strchr+0x38>
+ 33b:	38 d1                	cmp    %dl,%cl
+ 33d:	75 f1                	jne    330 <strchr+0x20>
+ 33f:	5d                   	pop    %ebp
+ 340:	c3                   	ret    
+ 341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 348:	31 c0                	xor    %eax,%eax
+ 34a:	5d                   	pop    %ebp
+ 34b:	c3                   	ret    
+ 34c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000350 <gets>:
+ 350:	f3 0f 1e fb          	endbr32 
+ 354:	55                   	push   %ebp
+ 355:	89 e5                	mov    %esp,%ebp
+ 357:	57                   	push   %edi
+ 358:	56                   	push   %esi
+ 359:	31 f6                	xor    %esi,%esi
+ 35b:	53                   	push   %ebx
+ 35c:	89 f3                	mov    %esi,%ebx
+ 35e:	83 ec 1c             	sub    $0x1c,%esp
+ 361:	8b 7d 08             	mov    0x8(%ebp),%edi
+ 364:	eb 33                	jmp    399 <gets+0x49>
+ 366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36d:	8d 76 00             	lea    0x0(%esi),%esi
+ 370:	83 ec 04             	sub    $0x4,%esp
+ 373:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 376:	6a 01                	push   $0x1
+ 378:	50                   	push   %eax
+ 379:	6a 00                	push   $0x0
+ 37b:	e8 2b 01 00 00       	call   4ab <read>
+ 380:	83 c4 10             	add    $0x10,%esp
+ 383:	85 c0                	test   %eax,%eax
+ 385:	7e 1c                	jle    3a3 <gets+0x53>
+ 387:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 38b:	83 c7 01             	add    $0x1,%edi
+ 38e:	88 47 ff             	mov    %al,-0x1(%edi)
+ 391:	3c 0a                	cmp    $0xa,%al
+ 393:	74 23                	je     3b8 <gets+0x68>
+ 395:	3c 0d                	cmp    $0xd,%al
+ 397:	74 1f                	je     3b8 <gets+0x68>
+ 399:	83 c3 01             	add    $0x1,%ebx
+ 39c:	89 fe                	mov    %edi,%esi
+ 39e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 3a1:	7c cd                	jl     370 <gets+0x20>
+ 3a3:	89 f3                	mov    %esi,%ebx
+ 3a5:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3a8:	c6 03 00             	movb   $0x0,(%ebx)
+ 3ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ae:	5b                   	pop    %ebx
+ 3af:	5e                   	pop    %esi
+ 3b0:	5f                   	pop    %edi
+ 3b1:	5d                   	pop    %ebp
+ 3b2:	c3                   	ret    
+ 3b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3b7:	90                   	nop
+ 3b8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 3bb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3be:	01 de                	add    %ebx,%esi
+ 3c0:	89 f3                	mov    %esi,%ebx
+ 3c2:	c6 03 00             	movb   $0x0,(%ebx)
+ 3c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3c8:	5b                   	pop    %ebx
+ 3c9:	5e                   	pop    %esi
+ 3ca:	5f                   	pop    %edi
+ 3cb:	5d                   	pop    %ebp
+ 3cc:	c3                   	ret    
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000003d0 <stat>:
+ 3d0:	f3 0f 1e fb          	endbr32 
+ 3d4:	55                   	push   %ebp
+ 3d5:	89 e5                	mov    %esp,%ebp
+ 3d7:	56                   	push   %esi
+ 3d8:	53                   	push   %ebx
+ 3d9:	83 ec 08             	sub    $0x8,%esp
+ 3dc:	6a 00                	push   $0x0
+ 3de:	ff 75 08             	pushl  0x8(%ebp)
+ 3e1:	e8 ed 00 00 00       	call   4d3 <open>
+ 3e6:	83 c4 10             	add    $0x10,%esp
+ 3e9:	85 c0                	test   %eax,%eax
+ 3eb:	78 2b                	js     418 <stat+0x48>
+ 3ed:	83 ec 08             	sub    $0x8,%esp
+ 3f0:	ff 75 0c             	pushl  0xc(%ebp)
+ 3f3:	89 c3                	mov    %eax,%ebx
+ 3f5:	50                   	push   %eax
+ 3f6:	e8 f0 00 00 00       	call   4eb <fstat>
+ 3fb:	89 1c 24             	mov    %ebx,(%esp)
+ 3fe:	89 c6                	mov    %eax,%esi
+ 400:	e8 b6 00 00 00       	call   4bb <close>
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 40b:	89 f0                	mov    %esi,%eax
+ 40d:	5b                   	pop    %ebx
+ 40e:	5e                   	pop    %esi
+ 40f:	5d                   	pop    %ebp
+ 410:	c3                   	ret    
+ 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 418:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 41d:	eb e9                	jmp    408 <stat+0x38>
+ 41f:	90                   	nop
+
+00000420 <atoi>:
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	53                   	push   %ebx
+ 428:	8b 55 08             	mov    0x8(%ebp),%edx
+ 42b:	0f be 02             	movsbl (%edx),%eax
+ 42e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 431:	80 f9 09             	cmp    $0x9,%cl
+ 434:	b9 00 00 00 00       	mov    $0x0,%ecx
+ 439:	77 1a                	ja     455 <atoi+0x35>
+ 43b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+ 440:	83 c2 01             	add    $0x1,%edx
+ 443:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 446:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+ 44a:	0f be 02             	movsbl (%edx),%eax
+ 44d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 450:	80 fb 09             	cmp    $0x9,%bl
+ 453:	76 eb                	jbe    440 <atoi+0x20>
+ 455:	89 c8                	mov    %ecx,%eax
+ 457:	5b                   	pop    %ebx
+ 458:	5d                   	pop    %ebp
+ 459:	c3                   	ret    
+ 45a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000460 <memmove>:
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	8b 45 10             	mov    0x10(%ebp),%eax
+ 46b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 46e:	56                   	push   %esi
+ 46f:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 472:	85 c0                	test   %eax,%eax
+ 474:	7e 0f                	jle    485 <memmove+0x25>
+ 476:	01 d0                	add    %edx,%eax
+ 478:	89 d7                	mov    %edx,%edi
+ 47a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 480:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+ 481:	39 f8                	cmp    %edi,%eax
+ 483:	75 fb                	jne    480 <memmove+0x20>
+ 485:	5e                   	pop    %esi
+ 486:	89 d0                	mov    %edx,%eax
+ 488:	5f                   	pop    %edi
+ 489:	5d                   	pop    %ebp
+ 48a:	c3                   	ret    
+
+0000048b <fork>:
+ 48b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <exit>:
+ 493:	b8 02 00 00 00       	mov    $0x2,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <wait>:
+ 49b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <pipe>:
+ 4a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <read>:
+ 4ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <write>:
+ 4b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <close>:
+ 4bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+
+000004c3 <kill>:
+ 4c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 4c8:	cd 40                	int    $0x40
+ 4ca:	c3                   	ret    
+
+000004cb <exec>:
+ 4cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 4d0:	cd 40                	int    $0x40
+ 4d2:	c3                   	ret    
+
+000004d3 <open>:
+ 4d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 4d8:	cd 40                	int    $0x40
+ 4da:	c3                   	ret    
+
+000004db <mknod>:
+ 4db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 4e0:	cd 40                	int    $0x40
+ 4e2:	c3                   	ret    
+
+000004e3 <unlink>:
+ 4e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 4e8:	cd 40                	int    $0x40
+ 4ea:	c3                   	ret    
+
+000004eb <fstat>:
+ 4eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 4f0:	cd 40                	int    $0x40
+ 4f2:	c3                   	ret    
+
+000004f3 <link>:
+ 4f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 4f8:	cd 40                	int    $0x40
+ 4fa:	c3                   	ret    
+
+000004fb <mkdir>:
+ 4fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 500:	cd 40                	int    $0x40
+ 502:	c3                   	ret    
+
+00000503 <chdir>:
+ 503:	b8 09 00 00 00       	mov    $0x9,%eax
+ 508:	cd 40                	int    $0x40
+ 50a:	c3                   	ret    
+
+0000050b <dup>:
+ 50b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 510:	cd 40                	int    $0x40
+ 512:	c3                   	ret    
+
+00000513 <getpid>:
+ 513:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 518:	cd 40                	int    $0x40
+ 51a:	c3                   	ret    
+
+0000051b <sbrk>:
+ 51b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 520:	cd 40                	int    $0x40
+ 522:	c3                   	ret    
+
+00000523 <sleep>:
+ 523:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 528:	cd 40                	int    $0x40
+ 52a:	c3                   	ret    
+
+0000052b <uptime>:
+ 52b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 530:	cd 40                	int    $0x40
+ 532:	c3                   	ret    
+
+00000533 <getNumProc>:
+ 533:	b8 16 00 00 00       	mov    $0x16,%eax
+ 538:	cd 40                	int    $0x40
+ 53a:	c3                   	ret    
+
+0000053b <getMaxPID>:
+ 53b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 540:	cd 40                	int    $0x40
+ 542:	c3                   	ret    
+
+00000543 <getProcInfo>:
+ 543:	b8 18 00 00 00       	mov    $0x18,%eax
+ 548:	cd 40                	int    $0x40
+ 54a:	c3                   	ret    
+
+0000054b <set_burst_time>:
+ 54b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 550:	cd 40                	int    $0x40
+ 552:	c3                   	ret    
+
+00000553 <get_burst_time>:
+ 553:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 558:	cd 40                	int    $0x40
+ 55a:	c3                   	ret    
+
+0000055b <getCurrentInfo>:
+ 55b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 560:	cd 40                	int    $0x40
+ 562:	c3                   	ret    
+
+00000563 <getCurrentPID>:
+ 563:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 568:	cd 40                	int    $0x40
+ 56a:	c3                   	ret    
+ 56b:	66 90                	xchg   %ax,%ax
+ 56d:	66 90                	xchg   %ax,%ax
+ 56f:	90                   	nop
+
+00000570 <printint>:
+ 570:	55                   	push   %ebp
+ 571:	89 e5                	mov    %esp,%ebp
+ 573:	57                   	push   %edi
+ 574:	56                   	push   %esi
+ 575:	53                   	push   %ebx
+ 576:	83 ec 3c             	sub    $0x3c,%esp
+ 579:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 57c:	89 d1                	mov    %edx,%ecx
+ 57e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 581:	85 d2                	test   %edx,%edx
+ 583:	0f 89 7f 00 00 00    	jns    608 <printint+0x98>
+ 589:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 58d:	74 79                	je     608 <printint+0x98>
+ 58f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 596:	f7 d9                	neg    %ecx
+ 598:	31 db                	xor    %ebx,%ebx
+ 59a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+ 5a0:	89 c8                	mov    %ecx,%eax
+ 5a2:	31 d2                	xor    %edx,%edx
+ 5a4:	89 cf                	mov    %ecx,%edi
+ 5a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 5a9:	0f b6 92 c4 0c 00 00 	movzbl 0xcc4(%edx),%edx
+ 5b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 5b3:	89 d8                	mov    %ebx,%eax
+ 5b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 5b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 5bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 5be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 5c1:	76 dd                	jbe    5a0 <printint+0x30>
+ 5c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 5c6:	85 c9                	test   %ecx,%ecx
+ 5c8:	74 0c                	je     5d6 <printint+0x66>
+ 5ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 5cf:	89 d8                	mov    %ebx,%eax
+ 5d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 5d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 5d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 5dd:	eb 07                	jmp    5e6 <printint+0x76>
+ 5df:	90                   	nop
+ 5e0:	0f b6 13             	movzbl (%ebx),%edx
+ 5e3:	83 eb 01             	sub    $0x1,%ebx
+ 5e6:	83 ec 04             	sub    $0x4,%esp
+ 5e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 5ec:	6a 01                	push   $0x1
+ 5ee:	56                   	push   %esi
+ 5ef:	57                   	push   %edi
+ 5f0:	e8 be fe ff ff       	call   4b3 <write>
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	39 de                	cmp    %ebx,%esi
+ 5fa:	75 e4                	jne    5e0 <printint+0x70>
+ 5fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5ff:	5b                   	pop    %ebx
+ 600:	5e                   	pop    %esi
+ 601:	5f                   	pop    %edi
+ 602:	5d                   	pop    %ebp
+ 603:	c3                   	ret    
+ 604:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 608:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 60f:	eb 87                	jmp    598 <printint+0x28>
+ 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 618:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
+
+00000620 <printf>:
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
+ 625:	89 e5                	mov    %esp,%ebp
+ 627:	57                   	push   %edi
+ 628:	56                   	push   %esi
+ 629:	53                   	push   %ebx
+ 62a:	83 ec 2c             	sub    $0x2c,%esp
+ 62d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 630:	0f b6 1e             	movzbl (%esi),%ebx
+ 633:	84 db                	test   %bl,%bl
+ 635:	0f 84 b4 00 00 00    	je     6ef <printf+0xcf>
+ 63b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 63e:	83 c6 01             	add    $0x1,%esi
+ 641:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 644:	31 d2                	xor    %edx,%edx
+ 646:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 649:	eb 33                	jmp    67e <printf+0x5e>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+ 653:	ba 25 00 00 00       	mov    $0x25,%edx
+ 658:	83 f8 25             	cmp    $0x25,%eax
+ 65b:	74 17                	je     674 <printf+0x54>
+ 65d:	83 ec 04             	sub    $0x4,%esp
+ 660:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 663:	6a 01                	push   $0x1
+ 665:	57                   	push   %edi
+ 666:	ff 75 08             	pushl  0x8(%ebp)
+ 669:	e8 45 fe ff ff       	call   4b3 <write>
+ 66e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 671:	83 c4 10             	add    $0x10,%esp
+ 674:	0f b6 1e             	movzbl (%esi),%ebx
+ 677:	83 c6 01             	add    $0x1,%esi
+ 67a:	84 db                	test   %bl,%bl
+ 67c:	74 71                	je     6ef <printf+0xcf>
+ 67e:	0f be cb             	movsbl %bl,%ecx
+ 681:	0f b6 c3             	movzbl %bl,%eax
+ 684:	85 d2                	test   %edx,%edx
+ 686:	74 c8                	je     650 <printf+0x30>
+ 688:	83 fa 25             	cmp    $0x25,%edx
+ 68b:	75 e7                	jne    674 <printf+0x54>
+ 68d:	83 f8 64             	cmp    $0x64,%eax
+ 690:	0f 84 9a 00 00 00    	je     730 <printf+0x110>
+ 696:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 69c:	83 f9 70             	cmp    $0x70,%ecx
+ 69f:	74 5f                	je     700 <printf+0xe0>
+ 6a1:	83 f8 73             	cmp    $0x73,%eax
+ 6a4:	0f 84 d6 00 00 00    	je     780 <printf+0x160>
+ 6aa:	83 f8 63             	cmp    $0x63,%eax
+ 6ad:	0f 84 8d 00 00 00    	je     740 <printf+0x120>
+ 6b3:	83 f8 25             	cmp    $0x25,%eax
+ 6b6:	0f 84 b4 00 00 00    	je     770 <printf+0x150>
+ 6bc:	83 ec 04             	sub    $0x4,%esp
+ 6bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 6c3:	6a 01                	push   $0x1
+ 6c5:	57                   	push   %edi
+ 6c6:	ff 75 08             	pushl  0x8(%ebp)
+ 6c9:	e8 e5 fd ff ff       	call   4b3 <write>
+ 6ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 6d1:	83 c4 0c             	add    $0xc,%esp
+ 6d4:	6a 01                	push   $0x1
+ 6d6:	83 c6 01             	add    $0x1,%esi
+ 6d9:	57                   	push   %edi
+ 6da:	ff 75 08             	pushl  0x8(%ebp)
+ 6dd:	e8 d1 fd ff ff       	call   4b3 <write>
+ 6e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 6e6:	83 c4 10             	add    $0x10,%esp
+ 6e9:	31 d2                	xor    %edx,%edx
+ 6eb:	84 db                	test   %bl,%bl
+ 6ed:	75 8f                	jne    67e <printf+0x5e>
+ 6ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6f2:	5b                   	pop    %ebx
+ 6f3:	5e                   	pop    %esi
+ 6f4:	5f                   	pop    %edi
+ 6f5:	5d                   	pop    %ebp
+ 6f6:	c3                   	ret    
+ 6f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6fe:	66 90                	xchg   %ax,%ax
+ 700:	83 ec 0c             	sub    $0xc,%esp
+ 703:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 708:	6a 00                	push   $0x0
+ 70a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 70d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 710:	8b 13                	mov    (%ebx),%edx
+ 712:	e8 59 fe ff ff       	call   570 <printint>
+ 717:	89 d8                	mov    %ebx,%eax
+ 719:	83 c4 10             	add    $0x10,%esp
+ 71c:	31 d2                	xor    %edx,%edx
+ 71e:	83 c0 04             	add    $0x4,%eax
+ 721:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 724:	e9 4b ff ff ff       	jmp    674 <printf+0x54>
+ 729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 730:	83 ec 0c             	sub    $0xc,%esp
+ 733:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 738:	6a 01                	push   $0x1
+ 73a:	eb ce                	jmp    70a <printf+0xea>
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 740:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 743:	83 ec 04             	sub    $0x4,%esp
+ 746:	8b 03                	mov    (%ebx),%eax
+ 748:	6a 01                	push   $0x1
+ 74a:	83 c3 04             	add    $0x4,%ebx
+ 74d:	57                   	push   %edi
+ 74e:	ff 75 08             	pushl  0x8(%ebp)
+ 751:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 754:	e8 5a fd ff ff       	call   4b3 <write>
+ 759:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	31 d2                	xor    %edx,%edx
+ 761:	e9 0e ff ff ff       	jmp    674 <printf+0x54>
+ 766:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76d:	8d 76 00             	lea    0x0(%esi),%esi
+ 770:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 773:	83 ec 04             	sub    $0x4,%esp
+ 776:	e9 59 ff ff ff       	jmp    6d4 <printf+0xb4>
+ 77b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 77f:	90                   	nop
+ 780:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 783:	8b 18                	mov    (%eax),%ebx
+ 785:	83 c0 04             	add    $0x4,%eax
+ 788:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 78b:	85 db                	test   %ebx,%ebx
+ 78d:	74 17                	je     7a6 <printf+0x186>
+ 78f:	0f b6 03             	movzbl (%ebx),%eax
+ 792:	31 d2                	xor    %edx,%edx
+ 794:	84 c0                	test   %al,%al
+ 796:	0f 84 d8 fe ff ff    	je     674 <printf+0x54>
+ 79c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 79f:	89 de                	mov    %ebx,%esi
+ 7a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 7a4:	eb 1a                	jmp    7c0 <printf+0x1a0>
+ 7a6:	bb ba 0c 00 00       	mov    $0xcba,%ebx
+ 7ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 7ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 7b3:	89 de                	mov    %ebx,%esi
+ 7b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 7b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7bf:	90                   	nop
+ 7c0:	83 ec 04             	sub    $0x4,%esp
+ 7c3:	83 c6 01             	add    $0x1,%esi
+ 7c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 7c9:	6a 01                	push   $0x1
+ 7cb:	57                   	push   %edi
+ 7cc:	53                   	push   %ebx
+ 7cd:	e8 e1 fc ff ff       	call   4b3 <write>
+ 7d2:	0f b6 06             	movzbl (%esi),%eax
+ 7d5:	83 c4 10             	add    $0x10,%esp
+ 7d8:	84 c0                	test   %al,%al
+ 7da:	75 e4                	jne    7c0 <printf+0x1a0>
+ 7dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+ 7df:	31 d2                	xor    %edx,%edx
+ 7e1:	e9 8e fe ff ff       	jmp    674 <printf+0x54>
+ 7e6:	66 90                	xchg   %ax,%ax
+ 7e8:	66 90                	xchg   %ax,%ax
+ 7ea:	66 90                	xchg   %ax,%ax
+ 7ec:	66 90                	xchg   %ax,%ax
+ 7ee:	66 90                	xchg   %ax,%ax
+
+000007f0 <free>:
+ 7f0:	f3 0f 1e fb          	endbr32 
+ 7f4:	55                   	push   %ebp
+ 7f5:	a1 20 10 00 00       	mov    0x1020,%eax
+ 7fa:	89 e5                	mov    %esp,%ebp
+ 7fc:	57                   	push   %edi
+ 7fd:	56                   	push   %esi
+ 7fe:	53                   	push   %ebx
+ 7ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 802:	8b 10                	mov    (%eax),%edx
+ 804:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 807:	39 c8                	cmp    %ecx,%eax
+ 809:	73 15                	jae    820 <free+0x30>
+ 80b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 80f:	90                   	nop
+ 810:	39 d1                	cmp    %edx,%ecx
+ 812:	72 14                	jb     828 <free+0x38>
+ 814:	39 d0                	cmp    %edx,%eax
+ 816:	73 10                	jae    828 <free+0x38>
+ 818:	89 d0                	mov    %edx,%eax
+ 81a:	8b 10                	mov    (%eax),%edx
+ 81c:	39 c8                	cmp    %ecx,%eax
+ 81e:	72 f0                	jb     810 <free+0x20>
+ 820:	39 d0                	cmp    %edx,%eax
+ 822:	72 f4                	jb     818 <free+0x28>
+ 824:	39 d1                	cmp    %edx,%ecx
+ 826:	73 f0                	jae    818 <free+0x28>
+ 828:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 82b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 82e:	39 fa                	cmp    %edi,%edx
+ 830:	74 1e                	je     850 <free+0x60>
+ 832:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 835:	8b 50 04             	mov    0x4(%eax),%edx
+ 838:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 83b:	39 f1                	cmp    %esi,%ecx
+ 83d:	74 28                	je     867 <free+0x77>
+ 83f:	89 08                	mov    %ecx,(%eax)
+ 841:	5b                   	pop    %ebx
+ 842:	a3 20 10 00 00       	mov    %eax,0x1020
+ 847:	5e                   	pop    %esi
+ 848:	5f                   	pop    %edi
+ 849:	5d                   	pop    %ebp
+ 84a:	c3                   	ret    
+ 84b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 84f:	90                   	nop
+ 850:	03 72 04             	add    0x4(%edx),%esi
+ 853:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 856:	8b 10                	mov    (%eax),%edx
+ 858:	8b 12                	mov    (%edx),%edx
+ 85a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+ 85d:	8b 50 04             	mov    0x4(%eax),%edx
+ 860:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 863:	39 f1                	cmp    %esi,%ecx
+ 865:	75 d8                	jne    83f <free+0x4f>
+ 867:	03 53 fc             	add    -0x4(%ebx),%edx
+ 86a:	a3 20 10 00 00       	mov    %eax,0x1020
+ 86f:	89 50 04             	mov    %edx,0x4(%eax)
+ 872:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 875:	89 10                	mov    %edx,(%eax)
+ 877:	5b                   	pop    %ebx
+ 878:	5e                   	pop    %esi
+ 879:	5f                   	pop    %edi
+ 87a:	5d                   	pop    %ebp
+ 87b:	c3                   	ret    
+ 87c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000880 <malloc>:
+ 880:	f3 0f 1e fb          	endbr32 
+ 884:	55                   	push   %ebp
+ 885:	89 e5                	mov    %esp,%ebp
+ 887:	57                   	push   %edi
+ 888:	56                   	push   %esi
+ 889:	53                   	push   %ebx
+ 88a:	83 ec 1c             	sub    $0x1c,%esp
+ 88d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 890:	8b 3d 20 10 00 00    	mov    0x1020,%edi
+ 896:	8d 70 07             	lea    0x7(%eax),%esi
+ 899:	c1 ee 03             	shr    $0x3,%esi
+ 89c:	83 c6 01             	add    $0x1,%esi
+ 89f:	85 ff                	test   %edi,%edi
+ 8a1:	0f 84 a9 00 00 00    	je     950 <malloc+0xd0>
+ 8a7:	8b 07                	mov    (%edi),%eax
+ 8a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 8ac:	39 f1                	cmp    %esi,%ecx
+ 8ae:	73 6d                	jae    91d <malloc+0x9d>
+ 8b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 8b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 8bb:	0f 43 de             	cmovae %esi,%ebx
+ 8be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 8c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 8c8:	eb 17                	jmp    8e1 <malloc+0x61>
+ 8ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 8d0:	8b 10                	mov    (%eax),%edx
+ 8d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 8d5:	39 f1                	cmp    %esi,%ecx
+ 8d7:	73 4f                	jae    928 <malloc+0xa8>
+ 8d9:	8b 3d 20 10 00 00    	mov    0x1020,%edi
+ 8df:	89 d0                	mov    %edx,%eax
+ 8e1:	39 c7                	cmp    %eax,%edi
+ 8e3:	75 eb                	jne    8d0 <malloc+0x50>
+ 8e5:	83 ec 0c             	sub    $0xc,%esp
+ 8e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 8eb:	e8 2b fc ff ff       	call   51b <sbrk>
+ 8f0:	83 c4 10             	add    $0x10,%esp
+ 8f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 8f6:	74 1b                	je     913 <malloc+0x93>
+ 8f8:	89 58 04             	mov    %ebx,0x4(%eax)
+ 8fb:	83 ec 0c             	sub    $0xc,%esp
+ 8fe:	83 c0 08             	add    $0x8,%eax
+ 901:	50                   	push   %eax
+ 902:	e8 e9 fe ff ff       	call   7f0 <free>
+ 907:	a1 20 10 00 00       	mov    0x1020,%eax
+ 90c:	83 c4 10             	add    $0x10,%esp
+ 90f:	85 c0                	test   %eax,%eax
+ 911:	75 bd                	jne    8d0 <malloc+0x50>
+ 913:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 916:	31 c0                	xor    %eax,%eax
+ 918:	5b                   	pop    %ebx
+ 919:	5e                   	pop    %esi
+ 91a:	5f                   	pop    %edi
+ 91b:	5d                   	pop    %ebp
+ 91c:	c3                   	ret    
+ 91d:	89 c2                	mov    %eax,%edx
+ 91f:	89 f8                	mov    %edi,%eax
+ 921:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 928:	39 ce                	cmp    %ecx,%esi
+ 92a:	74 54                	je     980 <malloc+0x100>
+ 92c:	29 f1                	sub    %esi,%ecx
+ 92e:	89 4a 04             	mov    %ecx,0x4(%edx)
+ 931:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+ 934:	89 72 04             	mov    %esi,0x4(%edx)
+ 937:	a3 20 10 00 00       	mov    %eax,0x1020
+ 93c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 93f:	8d 42 08             	lea    0x8(%edx),%eax
+ 942:	5b                   	pop    %ebx
+ 943:	5e                   	pop    %esi
+ 944:	5f                   	pop    %edi
+ 945:	5d                   	pop    %ebp
+ 946:	c3                   	ret    
+ 947:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 94e:	66 90                	xchg   %ax,%ax
+ 950:	c7 05 20 10 00 00 24 	movl   $0x1024,0x1020
+ 957:	10 00 00 
+ 95a:	bf 24 10 00 00       	mov    $0x1024,%edi
+ 95f:	c7 05 24 10 00 00 24 	movl   $0x1024,0x1024
+ 966:	10 00 00 
+ 969:	89 f8                	mov    %edi,%eax
+ 96b:	c7 05 28 10 00 00 00 	movl   $0x0,0x1028
+ 972:	00 00 00 
+ 975:	e9 36 ff ff ff       	jmp    8b0 <malloc+0x30>
+ 97a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 980:	8b 0a                	mov    (%edx),%ecx
+ 982:	89 08                	mov    %ecx,(%eax)
+ 984:	eb b1                	jmp    937 <malloc+0xb7>
+ 986:	66 90                	xchg   %ax,%ax
+ 988:	66 90                	xchg   %ax,%ax
+ 98a:	66 90                	xchg   %ax,%ax
+ 98c:	66 90                	xchg   %ax,%ax
+ 98e:	66 90                	xchg   %ax,%ax
+
+00000990 <sgenrand>:
+ 990:	f3 0f 1e fb          	endbr32 
+ 994:	55                   	push   %ebp
+ 995:	b8 44 10 00 00       	mov    $0x1044,%eax
+ 99a:	89 e5                	mov    %esp,%ebp
+ 99c:	8b 55 08             	mov    0x8(%ebp),%edx
+ 99f:	89 15 40 10 00 00    	mov    %edx,0x1040
+ 9a5:	eb 0c                	jmp    9b3 <sgenrand+0x23>
+ 9a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9ae:	66 90                	xchg   %ax,%ax
+ 9b0:	83 c0 04             	add    $0x4,%eax
+ 9b3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 9b9:	89 10                	mov    %edx,(%eax)
+ 9bb:	3d fc 19 00 00       	cmp    $0x19fc,%eax
+ 9c0:	75 ee                	jne    9b0 <sgenrand+0x20>
+ 9c2:	c7 05 08 10 00 00 70 	movl   $0x270,0x1008
+ 9c9:	02 00 00 
+ 9cc:	5d                   	pop    %ebp
+ 9cd:	c3                   	ret    
+ 9ce:	66 90                	xchg   %ax,%ax
+
+000009d0 <genrand>:
+ 9d0:	f3 0f 1e fb          	endbr32 
+ 9d4:	a1 08 10 00 00       	mov    0x1008,%eax
+ 9d9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 9de:	7f 3c                	jg     a1c <genrand+0x4c>
+ 9e0:	8d 50 01             	lea    0x1(%eax),%edx
+ 9e3:	8b 04 85 40 10 00 00 	mov    0x1040(,%eax,4),%eax
+ 9ea:	89 15 08 10 00 00    	mov    %edx,0x1008
+ 9f0:	89 c2                	mov    %eax,%edx
+ 9f2:	c1 ea 0b             	shr    $0xb,%edx
+ 9f5:	31 c2                	xor    %eax,%edx
+ 9f7:	89 d0                	mov    %edx,%eax
+ 9f9:	c1 e0 07             	shl    $0x7,%eax
+ 9fc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ a01:	31 c2                	xor    %eax,%edx
+ a03:	89 d0                	mov    %edx,%eax
+ a05:	c1 e0 0f             	shl    $0xf,%eax
+ a08:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ a0d:	31 d0                	xor    %edx,%eax
+ a0f:	89 c2                	mov    %eax,%edx
+ a11:	c1 ea 12             	shr    $0x12,%edx
+ a14:	31 d0                	xor    %edx,%eax
+ a16:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+ a1b:	c3                   	ret    
+ a1c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ a21:	0f 84 d2 00 00 00    	je     af9 <genrand+0x129>
+ a27:	31 c0                	xor    %eax,%eax
+ a29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a30:	8b 0c 85 40 10 00 00 	mov    0x1040(,%eax,4),%ecx
+ a37:	83 c0 01             	add    $0x1,%eax
+ a3a:	8b 14 85 40 10 00 00 	mov    0x1040(,%eax,4),%edx
+ a41:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a47:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a4d:	09 ca                	or     %ecx,%edx
+ a4f:	89 d1                	mov    %edx,%ecx
+ a51:	83 e2 01             	and    $0x1,%edx
+ a54:	d1 e9                	shr    %ecx
+ a56:	33 0c 85 70 16 00 00 	xor    0x1670(,%eax,4),%ecx
+ a5d:	33 0c 95 d8 0c 00 00 	xor    0xcd8(,%edx,4),%ecx
+ a64:	89 0c 85 3c 10 00 00 	mov    %ecx,0x103c(,%eax,4)
+ a6b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ a70:	75 be                	jne    a30 <genrand+0x60>
+ a72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a78:	8b 0c 85 40 10 00 00 	mov    0x1040(,%eax,4),%ecx
+ a7f:	83 c0 01             	add    $0x1,%eax
+ a82:	8b 14 85 40 10 00 00 	mov    0x1040(,%eax,4),%edx
+ a89:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a8f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a95:	09 ca                	or     %ecx,%edx
+ a97:	89 d1                	mov    %edx,%ecx
+ a99:	83 e2 01             	and    $0x1,%edx
+ a9c:	d1 e9                	shr    %ecx
+ a9e:	33 0c 85 b0 0c 00 00 	xor    0xcb0(,%eax,4),%ecx
+ aa5:	33 0c 95 d8 0c 00 00 	xor    0xcd8(,%edx,4),%ecx
+ aac:	89 0c 85 3c 10 00 00 	mov    %ecx,0x103c(,%eax,4)
+ ab3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ ab8:	75 be                	jne    a78 <genrand+0xa8>
+ aba:	a1 40 10 00 00       	mov    0x1040,%eax
+ abf:	8b 0d fc 19 00 00    	mov    0x19fc,%ecx
+ ac5:	89 c2                	mov    %eax,%edx
+ ac7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ acd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ ad3:	09 d1                	or     %edx,%ecx
+ ad5:	89 ca                	mov    %ecx,%edx
+ ad7:	83 e1 01             	and    $0x1,%ecx
+ ada:	d1 ea                	shr    %edx
+ adc:	33 15 70 16 00 00    	xor    0x1670,%edx
+ ae2:	33 14 8d d8 0c 00 00 	xor    0xcd8(,%ecx,4),%edx
+ ae9:	89 15 fc 19 00 00    	mov    %edx,0x19fc
+ aef:	ba 01 00 00 00       	mov    $0x1,%edx
+ af4:	e9 f1 fe ff ff       	jmp    9ea <genrand+0x1a>
+ af9:	b8 44 10 00 00       	mov    $0x1044,%eax
+ afe:	b9 fc 19 00 00       	mov    $0x19fc,%ecx
+ b03:	ba 05 11 00 00       	mov    $0x1105,%edx
+ b08:	c7 05 40 10 00 00 05 	movl   $0x1105,0x1040
+ b0f:	11 00 00 
+ b12:	eb 07                	jmp    b1b <genrand+0x14b>
+ b14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ b18:	83 c0 04             	add    $0x4,%eax
+ b1b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ b21:	89 10                	mov    %edx,(%eax)
+ b23:	39 c1                	cmp    %eax,%ecx
+ b25:	75 f1                	jne    b18 <genrand+0x148>
+ b27:	e9 fb fe ff ff       	jmp    a27 <genrand+0x57>
+ b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000b30 <random_at_most>:
+ b30:	f3 0f 1e fb          	endbr32 
+ b34:	55                   	push   %ebp
+ b35:	31 d2                	xor    %edx,%edx
+ b37:	89 e5                	mov    %esp,%ebp
+ b39:	56                   	push   %esi
+ b3a:	8b 45 08             	mov    0x8(%ebp),%eax
+ b3d:	53                   	push   %ebx
+ b3e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ b43:	8d 48 01             	lea    0x1(%eax),%ecx
+ b46:	89 d8                	mov    %ebx,%eax
+ b48:	f7 f1                	div    %ecx
+ b4a:	89 c6                	mov    %eax,%esi
+ b4c:	29 d3                	sub    %edx,%ebx
+ b4e:	66 90                	xchg   %ax,%ax
+ b50:	e8 7b fe ff ff       	call   9d0 <genrand>
+ b55:	39 d8                	cmp    %ebx,%eax
+ b57:	73 f7                	jae    b50 <random_at_most+0x20>
+ b59:	31 d2                	xor    %edx,%edx
+ b5b:	5b                   	pop    %ebx
+ b5c:	f7 f6                	div    %esi
+ b5e:	5e                   	pop    %esi
+ b5f:	5d                   	pop    %ebp
+ b60:	c3                   	ret    
+ b61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ b68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ b6f:	90                   	nop
+
+00000b70 <randomrange>:
+ b70:	f3 0f 1e fb          	endbr32 
+ b74:	55                   	push   %ebp
+ b75:	89 e5                	mov    %esp,%ebp
+ b77:	57                   	push   %edi
+ b78:	56                   	push   %esi
+ b79:	53                   	push   %ebx
+ b7a:	83 ec 0c             	sub    $0xc,%esp
+ b7d:	8b 75 08             	mov    0x8(%ebp),%esi
+ b80:	8b 45 0c             	mov    0xc(%ebp),%eax
+ b83:	39 f0                	cmp    %esi,%eax
+ b85:	7d 06                	jge    b8d <randomrange+0x1d>
+ b87:	89 f2                	mov    %esi,%edx
+ b89:	89 c6                	mov    %eax,%esi
+ b8b:	89 d0                	mov    %edx,%eax
+ b8d:	29 f0                	sub    %esi,%eax
+ b8f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ b94:	31 d2                	xor    %edx,%edx
+ b96:	8d 48 01             	lea    0x1(%eax),%ecx
+ b99:	89 d8                	mov    %ebx,%eax
+ b9b:	f7 f1                	div    %ecx
+ b9d:	89 c7                	mov    %eax,%edi
+ b9f:	29 d3                	sub    %edx,%ebx
+ ba1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ ba8:	e8 23 fe ff ff       	call   9d0 <genrand>
+ bad:	39 d8                	cmp    %ebx,%eax
+ baf:	73 f7                	jae    ba8 <randomrange+0x38>
+ bb1:	31 d2                	xor    %edx,%edx
+ bb3:	83 c4 0c             	add    $0xc,%esp
+ bb6:	f7 f7                	div    %edi
+ bb8:	5b                   	pop    %ebx
+ bb9:	01 f0                	add    %esi,%eax
+ bbb:	5e                   	pop    %esi
+ bbc:	5f                   	pop    %edi
+ bbd:	5d                   	pop    %ebp
+ bbe:	c3                   	ret    
diff -ruN xv6-public/test_scheduler.c xv6-public-partB_sjf/test_scheduler.c
--- xv6-public/test_scheduler.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/test_scheduler.c	2022-10-07 22:46:40.751238000 +0530
@@ -0,0 +1,81 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int add;
+
+int
+main(int argv, char* argc[]){
+
+	if(argv<2){
+		printf(1, "Incorrect format!\nFormat: test_scheduler <number of fork processes>\n");
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+
+	int burst_times[n];
+
+	for(int i=0;i<n;i++){
+		burst_times[i] = randomrange(1,500);
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+
+	for(int i=0;i<n;i++){
+		if(!fork()){
+
+			if(i%2){
+				// CPU Bound process
+				set_burst_time(burst_times[i]);
+				int x=0;
+
+				//program 1
+				for(int j=0;j<10000;j++){
+					for(int k=0;k<10000;k++){
+						if(j%4) x--;
+						else x++;
+					}
+				}
+
+				//program 2
+				for(int j=0;j<1000;j++){
+					for(int k=0;k<100000;k++){
+						x++;
+						if(x%6 >= 5) x--;
+					}
+				}
+				add = add + x;
+				struct processInfo info;
+				getCurrentInfo(&info);
+				int bt = get_burst_time();
+				printf(1, "\t%d \t CPU         %d             %d\n", getCurrentPID(), bt, info.numberContextSwitches);	
+				exit();	
+			} else {
+				// I/O Bound Process
+				set_burst_time(burst_times[i]);
+
+				//program 1
+				// for(int i=0;i<100;i++){
+				// 	sleep(1);
+				// }		
+
+				//program 2
+				for(int i=0;i<50;i++){
+					sleep(1);
+				}	
+				struct processInfo info;
+				getCurrentInfo(&info);
+				int bt = get_burst_time();
+				printf(1, "\t%d \t I/O         %d                   %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+				exit();
+
+			}
+		}
+	}
+
+	while(wait()!=-1);
+	exit();
+
+}
\ No newline at end of file
diff -ruN xv6-public/test_scheduler.d xv6-public-partB_sjf/test_scheduler.d
--- xv6-public/test_scheduler.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/test_scheduler.d	2022-10-07 23:09:17.562939379 +0530
@@ -0,0 +1,2 @@
+test_scheduler.o: test_scheduler.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/test_scheduler.o and xv6-public-partB_sjf/test_scheduler.o differ
diff -ruN xv6-public/test_scheduler.sym xv6-public-partB_sjf/test_scheduler.sym
--- xv6-public/test_scheduler.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/test_scheduler.sym	2022-10-07 23:09:17.586939584 +0530
@@ -0,0 +1,74 @@
+00000000 .text
+00000bc0 .rodata
+00000ce0 .eh_frame
+00001008 .data
+00001020 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_scheduler.c
+00000000 ulib.c
+00000000 printf.c
+00000570 printint
+00000cc4 digits.1105
+00000000 umalloc.c
+00001020 freep
+00001024 base
+00000000 random.c
+00001040 mt
+00001008 mti
+00000cd8 mag01.989
+00000230 strcpy
+00000990 sgenrand
+00000620 printf
+00000460 memmove
+000004db mknod
+00000350 gets
+00000513 getpid
+00000880 malloc
+00000523 sleep
+00000553 get_burst_time
+00000b30 random_at_most
+0000055b getCurrentInfo
+000004a3 pipe
+000004b3 write
+000004eb fstat
+000004c3 kill
+00001a00 add
+00000503 chdir
+000004cb exec
+0000049b wait
+000004ab read
+000004e3 unlink
+0000048b fork
+0000051b sbrk
+0000052b uptime
+0000100c __bss_start
+000002f0 memset
+00000000 main
+0000054b set_burst_time
+00000260 strcmp
+0000050b dup
+000009d0 genrand
+00000533 getNumProc
+00000543 getProcInfo
+000003d0 stat
+0000100c _edata
+00001a04 _end
+000004f3 link
+00000493 exit
+0000053b getMaxPID
+00000420 atoi
+000002b0 strlen
+000004d3 open
+00000310 strchr
+00000563 getCurrentPID
+00000b70 randomrange
+000004fb mkdir
+000004bb close
+000007f0 free
Binary files xv6-public/trapasm.o and xv6-public-partB_sjf/trapasm.o differ
diff -ruN xv6-public/trap.c xv6-public-partB_sjf/trap.c
--- xv6-public/trap.c	2022-10-06 22:50:49.453046000 +0530
+++ xv6-public-partB_sjf/trap.c	2022-10-07 23:04:07.384282553 +0530
@@ -102,9 +102,10 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER){
+          // yield();
+    //  }
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
diff -ruN xv6-public/trap.d xv6-public-partB_sjf/trap.d
--- xv6-public/trap.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/trap.d	2022-10-07 23:09:15.746923848 +0530
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files xv6-public/trap.o and xv6-public-partB_sjf/trap.o differ
diff -ruN xv6-public/uart.d xv6-public-partB_sjf/uart.d
--- xv6-public/uart.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/uart.d	2022-10-07 20:27:36.983054000 +0530
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files xv6-public/uart.o and xv6-public-partB_sjf/uart.o differ
diff -ruN xv6-public/ulib.d xv6-public-partB_sjf/ulib.d
--- xv6-public/ulib.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/ulib.d	2022-10-07 20:27:43.015107000 +0530
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ processInfo.h x86.h
Binary files xv6-public/ulib.o and xv6-public-partB_sjf/ulib.o differ
diff -ruN xv6-public/umalloc.d xv6-public-partB_sjf/umalloc.d
--- xv6-public/umalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/umalloc.d	2022-10-07 20:27:43.375110000 +0530
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h param.h
Binary files xv6-public/umalloc.o and xv6-public-partB_sjf/umalloc.o differ
diff -ruN xv6-public/user.h xv6-public-partB_sjf/user.h
--- xv6-public/user.h	2022-10-06 22:50:49.453046000 +0530
+++ xv6-public-partB_sjf/user.h	2022-10-07 18:03:35.251846000 +0530
@@ -1,6 +1,7 @@
 struct stat;
 struct rtcdate;
 
+#include "processInfo.h"
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
@@ -23,6 +24,13 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getNumProc(void);
+int getMaxPID(void);
+int getProcInfo(int, struct processInfo*);
+int set_burst_time(int);
+int get_burst_time();
+int getCurrentInfo(struct processInfo *);
+int getCurrentPID();
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -37,3 +45,4 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+int randomrange(int, int);
\ No newline at end of file
Binary files xv6-public/_usertests and xv6-public-partB_sjf/_usertests differ
diff -ruN xv6-public/usertests.asm xv6-public-partB_sjf/usertests.asm
--- xv6-public/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/usertests.asm	2022-10-07 20:27:45.019124000 +0530
@@ -0,0 +1,7001 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	f3 0f 1e fb          	endbr32 
+       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       8:	83 e4 f0             	and    $0xfffffff0,%esp
+       b:	ff 71 fc             	pushl  -0x4(%ecx)
+       e:	55                   	push   %ebp
+       f:	89 e5                	mov    %esp,%ebp
+      11:	51                   	push   %ecx
+      12:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      15:	68 9e 50 00 00       	push   $0x509e
+      1a:	6a 01                	push   $0x1
+      1c:	e8 ef 3a 00 00       	call   3b10 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      21:	59                   	pop    %ecx
+      22:	58                   	pop    %eax
+      23:	6a 00                	push   $0x0
+      25:	68 b2 50 00 00       	push   $0x50b2
+      2a:	e8 94 39 00 00       	call   39c3 <open>
+      2f:	83 c4 10             	add    $0x10,%esp
+      32:	85 c0                	test   %eax,%eax
+      34:	78 13                	js     49 <main+0x49>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      36:	52                   	push   %edx
+      37:	52                   	push   %edx
+      38:	68 1c 58 00 00       	push   $0x581c
+      3d:	6a 01                	push   $0x1
+      3f:	e8 cc 3a 00 00       	call   3b10 <printf>
+    exit();
+      44:	e8 3a 39 00 00       	call   3983 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      49:	50                   	push   %eax
+      4a:	50                   	push   %eax
+      4b:	68 00 02 00 00       	push   $0x200
+      50:	68 b2 50 00 00       	push   $0x50b2
+      55:	e8 69 39 00 00       	call   39c3 <open>
+      5a:	89 04 24             	mov    %eax,(%esp)
+      5d:	e8 49 39 00 00       	call   39ab <close>
+
+  argptest();
+      62:	e8 29 36 00 00       	call   3690 <argptest>
+  createdelete();
+      67:	e8 04 12 00 00       	call   1270 <createdelete>
+  linkunlink();
+      6c:	e8 df 1a 00 00       	call   1b50 <linkunlink>
+  concreate();
+      71:	e8 da 17 00 00       	call   1850 <concreate>
+  fourfiles();
+      76:	e8 f5 0f 00 00       	call   1070 <fourfiles>
+  sharedfd();
+      7b:	e8 30 0e 00 00       	call   eb0 <sharedfd>
+
+  bigargtest();
+      80:	e8 ab 32 00 00       	call   3330 <bigargtest>
+  bigwrite();
+      85:	e8 06 24 00 00       	call   2490 <bigwrite>
+  bigargtest();
+      8a:	e8 a1 32 00 00       	call   3330 <bigargtest>
+  bsstest();
+      8f:	e8 2c 32 00 00       	call   32c0 <bsstest>
+  sbrktest();
+      94:	e8 37 2d 00 00       	call   2dd0 <sbrktest>
+  validatetest();
+      99:	e8 62 31 00 00       	call   3200 <validatetest>
+
+  opentest();
+      9e:	e8 6d 03 00 00       	call   410 <opentest>
+  writetest();
+      a3:	e8 08 04 00 00       	call   4b0 <writetest>
+  writetest1();
+      a8:	e8 e3 05 00 00       	call   690 <writetest1>
+  createtest();
+      ad:	e8 ae 07 00 00       	call   860 <createtest>
+
+  openiputtest();
+      b2:	e8 59 02 00 00       	call   310 <openiputtest>
+  exitiputtest();
+      b7:	e8 54 01 00 00       	call   210 <exitiputtest>
+  iputtest();
+      bc:	e8 5f 00 00 00       	call   120 <iputtest>
+
+  mem();
+      c1:	e8 1a 0d 00 00       	call   de0 <mem>
+  pipe1();
+      c6:	e8 95 09 00 00       	call   a60 <pipe1>
+  preempt();
+      cb:	e8 30 0b 00 00       	call   c00 <preempt>
+  exitwait();
+      d0:	e8 8b 0c 00 00       	call   d60 <exitwait>
+
+  rmdot();
+      d5:	e8 a6 27 00 00       	call   2880 <rmdot>
+  fourteen();
+      da:	e8 61 26 00 00       	call   2740 <fourteen>
+  bigfile();
+      df:	e8 8c 24 00 00       	call   2570 <bigfile>
+  subdir();
+      e4:	e8 b7 1c 00 00       	call   1da0 <subdir>
+  linktest();
+      e9:	e8 42 15 00 00       	call   1630 <linktest>
+  unlinkread();
+      ee:	e8 ad 13 00 00       	call   14a0 <unlinkread>
+  dirfile();
+      f3:	e8 08 29 00 00       	call   2a00 <dirfile>
+  iref();
+      f8:	e8 03 2b 00 00       	call   2c00 <iref>
+  forktest();
+      fd:	e8 1e 2c 00 00       	call   2d20 <forktest>
+  bigdir(); // slow
+     102:	e8 59 1b 00 00       	call   1c60 <bigdir>
+
+  uio();
+     107:	e8 04 35 00 00       	call   3610 <uio>
+
+  exectest();
+     10c:	e8 ff 08 00 00       	call   a10 <exectest>
+
+  exit();
+     111:	e8 6d 38 00 00       	call   3983 <exit>
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	f3 0f 1e fb          	endbr32 
+     124:	55                   	push   %ebp
+     125:	89 e5                	mov    %esp,%ebp
+     127:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     12a:	68 44 41 00 00       	push   $0x4144
+     12f:	ff 35 d8 61 00 00    	pushl  0x61d8
+     135:	e8 d6 39 00 00       	call   3b10 <printf>
+  if(mkdir("iputdir") < 0){
+     13a:	c7 04 24 d7 40 00 00 	movl   $0x40d7,(%esp)
+     141:	e8 a5 38 00 00       	call   39eb <mkdir>
+     146:	83 c4 10             	add    $0x10,%esp
+     149:	85 c0                	test   %eax,%eax
+     14b:	78 58                	js     1a5 <iputtest+0x85>
+  if(chdir("iputdir") < 0){
+     14d:	83 ec 0c             	sub    $0xc,%esp
+     150:	68 d7 40 00 00       	push   $0x40d7
+     155:	e8 99 38 00 00       	call   39f3 <chdir>
+     15a:	83 c4 10             	add    $0x10,%esp
+     15d:	85 c0                	test   %eax,%eax
+     15f:	0f 88 85 00 00 00    	js     1ea <iputtest+0xca>
+  if(unlink("../iputdir") < 0){
+     165:	83 ec 0c             	sub    $0xc,%esp
+     168:	68 d4 40 00 00       	push   $0x40d4
+     16d:	e8 61 38 00 00       	call   39d3 <unlink>
+     172:	83 c4 10             	add    $0x10,%esp
+     175:	85 c0                	test   %eax,%eax
+     177:	78 5a                	js     1d3 <iputtest+0xb3>
+  if(chdir("/") < 0){
+     179:	83 ec 0c             	sub    $0xc,%esp
+     17c:	68 f9 40 00 00       	push   $0x40f9
+     181:	e8 6d 38 00 00       	call   39f3 <chdir>
+     186:	83 c4 10             	add    $0x10,%esp
+     189:	85 c0                	test   %eax,%eax
+     18b:	78 2f                	js     1bc <iputtest+0x9c>
+  printf(stdout, "iput test ok\n");
+     18d:	83 ec 08             	sub    $0x8,%esp
+     190:	68 7c 41 00 00       	push   $0x417c
+     195:	ff 35 d8 61 00 00    	pushl  0x61d8
+     19b:	e8 70 39 00 00       	call   3b10 <printf>
+}
+     1a0:	83 c4 10             	add    $0x10,%esp
+     1a3:	c9                   	leave  
+     1a4:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a5:	50                   	push   %eax
+     1a6:	50                   	push   %eax
+     1a7:	68 b0 40 00 00       	push   $0x40b0
+     1ac:	ff 35 d8 61 00 00    	pushl  0x61d8
+     1b2:	e8 59 39 00 00       	call   3b10 <printf>
+    exit();
+     1b7:	e8 c7 37 00 00       	call   3983 <exit>
+    printf(stdout, "chdir / failed\n");
+     1bc:	50                   	push   %eax
+     1bd:	50                   	push   %eax
+     1be:	68 fb 40 00 00       	push   $0x40fb
+     1c3:	ff 35 d8 61 00 00    	pushl  0x61d8
+     1c9:	e8 42 39 00 00       	call   3b10 <printf>
+    exit();
+     1ce:	e8 b0 37 00 00       	call   3983 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1d3:	52                   	push   %edx
+     1d4:	52                   	push   %edx
+     1d5:	68 df 40 00 00       	push   $0x40df
+     1da:	ff 35 d8 61 00 00    	pushl  0x61d8
+     1e0:	e8 2b 39 00 00       	call   3b10 <printf>
+    exit();
+     1e5:	e8 99 37 00 00       	call   3983 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1ea:	51                   	push   %ecx
+     1eb:	51                   	push   %ecx
+     1ec:	68 be 40 00 00       	push   $0x40be
+     1f1:	ff 35 d8 61 00 00    	pushl  0x61d8
+     1f7:	e8 14 39 00 00       	call   3b10 <printf>
+    exit();
+     1fc:	e8 82 37 00 00       	call   3983 <exit>
+     201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     20f:	90                   	nop
+
+00000210 <exitiputtest>:
+{
+     210:	f3 0f 1e fb          	endbr32 
+     214:	55                   	push   %ebp
+     215:	89 e5                	mov    %esp,%ebp
+     217:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     21a:	68 0b 41 00 00       	push   $0x410b
+     21f:	ff 35 d8 61 00 00    	pushl  0x61d8
+     225:	e8 e6 38 00 00       	call   3b10 <printf>
+  pid = fork();
+     22a:	e8 4c 37 00 00       	call   397b <fork>
+  if(pid < 0){
+     22f:	83 c4 10             	add    $0x10,%esp
+     232:	85 c0                	test   %eax,%eax
+     234:	0f 88 86 00 00 00    	js     2c0 <exitiputtest+0xb0>
+  if(pid == 0){
+     23a:	75 4c                	jne    288 <exitiputtest+0x78>
+    if(mkdir("iputdir") < 0){
+     23c:	83 ec 0c             	sub    $0xc,%esp
+     23f:	68 d7 40 00 00       	push   $0x40d7
+     244:	e8 a2 37 00 00       	call   39eb <mkdir>
+     249:	83 c4 10             	add    $0x10,%esp
+     24c:	85 c0                	test   %eax,%eax
+     24e:	0f 88 83 00 00 00    	js     2d7 <exitiputtest+0xc7>
+    if(chdir("iputdir") < 0){
+     254:	83 ec 0c             	sub    $0xc,%esp
+     257:	68 d7 40 00 00       	push   $0x40d7
+     25c:	e8 92 37 00 00       	call   39f3 <chdir>
+     261:	83 c4 10             	add    $0x10,%esp
+     264:	85 c0                	test   %eax,%eax
+     266:	0f 88 82 00 00 00    	js     2ee <exitiputtest+0xde>
+    if(unlink("../iputdir") < 0){
+     26c:	83 ec 0c             	sub    $0xc,%esp
+     26f:	68 d4 40 00 00       	push   $0x40d4
+     274:	e8 5a 37 00 00       	call   39d3 <unlink>
+     279:	83 c4 10             	add    $0x10,%esp
+     27c:	85 c0                	test   %eax,%eax
+     27e:	78 28                	js     2a8 <exitiputtest+0x98>
+    exit();
+     280:	e8 fe 36 00 00       	call   3983 <exit>
+     285:	8d 76 00             	lea    0x0(%esi),%esi
+  wait();
+     288:	e8 fe 36 00 00       	call   398b <wait>
+  printf(stdout, "exitiput test ok\n");
+     28d:	83 ec 08             	sub    $0x8,%esp
+     290:	68 2e 41 00 00       	push   $0x412e
+     295:	ff 35 d8 61 00 00    	pushl  0x61d8
+     29b:	e8 70 38 00 00       	call   3b10 <printf>
+}
+     2a0:	83 c4 10             	add    $0x10,%esp
+     2a3:	c9                   	leave  
+     2a4:	c3                   	ret    
+     2a5:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     2a8:	83 ec 08             	sub    $0x8,%esp
+     2ab:	68 df 40 00 00       	push   $0x40df
+     2b0:	ff 35 d8 61 00 00    	pushl  0x61d8
+     2b6:	e8 55 38 00 00       	call   3b10 <printf>
+      exit();
+     2bb:	e8 c3 36 00 00       	call   3983 <exit>
+    printf(stdout, "fork failed\n");
+     2c0:	51                   	push   %ecx
+     2c1:	51                   	push   %ecx
+     2c2:	68 f1 4f 00 00       	push   $0x4ff1
+     2c7:	ff 35 d8 61 00 00    	pushl  0x61d8
+     2cd:	e8 3e 38 00 00       	call   3b10 <printf>
+    exit();
+     2d2:	e8 ac 36 00 00       	call   3983 <exit>
+      printf(stdout, "mkdir failed\n");
+     2d7:	52                   	push   %edx
+     2d8:	52                   	push   %edx
+     2d9:	68 b0 40 00 00       	push   $0x40b0
+     2de:	ff 35 d8 61 00 00    	pushl  0x61d8
+     2e4:	e8 27 38 00 00       	call   3b10 <printf>
+      exit();
+     2e9:	e8 95 36 00 00       	call   3983 <exit>
+      printf(stdout, "child chdir failed\n");
+     2ee:	50                   	push   %eax
+     2ef:	50                   	push   %eax
+     2f0:	68 1a 41 00 00       	push   $0x411a
+     2f5:	ff 35 d8 61 00 00    	pushl  0x61d8
+     2fb:	e8 10 38 00 00       	call   3b10 <printf>
+      exit();
+     300:	e8 7e 36 00 00       	call   3983 <exit>
+     305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <openiputtest>:
+{
+     310:	f3 0f 1e fb          	endbr32 
+     314:	55                   	push   %ebp
+     315:	89 e5                	mov    %esp,%ebp
+     317:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     31a:	68 40 41 00 00       	push   $0x4140
+     31f:	ff 35 d8 61 00 00    	pushl  0x61d8
+     325:	e8 e6 37 00 00       	call   3b10 <printf>
+  if(mkdir("oidir") < 0){
+     32a:	c7 04 24 4f 41 00 00 	movl   $0x414f,(%esp)
+     331:	e8 b5 36 00 00       	call   39eb <mkdir>
+     336:	83 c4 10             	add    $0x10,%esp
+     339:	85 c0                	test   %eax,%eax
+     33b:	0f 88 9b 00 00 00    	js     3dc <openiputtest+0xcc>
+  pid = fork();
+     341:	e8 35 36 00 00       	call   397b <fork>
+  if(pid < 0){
+     346:	85 c0                	test   %eax,%eax
+     348:	78 7b                	js     3c5 <openiputtest+0xb5>
+  if(pid == 0){
+     34a:	75 34                	jne    380 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     34c:	83 ec 08             	sub    $0x8,%esp
+     34f:	6a 02                	push   $0x2
+     351:	68 4f 41 00 00       	push   $0x414f
+     356:	e8 68 36 00 00       	call   39c3 <open>
+    if(fd >= 0){
+     35b:	83 c4 10             	add    $0x10,%esp
+     35e:	85 c0                	test   %eax,%eax
+     360:	78 5e                	js     3c0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     362:	83 ec 08             	sub    $0x8,%esp
+     365:	68 d4 50 00 00       	push   $0x50d4
+     36a:	ff 35 d8 61 00 00    	pushl  0x61d8
+     370:	e8 9b 37 00 00       	call   3b10 <printf>
+      exit();
+     375:	e8 09 36 00 00       	call   3983 <exit>
+     37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  sleep(1);
+     380:	83 ec 0c             	sub    $0xc,%esp
+     383:	6a 01                	push   $0x1
+     385:	e8 89 36 00 00       	call   3a13 <sleep>
+  if(unlink("oidir") != 0){
+     38a:	c7 04 24 4f 41 00 00 	movl   $0x414f,(%esp)
+     391:	e8 3d 36 00 00       	call   39d3 <unlink>
+     396:	83 c4 10             	add    $0x10,%esp
+     399:	85 c0                	test   %eax,%eax
+     39b:	75 56                	jne    3f3 <openiputtest+0xe3>
+  wait();
+     39d:	e8 e9 35 00 00       	call   398b <wait>
+  printf(stdout, "openiput test ok\n");
+     3a2:	83 ec 08             	sub    $0x8,%esp
+     3a5:	68 78 41 00 00       	push   $0x4178
+     3aa:	ff 35 d8 61 00 00    	pushl  0x61d8
+     3b0:	e8 5b 37 00 00       	call   3b10 <printf>
+     3b5:	83 c4 10             	add    $0x10,%esp
+}
+     3b8:	c9                   	leave  
+     3b9:	c3                   	ret    
+     3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3c0:	e8 be 35 00 00       	call   3983 <exit>
+    printf(stdout, "fork failed\n");
+     3c5:	52                   	push   %edx
+     3c6:	52                   	push   %edx
+     3c7:	68 f1 4f 00 00       	push   $0x4ff1
+     3cc:	ff 35 d8 61 00 00    	pushl  0x61d8
+     3d2:	e8 39 37 00 00       	call   3b10 <printf>
+    exit();
+     3d7:	e8 a7 35 00 00       	call   3983 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3dc:	51                   	push   %ecx
+     3dd:	51                   	push   %ecx
+     3de:	68 55 41 00 00       	push   $0x4155
+     3e3:	ff 35 d8 61 00 00    	pushl  0x61d8
+     3e9:	e8 22 37 00 00       	call   3b10 <printf>
+    exit();
+     3ee:	e8 90 35 00 00       	call   3983 <exit>
+    printf(stdout, "unlink failed\n");
+     3f3:	50                   	push   %eax
+     3f4:	50                   	push   %eax
+     3f5:	68 69 41 00 00       	push   $0x4169
+     3fa:	ff 35 d8 61 00 00    	pushl  0x61d8
+     400:	e8 0b 37 00 00       	call   3b10 <printf>
+    exit();
+     405:	e8 79 35 00 00       	call   3983 <exit>
+     40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000410 <opentest>:
+{
+     410:	f3 0f 1e fb          	endbr32 
+     414:	55                   	push   %ebp
+     415:	89 e5                	mov    %esp,%ebp
+     417:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     41a:	68 8a 41 00 00       	push   $0x418a
+     41f:	ff 35 d8 61 00 00    	pushl  0x61d8
+     425:	e8 e6 36 00 00       	call   3b10 <printf>
+  fd = open("echo", 0);
+     42a:	58                   	pop    %eax
+     42b:	5a                   	pop    %edx
+     42c:	6a 00                	push   $0x0
+     42e:	68 95 41 00 00       	push   $0x4195
+     433:	e8 8b 35 00 00       	call   39c3 <open>
+  if(fd < 0){
+     438:	83 c4 10             	add    $0x10,%esp
+     43b:	85 c0                	test   %eax,%eax
+     43d:	78 36                	js     475 <opentest+0x65>
+  close(fd);
+     43f:	83 ec 0c             	sub    $0xc,%esp
+     442:	50                   	push   %eax
+     443:	e8 63 35 00 00       	call   39ab <close>
+  fd = open("doesnotexist", 0);
+     448:	5a                   	pop    %edx
+     449:	59                   	pop    %ecx
+     44a:	6a 00                	push   $0x0
+     44c:	68 ad 41 00 00       	push   $0x41ad
+     451:	e8 6d 35 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     456:	83 c4 10             	add    $0x10,%esp
+     459:	85 c0                	test   %eax,%eax
+     45b:	79 2f                	jns    48c <opentest+0x7c>
+  printf(stdout, "open test ok\n");
+     45d:	83 ec 08             	sub    $0x8,%esp
+     460:	68 d8 41 00 00       	push   $0x41d8
+     465:	ff 35 d8 61 00 00    	pushl  0x61d8
+     46b:	e8 a0 36 00 00       	call   3b10 <printf>
+}
+     470:	83 c4 10             	add    $0x10,%esp
+     473:	c9                   	leave  
+     474:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     475:	50                   	push   %eax
+     476:	50                   	push   %eax
+     477:	68 9a 41 00 00       	push   $0x419a
+     47c:	ff 35 d8 61 00 00    	pushl  0x61d8
+     482:	e8 89 36 00 00       	call   3b10 <printf>
+    exit();
+     487:	e8 f7 34 00 00       	call   3983 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     48c:	50                   	push   %eax
+     48d:	50                   	push   %eax
+     48e:	68 ba 41 00 00       	push   $0x41ba
+     493:	ff 35 d8 61 00 00    	pushl  0x61d8
+     499:	e8 72 36 00 00       	call   3b10 <printf>
+    exit();
+     49e:	e8 e0 34 00 00       	call   3983 <exit>
+     4a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     4aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000004b0 <writetest>:
+{
+     4b0:	f3 0f 1e fb          	endbr32 
+     4b4:	55                   	push   %ebp
+     4b5:	89 e5                	mov    %esp,%ebp
+     4b7:	56                   	push   %esi
+     4b8:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     4b9:	83 ec 08             	sub    $0x8,%esp
+     4bc:	68 e6 41 00 00       	push   $0x41e6
+     4c1:	ff 35 d8 61 00 00    	pushl  0x61d8
+     4c7:	e8 44 36 00 00       	call   3b10 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     4cc:	58                   	pop    %eax
+     4cd:	5a                   	pop    %edx
+     4ce:	68 02 02 00 00       	push   $0x202
+     4d3:	68 f7 41 00 00       	push   $0x41f7
+     4d8:	e8 e6 34 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     4dd:	83 c4 10             	add    $0x10,%esp
+     4e0:	85 c0                	test   %eax,%eax
+     4e2:	0f 88 8c 01 00 00    	js     674 <writetest+0x1c4>
+    printf(stdout, "creat small succeeded; ok\n");
+     4e8:	83 ec 08             	sub    $0x8,%esp
+     4eb:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4ed:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4ef:	68 fd 41 00 00       	push   $0x41fd
+     4f4:	ff 35 d8 61 00 00    	pushl  0x61d8
+     4fa:	e8 11 36 00 00       	call   3b10 <printf>
+     4ff:	83 c4 10             	add    $0x10,%esp
+     502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     508:	83 ec 04             	sub    $0x4,%esp
+     50b:	6a 0a                	push   $0xa
+     50d:	68 34 42 00 00       	push   $0x4234
+     512:	56                   	push   %esi
+     513:	e8 8b 34 00 00       	call   39a3 <write>
+     518:	83 c4 10             	add    $0x10,%esp
+     51b:	83 f8 0a             	cmp    $0xa,%eax
+     51e:	0f 85 d9 00 00 00    	jne    5fd <writetest+0x14d>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     524:	83 ec 04             	sub    $0x4,%esp
+     527:	6a 0a                	push   $0xa
+     529:	68 3f 42 00 00       	push   $0x423f
+     52e:	56                   	push   %esi
+     52f:	e8 6f 34 00 00       	call   39a3 <write>
+     534:	83 c4 10             	add    $0x10,%esp
+     537:	83 f8 0a             	cmp    $0xa,%eax
+     53a:	0f 85 d6 00 00 00    	jne    616 <writetest+0x166>
+  for(i = 0; i < 100; i++){
+     540:	83 c3 01             	add    $0x1,%ebx
+     543:	83 fb 64             	cmp    $0x64,%ebx
+     546:	75 c0                	jne    508 <writetest+0x58>
+  printf(stdout, "writes ok\n");
+     548:	83 ec 08             	sub    $0x8,%esp
+     54b:	68 4a 42 00 00       	push   $0x424a
+     550:	ff 35 d8 61 00 00    	pushl  0x61d8
+     556:	e8 b5 35 00 00       	call   3b10 <printf>
+  close(fd);
+     55b:	89 34 24             	mov    %esi,(%esp)
+     55e:	e8 48 34 00 00       	call   39ab <close>
+  fd = open("small", O_RDONLY);
+     563:	5b                   	pop    %ebx
+     564:	5e                   	pop    %esi
+     565:	6a 00                	push   $0x0
+     567:	68 f7 41 00 00       	push   $0x41f7
+     56c:	e8 52 34 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     571:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_RDONLY);
+     574:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     576:	85 c0                	test   %eax,%eax
+     578:	0f 88 b1 00 00 00    	js     62f <writetest+0x17f>
+    printf(stdout, "open small succeeded ok\n");
+     57e:	83 ec 08             	sub    $0x8,%esp
+     581:	68 55 42 00 00       	push   $0x4255
+     586:	ff 35 d8 61 00 00    	pushl  0x61d8
+     58c:	e8 7f 35 00 00       	call   3b10 <printf>
+  i = read(fd, buf, 2000);
+     591:	83 c4 0c             	add    $0xc,%esp
+     594:	68 d0 07 00 00       	push   $0x7d0
+     599:	68 80 93 00 00       	push   $0x9380
+     59e:	53                   	push   %ebx
+     59f:	e8 f7 33 00 00       	call   399b <read>
+  if(i == 2000){
+     5a4:	83 c4 10             	add    $0x10,%esp
+     5a7:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     5ac:	0f 85 94 00 00 00    	jne    646 <writetest+0x196>
+    printf(stdout, "read succeeded ok\n");
+     5b2:	83 ec 08             	sub    $0x8,%esp
+     5b5:	68 89 42 00 00       	push   $0x4289
+     5ba:	ff 35 d8 61 00 00    	pushl  0x61d8
+     5c0:	e8 4b 35 00 00       	call   3b10 <printf>
+  close(fd);
+     5c5:	89 1c 24             	mov    %ebx,(%esp)
+     5c8:	e8 de 33 00 00       	call   39ab <close>
+  if(unlink("small") < 0){
+     5cd:	c7 04 24 f7 41 00 00 	movl   $0x41f7,(%esp)
+     5d4:	e8 fa 33 00 00       	call   39d3 <unlink>
+     5d9:	83 c4 10             	add    $0x10,%esp
+     5dc:	85 c0                	test   %eax,%eax
+     5de:	78 7d                	js     65d <writetest+0x1ad>
+  printf(stdout, "small file test ok\n");
+     5e0:	83 ec 08             	sub    $0x8,%esp
+     5e3:	68 b1 42 00 00       	push   $0x42b1
+     5e8:	ff 35 d8 61 00 00    	pushl  0x61d8
+     5ee:	e8 1d 35 00 00       	call   3b10 <printf>
+}
+     5f3:	83 c4 10             	add    $0x10,%esp
+     5f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5f9:	5b                   	pop    %ebx
+     5fa:	5e                   	pop    %esi
+     5fb:	5d                   	pop    %ebp
+     5fc:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5fd:	83 ec 04             	sub    $0x4,%esp
+     600:	53                   	push   %ebx
+     601:	68 f8 50 00 00       	push   $0x50f8
+     606:	ff 35 d8 61 00 00    	pushl  0x61d8
+     60c:	e8 ff 34 00 00       	call   3b10 <printf>
+      exit();
+     611:	e8 6d 33 00 00       	call   3983 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     616:	83 ec 04             	sub    $0x4,%esp
+     619:	53                   	push   %ebx
+     61a:	68 1c 51 00 00       	push   $0x511c
+     61f:	ff 35 d8 61 00 00    	pushl  0x61d8
+     625:	e8 e6 34 00 00       	call   3b10 <printf>
+      exit();
+     62a:	e8 54 33 00 00       	call   3983 <exit>
+    printf(stdout, "error: open small failed!\n");
+     62f:	51                   	push   %ecx
+     630:	51                   	push   %ecx
+     631:	68 6e 42 00 00       	push   $0x426e
+     636:	ff 35 d8 61 00 00    	pushl  0x61d8
+     63c:	e8 cf 34 00 00       	call   3b10 <printf>
+    exit();
+     641:	e8 3d 33 00 00       	call   3983 <exit>
+    printf(stdout, "read failed\n");
+     646:	52                   	push   %edx
+     647:	52                   	push   %edx
+     648:	68 b5 45 00 00       	push   $0x45b5
+     64d:	ff 35 d8 61 00 00    	pushl  0x61d8
+     653:	e8 b8 34 00 00       	call   3b10 <printf>
+    exit();
+     658:	e8 26 33 00 00       	call   3983 <exit>
+    printf(stdout, "unlink small failed\n");
+     65d:	50                   	push   %eax
+     65e:	50                   	push   %eax
+     65f:	68 9c 42 00 00       	push   $0x429c
+     664:	ff 35 d8 61 00 00    	pushl  0x61d8
+     66a:	e8 a1 34 00 00       	call   3b10 <printf>
+    exit();
+     66f:	e8 0f 33 00 00       	call   3983 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     674:	50                   	push   %eax
+     675:	50                   	push   %eax
+     676:	68 18 42 00 00       	push   $0x4218
+     67b:	ff 35 d8 61 00 00    	pushl  0x61d8
+     681:	e8 8a 34 00 00       	call   3b10 <printf>
+    exit();
+     686:	e8 f8 32 00 00       	call   3983 <exit>
+     68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     68f:	90                   	nop
+
+00000690 <writetest1>:
+{
+     690:	f3 0f 1e fb          	endbr32 
+     694:	55                   	push   %ebp
+     695:	89 e5                	mov    %esp,%ebp
+     697:	56                   	push   %esi
+     698:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     699:	83 ec 08             	sub    $0x8,%esp
+     69c:	68 c5 42 00 00       	push   $0x42c5
+     6a1:	ff 35 d8 61 00 00    	pushl  0x61d8
+     6a7:	e8 64 34 00 00       	call   3b10 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     6ac:	58                   	pop    %eax
+     6ad:	5a                   	pop    %edx
+     6ae:	68 02 02 00 00       	push   $0x202
+     6b3:	68 3f 43 00 00       	push   $0x433f
+     6b8:	e8 06 33 00 00       	call   39c3 <open>
+  if(fd < 0){
+     6bd:	83 c4 10             	add    $0x10,%esp
+     6c0:	85 c0                	test   %eax,%eax
+     6c2:	0f 88 5d 01 00 00    	js     825 <writetest1+0x195>
+     6c8:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     6ca:	31 db                	xor    %ebx,%ebx
+     6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(write(fd, buf, 512) != 512){
+     6d0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6d3:	89 1d 80 93 00 00    	mov    %ebx,0x9380
+    if(write(fd, buf, 512) != 512){
+     6d9:	68 00 02 00 00       	push   $0x200
+     6de:	68 80 93 00 00       	push   $0x9380
+     6e3:	56                   	push   %esi
+     6e4:	e8 ba 32 00 00       	call   39a3 <write>
+     6e9:	83 c4 10             	add    $0x10,%esp
+     6ec:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6f1:	0f 85 b3 00 00 00    	jne    7aa <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6f7:	83 c3 01             	add    $0x1,%ebx
+     6fa:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     700:	75 ce                	jne    6d0 <writetest1+0x40>
+  close(fd);
+     702:	83 ec 0c             	sub    $0xc,%esp
+     705:	56                   	push   %esi
+     706:	e8 a0 32 00 00       	call   39ab <close>
+  fd = open("big", O_RDONLY);
+     70b:	5b                   	pop    %ebx
+     70c:	5e                   	pop    %esi
+     70d:	6a 00                	push   $0x0
+     70f:	68 3f 43 00 00       	push   $0x433f
+     714:	e8 aa 32 00 00       	call   39c3 <open>
+  if(fd < 0){
+     719:	83 c4 10             	add    $0x10,%esp
+  fd = open("big", O_RDONLY);
+     71c:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+     71e:	85 c0                	test   %eax,%eax
+     720:	0f 88 e8 00 00 00    	js     80e <writetest1+0x17e>
+  n = 0;
+     726:	31 f6                	xor    %esi,%esi
+     728:	eb 1d                	jmp    747 <writetest1+0xb7>
+     72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     730:	3d 00 02 00 00       	cmp    $0x200,%eax
+     735:	0f 85 9f 00 00 00    	jne    7da <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     73b:	a1 80 93 00 00       	mov    0x9380,%eax
+     740:	39 f0                	cmp    %esi,%eax
+     742:	75 7f                	jne    7c3 <writetest1+0x133>
+    n++;
+     744:	83 c6 01             	add    $0x1,%esi
+    i = read(fd, buf, 512);
+     747:	83 ec 04             	sub    $0x4,%esp
+     74a:	68 00 02 00 00       	push   $0x200
+     74f:	68 80 93 00 00       	push   $0x9380
+     754:	53                   	push   %ebx
+     755:	e8 41 32 00 00       	call   399b <read>
+    if(i == 0){
+     75a:	83 c4 10             	add    $0x10,%esp
+     75d:	85 c0                	test   %eax,%eax
+     75f:	75 cf                	jne    730 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     761:	81 fe 8b 00 00 00    	cmp    $0x8b,%esi
+     767:	0f 84 86 00 00 00    	je     7f3 <writetest1+0x163>
+  close(fd);
+     76d:	83 ec 0c             	sub    $0xc,%esp
+     770:	53                   	push   %ebx
+     771:	e8 35 32 00 00       	call   39ab <close>
+  if(unlink("big") < 0){
+     776:	c7 04 24 3f 43 00 00 	movl   $0x433f,(%esp)
+     77d:	e8 51 32 00 00       	call   39d3 <unlink>
+     782:	83 c4 10             	add    $0x10,%esp
+     785:	85 c0                	test   %eax,%eax
+     787:	0f 88 af 00 00 00    	js     83c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     78d:	83 ec 08             	sub    $0x8,%esp
+     790:	68 66 43 00 00       	push   $0x4366
+     795:	ff 35 d8 61 00 00    	pushl  0x61d8
+     79b:	e8 70 33 00 00       	call   3b10 <printf>
+}
+     7a0:	83 c4 10             	add    $0x10,%esp
+     7a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     7a6:	5b                   	pop    %ebx
+     7a7:	5e                   	pop    %esi
+     7a8:	5d                   	pop    %ebp
+     7a9:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     7aa:	83 ec 04             	sub    $0x4,%esp
+     7ad:	53                   	push   %ebx
+     7ae:	68 ef 42 00 00       	push   $0x42ef
+     7b3:	ff 35 d8 61 00 00    	pushl  0x61d8
+     7b9:	e8 52 33 00 00       	call   3b10 <printf>
+      exit();
+     7be:	e8 c0 31 00 00       	call   3983 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     7c3:	50                   	push   %eax
+     7c4:	56                   	push   %esi
+     7c5:	68 40 51 00 00       	push   $0x5140
+     7ca:	ff 35 d8 61 00 00    	pushl  0x61d8
+     7d0:	e8 3b 33 00 00       	call   3b10 <printf>
+      exit();
+     7d5:	e8 a9 31 00 00       	call   3983 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7da:	83 ec 04             	sub    $0x4,%esp
+     7dd:	50                   	push   %eax
+     7de:	68 43 43 00 00       	push   $0x4343
+     7e3:	ff 35 d8 61 00 00    	pushl  0x61d8
+     7e9:	e8 22 33 00 00       	call   3b10 <printf>
+      exit();
+     7ee:	e8 90 31 00 00       	call   3983 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7f3:	52                   	push   %edx
+     7f4:	68 8b 00 00 00       	push   $0x8b
+     7f9:	68 26 43 00 00       	push   $0x4326
+     7fe:	ff 35 d8 61 00 00    	pushl  0x61d8
+     804:	e8 07 33 00 00       	call   3b10 <printf>
+        exit();
+     809:	e8 75 31 00 00       	call   3983 <exit>
+    printf(stdout, "error: open big failed!\n");
+     80e:	51                   	push   %ecx
+     80f:	51                   	push   %ecx
+     810:	68 0d 43 00 00       	push   $0x430d
+     815:	ff 35 d8 61 00 00    	pushl  0x61d8
+     81b:	e8 f0 32 00 00       	call   3b10 <printf>
+    exit();
+     820:	e8 5e 31 00 00       	call   3983 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     825:	50                   	push   %eax
+     826:	50                   	push   %eax
+     827:	68 d5 42 00 00       	push   $0x42d5
+     82c:	ff 35 d8 61 00 00    	pushl  0x61d8
+     832:	e8 d9 32 00 00       	call   3b10 <printf>
+    exit();
+     837:	e8 47 31 00 00       	call   3983 <exit>
+    printf(stdout, "unlink big failed\n");
+     83c:	50                   	push   %eax
+     83d:	50                   	push   %eax
+     83e:	68 53 43 00 00       	push   $0x4353
+     843:	ff 35 d8 61 00 00    	pushl  0x61d8
+     849:	e8 c2 32 00 00       	call   3b10 <printf>
+    exit();
+     84e:	e8 30 31 00 00       	call   3983 <exit>
+     853:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000860 <createtest>:
+{
+     860:	f3 0f 1e fb          	endbr32 
+     864:	55                   	push   %ebp
+     865:	89 e5                	mov    %esp,%ebp
+     867:	53                   	push   %ebx
+  name[2] = '\0';
+     868:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     86d:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     870:	68 60 51 00 00       	push   $0x5160
+     875:	ff 35 d8 61 00 00    	pushl  0x61d8
+     87b:	e8 90 32 00 00       	call   3b10 <printf>
+  name[0] = 'a';
+     880:	c6 05 80 b3 00 00 61 	movb   $0x61,0xb380
+  name[2] = '\0';
+     887:	83 c4 10             	add    $0x10,%esp
+     88a:	c6 05 82 b3 00 00 00 	movb   $0x0,0xb382
+  for(i = 0; i < 52; i++){
+     891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     898:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     89b:	88 1d 81 b3 00 00    	mov    %bl,0xb381
+    fd = open(name, O_CREATE|O_RDWR);
+     8a1:	83 c3 01             	add    $0x1,%ebx
+     8a4:	68 02 02 00 00       	push   $0x202
+     8a9:	68 80 b3 00 00       	push   $0xb380
+     8ae:	e8 10 31 00 00       	call   39c3 <open>
+    close(fd);
+     8b3:	89 04 24             	mov    %eax,(%esp)
+     8b6:	e8 f0 30 00 00       	call   39ab <close>
+  for(i = 0; i < 52; i++){
+     8bb:	83 c4 10             	add    $0x10,%esp
+     8be:	80 fb 64             	cmp    $0x64,%bl
+     8c1:	75 d5                	jne    898 <createtest+0x38>
+  name[0] = 'a';
+     8c3:	c6 05 80 b3 00 00 61 	movb   $0x61,0xb380
+  name[2] = '\0';
+     8ca:	bb 30 00 00 00       	mov    $0x30,%ebx
+     8cf:	c6 05 82 b3 00 00 00 	movb   $0x0,0xb382
+  for(i = 0; i < 52; i++){
+     8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8dd:	8d 76 00             	lea    0x0(%esi),%esi
+    unlink(name);
+     8e0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8e3:	88 1d 81 b3 00 00    	mov    %bl,0xb381
+    unlink(name);
+     8e9:	83 c3 01             	add    $0x1,%ebx
+     8ec:	68 80 b3 00 00       	push   $0xb380
+     8f1:	e8 dd 30 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 52; i++){
+     8f6:	83 c4 10             	add    $0x10,%esp
+     8f9:	80 fb 64             	cmp    $0x64,%bl
+     8fc:	75 e2                	jne    8e0 <createtest+0x80>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8fe:	83 ec 08             	sub    $0x8,%esp
+     901:	68 88 51 00 00       	push   $0x5188
+     906:	ff 35 d8 61 00 00    	pushl  0x61d8
+     90c:	e8 ff 31 00 00       	call   3b10 <printf>
+}
+     911:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     914:	83 c4 10             	add    $0x10,%esp
+     917:	c9                   	leave  
+     918:	c3                   	ret    
+     919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000920 <dirtest>:
+{
+     920:	f3 0f 1e fb          	endbr32 
+     924:	55                   	push   %ebp
+     925:	89 e5                	mov    %esp,%ebp
+     927:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     92a:	68 74 43 00 00       	push   $0x4374
+     92f:	ff 35 d8 61 00 00    	pushl  0x61d8
+     935:	e8 d6 31 00 00       	call   3b10 <printf>
+  if(mkdir("dir0") < 0){
+     93a:	c7 04 24 80 43 00 00 	movl   $0x4380,(%esp)
+     941:	e8 a5 30 00 00       	call   39eb <mkdir>
+     946:	83 c4 10             	add    $0x10,%esp
+     949:	85 c0                	test   %eax,%eax
+     94b:	78 58                	js     9a5 <dirtest+0x85>
+  if(chdir("dir0") < 0){
+     94d:	83 ec 0c             	sub    $0xc,%esp
+     950:	68 80 43 00 00       	push   $0x4380
+     955:	e8 99 30 00 00       	call   39f3 <chdir>
+     95a:	83 c4 10             	add    $0x10,%esp
+     95d:	85 c0                	test   %eax,%eax
+     95f:	0f 88 85 00 00 00    	js     9ea <dirtest+0xca>
+  if(chdir("..") < 0){
+     965:	83 ec 0c             	sub    $0xc,%esp
+     968:	68 25 49 00 00       	push   $0x4925
+     96d:	e8 81 30 00 00       	call   39f3 <chdir>
+     972:	83 c4 10             	add    $0x10,%esp
+     975:	85 c0                	test   %eax,%eax
+     977:	78 5a                	js     9d3 <dirtest+0xb3>
+  if(unlink("dir0") < 0){
+     979:	83 ec 0c             	sub    $0xc,%esp
+     97c:	68 80 43 00 00       	push   $0x4380
+     981:	e8 4d 30 00 00       	call   39d3 <unlink>
+     986:	83 c4 10             	add    $0x10,%esp
+     989:	85 c0                	test   %eax,%eax
+     98b:	78 2f                	js     9bc <dirtest+0x9c>
+  printf(stdout, "mkdir test ok\n");
+     98d:	83 ec 08             	sub    $0x8,%esp
+     990:	68 bd 43 00 00       	push   $0x43bd
+     995:	ff 35 d8 61 00 00    	pushl  0x61d8
+     99b:	e8 70 31 00 00       	call   3b10 <printf>
+}
+     9a0:	83 c4 10             	add    $0x10,%esp
+     9a3:	c9                   	leave  
+     9a4:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     9a5:	50                   	push   %eax
+     9a6:	50                   	push   %eax
+     9a7:	68 b0 40 00 00       	push   $0x40b0
+     9ac:	ff 35 d8 61 00 00    	pushl  0x61d8
+     9b2:	e8 59 31 00 00       	call   3b10 <printf>
+    exit();
+     9b7:	e8 c7 2f 00 00       	call   3983 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     9bc:	50                   	push   %eax
+     9bd:	50                   	push   %eax
+     9be:	68 a9 43 00 00       	push   $0x43a9
+     9c3:	ff 35 d8 61 00 00    	pushl  0x61d8
+     9c9:	e8 42 31 00 00       	call   3b10 <printf>
+    exit();
+     9ce:	e8 b0 2f 00 00       	call   3983 <exit>
+    printf(stdout, "chdir .. failed\n");
+     9d3:	52                   	push   %edx
+     9d4:	52                   	push   %edx
+     9d5:	68 98 43 00 00       	push   $0x4398
+     9da:	ff 35 d8 61 00 00    	pushl  0x61d8
+     9e0:	e8 2b 31 00 00       	call   3b10 <printf>
+    exit();
+     9e5:	e8 99 2f 00 00       	call   3983 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9ea:	51                   	push   %ecx
+     9eb:	51                   	push   %ecx
+     9ec:	68 85 43 00 00       	push   $0x4385
+     9f1:	ff 35 d8 61 00 00    	pushl  0x61d8
+     9f7:	e8 14 31 00 00       	call   3b10 <printf>
+    exit();
+     9fc:	e8 82 2f 00 00       	call   3983 <exit>
+     a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a0f:	90                   	nop
+
+00000a10 <exectest>:
+{
+     a10:	f3 0f 1e fb          	endbr32 
+     a14:	55                   	push   %ebp
+     a15:	89 e5                	mov    %esp,%ebp
+     a17:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     a1a:	68 cc 43 00 00       	push   $0x43cc
+     a1f:	ff 35 d8 61 00 00    	pushl  0x61d8
+     a25:	e8 e6 30 00 00       	call   3b10 <printf>
+  if(exec("echo", echoargv) < 0){
+     a2a:	5a                   	pop    %edx
+     a2b:	59                   	pop    %ecx
+     a2c:	68 dc 61 00 00       	push   $0x61dc
+     a31:	68 95 41 00 00       	push   $0x4195
+     a36:	e8 80 2f 00 00       	call   39bb <exec>
+     a3b:	83 c4 10             	add    $0x10,%esp
+     a3e:	85 c0                	test   %eax,%eax
+     a40:	78 02                	js     a44 <exectest+0x34>
+}
+     a42:	c9                   	leave  
+     a43:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     a44:	50                   	push   %eax
+     a45:	50                   	push   %eax
+     a46:	68 d7 43 00 00       	push   $0x43d7
+     a4b:	ff 35 d8 61 00 00    	pushl  0x61d8
+     a51:	e8 ba 30 00 00       	call   3b10 <printf>
+    exit();
+     a56:	e8 28 2f 00 00       	call   3983 <exit>
+     a5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     a5f:	90                   	nop
+
+00000a60 <pipe1>:
+{
+     a60:	f3 0f 1e fb          	endbr32 
+     a64:	55                   	push   %ebp
+     a65:	89 e5                	mov    %esp,%ebp
+     a67:	57                   	push   %edi
+     a68:	56                   	push   %esi
+  if(pipe(fds) != 0){
+     a69:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a6c:	53                   	push   %ebx
+     a6d:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a70:	50                   	push   %eax
+     a71:	e8 1d 2f 00 00       	call   3993 <pipe>
+     a76:	83 c4 10             	add    $0x10,%esp
+     a79:	85 c0                	test   %eax,%eax
+     a7b:	0f 85 38 01 00 00    	jne    bb9 <pipe1+0x159>
+  pid = fork();
+     a81:	e8 f5 2e 00 00       	call   397b <fork>
+  if(pid == 0){
+     a86:	85 c0                	test   %eax,%eax
+     a88:	0f 84 8d 00 00 00    	je     b1b <pipe1+0xbb>
+  } else if(pid > 0){
+     a8e:	0f 8e 38 01 00 00    	jle    bcc <pipe1+0x16c>
+    close(fds[1]);
+     a94:	83 ec 0c             	sub    $0xc,%esp
+     a97:	ff 75 e4             	pushl  -0x1c(%ebp)
+  seq = 0;
+     a9a:	31 db                	xor    %ebx,%ebx
+    cc = 1;
+     a9c:	be 01 00 00 00       	mov    $0x1,%esi
+    close(fds[1]);
+     aa1:	e8 05 2f 00 00       	call   39ab <close>
+    total = 0;
+     aa6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     aad:	83 c4 10             	add    $0x10,%esp
+     ab0:	83 ec 04             	sub    $0x4,%esp
+     ab3:	56                   	push   %esi
+     ab4:	68 80 93 00 00       	push   $0x9380
+     ab9:	ff 75 e0             	pushl  -0x20(%ebp)
+     abc:	e8 da 2e 00 00       	call   399b <read>
+     ac1:	83 c4 10             	add    $0x10,%esp
+     ac4:	89 c7                	mov    %eax,%edi
+     ac6:	85 c0                	test   %eax,%eax
+     ac8:	0f 8e a7 00 00 00    	jle    b75 <pipe1+0x115>
+     ace:	8d 0c 3b             	lea    (%ebx,%edi,1),%ecx
+      for(i = 0; i < n; i++){
+     ad1:	31 c0                	xor    %eax,%eax
+     ad3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ad7:	90                   	nop
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     ad8:	89 da                	mov    %ebx,%edx
+     ada:	83 c3 01             	add    $0x1,%ebx
+     add:	38 90 80 93 00 00    	cmp    %dl,0x9380(%eax)
+     ae3:	75 1c                	jne    b01 <pipe1+0xa1>
+      for(i = 0; i < n; i++){
+     ae5:	83 c0 01             	add    $0x1,%eax
+     ae8:	39 d9                	cmp    %ebx,%ecx
+     aea:	75 ec                	jne    ad8 <pipe1+0x78>
+      cc = cc * 2;
+     aec:	01 f6                	add    %esi,%esi
+      total += n;
+     aee:	01 7d d4             	add    %edi,-0x2c(%ebp)
+     af1:	b8 00 20 00 00       	mov    $0x2000,%eax
+     af6:	81 fe 00 20 00 00    	cmp    $0x2000,%esi
+     afc:	0f 4f f0             	cmovg  %eax,%esi
+     aff:	eb af                	jmp    ab0 <pipe1+0x50>
+          printf(1, "pipe1 oops 2\n");
+     b01:	83 ec 08             	sub    $0x8,%esp
+     b04:	68 06 44 00 00       	push   $0x4406
+     b09:	6a 01                	push   $0x1
+     b0b:	e8 00 30 00 00       	call   3b10 <printf>
+          return;
+     b10:	83 c4 10             	add    $0x10,%esp
+}
+     b13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     b16:	5b                   	pop    %ebx
+     b17:	5e                   	pop    %esi
+     b18:	5f                   	pop    %edi
+     b19:	5d                   	pop    %ebp
+     b1a:	c3                   	ret    
+    close(fds[0]);
+     b1b:	83 ec 0c             	sub    $0xc,%esp
+     b1e:	ff 75 e0             	pushl  -0x20(%ebp)
+  seq = 0;
+     b21:	31 db                	xor    %ebx,%ebx
+    close(fds[0]);
+     b23:	e8 83 2e 00 00       	call   39ab <close>
+     b28:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 1033; i++)
+     b2b:	31 c0                	xor    %eax,%eax
+     b2d:	8d 76 00             	lea    0x0(%esi),%esi
+        buf[i] = seq++;
+     b30:	8d 14 18             	lea    (%eax,%ebx,1),%edx
+      for(i = 0; i < 1033; i++)
+     b33:	83 c0 01             	add    $0x1,%eax
+        buf[i] = seq++;
+     b36:	88 90 7f 93 00 00    	mov    %dl,0x937f(%eax)
+      for(i = 0; i < 1033; i++)
+     b3c:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b41:	75 ed                	jne    b30 <pipe1+0xd0>
+      if(write(fds[1], buf, 1033) != 1033){
+     b43:	83 ec 04             	sub    $0x4,%esp
+     b46:	81 c3 09 04 00 00    	add    $0x409,%ebx
+     b4c:	68 09 04 00 00       	push   $0x409
+     b51:	68 80 93 00 00       	push   $0x9380
+     b56:	ff 75 e4             	pushl  -0x1c(%ebp)
+     b59:	e8 45 2e 00 00       	call   39a3 <write>
+     b5e:	83 c4 10             	add    $0x10,%esp
+     b61:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b66:	75 77                	jne    bdf <pipe1+0x17f>
+    for(n = 0; n < 5; n++){
+     b68:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     b6e:	75 bb                	jne    b2b <pipe1+0xcb>
+    exit();
+     b70:	e8 0e 2e 00 00       	call   3983 <exit>
+    if(total != 5 * 1033){
+     b75:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b7c:	75 26                	jne    ba4 <pipe1+0x144>
+    close(fds[0]);
+     b7e:	83 ec 0c             	sub    $0xc,%esp
+     b81:	ff 75 e0             	pushl  -0x20(%ebp)
+     b84:	e8 22 2e 00 00       	call   39ab <close>
+    wait();
+     b89:	e8 fd 2d 00 00       	call   398b <wait>
+  printf(1, "pipe1 ok\n");
+     b8e:	5a                   	pop    %edx
+     b8f:	59                   	pop    %ecx
+     b90:	68 2b 44 00 00       	push   $0x442b
+     b95:	6a 01                	push   $0x1
+     b97:	e8 74 2f 00 00       	call   3b10 <printf>
+     b9c:	83 c4 10             	add    $0x10,%esp
+     b9f:	e9 6f ff ff ff       	jmp    b13 <pipe1+0xb3>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     ba4:	53                   	push   %ebx
+     ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
+     ba8:	68 14 44 00 00       	push   $0x4414
+     bad:	6a 01                	push   $0x1
+     baf:	e8 5c 2f 00 00       	call   3b10 <printf>
+      exit();
+     bb4:	e8 ca 2d 00 00       	call   3983 <exit>
+    printf(1, "pipe() failed\n");
+     bb9:	57                   	push   %edi
+     bba:	57                   	push   %edi
+     bbb:	68 e9 43 00 00       	push   $0x43e9
+     bc0:	6a 01                	push   $0x1
+     bc2:	e8 49 2f 00 00       	call   3b10 <printf>
+    exit();
+     bc7:	e8 b7 2d 00 00       	call   3983 <exit>
+    printf(1, "fork() failed\n");
+     bcc:	50                   	push   %eax
+     bcd:	50                   	push   %eax
+     bce:	68 35 44 00 00       	push   $0x4435
+     bd3:	6a 01                	push   $0x1
+     bd5:	e8 36 2f 00 00       	call   3b10 <printf>
+    exit();
+     bda:	e8 a4 2d 00 00       	call   3983 <exit>
+        printf(1, "pipe1 oops 1\n");
+     bdf:	56                   	push   %esi
+     be0:	56                   	push   %esi
+     be1:	68 f8 43 00 00       	push   $0x43f8
+     be6:	6a 01                	push   $0x1
+     be8:	e8 23 2f 00 00       	call   3b10 <printf>
+        exit();
+     bed:	e8 91 2d 00 00       	call   3983 <exit>
+     bf2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000c00 <preempt>:
+{
+     c00:	f3 0f 1e fb          	endbr32 
+     c04:	55                   	push   %ebp
+     c05:	89 e5                	mov    %esp,%ebp
+     c07:	57                   	push   %edi
+     c08:	56                   	push   %esi
+     c09:	53                   	push   %ebx
+     c0a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     c0d:	68 44 44 00 00       	push   $0x4444
+     c12:	6a 01                	push   $0x1
+     c14:	e8 f7 2e 00 00       	call   3b10 <printf>
+  pid1 = fork();
+     c19:	e8 5d 2d 00 00       	call   397b <fork>
+  if(pid1 == 0)
+     c1e:	83 c4 10             	add    $0x10,%esp
+     c21:	85 c0                	test   %eax,%eax
+     c23:	75 0b                	jne    c30 <preempt+0x30>
+    for(;;)
+     c25:	eb fe                	jmp    c25 <preempt+0x25>
+     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2e:	66 90                	xchg   %ax,%ax
+     c30:	89 c7                	mov    %eax,%edi
+  pid2 = fork();
+     c32:	e8 44 2d 00 00       	call   397b <fork>
+     c37:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     c39:	85 c0                	test   %eax,%eax
+     c3b:	75 03                	jne    c40 <preempt+0x40>
+    for(;;)
+     c3d:	eb fe                	jmp    c3d <preempt+0x3d>
+     c3f:	90                   	nop
+  pipe(pfds);
+     c40:	83 ec 0c             	sub    $0xc,%esp
+     c43:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     c46:	50                   	push   %eax
+     c47:	e8 47 2d 00 00       	call   3993 <pipe>
+  pid3 = fork();
+     c4c:	e8 2a 2d 00 00       	call   397b <fork>
+  if(pid3 == 0){
+     c51:	83 c4 10             	add    $0x10,%esp
+  pid3 = fork();
+     c54:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     c56:	85 c0                	test   %eax,%eax
+     c58:	75 3e                	jne    c98 <preempt+0x98>
+    close(pfds[0]);
+     c5a:	83 ec 0c             	sub    $0xc,%esp
+     c5d:	ff 75 e0             	pushl  -0x20(%ebp)
+     c60:	e8 46 2d 00 00       	call   39ab <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c65:	83 c4 0c             	add    $0xc,%esp
+     c68:	6a 01                	push   $0x1
+     c6a:	68 09 4a 00 00       	push   $0x4a09
+     c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c72:	e8 2c 2d 00 00       	call   39a3 <write>
+     c77:	83 c4 10             	add    $0x10,%esp
+     c7a:	83 f8 01             	cmp    $0x1,%eax
+     c7d:	0f 85 a4 00 00 00    	jne    d27 <preempt+0x127>
+    close(pfds[1]);
+     c83:	83 ec 0c             	sub    $0xc,%esp
+     c86:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c89:	e8 1d 2d 00 00       	call   39ab <close>
+     c8e:	83 c4 10             	add    $0x10,%esp
+    for(;;)
+     c91:	eb fe                	jmp    c91 <preempt+0x91>
+     c93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c97:	90                   	nop
+  close(pfds[1]);
+     c98:	83 ec 0c             	sub    $0xc,%esp
+     c9b:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c9e:	e8 08 2d 00 00       	call   39ab <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     ca3:	83 c4 0c             	add    $0xc,%esp
+     ca6:	68 00 20 00 00       	push   $0x2000
+     cab:	68 80 93 00 00       	push   $0x9380
+     cb0:	ff 75 e0             	pushl  -0x20(%ebp)
+     cb3:	e8 e3 2c 00 00       	call   399b <read>
+     cb8:	83 c4 10             	add    $0x10,%esp
+     cbb:	83 f8 01             	cmp    $0x1,%eax
+     cbe:	75 7e                	jne    d3e <preempt+0x13e>
+  close(pfds[0]);
+     cc0:	83 ec 0c             	sub    $0xc,%esp
+     cc3:	ff 75 e0             	pushl  -0x20(%ebp)
+     cc6:	e8 e0 2c 00 00       	call   39ab <close>
+  printf(1, "kill... ");
+     ccb:	58                   	pop    %eax
+     ccc:	5a                   	pop    %edx
+     ccd:	68 75 44 00 00       	push   $0x4475
+     cd2:	6a 01                	push   $0x1
+     cd4:	e8 37 2e 00 00       	call   3b10 <printf>
+  kill(pid1);
+     cd9:	89 3c 24             	mov    %edi,(%esp)
+     cdc:	e8 d2 2c 00 00       	call   39b3 <kill>
+  kill(pid2);
+     ce1:	89 34 24             	mov    %esi,(%esp)
+     ce4:	e8 ca 2c 00 00       	call   39b3 <kill>
+  kill(pid3);
+     ce9:	89 1c 24             	mov    %ebx,(%esp)
+     cec:	e8 c2 2c 00 00       	call   39b3 <kill>
+  printf(1, "wait... ");
+     cf1:	59                   	pop    %ecx
+     cf2:	5b                   	pop    %ebx
+     cf3:	68 7e 44 00 00       	push   $0x447e
+     cf8:	6a 01                	push   $0x1
+     cfa:	e8 11 2e 00 00       	call   3b10 <printf>
+  wait();
+     cff:	e8 87 2c 00 00       	call   398b <wait>
+  wait();
+     d04:	e8 82 2c 00 00       	call   398b <wait>
+  wait();
+     d09:	e8 7d 2c 00 00       	call   398b <wait>
+  printf(1, "preempt ok\n");
+     d0e:	5e                   	pop    %esi
+     d0f:	5f                   	pop    %edi
+     d10:	68 87 44 00 00       	push   $0x4487
+     d15:	6a 01                	push   $0x1
+     d17:	e8 f4 2d 00 00       	call   3b10 <printf>
+     d1c:	83 c4 10             	add    $0x10,%esp
+}
+     d1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d22:	5b                   	pop    %ebx
+     d23:	5e                   	pop    %esi
+     d24:	5f                   	pop    %edi
+     d25:	5d                   	pop    %ebp
+     d26:	c3                   	ret    
+      printf(1, "preempt write error");
+     d27:	83 ec 08             	sub    $0x8,%esp
+     d2a:	68 4e 44 00 00       	push   $0x444e
+     d2f:	6a 01                	push   $0x1
+     d31:	e8 da 2d 00 00       	call   3b10 <printf>
+     d36:	83 c4 10             	add    $0x10,%esp
+     d39:	e9 45 ff ff ff       	jmp    c83 <preempt+0x83>
+    printf(1, "preempt read error");
+     d3e:	83 ec 08             	sub    $0x8,%esp
+     d41:	68 62 44 00 00       	push   $0x4462
+     d46:	6a 01                	push   $0x1
+     d48:	e8 c3 2d 00 00       	call   3b10 <printf>
+    return;
+     d4d:	83 c4 10             	add    $0x10,%esp
+     d50:	eb cd                	jmp    d1f <preempt+0x11f>
+     d52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000d60 <exitwait>:
+{
+     d60:	f3 0f 1e fb          	endbr32 
+     d64:	55                   	push   %ebp
+     d65:	89 e5                	mov    %esp,%ebp
+     d67:	56                   	push   %esi
+     d68:	be 64 00 00 00       	mov    $0x64,%esi
+     d6d:	53                   	push   %ebx
+     d6e:	eb 10                	jmp    d80 <exitwait+0x20>
+    if(pid){
+     d70:	74 68                	je     dda <exitwait+0x7a>
+      if(wait() != pid){
+     d72:	e8 14 2c 00 00       	call   398b <wait>
+     d77:	39 d8                	cmp    %ebx,%eax
+     d79:	75 2d                	jne    da8 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d7b:	83 ee 01             	sub    $0x1,%esi
+     d7e:	74 41                	je     dc1 <exitwait+0x61>
+    pid = fork();
+     d80:	e8 f6 2b 00 00       	call   397b <fork>
+     d85:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d87:	85 c0                	test   %eax,%eax
+     d89:	79 e5                	jns    d70 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d8b:	83 ec 08             	sub    $0x8,%esp
+     d8e:	68 f1 4f 00 00       	push   $0x4ff1
+     d93:	6a 01                	push   $0x1
+     d95:	e8 76 2d 00 00       	call   3b10 <printf>
+      return;
+     d9a:	83 c4 10             	add    $0x10,%esp
+}
+     d9d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     da0:	5b                   	pop    %ebx
+     da1:	5e                   	pop    %esi
+     da2:	5d                   	pop    %ebp
+     da3:	c3                   	ret    
+     da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     da8:	83 ec 08             	sub    $0x8,%esp
+     dab:	68 93 44 00 00       	push   $0x4493
+     db0:	6a 01                	push   $0x1
+     db2:	e8 59 2d 00 00       	call   3b10 <printf>
+        return;
+     db7:	83 c4 10             	add    $0x10,%esp
+}
+     dba:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     dbd:	5b                   	pop    %ebx
+     dbe:	5e                   	pop    %esi
+     dbf:	5d                   	pop    %ebp
+     dc0:	c3                   	ret    
+  printf(1, "exitwait ok\n");
+     dc1:	83 ec 08             	sub    $0x8,%esp
+     dc4:	68 a3 44 00 00       	push   $0x44a3
+     dc9:	6a 01                	push   $0x1
+     dcb:	e8 40 2d 00 00       	call   3b10 <printf>
+     dd0:	83 c4 10             	add    $0x10,%esp
+}
+     dd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     dd6:	5b                   	pop    %ebx
+     dd7:	5e                   	pop    %esi
+     dd8:	5d                   	pop    %ebp
+     dd9:	c3                   	ret    
+      exit();
+     dda:	e8 a4 2b 00 00       	call   3983 <exit>
+     ddf:	90                   	nop
+
+00000de0 <mem>:
+{
+     de0:	f3 0f 1e fb          	endbr32 
+     de4:	55                   	push   %ebp
+     de5:	89 e5                	mov    %esp,%ebp
+     de7:	56                   	push   %esi
+     de8:	31 f6                	xor    %esi,%esi
+     dea:	53                   	push   %ebx
+  printf(1, "mem test\n");
+     deb:	83 ec 08             	sub    $0x8,%esp
+     dee:	68 b0 44 00 00       	push   $0x44b0
+     df3:	6a 01                	push   $0x1
+     df5:	e8 16 2d 00 00       	call   3b10 <printf>
+  ppid = getpid();
+     dfa:	e8 04 2c 00 00       	call   3a03 <getpid>
+     dff:	89 c3                	mov    %eax,%ebx
+  if((pid = fork()) == 0){
+     e01:	e8 75 2b 00 00       	call   397b <fork>
+     e06:	83 c4 10             	add    $0x10,%esp
+     e09:	85 c0                	test   %eax,%eax
+     e0b:	74 0f                	je     e1c <mem+0x3c>
+     e0d:	e9 8e 00 00 00       	jmp    ea0 <mem+0xc0>
+     e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *(char**)m2 = m1;
+     e18:	89 30                	mov    %esi,(%eax)
+     e1a:	89 c6                	mov    %eax,%esi
+    while((m2 = malloc(10001)) != 0){
+     e1c:	83 ec 0c             	sub    $0xc,%esp
+     e1f:	68 11 27 00 00       	push   $0x2711
+     e24:	e8 47 2f 00 00       	call   3d70 <malloc>
+     e29:	83 c4 10             	add    $0x10,%esp
+     e2c:	85 c0                	test   %eax,%eax
+     e2e:	75 e8                	jne    e18 <mem+0x38>
+    while(m1){
+     e30:	85 f6                	test   %esi,%esi
+     e32:	74 18                	je     e4c <mem+0x6c>
+     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     e38:	89 f0                	mov    %esi,%eax
+      free(m1);
+     e3a:	83 ec 0c             	sub    $0xc,%esp
+      m2 = *(char**)m1;
+     e3d:	8b 36                	mov    (%esi),%esi
+      free(m1);
+     e3f:	50                   	push   %eax
+     e40:	e8 9b 2e 00 00       	call   3ce0 <free>
+    while(m1){
+     e45:	83 c4 10             	add    $0x10,%esp
+     e48:	85 f6                	test   %esi,%esi
+     e4a:	75 ec                	jne    e38 <mem+0x58>
+    m1 = malloc(1024*20);
+     e4c:	83 ec 0c             	sub    $0xc,%esp
+     e4f:	68 00 50 00 00       	push   $0x5000
+     e54:	e8 17 2f 00 00       	call   3d70 <malloc>
+    if(m1 == 0){
+     e59:	83 c4 10             	add    $0x10,%esp
+     e5c:	85 c0                	test   %eax,%eax
+     e5e:	74 20                	je     e80 <mem+0xa0>
+    free(m1);
+     e60:	83 ec 0c             	sub    $0xc,%esp
+     e63:	50                   	push   %eax
+     e64:	e8 77 2e 00 00       	call   3ce0 <free>
+    printf(1, "mem ok\n");
+     e69:	58                   	pop    %eax
+     e6a:	5a                   	pop    %edx
+     e6b:	68 d4 44 00 00       	push   $0x44d4
+     e70:	6a 01                	push   $0x1
+     e72:	e8 99 2c 00 00       	call   3b10 <printf>
+    exit();
+     e77:	e8 07 2b 00 00       	call   3983 <exit>
+     e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e80:	83 ec 08             	sub    $0x8,%esp
+     e83:	68 ba 44 00 00       	push   $0x44ba
+     e88:	6a 01                	push   $0x1
+     e8a:	e8 81 2c 00 00       	call   3b10 <printf>
+      kill(ppid);
+     e8f:	89 1c 24             	mov    %ebx,(%esp)
+     e92:	e8 1c 2b 00 00       	call   39b3 <kill>
+      exit();
+     e97:	e8 e7 2a 00 00       	call   3983 <exit>
+     e9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     ea0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ea3:	5b                   	pop    %ebx
+     ea4:	5e                   	pop    %esi
+     ea5:	5d                   	pop    %ebp
+    wait();
+     ea6:	e9 e0 2a 00 00       	jmp    398b <wait>
+     eab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     eaf:	90                   	nop
+
+00000eb0 <sharedfd>:
+{
+     eb0:	f3 0f 1e fb          	endbr32 
+     eb4:	55                   	push   %ebp
+     eb5:	89 e5                	mov    %esp,%ebp
+     eb7:	57                   	push   %edi
+     eb8:	56                   	push   %esi
+     eb9:	53                   	push   %ebx
+     eba:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     ebd:	68 dc 44 00 00       	push   $0x44dc
+     ec2:	6a 01                	push   $0x1
+     ec4:	e8 47 2c 00 00       	call   3b10 <printf>
+  unlink("sharedfd");
+     ec9:	c7 04 24 eb 44 00 00 	movl   $0x44eb,(%esp)
+     ed0:	e8 fe 2a 00 00       	call   39d3 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     ed5:	5b                   	pop    %ebx
+     ed6:	5e                   	pop    %esi
+     ed7:	68 02 02 00 00       	push   $0x202
+     edc:	68 eb 44 00 00       	push   $0x44eb
+     ee1:	e8 dd 2a 00 00       	call   39c3 <open>
+  if(fd < 0){
+     ee6:	83 c4 10             	add    $0x10,%esp
+     ee9:	85 c0                	test   %eax,%eax
+     eeb:	0f 88 26 01 00 00    	js     1017 <sharedfd+0x167>
+     ef1:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     ef3:	8d 75 de             	lea    -0x22(%ebp),%esi
+     ef6:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     efb:	e8 7b 2a 00 00       	call   397b <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     f00:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     f03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     f06:	19 c0                	sbb    %eax,%eax
+     f08:	83 ec 04             	sub    $0x4,%esp
+     f0b:	83 e0 f3             	and    $0xfffffff3,%eax
+     f0e:	6a 0a                	push   $0xa
+     f10:	83 c0 70             	add    $0x70,%eax
+     f13:	50                   	push   %eax
+     f14:	56                   	push   %esi
+     f15:	e8 c6 28 00 00       	call   37e0 <memset>
+     f1a:	83 c4 10             	add    $0x10,%esp
+     f1d:	eb 06                	jmp    f25 <sharedfd+0x75>
+     f1f:	90                   	nop
+  for(i = 0; i < 1000; i++){
+     f20:	83 eb 01             	sub    $0x1,%ebx
+     f23:	74 26                	je     f4b <sharedfd+0x9b>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     f25:	83 ec 04             	sub    $0x4,%esp
+     f28:	6a 0a                	push   $0xa
+     f2a:	56                   	push   %esi
+     f2b:	57                   	push   %edi
+     f2c:	e8 72 2a 00 00       	call   39a3 <write>
+     f31:	83 c4 10             	add    $0x10,%esp
+     f34:	83 f8 0a             	cmp    $0xa,%eax
+     f37:	74 e7                	je     f20 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     f39:	83 ec 08             	sub    $0x8,%esp
+     f3c:	68 dc 51 00 00       	push   $0x51dc
+     f41:	6a 01                	push   $0x1
+     f43:	e8 c8 2b 00 00       	call   3b10 <printf>
+      break;
+     f48:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     f4b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     f4e:	85 c9                	test   %ecx,%ecx
+     f50:	0f 84 f5 00 00 00    	je     104b <sharedfd+0x19b>
+    wait();
+     f56:	e8 30 2a 00 00       	call   398b <wait>
+  close(fd);
+     f5b:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     f5e:	31 db                	xor    %ebx,%ebx
+  close(fd);
+     f60:	57                   	push   %edi
+     f61:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     f64:	e8 42 2a 00 00       	call   39ab <close>
+  fd = open("sharedfd", 0);
+     f69:	58                   	pop    %eax
+     f6a:	5a                   	pop    %edx
+     f6b:	6a 00                	push   $0x0
+     f6d:	68 eb 44 00 00       	push   $0x44eb
+     f72:	e8 4c 2a 00 00       	call   39c3 <open>
+  if(fd < 0){
+     f77:	83 c4 10             	add    $0x10,%esp
+  nc = np = 0;
+     f7a:	31 d2                	xor    %edx,%edx
+  fd = open("sharedfd", 0);
+     f7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if(fd < 0){
+     f7f:	85 c0                	test   %eax,%eax
+     f81:	0f 88 aa 00 00 00    	js     1031 <sharedfd+0x181>
+     f87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f8e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f90:	83 ec 04             	sub    $0x4,%esp
+     f93:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f96:	6a 0a                	push   $0xa
+     f98:	56                   	push   %esi
+     f99:	ff 75 d0             	pushl  -0x30(%ebp)
+     f9c:	e8 fa 29 00 00       	call   399b <read>
+     fa1:	83 c4 10             	add    $0x10,%esp
+     fa4:	85 c0                	test   %eax,%eax
+     fa6:	7e 28                	jle    fd0 <sharedfd+0x120>
+    for(i = 0; i < sizeof(buf); i++){
+     fa8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fab:	89 f0                	mov    %esi,%eax
+     fad:	eb 13                	jmp    fc2 <sharedfd+0x112>
+     faf:	90                   	nop
+        np++;
+     fb0:	80 f9 70             	cmp    $0x70,%cl
+     fb3:	0f 94 c1             	sete   %cl
+     fb6:	0f b6 c9             	movzbl %cl,%ecx
+     fb9:	01 cb                	add    %ecx,%ebx
+    for(i = 0; i < sizeof(buf); i++){
+     fbb:	83 c0 01             	add    $0x1,%eax
+     fbe:	39 c7                	cmp    %eax,%edi
+     fc0:	74 ce                	je     f90 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     fc2:	0f b6 08             	movzbl (%eax),%ecx
+     fc5:	80 f9 63             	cmp    $0x63,%cl
+     fc8:	75 e6                	jne    fb0 <sharedfd+0x100>
+        nc++;
+     fca:	83 c2 01             	add    $0x1,%edx
+      if(buf[i] == 'p')
+     fcd:	eb ec                	jmp    fbb <sharedfd+0x10b>
+     fcf:	90                   	nop
+  close(fd);
+     fd0:	83 ec 0c             	sub    $0xc,%esp
+     fd3:	ff 75 d0             	pushl  -0x30(%ebp)
+     fd6:	e8 d0 29 00 00       	call   39ab <close>
+  unlink("sharedfd");
+     fdb:	c7 04 24 eb 44 00 00 	movl   $0x44eb,(%esp)
+     fe2:	e8 ec 29 00 00       	call   39d3 <unlink>
+  if(nc == 10000 && np == 10000){
+     fe7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fea:	83 c4 10             	add    $0x10,%esp
+     fed:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     ff3:	75 5b                	jne    1050 <sharedfd+0x1a0>
+     ff5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     ffb:	75 53                	jne    1050 <sharedfd+0x1a0>
+    printf(1, "sharedfd ok\n");
+     ffd:	83 ec 08             	sub    $0x8,%esp
+    1000:	68 f4 44 00 00       	push   $0x44f4
+    1005:	6a 01                	push   $0x1
+    1007:	e8 04 2b 00 00       	call   3b10 <printf>
+    100c:	83 c4 10             	add    $0x10,%esp
+}
+    100f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1012:	5b                   	pop    %ebx
+    1013:	5e                   	pop    %esi
+    1014:	5f                   	pop    %edi
+    1015:	5d                   	pop    %ebp
+    1016:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for writing");
+    1017:	83 ec 08             	sub    $0x8,%esp
+    101a:	68 b0 51 00 00       	push   $0x51b0
+    101f:	6a 01                	push   $0x1
+    1021:	e8 ea 2a 00 00       	call   3b10 <printf>
+    return;
+    1026:	83 c4 10             	add    $0x10,%esp
+}
+    1029:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    102c:	5b                   	pop    %ebx
+    102d:	5e                   	pop    %esi
+    102e:	5f                   	pop    %edi
+    102f:	5d                   	pop    %ebp
+    1030:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    1031:	83 ec 08             	sub    $0x8,%esp
+    1034:	68 fc 51 00 00       	push   $0x51fc
+    1039:	6a 01                	push   $0x1
+    103b:	e8 d0 2a 00 00       	call   3b10 <printf>
+    return;
+    1040:	83 c4 10             	add    $0x10,%esp
+}
+    1043:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1046:	5b                   	pop    %ebx
+    1047:	5e                   	pop    %esi
+    1048:	5f                   	pop    %edi
+    1049:	5d                   	pop    %ebp
+    104a:	c3                   	ret    
+    exit();
+    104b:	e8 33 29 00 00       	call   3983 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    1050:	53                   	push   %ebx
+    1051:	52                   	push   %edx
+    1052:	68 01 45 00 00       	push   $0x4501
+    1057:	6a 01                	push   $0x1
+    1059:	e8 b2 2a 00 00       	call   3b10 <printf>
+    exit();
+    105e:	e8 20 29 00 00       	call   3983 <exit>
+    1063:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00001070 <fourfiles>:
+{
+    1070:	f3 0f 1e fb          	endbr32 
+    1074:	55                   	push   %ebp
+    1075:	89 e5                	mov    %esp,%ebp
+    1077:	57                   	push   %edi
+    1078:	56                   	push   %esi
+  printf(1, "fourfiles test\n");
+    1079:	be 16 45 00 00       	mov    $0x4516,%esi
+{
+    107e:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    107f:	31 db                	xor    %ebx,%ebx
+{
+    1081:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1084:	c7 45 d8 16 45 00 00 	movl   $0x4516,-0x28(%ebp)
+  printf(1, "fourfiles test\n");
+    108b:	68 1c 45 00 00       	push   $0x451c
+    1090:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1092:	c7 45 dc 5f 46 00 00 	movl   $0x465f,-0x24(%ebp)
+    1099:	c7 45 e0 63 46 00 00 	movl   $0x4663,-0x20(%ebp)
+    10a0:	c7 45 e4 19 45 00 00 	movl   $0x4519,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    10a7:	e8 64 2a 00 00       	call   3b10 <printf>
+    10ac:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    10af:	83 ec 0c             	sub    $0xc,%esp
+    10b2:	56                   	push   %esi
+    10b3:	e8 1b 29 00 00       	call   39d3 <unlink>
+    pid = fork();
+    10b8:	e8 be 28 00 00       	call   397b <fork>
+    if(pid < 0){
+    10bd:	83 c4 10             	add    $0x10,%esp
+    10c0:	85 c0                	test   %eax,%eax
+    10c2:	0f 88 60 01 00 00    	js     1228 <fourfiles+0x1b8>
+    if(pid == 0){
+    10c8:	0f 84 e5 00 00 00    	je     11b3 <fourfiles+0x143>
+  for(pi = 0; pi < 4; pi++){
+    10ce:	83 c3 01             	add    $0x1,%ebx
+    10d1:	83 fb 04             	cmp    $0x4,%ebx
+    10d4:	74 06                	je     10dc <fourfiles+0x6c>
+    10d6:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    10da:	eb d3                	jmp    10af <fourfiles+0x3f>
+    wait();
+    10dc:	e8 aa 28 00 00       	call   398b <wait>
+  for(i = 0; i < 2; i++){
+    10e1:	31 f6                	xor    %esi,%esi
+    wait();
+    10e3:	e8 a3 28 00 00       	call   398b <wait>
+    10e8:	e8 9e 28 00 00       	call   398b <wait>
+    10ed:	e8 99 28 00 00       	call   398b <wait>
+    fname = names[i];
+    10f2:	8b 44 b5 d8          	mov    -0x28(%ebp,%esi,4),%eax
+    fd = open(fname, 0);
+    10f6:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    10f9:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    10fb:	6a 00                	push   $0x0
+    10fd:	50                   	push   %eax
+    fname = names[i];
+    10fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    fd = open(fname, 0);
+    1101:	e8 bd 28 00 00       	call   39c3 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    1106:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    1109:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    110c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1110:	83 ec 04             	sub    $0x4,%esp
+    1113:	68 00 20 00 00       	push   $0x2000
+    1118:	68 80 93 00 00       	push   $0x9380
+    111d:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1120:	e8 76 28 00 00       	call   399b <read>
+    1125:	83 c4 10             	add    $0x10,%esp
+    1128:	85 c0                	test   %eax,%eax
+    112a:	7e 22                	jle    114e <fourfiles+0xde>
+      for(j = 0; j < n; j++){
+    112c:	31 d2                	xor    %edx,%edx
+    112e:	66 90                	xchg   %ax,%ax
+        if(buf[j] != '0'+i){
+    1130:	83 fe 01             	cmp    $0x1,%esi
+    1133:	0f be ba 80 93 00 00 	movsbl 0x9380(%edx),%edi
+    113a:	19 c9                	sbb    %ecx,%ecx
+    113c:	83 c1 31             	add    $0x31,%ecx
+    113f:	39 cf                	cmp    %ecx,%edi
+    1141:	75 5c                	jne    119f <fourfiles+0x12f>
+      for(j = 0; j < n; j++){
+    1143:	83 c2 01             	add    $0x1,%edx
+    1146:	39 d0                	cmp    %edx,%eax
+    1148:	75 e6                	jne    1130 <fourfiles+0xc0>
+      total += n;
+    114a:	01 c3                	add    %eax,%ebx
+    114c:	eb c2                	jmp    1110 <fourfiles+0xa0>
+    close(fd);
+    114e:	83 ec 0c             	sub    $0xc,%esp
+    1151:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1154:	e8 52 28 00 00       	call   39ab <close>
+    if(total != 12*500){
+    1159:	83 c4 10             	add    $0x10,%esp
+    115c:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1162:	0f 85 d4 00 00 00    	jne    123c <fourfiles+0x1cc>
+    unlink(fname);
+    1168:	83 ec 0c             	sub    $0xc,%esp
+    116b:	ff 75 d0             	pushl  -0x30(%ebp)
+    116e:	e8 60 28 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 2; i++){
+    1173:	83 c4 10             	add    $0x10,%esp
+    1176:	83 fe 01             	cmp    $0x1,%esi
+    1179:	75 1a                	jne    1195 <fourfiles+0x125>
+  printf(1, "fourfiles ok\n");
+    117b:	83 ec 08             	sub    $0x8,%esp
+    117e:	68 5a 45 00 00       	push   $0x455a
+    1183:	6a 01                	push   $0x1
+    1185:	e8 86 29 00 00       	call   3b10 <printf>
+}
+    118a:	83 c4 10             	add    $0x10,%esp
+    118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1190:	5b                   	pop    %ebx
+    1191:	5e                   	pop    %esi
+    1192:	5f                   	pop    %edi
+    1193:	5d                   	pop    %ebp
+    1194:	c3                   	ret    
+    1195:	be 01 00 00 00       	mov    $0x1,%esi
+    119a:	e9 53 ff ff ff       	jmp    10f2 <fourfiles+0x82>
+          printf(1, "wrong char\n");
+    119f:	83 ec 08             	sub    $0x8,%esp
+    11a2:	68 3d 45 00 00       	push   $0x453d
+    11a7:	6a 01                	push   $0x1
+    11a9:	e8 62 29 00 00       	call   3b10 <printf>
+          exit();
+    11ae:	e8 d0 27 00 00       	call   3983 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    11b3:	83 ec 08             	sub    $0x8,%esp
+    11b6:	68 02 02 00 00       	push   $0x202
+    11bb:	56                   	push   %esi
+    11bc:	e8 02 28 00 00       	call   39c3 <open>
+      if(fd < 0){
+    11c1:	83 c4 10             	add    $0x10,%esp
+      fd = open(fname, O_CREATE | O_RDWR);
+    11c4:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    11c6:	85 c0                	test   %eax,%eax
+    11c8:	78 45                	js     120f <fourfiles+0x19f>
+      memset(buf, '0'+pi, 512);
+    11ca:	83 ec 04             	sub    $0x4,%esp
+    11cd:	83 c3 30             	add    $0x30,%ebx
+    11d0:	68 00 02 00 00       	push   $0x200
+    11d5:	53                   	push   %ebx
+    11d6:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    11db:	68 80 93 00 00       	push   $0x9380
+    11e0:	e8 fb 25 00 00       	call   37e0 <memset>
+    11e5:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    11e8:	83 ec 04             	sub    $0x4,%esp
+    11eb:	68 f4 01 00 00       	push   $0x1f4
+    11f0:	68 80 93 00 00       	push   $0x9380
+    11f5:	56                   	push   %esi
+    11f6:	e8 a8 27 00 00       	call   39a3 <write>
+    11fb:	83 c4 10             	add    $0x10,%esp
+    11fe:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    1203:	75 4a                	jne    124f <fourfiles+0x1df>
+      for(i = 0; i < 12; i++){
+    1205:	83 eb 01             	sub    $0x1,%ebx
+    1208:	75 de                	jne    11e8 <fourfiles+0x178>
+      exit();
+    120a:	e8 74 27 00 00       	call   3983 <exit>
+        printf(1, "create failed\n");
+    120f:	51                   	push   %ecx
+    1210:	51                   	push   %ecx
+    1211:	68 b7 47 00 00       	push   $0x47b7
+    1216:	6a 01                	push   $0x1
+    1218:	e8 f3 28 00 00       	call   3b10 <printf>
+        exit();
+    121d:	e8 61 27 00 00       	call   3983 <exit>
+    1222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      printf(1, "fork failed\n");
+    1228:	83 ec 08             	sub    $0x8,%esp
+    122b:	68 f1 4f 00 00       	push   $0x4ff1
+    1230:	6a 01                	push   $0x1
+    1232:	e8 d9 28 00 00       	call   3b10 <printf>
+      exit();
+    1237:	e8 47 27 00 00       	call   3983 <exit>
+      printf(1, "wrong length %d\n", total);
+    123c:	50                   	push   %eax
+    123d:	53                   	push   %ebx
+    123e:	68 49 45 00 00       	push   $0x4549
+    1243:	6a 01                	push   $0x1
+    1245:	e8 c6 28 00 00       	call   3b10 <printf>
+      exit();
+    124a:	e8 34 27 00 00       	call   3983 <exit>
+          printf(1, "write failed %d\n", n);
+    124f:	52                   	push   %edx
+    1250:	50                   	push   %eax
+    1251:	68 2c 45 00 00       	push   $0x452c
+    1256:	6a 01                	push   $0x1
+    1258:	e8 b3 28 00 00       	call   3b10 <printf>
+          exit();
+    125d:	e8 21 27 00 00       	call   3983 <exit>
+    1262:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001270 <createdelete>:
+{
+    1270:	f3 0f 1e fb          	endbr32 
+    1274:	55                   	push   %ebp
+    1275:	89 e5                	mov    %esp,%ebp
+    1277:	57                   	push   %edi
+    1278:	56                   	push   %esi
+    1279:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    127a:	31 db                	xor    %ebx,%ebx
+{
+    127c:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    127f:	68 68 45 00 00       	push   $0x4568
+    1284:	6a 01                	push   $0x1
+    1286:	e8 85 28 00 00       	call   3b10 <printf>
+    128b:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    128e:	e8 e8 26 00 00       	call   397b <fork>
+    if(pid < 0){
+    1293:	85 c0                	test   %eax,%eax
+    1295:	0f 88 ce 01 00 00    	js     1469 <createdelete+0x1f9>
+    if(pid == 0){
+    129b:	0f 84 17 01 00 00    	je     13b8 <createdelete+0x148>
+  for(pi = 0; pi < 4; pi++){
+    12a1:	83 c3 01             	add    $0x1,%ebx
+    12a4:	83 fb 04             	cmp    $0x4,%ebx
+    12a7:	75 e5                	jne    128e <createdelete+0x1e>
+    wait();
+    12a9:	e8 dd 26 00 00       	call   398b <wait>
+    12ae:	8d 7d c8             	lea    -0x38(%ebp),%edi
+  name[0] = name[1] = name[2] = 0;
+    12b1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    wait();
+    12b6:	e8 d0 26 00 00       	call   398b <wait>
+    12bb:	e8 cb 26 00 00       	call   398b <wait>
+    12c0:	e8 c6 26 00 00       	call   398b <wait>
+  name[0] = name[1] = name[2] = 0;
+    12c5:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+  for(i = 0; i < N; i++){
+    12c9:	89 7d c0             	mov    %edi,-0x40(%ebp)
+    12cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    for(pi = 0; pi < 4; pi++){
+    12d0:	8d 46 31             	lea    0x31(%esi),%eax
+    12d3:	89 f7                	mov    %esi,%edi
+    12d5:	83 c6 01             	add    $0x1,%esi
+    12d8:	83 fe 09             	cmp    $0x9,%esi
+    12db:	88 45 c7             	mov    %al,-0x39(%ebp)
+    12de:	0f 9f c3             	setg   %bl
+    12e1:	85 f6                	test   %esi,%esi
+    12e3:	0f 94 c0             	sete   %al
+    12e6:	09 c3                	or     %eax,%ebx
+    12e8:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+      name[2] = '\0';
+    12eb:	bb 70 00 00 00       	mov    $0x70,%ebx
+      fd = open(name, 0);
+    12f0:	83 ec 08             	sub    $0x8,%esp
+      name[1] = '0' + i;
+    12f3:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      name[0] = 'p' + pi;
+    12f7:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    12fa:	6a 00                	push   $0x0
+    12fc:	ff 75 c0             	pushl  -0x40(%ebp)
+      name[1] = '0' + i;
+    12ff:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1302:	e8 bc 26 00 00       	call   39c3 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    1307:	83 c4 10             	add    $0x10,%esp
+    130a:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    130e:	0f 84 8c 00 00 00    	je     13a0 <createdelete+0x130>
+    1314:	85 c0                	test   %eax,%eax
+    1316:	0f 88 21 01 00 00    	js     143d <createdelete+0x1cd>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    131c:	83 ff 08             	cmp    $0x8,%edi
+    131f:	0f 86 60 01 00 00    	jbe    1485 <createdelete+0x215>
+        close(fd);
+    1325:	83 ec 0c             	sub    $0xc,%esp
+    1328:	50                   	push   %eax
+    1329:	e8 7d 26 00 00       	call   39ab <close>
+    132e:	83 c4 10             	add    $0x10,%esp
+    for(pi = 0; pi < 4; pi++){
+    1331:	83 c3 01             	add    $0x1,%ebx
+    1334:	80 fb 74             	cmp    $0x74,%bl
+    1337:	75 b7                	jne    12f0 <createdelete+0x80>
+  for(i = 0; i < N; i++){
+    1339:	83 fe 13             	cmp    $0x13,%esi
+    133c:	75 92                	jne    12d0 <createdelete+0x60>
+    133e:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    1341:	be 70 00 00 00       	mov    $0x70,%esi
+    1346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    134d:	8d 76 00             	lea    0x0(%esi),%esi
+    for(pi = 0; pi < 4; pi++){
+    1350:	8d 46 c0             	lea    -0x40(%esi),%eax
+  name[0] = name[1] = name[2] = 0;
+    1353:	bb 04 00 00 00       	mov    $0x4,%ebx
+    1358:	88 45 c7             	mov    %al,-0x39(%ebp)
+      unlink(name);
+    135b:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    135e:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    1360:	57                   	push   %edi
+      name[0] = 'p' + i;
+    1361:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    1364:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+    1368:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    136b:	e8 63 26 00 00       	call   39d3 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1370:	83 c4 10             	add    $0x10,%esp
+    1373:	83 eb 01             	sub    $0x1,%ebx
+    1376:	75 e3                	jne    135b <createdelete+0xeb>
+  for(i = 0; i < N; i++){
+    1378:	83 c6 01             	add    $0x1,%esi
+    137b:	89 f0                	mov    %esi,%eax
+    137d:	3c 84                	cmp    $0x84,%al
+    137f:	75 cf                	jne    1350 <createdelete+0xe0>
+  printf(1, "createdelete ok\n");
+    1381:	83 ec 08             	sub    $0x8,%esp
+    1384:	68 7b 45 00 00       	push   $0x457b
+    1389:	6a 01                	push   $0x1
+    138b:	e8 80 27 00 00       	call   3b10 <printf>
+}
+    1390:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1393:	5b                   	pop    %ebx
+    1394:	5e                   	pop    %esi
+    1395:	5f                   	pop    %edi
+    1396:	5d                   	pop    %ebp
+    1397:	c3                   	ret    
+    1398:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    139f:	90                   	nop
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    13a0:	83 ff 08             	cmp    $0x8,%edi
+    13a3:	0f 86 d4 00 00 00    	jbe    147d <createdelete+0x20d>
+      if(fd >= 0)
+    13a9:	85 c0                	test   %eax,%eax
+    13ab:	78 84                	js     1331 <createdelete+0xc1>
+    13ad:	e9 73 ff ff ff       	jmp    1325 <createdelete+0xb5>
+    13b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      name[0] = 'p' + pi;
+    13b8:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    13bb:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    13bf:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    13c2:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    13c5:	31 db                	xor    %ebx,%ebx
+    13c7:	eb 0f                	jmp    13d8 <createdelete+0x168>
+    13c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    13d0:	83 fb 13             	cmp    $0x13,%ebx
+    13d3:	74 63                	je     1438 <createdelete+0x1c8>
+    13d5:	83 c3 01             	add    $0x1,%ebx
+        fd = open(name, O_CREATE | O_RDWR);
+    13d8:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    13db:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    13de:	68 02 02 00 00       	push   $0x202
+    13e3:	57                   	push   %edi
+        name[1] = '0' + i;
+    13e4:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    13e7:	e8 d7 25 00 00       	call   39c3 <open>
+        if(fd < 0){
+    13ec:	83 c4 10             	add    $0x10,%esp
+    13ef:	85 c0                	test   %eax,%eax
+    13f1:	78 62                	js     1455 <createdelete+0x1e5>
+        close(fd);
+    13f3:	83 ec 0c             	sub    $0xc,%esp
+    13f6:	50                   	push   %eax
+    13f7:	e8 af 25 00 00       	call   39ab <close>
+        if(i > 0 && (i % 2 ) == 0){
+    13fc:	83 c4 10             	add    $0x10,%esp
+    13ff:	85 db                	test   %ebx,%ebx
+    1401:	74 d2                	je     13d5 <createdelete+0x165>
+    1403:	f6 c3 01             	test   $0x1,%bl
+    1406:	75 c8                	jne    13d0 <createdelete+0x160>
+          if(unlink(name) < 0){
+    1408:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    140b:	89 d8                	mov    %ebx,%eax
+          if(unlink(name) < 0){
+    140d:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    140e:	d1 f8                	sar    %eax
+    1410:	83 c0 30             	add    $0x30,%eax
+    1413:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    1416:	e8 b8 25 00 00       	call   39d3 <unlink>
+    141b:	83 c4 10             	add    $0x10,%esp
+    141e:	85 c0                	test   %eax,%eax
+    1420:	79 ae                	jns    13d0 <createdelete+0x160>
+            printf(1, "unlink failed\n");
+    1422:	52                   	push   %edx
+    1423:	52                   	push   %edx
+    1424:	68 69 41 00 00       	push   $0x4169
+    1429:	6a 01                	push   $0x1
+    142b:	e8 e0 26 00 00       	call   3b10 <printf>
+            exit();
+    1430:	e8 4e 25 00 00       	call   3983 <exit>
+    1435:	8d 76 00             	lea    0x0(%esi),%esi
+      exit();
+    1438:	e8 46 25 00 00       	call   3983 <exit>
+    143d:	8b 7d c0             	mov    -0x40(%ebp),%edi
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    1440:	83 ec 04             	sub    $0x4,%esp
+    1443:	57                   	push   %edi
+    1444:	68 28 52 00 00       	push   $0x5228
+    1449:	6a 01                	push   $0x1
+    144b:	e8 c0 26 00 00       	call   3b10 <printf>
+        exit();
+    1450:	e8 2e 25 00 00       	call   3983 <exit>
+          printf(1, "create failed\n");
+    1455:	83 ec 08             	sub    $0x8,%esp
+    1458:	68 b7 47 00 00       	push   $0x47b7
+    145d:	6a 01                	push   $0x1
+    145f:	e8 ac 26 00 00       	call   3b10 <printf>
+          exit();
+    1464:	e8 1a 25 00 00       	call   3983 <exit>
+      printf(1, "fork failed\n");
+    1469:	83 ec 08             	sub    $0x8,%esp
+    146c:	68 f1 4f 00 00       	push   $0x4ff1
+    1471:	6a 01                	push   $0x1
+    1473:	e8 98 26 00 00       	call   3b10 <printf>
+      exit();
+    1478:	e8 06 25 00 00       	call   3983 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    147d:	85 c0                	test   %eax,%eax
+    147f:	0f 88 ac fe ff ff    	js     1331 <createdelete+0xc1>
+    1485:	8b 7d c0             	mov    -0x40(%ebp),%edi
+        printf(1, "oops createdelete %s did exist\n", name);
+    1488:	50                   	push   %eax
+    1489:	57                   	push   %edi
+    148a:	68 4c 52 00 00       	push   $0x524c
+    148f:	6a 01                	push   $0x1
+    1491:	e8 7a 26 00 00       	call   3b10 <printf>
+        exit();
+    1496:	e8 e8 24 00 00       	call   3983 <exit>
+    149b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    149f:	90                   	nop
+
+000014a0 <unlinkread>:
+{
+    14a0:	f3 0f 1e fb          	endbr32 
+    14a4:	55                   	push   %ebp
+    14a5:	89 e5                	mov    %esp,%ebp
+    14a7:	56                   	push   %esi
+    14a8:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    14a9:	83 ec 08             	sub    $0x8,%esp
+    14ac:	68 8c 45 00 00       	push   $0x458c
+    14b1:	6a 01                	push   $0x1
+    14b3:	e8 58 26 00 00       	call   3b10 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    14b8:	5b                   	pop    %ebx
+    14b9:	5e                   	pop    %esi
+    14ba:	68 02 02 00 00       	push   $0x202
+    14bf:	68 9d 45 00 00       	push   $0x459d
+    14c4:	e8 fa 24 00 00       	call   39c3 <open>
+  if(fd < 0){
+    14c9:	83 c4 10             	add    $0x10,%esp
+    14cc:	85 c0                	test   %eax,%eax
+    14ce:	0f 88 e6 00 00 00    	js     15ba <unlinkread+0x11a>
+  write(fd, "hello", 5);
+    14d4:	83 ec 04             	sub    $0x4,%esp
+    14d7:	89 c3                	mov    %eax,%ebx
+    14d9:	6a 05                	push   $0x5
+    14db:	68 c2 45 00 00       	push   $0x45c2
+    14e0:	50                   	push   %eax
+    14e1:	e8 bd 24 00 00       	call   39a3 <write>
+  close(fd);
+    14e6:	89 1c 24             	mov    %ebx,(%esp)
+    14e9:	e8 bd 24 00 00       	call   39ab <close>
+  fd = open("unlinkread", O_RDWR);
+    14ee:	58                   	pop    %eax
+    14ef:	5a                   	pop    %edx
+    14f0:	6a 02                	push   $0x2
+    14f2:	68 9d 45 00 00       	push   $0x459d
+    14f7:	e8 c7 24 00 00       	call   39c3 <open>
+  if(fd < 0){
+    14fc:	83 c4 10             	add    $0x10,%esp
+  fd = open("unlinkread", O_RDWR);
+    14ff:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1501:	85 c0                	test   %eax,%eax
+    1503:	0f 88 10 01 00 00    	js     1619 <unlinkread+0x179>
+  if(unlink("unlinkread") != 0){
+    1509:	83 ec 0c             	sub    $0xc,%esp
+    150c:	68 9d 45 00 00       	push   $0x459d
+    1511:	e8 bd 24 00 00       	call   39d3 <unlink>
+    1516:	83 c4 10             	add    $0x10,%esp
+    1519:	85 c0                	test   %eax,%eax
+    151b:	0f 85 e5 00 00 00    	jne    1606 <unlinkread+0x166>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1521:	83 ec 08             	sub    $0x8,%esp
+    1524:	68 02 02 00 00       	push   $0x202
+    1529:	68 9d 45 00 00       	push   $0x459d
+    152e:	e8 90 24 00 00       	call   39c3 <open>
+  write(fd1, "yyy", 3);
+    1533:	83 c4 0c             	add    $0xc,%esp
+    1536:	6a 03                	push   $0x3
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1538:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    153a:	68 fa 45 00 00       	push   $0x45fa
+    153f:	50                   	push   %eax
+    1540:	e8 5e 24 00 00       	call   39a3 <write>
+  close(fd1);
+    1545:	89 34 24             	mov    %esi,(%esp)
+    1548:	e8 5e 24 00 00       	call   39ab <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    154d:	83 c4 0c             	add    $0xc,%esp
+    1550:	68 00 20 00 00       	push   $0x2000
+    1555:	68 80 93 00 00       	push   $0x9380
+    155a:	53                   	push   %ebx
+    155b:	e8 3b 24 00 00       	call   399b <read>
+    1560:	83 c4 10             	add    $0x10,%esp
+    1563:	83 f8 05             	cmp    $0x5,%eax
+    1566:	0f 85 87 00 00 00    	jne    15f3 <unlinkread+0x153>
+  if(buf[0] != 'h'){
+    156c:	80 3d 80 93 00 00 68 	cmpb   $0x68,0x9380
+    1573:	75 6b                	jne    15e0 <unlinkread+0x140>
+  if(write(fd, buf, 10) != 10){
+    1575:	83 ec 04             	sub    $0x4,%esp
+    1578:	6a 0a                	push   $0xa
+    157a:	68 80 93 00 00       	push   $0x9380
+    157f:	53                   	push   %ebx
+    1580:	e8 1e 24 00 00       	call   39a3 <write>
+    1585:	83 c4 10             	add    $0x10,%esp
+    1588:	83 f8 0a             	cmp    $0xa,%eax
+    158b:	75 40                	jne    15cd <unlinkread+0x12d>
+  close(fd);
+    158d:	83 ec 0c             	sub    $0xc,%esp
+    1590:	53                   	push   %ebx
+    1591:	e8 15 24 00 00       	call   39ab <close>
+  unlink("unlinkread");
+    1596:	c7 04 24 9d 45 00 00 	movl   $0x459d,(%esp)
+    159d:	e8 31 24 00 00       	call   39d3 <unlink>
+  printf(1, "unlinkread ok\n");
+    15a2:	58                   	pop    %eax
+    15a3:	5a                   	pop    %edx
+    15a4:	68 45 46 00 00       	push   $0x4645
+    15a9:	6a 01                	push   $0x1
+    15ab:	e8 60 25 00 00       	call   3b10 <printf>
+}
+    15b0:	83 c4 10             	add    $0x10,%esp
+    15b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    15b6:	5b                   	pop    %ebx
+    15b7:	5e                   	pop    %esi
+    15b8:	5d                   	pop    %ebp
+    15b9:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    15ba:	51                   	push   %ecx
+    15bb:	51                   	push   %ecx
+    15bc:	68 a8 45 00 00       	push   $0x45a8
+    15c1:	6a 01                	push   $0x1
+    15c3:	e8 48 25 00 00       	call   3b10 <printf>
+    exit();
+    15c8:	e8 b6 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread write failed\n");
+    15cd:	51                   	push   %ecx
+    15ce:	51                   	push   %ecx
+    15cf:	68 2c 46 00 00       	push   $0x462c
+    15d4:	6a 01                	push   $0x1
+    15d6:	e8 35 25 00 00       	call   3b10 <printf>
+    exit();
+    15db:	e8 a3 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread wrong data\n");
+    15e0:	53                   	push   %ebx
+    15e1:	53                   	push   %ebx
+    15e2:	68 15 46 00 00       	push   $0x4615
+    15e7:	6a 01                	push   $0x1
+    15e9:	e8 22 25 00 00       	call   3b10 <printf>
+    exit();
+    15ee:	e8 90 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread read failed");
+    15f3:	56                   	push   %esi
+    15f4:	56                   	push   %esi
+    15f5:	68 fe 45 00 00       	push   $0x45fe
+    15fa:	6a 01                	push   $0x1
+    15fc:	e8 0f 25 00 00       	call   3b10 <printf>
+    exit();
+    1601:	e8 7d 23 00 00       	call   3983 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    1606:	50                   	push   %eax
+    1607:	50                   	push   %eax
+    1608:	68 e0 45 00 00       	push   $0x45e0
+    160d:	6a 01                	push   $0x1
+    160f:	e8 fc 24 00 00       	call   3b10 <printf>
+    exit();
+    1614:	e8 6a 23 00 00       	call   3983 <exit>
+    printf(1, "open unlinkread failed\n");
+    1619:	50                   	push   %eax
+    161a:	50                   	push   %eax
+    161b:	68 c8 45 00 00       	push   $0x45c8
+    1620:	6a 01                	push   $0x1
+    1622:	e8 e9 24 00 00       	call   3b10 <printf>
+    exit();
+    1627:	e8 57 23 00 00       	call   3983 <exit>
+    162c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001630 <linktest>:
+{
+    1630:	f3 0f 1e fb          	endbr32 
+    1634:	55                   	push   %ebp
+    1635:	89 e5                	mov    %esp,%ebp
+    1637:	53                   	push   %ebx
+    1638:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    163b:	68 54 46 00 00       	push   $0x4654
+    1640:	6a 01                	push   $0x1
+    1642:	e8 c9 24 00 00       	call   3b10 <printf>
+  unlink("lf1");
+    1647:	c7 04 24 5e 46 00 00 	movl   $0x465e,(%esp)
+    164e:	e8 80 23 00 00       	call   39d3 <unlink>
+  unlink("lf2");
+    1653:	c7 04 24 62 46 00 00 	movl   $0x4662,(%esp)
+    165a:	e8 74 23 00 00       	call   39d3 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    165f:	58                   	pop    %eax
+    1660:	5a                   	pop    %edx
+    1661:	68 02 02 00 00       	push   $0x202
+    1666:	68 5e 46 00 00       	push   $0x465e
+    166b:	e8 53 23 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1670:	83 c4 10             	add    $0x10,%esp
+    1673:	85 c0                	test   %eax,%eax
+    1675:	0f 88 1e 01 00 00    	js     1799 <linktest+0x169>
+  if(write(fd, "hello", 5) != 5){
+    167b:	83 ec 04             	sub    $0x4,%esp
+    167e:	89 c3                	mov    %eax,%ebx
+    1680:	6a 05                	push   $0x5
+    1682:	68 c2 45 00 00       	push   $0x45c2
+    1687:	50                   	push   %eax
+    1688:	e8 16 23 00 00       	call   39a3 <write>
+    168d:	83 c4 10             	add    $0x10,%esp
+    1690:	83 f8 05             	cmp    $0x5,%eax
+    1693:	0f 85 98 01 00 00    	jne    1831 <linktest+0x201>
+  close(fd);
+    1699:	83 ec 0c             	sub    $0xc,%esp
+    169c:	53                   	push   %ebx
+    169d:	e8 09 23 00 00       	call   39ab <close>
+  if(link("lf1", "lf2") < 0){
+    16a2:	5b                   	pop    %ebx
+    16a3:	58                   	pop    %eax
+    16a4:	68 62 46 00 00       	push   $0x4662
+    16a9:	68 5e 46 00 00       	push   $0x465e
+    16ae:	e8 30 23 00 00       	call   39e3 <link>
+    16b3:	83 c4 10             	add    $0x10,%esp
+    16b6:	85 c0                	test   %eax,%eax
+    16b8:	0f 88 60 01 00 00    	js     181e <linktest+0x1ee>
+  unlink("lf1");
+    16be:	83 ec 0c             	sub    $0xc,%esp
+    16c1:	68 5e 46 00 00       	push   $0x465e
+    16c6:	e8 08 23 00 00       	call   39d3 <unlink>
+  if(open("lf1", 0) >= 0){
+    16cb:	58                   	pop    %eax
+    16cc:	5a                   	pop    %edx
+    16cd:	6a 00                	push   $0x0
+    16cf:	68 5e 46 00 00       	push   $0x465e
+    16d4:	e8 ea 22 00 00       	call   39c3 <open>
+    16d9:	83 c4 10             	add    $0x10,%esp
+    16dc:	85 c0                	test   %eax,%eax
+    16de:	0f 89 27 01 00 00    	jns    180b <linktest+0x1db>
+  fd = open("lf2", 0);
+    16e4:	83 ec 08             	sub    $0x8,%esp
+    16e7:	6a 00                	push   $0x0
+    16e9:	68 62 46 00 00       	push   $0x4662
+    16ee:	e8 d0 22 00 00       	call   39c3 <open>
+  if(fd < 0){
+    16f3:	83 c4 10             	add    $0x10,%esp
+  fd = open("lf2", 0);
+    16f6:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    16f8:	85 c0                	test   %eax,%eax
+    16fa:	0f 88 f8 00 00 00    	js     17f8 <linktest+0x1c8>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    1700:	83 ec 04             	sub    $0x4,%esp
+    1703:	68 00 20 00 00       	push   $0x2000
+    1708:	68 80 93 00 00       	push   $0x9380
+    170d:	50                   	push   %eax
+    170e:	e8 88 22 00 00       	call   399b <read>
+    1713:	83 c4 10             	add    $0x10,%esp
+    1716:	83 f8 05             	cmp    $0x5,%eax
+    1719:	0f 85 c6 00 00 00    	jne    17e5 <linktest+0x1b5>
+  close(fd);
+    171f:	83 ec 0c             	sub    $0xc,%esp
+    1722:	53                   	push   %ebx
+    1723:	e8 83 22 00 00       	call   39ab <close>
+  if(link("lf2", "lf2") >= 0){
+    1728:	58                   	pop    %eax
+    1729:	5a                   	pop    %edx
+    172a:	68 62 46 00 00       	push   $0x4662
+    172f:	68 62 46 00 00       	push   $0x4662
+    1734:	e8 aa 22 00 00       	call   39e3 <link>
+    1739:	83 c4 10             	add    $0x10,%esp
+    173c:	85 c0                	test   %eax,%eax
+    173e:	0f 89 8e 00 00 00    	jns    17d2 <linktest+0x1a2>
+  unlink("lf2");
+    1744:	83 ec 0c             	sub    $0xc,%esp
+    1747:	68 62 46 00 00       	push   $0x4662
+    174c:	e8 82 22 00 00       	call   39d3 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    1751:	59                   	pop    %ecx
+    1752:	5b                   	pop    %ebx
+    1753:	68 5e 46 00 00       	push   $0x465e
+    1758:	68 62 46 00 00       	push   $0x4662
+    175d:	e8 81 22 00 00       	call   39e3 <link>
+    1762:	83 c4 10             	add    $0x10,%esp
+    1765:	85 c0                	test   %eax,%eax
+    1767:	79 56                	jns    17bf <linktest+0x18f>
+  if(link(".", "lf1") >= 0){
+    1769:	83 ec 08             	sub    $0x8,%esp
+    176c:	68 5e 46 00 00       	push   $0x465e
+    1771:	68 26 49 00 00       	push   $0x4926
+    1776:	e8 68 22 00 00       	call   39e3 <link>
+    177b:	83 c4 10             	add    $0x10,%esp
+    177e:	85 c0                	test   %eax,%eax
+    1780:	79 2a                	jns    17ac <linktest+0x17c>
+  printf(1, "linktest ok\n");
+    1782:	83 ec 08             	sub    $0x8,%esp
+    1785:	68 fc 46 00 00       	push   $0x46fc
+    178a:	6a 01                	push   $0x1
+    178c:	e8 7f 23 00 00       	call   3b10 <printf>
+}
+    1791:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1794:	83 c4 10             	add    $0x10,%esp
+    1797:	c9                   	leave  
+    1798:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1799:	50                   	push   %eax
+    179a:	50                   	push   %eax
+    179b:	68 66 46 00 00       	push   $0x4666
+    17a0:	6a 01                	push   $0x1
+    17a2:	e8 69 23 00 00       	call   3b10 <printf>
+    exit();
+    17a7:	e8 d7 21 00 00       	call   3983 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    17ac:	50                   	push   %eax
+    17ad:	50                   	push   %eax
+    17ae:	68 e0 46 00 00       	push   $0x46e0
+    17b3:	6a 01                	push   $0x1
+    17b5:	e8 56 23 00 00       	call   3b10 <printf>
+    exit();
+    17ba:	e8 c4 21 00 00       	call   3983 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    17bf:	52                   	push   %edx
+    17c0:	52                   	push   %edx
+    17c1:	68 94 52 00 00       	push   $0x5294
+    17c6:	6a 01                	push   $0x1
+    17c8:	e8 43 23 00 00       	call   3b10 <printf>
+    exit();
+    17cd:	e8 b1 21 00 00       	call   3983 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    17d2:	50                   	push   %eax
+    17d3:	50                   	push   %eax
+    17d4:	68 c2 46 00 00       	push   $0x46c2
+    17d9:	6a 01                	push   $0x1
+    17db:	e8 30 23 00 00       	call   3b10 <printf>
+    exit();
+    17e0:	e8 9e 21 00 00       	call   3983 <exit>
+    printf(1, "read lf2 failed\n");
+    17e5:	51                   	push   %ecx
+    17e6:	51                   	push   %ecx
+    17e7:	68 b1 46 00 00       	push   $0x46b1
+    17ec:	6a 01                	push   $0x1
+    17ee:	e8 1d 23 00 00       	call   3b10 <printf>
+    exit();
+    17f3:	e8 8b 21 00 00       	call   3983 <exit>
+    printf(1, "open lf2 failed\n");
+    17f8:	53                   	push   %ebx
+    17f9:	53                   	push   %ebx
+    17fa:	68 a0 46 00 00       	push   $0x46a0
+    17ff:	6a 01                	push   $0x1
+    1801:	e8 0a 23 00 00       	call   3b10 <printf>
+    exit();
+    1806:	e8 78 21 00 00       	call   3983 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    180b:	50                   	push   %eax
+    180c:	50                   	push   %eax
+    180d:	68 6c 52 00 00       	push   $0x526c
+    1812:	6a 01                	push   $0x1
+    1814:	e8 f7 22 00 00       	call   3b10 <printf>
+    exit();
+    1819:	e8 65 21 00 00       	call   3983 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    181e:	51                   	push   %ecx
+    181f:	51                   	push   %ecx
+    1820:	68 8b 46 00 00       	push   $0x468b
+    1825:	6a 01                	push   $0x1
+    1827:	e8 e4 22 00 00       	call   3b10 <printf>
+    exit();
+    182c:	e8 52 21 00 00       	call   3983 <exit>
+    printf(1, "write lf1 failed\n");
+    1831:	50                   	push   %eax
+    1832:	50                   	push   %eax
+    1833:	68 79 46 00 00       	push   $0x4679
+    1838:	6a 01                	push   $0x1
+    183a:	e8 d1 22 00 00       	call   3b10 <printf>
+    exit();
+    183f:	e8 3f 21 00 00       	call   3983 <exit>
+    1844:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    184b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    184f:	90                   	nop
+
+00001850 <concreate>:
+{
+    1850:	f3 0f 1e fb          	endbr32 
+    1854:	55                   	push   %ebp
+    1855:	89 e5                	mov    %esp,%ebp
+    1857:	57                   	push   %edi
+    1858:	56                   	push   %esi
+  for(i = 0; i < 40; i++){
+    1859:	31 f6                	xor    %esi,%esi
+{
+    185b:	53                   	push   %ebx
+    185c:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    185f:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    1862:	68 09 47 00 00       	push   $0x4709
+    1867:	6a 01                	push   $0x1
+    1869:	e8 a2 22 00 00       	call   3b10 <printf>
+  file[0] = 'C';
+    186e:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    1872:	83 c4 10             	add    $0x10,%esp
+    1875:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+  for(i = 0; i < 40; i++){
+    1879:	eb 48                	jmp    18c3 <concreate+0x73>
+    187b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    187f:	90                   	nop
+    1880:	69 c6 ab aa aa aa    	imul   $0xaaaaaaab,%esi,%eax
+    if(pid && (i % 3) == 1){
+    1886:	3d ab aa aa aa       	cmp    $0xaaaaaaab,%eax
+    188b:	0f 83 af 00 00 00    	jae    1940 <concreate+0xf0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1891:	83 ec 08             	sub    $0x8,%esp
+    1894:	68 02 02 00 00       	push   $0x202
+    1899:	53                   	push   %ebx
+    189a:	e8 24 21 00 00       	call   39c3 <open>
+      if(fd < 0){
+    189f:	83 c4 10             	add    $0x10,%esp
+    18a2:	85 c0                	test   %eax,%eax
+    18a4:	78 5f                	js     1905 <concreate+0xb5>
+      close(fd);
+    18a6:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    18a9:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    18ac:	50                   	push   %eax
+    18ad:	e8 f9 20 00 00       	call   39ab <close>
+    18b2:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18b5:	e8 d1 20 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    18ba:	83 fe 28             	cmp    $0x28,%esi
+    18bd:	0f 84 9f 00 00 00    	je     1962 <concreate+0x112>
+    unlink(file);
+    18c3:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    18c6:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    18c9:	53                   	push   %ebx
+    file[1] = '0' + i;
+    18ca:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    18cd:	e8 01 21 00 00       	call   39d3 <unlink>
+    pid = fork();
+    18d2:	e8 a4 20 00 00       	call   397b <fork>
+    if(pid && (i % 3) == 1){
+    18d7:	83 c4 10             	add    $0x10,%esp
+    18da:	85 c0                	test   %eax,%eax
+    18dc:	75 a2                	jne    1880 <concreate+0x30>
+      link("C0", file);
+    18de:	69 f6 cd cc cc cc    	imul   $0xcccccccd,%esi,%esi
+    } else if(pid == 0 && (i % 5) == 1){
+    18e4:	81 fe cd cc cc cc    	cmp    $0xcccccccd,%esi
+    18ea:	73 34                	jae    1920 <concreate+0xd0>
+      fd = open(file, O_CREATE | O_RDWR);
+    18ec:	83 ec 08             	sub    $0x8,%esp
+    18ef:	68 02 02 00 00       	push   $0x202
+    18f4:	53                   	push   %ebx
+    18f5:	e8 c9 20 00 00       	call   39c3 <open>
+      if(fd < 0){
+    18fa:	83 c4 10             	add    $0x10,%esp
+    18fd:	85 c0                	test   %eax,%eax
+    18ff:	0f 89 39 02 00 00    	jns    1b3e <concreate+0x2ee>
+        printf(1, "concreate create %s failed\n", file);
+    1905:	83 ec 04             	sub    $0x4,%esp
+    1908:	53                   	push   %ebx
+    1909:	68 1c 47 00 00       	push   $0x471c
+    190e:	6a 01                	push   $0x1
+    1910:	e8 fb 21 00 00       	call   3b10 <printf>
+        exit();
+    1915:	e8 69 20 00 00       	call   3983 <exit>
+    191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("C0", file);
+    1920:	83 ec 08             	sub    $0x8,%esp
+    1923:	53                   	push   %ebx
+    1924:	68 19 47 00 00       	push   $0x4719
+    1929:	e8 b5 20 00 00       	call   39e3 <link>
+    192e:	83 c4 10             	add    $0x10,%esp
+      exit();
+    1931:	e8 4d 20 00 00       	call   3983 <exit>
+    1936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    193d:	8d 76 00             	lea    0x0(%esi),%esi
+      link("C0", file);
+    1940:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    1943:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    1946:	53                   	push   %ebx
+    1947:	68 19 47 00 00       	push   $0x4719
+    194c:	e8 92 20 00 00       	call   39e3 <link>
+    1951:	83 c4 10             	add    $0x10,%esp
+      wait();
+    1954:	e8 32 20 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    1959:	83 fe 28             	cmp    $0x28,%esi
+    195c:	0f 85 61 ff ff ff    	jne    18c3 <concreate+0x73>
+  memset(fa, 0, sizeof(fa));
+    1962:	83 ec 04             	sub    $0x4,%esp
+    1965:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    1968:	6a 28                	push   $0x28
+    196a:	6a 00                	push   $0x0
+    196c:	50                   	push   %eax
+    196d:	e8 6e 1e 00 00       	call   37e0 <memset>
+  fd = open(".", 0);
+    1972:	5e                   	pop    %esi
+    1973:	5f                   	pop    %edi
+    1974:	6a 00                	push   $0x0
+    1976:	68 26 49 00 00       	push   $0x4926
+    197b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    197e:	e8 40 20 00 00       	call   39c3 <open>
+  n = 0;
+    1983:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  while(read(fd, &de, sizeof(de)) > 0){
+    198a:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    198d:	89 c6                	mov    %eax,%esi
+  while(read(fd, &de, sizeof(de)) > 0){
+    198f:	90                   	nop
+    1990:	83 ec 04             	sub    $0x4,%esp
+    1993:	6a 10                	push   $0x10
+    1995:	57                   	push   %edi
+    1996:	56                   	push   %esi
+    1997:	e8 ff 1f 00 00       	call   399b <read>
+    199c:	83 c4 10             	add    $0x10,%esp
+    199f:	85 c0                	test   %eax,%eax
+    19a1:	7e 3d                	jle    19e0 <concreate+0x190>
+    if(de.inum == 0)
+    19a3:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    19a8:	74 e6                	je     1990 <concreate+0x140>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    19aa:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    19ae:	75 e0                	jne    1990 <concreate+0x140>
+    19b0:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    19b4:	75 da                	jne    1990 <concreate+0x140>
+      i = de.name[1] - '0';
+    19b6:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    19ba:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    19bd:	83 f8 27             	cmp    $0x27,%eax
+    19c0:	0f 87 60 01 00 00    	ja     1b26 <concreate+0x2d6>
+      if(fa[i]){
+    19c6:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    19cb:	0f 85 3d 01 00 00    	jne    1b0e <concreate+0x2be>
+      n++;
+    19d1:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+      fa[i] = 1;
+    19d5:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    19da:	eb b4                	jmp    1990 <concreate+0x140>
+    19dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    19e0:	83 ec 0c             	sub    $0xc,%esp
+    19e3:	56                   	push   %esi
+    19e4:	e8 c2 1f 00 00       	call   39ab <close>
+  if(n != 40){
+    19e9:	83 c4 10             	add    $0x10,%esp
+    19ec:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    19f0:	0f 85 05 01 00 00    	jne    1afb <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    19f6:	31 f6                	xor    %esi,%esi
+    19f8:	eb 4c                	jmp    1a46 <concreate+0x1f6>
+    19fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1a00:	85 ff                	test   %edi,%edi
+    1a02:	74 05                	je     1a09 <concreate+0x1b9>
+    1a04:	83 f8 01             	cmp    $0x1,%eax
+    1a07:	74 6c                	je     1a75 <concreate+0x225>
+      unlink(file);
+    1a09:	83 ec 0c             	sub    $0xc,%esp
+    1a0c:	53                   	push   %ebx
+    1a0d:	e8 c1 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a12:	89 1c 24             	mov    %ebx,(%esp)
+    1a15:	e8 b9 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a1a:	89 1c 24             	mov    %ebx,(%esp)
+    1a1d:	e8 b1 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a22:	89 1c 24             	mov    %ebx,(%esp)
+    1a25:	e8 a9 1f 00 00       	call   39d3 <unlink>
+    1a2a:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    1a2d:	85 ff                	test   %edi,%edi
+    1a2f:	0f 84 fc fe ff ff    	je     1931 <concreate+0xe1>
+      wait();
+    1a35:	e8 51 1f 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    1a3a:	83 c6 01             	add    $0x1,%esi
+    1a3d:	83 fe 28             	cmp    $0x28,%esi
+    1a40:	0f 84 8a 00 00 00    	je     1ad0 <concreate+0x280>
+    file[1] = '0' + i;
+    1a46:	8d 46 30             	lea    0x30(%esi),%eax
+    1a49:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    1a4c:	e8 2a 1f 00 00       	call   397b <fork>
+    1a51:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    1a53:	85 c0                	test   %eax,%eax
+    1a55:	0f 88 8c 00 00 00    	js     1ae7 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    1a5b:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    1a60:	f7 e6                	mul    %esi
+    1a62:	89 d0                	mov    %edx,%eax
+    1a64:	83 e2 fe             	and    $0xfffffffe,%edx
+    1a67:	d1 e8                	shr    %eax
+    1a69:	01 c2                	add    %eax,%edx
+    1a6b:	89 f0                	mov    %esi,%eax
+    1a6d:	29 d0                	sub    %edx,%eax
+    1a6f:	89 c1                	mov    %eax,%ecx
+    1a71:	09 f9                	or     %edi,%ecx
+    1a73:	75 8b                	jne    1a00 <concreate+0x1b0>
+      close(open(file, 0));
+    1a75:	83 ec 08             	sub    $0x8,%esp
+    1a78:	6a 00                	push   $0x0
+    1a7a:	53                   	push   %ebx
+    1a7b:	e8 43 1f 00 00       	call   39c3 <open>
+    1a80:	89 04 24             	mov    %eax,(%esp)
+    1a83:	e8 23 1f 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1a88:	58                   	pop    %eax
+    1a89:	5a                   	pop    %edx
+    1a8a:	6a 00                	push   $0x0
+    1a8c:	53                   	push   %ebx
+    1a8d:	e8 31 1f 00 00       	call   39c3 <open>
+    1a92:	89 04 24             	mov    %eax,(%esp)
+    1a95:	e8 11 1f 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1a9a:	59                   	pop    %ecx
+    1a9b:	58                   	pop    %eax
+    1a9c:	6a 00                	push   $0x0
+    1a9e:	53                   	push   %ebx
+    1a9f:	e8 1f 1f 00 00       	call   39c3 <open>
+    1aa4:	89 04 24             	mov    %eax,(%esp)
+    1aa7:	e8 ff 1e 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1aac:	58                   	pop    %eax
+    1aad:	5a                   	pop    %edx
+    1aae:	6a 00                	push   $0x0
+    1ab0:	53                   	push   %ebx
+    1ab1:	e8 0d 1f 00 00       	call   39c3 <open>
+    1ab6:	89 04 24             	mov    %eax,(%esp)
+    1ab9:	e8 ed 1e 00 00       	call   39ab <close>
+    1abe:	83 c4 10             	add    $0x10,%esp
+    1ac1:	e9 67 ff ff ff       	jmp    1a2d <concreate+0x1dd>
+    1ac6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1acd:	8d 76 00             	lea    0x0(%esi),%esi
+  printf(1, "concreate ok\n");
+    1ad0:	83 ec 08             	sub    $0x8,%esp
+    1ad3:	68 6e 47 00 00       	push   $0x476e
+    1ad8:	6a 01                	push   $0x1
+    1ada:	e8 31 20 00 00       	call   3b10 <printf>
+}
+    1adf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1ae2:	5b                   	pop    %ebx
+    1ae3:	5e                   	pop    %esi
+    1ae4:	5f                   	pop    %edi
+    1ae5:	5d                   	pop    %ebp
+    1ae6:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1ae7:	83 ec 08             	sub    $0x8,%esp
+    1aea:	68 f1 4f 00 00       	push   $0x4ff1
+    1aef:	6a 01                	push   $0x1
+    1af1:	e8 1a 20 00 00       	call   3b10 <printf>
+      exit();
+    1af6:	e8 88 1e 00 00       	call   3983 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1afb:	51                   	push   %ecx
+    1afc:	51                   	push   %ecx
+    1afd:	68 b8 52 00 00       	push   $0x52b8
+    1b02:	6a 01                	push   $0x1
+    1b04:	e8 07 20 00 00       	call   3b10 <printf>
+    exit();
+    1b09:	e8 75 1e 00 00       	call   3983 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1b0e:	83 ec 04             	sub    $0x4,%esp
+    1b11:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1b14:	50                   	push   %eax
+    1b15:	68 51 47 00 00       	push   $0x4751
+    1b1a:	6a 01                	push   $0x1
+    1b1c:	e8 ef 1f 00 00       	call   3b10 <printf>
+        exit();
+    1b21:	e8 5d 1e 00 00       	call   3983 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1b26:	83 ec 04             	sub    $0x4,%esp
+    1b29:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1b2c:	50                   	push   %eax
+    1b2d:	68 38 47 00 00       	push   $0x4738
+    1b32:	6a 01                	push   $0x1
+    1b34:	e8 d7 1f 00 00       	call   3b10 <printf>
+        exit();
+    1b39:	e8 45 1e 00 00       	call   3983 <exit>
+      close(fd);
+    1b3e:	83 ec 0c             	sub    $0xc,%esp
+    1b41:	50                   	push   %eax
+    1b42:	e8 64 1e 00 00       	call   39ab <close>
+    1b47:	83 c4 10             	add    $0x10,%esp
+    1b4a:	e9 e2 fd ff ff       	jmp    1931 <concreate+0xe1>
+    1b4f:	90                   	nop
+
+00001b50 <linkunlink>:
+{
+    1b50:	f3 0f 1e fb          	endbr32 
+    1b54:	55                   	push   %ebp
+    1b55:	89 e5                	mov    %esp,%ebp
+    1b57:	57                   	push   %edi
+    1b58:	56                   	push   %esi
+    1b59:	53                   	push   %ebx
+    1b5a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1b5d:	68 7c 47 00 00       	push   $0x477c
+    1b62:	6a 01                	push   $0x1
+    1b64:	e8 a7 1f 00 00       	call   3b10 <printf>
+  unlink("x");
+    1b69:	c7 04 24 09 4a 00 00 	movl   $0x4a09,(%esp)
+    1b70:	e8 5e 1e 00 00       	call   39d3 <unlink>
+  pid = fork();
+    1b75:	e8 01 1e 00 00       	call   397b <fork>
+  if(pid < 0){
+    1b7a:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    1b7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1b80:	85 c0                	test   %eax,%eax
+    1b82:	0f 88 b2 00 00 00    	js     1c3a <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b88:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b8c:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b91:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b96:	19 ff                	sbb    %edi,%edi
+    1b98:	83 e7 60             	and    $0x60,%edi
+    1b9b:	83 c7 01             	add    $0x1,%edi
+    1b9e:	eb 1a                	jmp    1bba <linkunlink+0x6a>
+    } else if((x % 3) == 1){
+    1ba0:	83 f8 01             	cmp    $0x1,%eax
+    1ba3:	74 7b                	je     1c20 <linkunlink+0xd0>
+      unlink("x");
+    1ba5:	83 ec 0c             	sub    $0xc,%esp
+    1ba8:	68 09 4a 00 00       	push   $0x4a09
+    1bad:	e8 21 1e 00 00       	call   39d3 <unlink>
+    1bb2:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1bb5:	83 eb 01             	sub    $0x1,%ebx
+    1bb8:	74 41                	je     1bfb <linkunlink+0xab>
+    x = x * 1103515245 + 12345;
+    1bba:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1bc0:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1bc6:	89 f8                	mov    %edi,%eax
+    1bc8:	f7 e6                	mul    %esi
+    1bca:	89 d0                	mov    %edx,%eax
+    1bcc:	83 e2 fe             	and    $0xfffffffe,%edx
+    1bcf:	d1 e8                	shr    %eax
+    1bd1:	01 c2                	add    %eax,%edx
+    1bd3:	89 f8                	mov    %edi,%eax
+    1bd5:	29 d0                	sub    %edx,%eax
+    1bd7:	75 c7                	jne    1ba0 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1bd9:	83 ec 08             	sub    $0x8,%esp
+    1bdc:	68 02 02 00 00       	push   $0x202
+    1be1:	68 09 4a 00 00       	push   $0x4a09
+    1be6:	e8 d8 1d 00 00       	call   39c3 <open>
+    1beb:	89 04 24             	mov    %eax,(%esp)
+    1bee:	e8 b8 1d 00 00       	call   39ab <close>
+    1bf3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1bf6:	83 eb 01             	sub    $0x1,%ebx
+    1bf9:	75 bf                	jne    1bba <linkunlink+0x6a>
+  if(pid)
+    1bfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1bfe:	85 c0                	test   %eax,%eax
+    1c00:	74 4b                	je     1c4d <linkunlink+0xfd>
+    wait();
+    1c02:	e8 84 1d 00 00       	call   398b <wait>
+  printf(1, "linkunlink ok\n");
+    1c07:	83 ec 08             	sub    $0x8,%esp
+    1c0a:	68 91 47 00 00       	push   $0x4791
+    1c0f:	6a 01                	push   $0x1
+    1c11:	e8 fa 1e 00 00       	call   3b10 <printf>
+}
+    1c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1c19:	5b                   	pop    %ebx
+    1c1a:	5e                   	pop    %esi
+    1c1b:	5f                   	pop    %edi
+    1c1c:	5d                   	pop    %ebp
+    1c1d:	c3                   	ret    
+    1c1e:	66 90                	xchg   %ax,%ax
+      link("cat", "x");
+    1c20:	83 ec 08             	sub    $0x8,%esp
+    1c23:	68 09 4a 00 00       	push   $0x4a09
+    1c28:	68 8d 47 00 00       	push   $0x478d
+    1c2d:	e8 b1 1d 00 00       	call   39e3 <link>
+    1c32:	83 c4 10             	add    $0x10,%esp
+    1c35:	e9 7b ff ff ff       	jmp    1bb5 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1c3a:	52                   	push   %edx
+    1c3b:	52                   	push   %edx
+    1c3c:	68 f1 4f 00 00       	push   $0x4ff1
+    1c41:	6a 01                	push   $0x1
+    1c43:	e8 c8 1e 00 00       	call   3b10 <printf>
+    exit();
+    1c48:	e8 36 1d 00 00       	call   3983 <exit>
+    exit();
+    1c4d:	e8 31 1d 00 00       	call   3983 <exit>
+    1c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001c60 <bigdir>:
+{
+    1c60:	f3 0f 1e fb          	endbr32 
+    1c64:	55                   	push   %ebp
+    1c65:	89 e5                	mov    %esp,%ebp
+    1c67:	57                   	push   %edi
+    1c68:	56                   	push   %esi
+    1c69:	53                   	push   %ebx
+    1c6a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1c6d:	68 a0 47 00 00       	push   $0x47a0
+    1c72:	6a 01                	push   $0x1
+    1c74:	e8 97 1e 00 00       	call   3b10 <printf>
+  unlink("bd");
+    1c79:	c7 04 24 ad 47 00 00 	movl   $0x47ad,(%esp)
+    1c80:	e8 4e 1d 00 00       	call   39d3 <unlink>
+  fd = open("bd", O_CREATE);
+    1c85:	5a                   	pop    %edx
+    1c86:	59                   	pop    %ecx
+    1c87:	68 00 02 00 00       	push   $0x200
+    1c8c:	68 ad 47 00 00       	push   $0x47ad
+    1c91:	e8 2d 1d 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1c96:	83 c4 10             	add    $0x10,%esp
+    1c99:	85 c0                	test   %eax,%eax
+    1c9b:	0f 88 ea 00 00 00    	js     1d8b <bigdir+0x12b>
+  close(fd);
+    1ca1:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 500; i++){
+    1ca4:	31 f6                	xor    %esi,%esi
+    1ca6:	8d 7d de             	lea    -0x22(%ebp),%edi
+  close(fd);
+    1ca9:	50                   	push   %eax
+    1caa:	e8 fc 1c 00 00       	call   39ab <close>
+    1caf:	83 c4 10             	add    $0x10,%esp
+    1cb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + (i / 64);
+    1cb8:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1cba:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1cbd:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1cc1:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1cc4:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1cc5:	83 c0 30             	add    $0x30,%eax
+    if(link("bd", name) != 0){
+    1cc8:	68 ad 47 00 00       	push   $0x47ad
+    name[1] = '0' + (i / 64);
+    1ccd:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1cd0:	89 f0                	mov    %esi,%eax
+    1cd2:	83 e0 3f             	and    $0x3f,%eax
+    name[3] = '\0';
+    1cd5:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[2] = '0' + (i % 64);
+    1cd9:	83 c0 30             	add    $0x30,%eax
+    1cdc:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1cdf:	e8 ff 1c 00 00       	call   39e3 <link>
+    1ce4:	83 c4 10             	add    $0x10,%esp
+    1ce7:	89 c3                	mov    %eax,%ebx
+    1ce9:	85 c0                	test   %eax,%eax
+    1ceb:	75 76                	jne    1d63 <bigdir+0x103>
+  for(i = 0; i < 500; i++){
+    1ced:	83 c6 01             	add    $0x1,%esi
+    1cf0:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1cf6:	75 c0                	jne    1cb8 <bigdir+0x58>
+  unlink("bd");
+    1cf8:	83 ec 0c             	sub    $0xc,%esp
+    1cfb:	68 ad 47 00 00       	push   $0x47ad
+    1d00:	e8 ce 1c 00 00       	call   39d3 <unlink>
+    1d05:	83 c4 10             	add    $0x10,%esp
+    1d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1d0f:	90                   	nop
+    name[1] = '0' + (i / 64);
+    1d10:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1d12:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1d15:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1d19:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1d1c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1d1d:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1d20:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1d24:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1d27:	89 d8                	mov    %ebx,%eax
+    1d29:	83 e0 3f             	and    $0x3f,%eax
+    1d2c:	83 c0 30             	add    $0x30,%eax
+    1d2f:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1d32:	e8 9c 1c 00 00       	call   39d3 <unlink>
+    1d37:	83 c4 10             	add    $0x10,%esp
+    1d3a:	85 c0                	test   %eax,%eax
+    1d3c:	75 39                	jne    1d77 <bigdir+0x117>
+  for(i = 0; i < 500; i++){
+    1d3e:	83 c3 01             	add    $0x1,%ebx
+    1d41:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1d47:	75 c7                	jne    1d10 <bigdir+0xb0>
+  printf(1, "bigdir ok\n");
+    1d49:	83 ec 08             	sub    $0x8,%esp
+    1d4c:	68 ef 47 00 00       	push   $0x47ef
+    1d51:	6a 01                	push   $0x1
+    1d53:	e8 b8 1d 00 00       	call   3b10 <printf>
+    1d58:	83 c4 10             	add    $0x10,%esp
+}
+    1d5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1d5e:	5b                   	pop    %ebx
+    1d5f:	5e                   	pop    %esi
+    1d60:	5f                   	pop    %edi
+    1d61:	5d                   	pop    %ebp
+    1d62:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1d63:	83 ec 08             	sub    $0x8,%esp
+    1d66:	68 c6 47 00 00       	push   $0x47c6
+    1d6b:	6a 01                	push   $0x1
+    1d6d:	e8 9e 1d 00 00       	call   3b10 <printf>
+      exit();
+    1d72:	e8 0c 1c 00 00       	call   3983 <exit>
+      printf(1, "bigdir unlink failed");
+    1d77:	83 ec 08             	sub    $0x8,%esp
+    1d7a:	68 da 47 00 00       	push   $0x47da
+    1d7f:	6a 01                	push   $0x1
+    1d81:	e8 8a 1d 00 00       	call   3b10 <printf>
+      exit();
+    1d86:	e8 f8 1b 00 00       	call   3983 <exit>
+    printf(1, "bigdir create failed\n");
+    1d8b:	50                   	push   %eax
+    1d8c:	50                   	push   %eax
+    1d8d:	68 b0 47 00 00       	push   $0x47b0
+    1d92:	6a 01                	push   $0x1
+    1d94:	e8 77 1d 00 00       	call   3b10 <printf>
+    exit();
+    1d99:	e8 e5 1b 00 00       	call   3983 <exit>
+    1d9e:	66 90                	xchg   %ax,%ax
+
+00001da0 <subdir>:
+{
+    1da0:	f3 0f 1e fb          	endbr32 
+    1da4:	55                   	push   %ebp
+    1da5:	89 e5                	mov    %esp,%ebp
+    1da7:	53                   	push   %ebx
+    1da8:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1dab:	68 fa 47 00 00       	push   $0x47fa
+    1db0:	6a 01                	push   $0x1
+    1db2:	e8 59 1d 00 00       	call   3b10 <printf>
+  unlink("ff");
+    1db7:	c7 04 24 83 48 00 00 	movl   $0x4883,(%esp)
+    1dbe:	e8 10 1c 00 00       	call   39d3 <unlink>
+  if(mkdir("dd") != 0){
+    1dc3:	c7 04 24 20 49 00 00 	movl   $0x4920,(%esp)
+    1dca:	e8 1c 1c 00 00       	call   39eb <mkdir>
+    1dcf:	83 c4 10             	add    $0x10,%esp
+    1dd2:	85 c0                	test   %eax,%eax
+    1dd4:	0f 85 b3 05 00 00    	jne    238d <subdir+0x5ed>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1dda:	83 ec 08             	sub    $0x8,%esp
+    1ddd:	68 02 02 00 00       	push   $0x202
+    1de2:	68 59 48 00 00       	push   $0x4859
+    1de7:	e8 d7 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1dec:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1def:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1df1:	85 c0                	test   %eax,%eax
+    1df3:	0f 88 81 05 00 00    	js     237a <subdir+0x5da>
+  write(fd, "ff", 2);
+    1df9:	83 ec 04             	sub    $0x4,%esp
+    1dfc:	6a 02                	push   $0x2
+    1dfe:	68 83 48 00 00       	push   $0x4883
+    1e03:	50                   	push   %eax
+    1e04:	e8 9a 1b 00 00       	call   39a3 <write>
+  close(fd);
+    1e09:	89 1c 24             	mov    %ebx,(%esp)
+    1e0c:	e8 9a 1b 00 00       	call   39ab <close>
+  if(unlink("dd") >= 0){
+    1e11:	c7 04 24 20 49 00 00 	movl   $0x4920,(%esp)
+    1e18:	e8 b6 1b 00 00       	call   39d3 <unlink>
+    1e1d:	83 c4 10             	add    $0x10,%esp
+    1e20:	85 c0                	test   %eax,%eax
+    1e22:	0f 89 3f 05 00 00    	jns    2367 <subdir+0x5c7>
+  if(mkdir("/dd/dd") != 0){
+    1e28:	83 ec 0c             	sub    $0xc,%esp
+    1e2b:	68 34 48 00 00       	push   $0x4834
+    1e30:	e8 b6 1b 00 00       	call   39eb <mkdir>
+    1e35:	83 c4 10             	add    $0x10,%esp
+    1e38:	85 c0                	test   %eax,%eax
+    1e3a:	0f 85 14 05 00 00    	jne    2354 <subdir+0x5b4>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1e40:	83 ec 08             	sub    $0x8,%esp
+    1e43:	68 02 02 00 00       	push   $0x202
+    1e48:	68 56 48 00 00       	push   $0x4856
+    1e4d:	e8 71 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1e52:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1e55:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e57:	85 c0                	test   %eax,%eax
+    1e59:	0f 88 24 04 00 00    	js     2283 <subdir+0x4e3>
+  write(fd, "FF", 2);
+    1e5f:	83 ec 04             	sub    $0x4,%esp
+    1e62:	6a 02                	push   $0x2
+    1e64:	68 77 48 00 00       	push   $0x4877
+    1e69:	50                   	push   %eax
+    1e6a:	e8 34 1b 00 00       	call   39a3 <write>
+  close(fd);
+    1e6f:	89 1c 24             	mov    %ebx,(%esp)
+    1e72:	e8 34 1b 00 00       	call   39ab <close>
+  fd = open("dd/dd/../ff", 0);
+    1e77:	58                   	pop    %eax
+    1e78:	5a                   	pop    %edx
+    1e79:	6a 00                	push   $0x0
+    1e7b:	68 7a 48 00 00       	push   $0x487a
+    1e80:	e8 3e 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1e85:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/../ff", 0);
+    1e88:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e8a:	85 c0                	test   %eax,%eax
+    1e8c:	0f 88 de 03 00 00    	js     2270 <subdir+0x4d0>
+  cc = read(fd, buf, sizeof(buf));
+    1e92:	83 ec 04             	sub    $0x4,%esp
+    1e95:	68 00 20 00 00       	push   $0x2000
+    1e9a:	68 80 93 00 00       	push   $0x9380
+    1e9f:	50                   	push   %eax
+    1ea0:	e8 f6 1a 00 00       	call   399b <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1ea5:	83 c4 10             	add    $0x10,%esp
+    1ea8:	83 f8 02             	cmp    $0x2,%eax
+    1eab:	0f 85 3a 03 00 00    	jne    21eb <subdir+0x44b>
+    1eb1:	80 3d 80 93 00 00 66 	cmpb   $0x66,0x9380
+    1eb8:	0f 85 2d 03 00 00    	jne    21eb <subdir+0x44b>
+  close(fd);
+    1ebe:	83 ec 0c             	sub    $0xc,%esp
+    1ec1:	53                   	push   %ebx
+    1ec2:	e8 e4 1a 00 00       	call   39ab <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1ec7:	59                   	pop    %ecx
+    1ec8:	5b                   	pop    %ebx
+    1ec9:	68 ba 48 00 00       	push   $0x48ba
+    1ece:	68 56 48 00 00       	push   $0x4856
+    1ed3:	e8 0b 1b 00 00       	call   39e3 <link>
+    1ed8:	83 c4 10             	add    $0x10,%esp
+    1edb:	85 c0                	test   %eax,%eax
+    1edd:	0f 85 c6 03 00 00    	jne    22a9 <subdir+0x509>
+  if(unlink("dd/dd/ff") != 0){
+    1ee3:	83 ec 0c             	sub    $0xc,%esp
+    1ee6:	68 56 48 00 00       	push   $0x4856
+    1eeb:	e8 e3 1a 00 00       	call   39d3 <unlink>
+    1ef0:	83 c4 10             	add    $0x10,%esp
+    1ef3:	85 c0                	test   %eax,%eax
+    1ef5:	0f 85 16 03 00 00    	jne    2211 <subdir+0x471>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1efb:	83 ec 08             	sub    $0x8,%esp
+    1efe:	6a 00                	push   $0x0
+    1f00:	68 56 48 00 00       	push   $0x4856
+    1f05:	e8 b9 1a 00 00       	call   39c3 <open>
+    1f0a:	83 c4 10             	add    $0x10,%esp
+    1f0d:	85 c0                	test   %eax,%eax
+    1f0f:	0f 89 2c 04 00 00    	jns    2341 <subdir+0x5a1>
+  if(chdir("dd") != 0){
+    1f15:	83 ec 0c             	sub    $0xc,%esp
+    1f18:	68 20 49 00 00       	push   $0x4920
+    1f1d:	e8 d1 1a 00 00       	call   39f3 <chdir>
+    1f22:	83 c4 10             	add    $0x10,%esp
+    1f25:	85 c0                	test   %eax,%eax
+    1f27:	0f 85 01 04 00 00    	jne    232e <subdir+0x58e>
+  if(chdir("dd/../../dd") != 0){
+    1f2d:	83 ec 0c             	sub    $0xc,%esp
+    1f30:	68 ee 48 00 00       	push   $0x48ee
+    1f35:	e8 b9 1a 00 00       	call   39f3 <chdir>
+    1f3a:	83 c4 10             	add    $0x10,%esp
+    1f3d:	85 c0                	test   %eax,%eax
+    1f3f:	0f 85 b9 02 00 00    	jne    21fe <subdir+0x45e>
+  if(chdir("dd/../../../dd") != 0){
+    1f45:	83 ec 0c             	sub    $0xc,%esp
+    1f48:	68 14 49 00 00       	push   $0x4914
+    1f4d:	e8 a1 1a 00 00       	call   39f3 <chdir>
+    1f52:	83 c4 10             	add    $0x10,%esp
+    1f55:	85 c0                	test   %eax,%eax
+    1f57:	0f 85 a1 02 00 00    	jne    21fe <subdir+0x45e>
+  if(chdir("./..") != 0){
+    1f5d:	83 ec 0c             	sub    $0xc,%esp
+    1f60:	68 23 49 00 00       	push   $0x4923
+    1f65:	e8 89 1a 00 00       	call   39f3 <chdir>
+    1f6a:	83 c4 10             	add    $0x10,%esp
+    1f6d:	85 c0                	test   %eax,%eax
+    1f6f:	0f 85 21 03 00 00    	jne    2296 <subdir+0x4f6>
+  fd = open("dd/dd/ffff", 0);
+    1f75:	83 ec 08             	sub    $0x8,%esp
+    1f78:	6a 00                	push   $0x0
+    1f7a:	68 ba 48 00 00       	push   $0x48ba
+    1f7f:	e8 3f 1a 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1f84:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ffff", 0);
+    1f87:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1f89:	85 c0                	test   %eax,%eax
+    1f8b:	0f 88 e0 04 00 00    	js     2471 <subdir+0x6d1>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1f91:	83 ec 04             	sub    $0x4,%esp
+    1f94:	68 00 20 00 00       	push   $0x2000
+    1f99:	68 80 93 00 00       	push   $0x9380
+    1f9e:	50                   	push   %eax
+    1f9f:	e8 f7 19 00 00       	call   399b <read>
+    1fa4:	83 c4 10             	add    $0x10,%esp
+    1fa7:	83 f8 02             	cmp    $0x2,%eax
+    1faa:	0f 85 ae 04 00 00    	jne    245e <subdir+0x6be>
+  close(fd);
+    1fb0:	83 ec 0c             	sub    $0xc,%esp
+    1fb3:	53                   	push   %ebx
+    1fb4:	e8 f2 19 00 00       	call   39ab <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1fb9:	58                   	pop    %eax
+    1fba:	5a                   	pop    %edx
+    1fbb:	6a 00                	push   $0x0
+    1fbd:	68 56 48 00 00       	push   $0x4856
+    1fc2:	e8 fc 19 00 00       	call   39c3 <open>
+    1fc7:	83 c4 10             	add    $0x10,%esp
+    1fca:	85 c0                	test   %eax,%eax
+    1fcc:	0f 89 65 02 00 00    	jns    2237 <subdir+0x497>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1fd2:	83 ec 08             	sub    $0x8,%esp
+    1fd5:	68 02 02 00 00       	push   $0x202
+    1fda:	68 6e 49 00 00       	push   $0x496e
+    1fdf:	e8 df 19 00 00       	call   39c3 <open>
+    1fe4:	83 c4 10             	add    $0x10,%esp
+    1fe7:	85 c0                	test   %eax,%eax
+    1fe9:	0f 89 35 02 00 00    	jns    2224 <subdir+0x484>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1fef:	83 ec 08             	sub    $0x8,%esp
+    1ff2:	68 02 02 00 00       	push   $0x202
+    1ff7:	68 93 49 00 00       	push   $0x4993
+    1ffc:	e8 c2 19 00 00       	call   39c3 <open>
+    2001:	83 c4 10             	add    $0x10,%esp
+    2004:	85 c0                	test   %eax,%eax
+    2006:	0f 89 0f 03 00 00    	jns    231b <subdir+0x57b>
+  if(open("dd", O_CREATE) >= 0){
+    200c:	83 ec 08             	sub    $0x8,%esp
+    200f:	68 00 02 00 00       	push   $0x200
+    2014:	68 20 49 00 00       	push   $0x4920
+    2019:	e8 a5 19 00 00       	call   39c3 <open>
+    201e:	83 c4 10             	add    $0x10,%esp
+    2021:	85 c0                	test   %eax,%eax
+    2023:	0f 89 df 02 00 00    	jns    2308 <subdir+0x568>
+  if(open("dd", O_RDWR) >= 0){
+    2029:	83 ec 08             	sub    $0x8,%esp
+    202c:	6a 02                	push   $0x2
+    202e:	68 20 49 00 00       	push   $0x4920
+    2033:	e8 8b 19 00 00       	call   39c3 <open>
+    2038:	83 c4 10             	add    $0x10,%esp
+    203b:	85 c0                	test   %eax,%eax
+    203d:	0f 89 b2 02 00 00    	jns    22f5 <subdir+0x555>
+  if(open("dd", O_WRONLY) >= 0){
+    2043:	83 ec 08             	sub    $0x8,%esp
+    2046:	6a 01                	push   $0x1
+    2048:	68 20 49 00 00       	push   $0x4920
+    204d:	e8 71 19 00 00       	call   39c3 <open>
+    2052:	83 c4 10             	add    $0x10,%esp
+    2055:	85 c0                	test   %eax,%eax
+    2057:	0f 89 85 02 00 00    	jns    22e2 <subdir+0x542>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    205d:	83 ec 08             	sub    $0x8,%esp
+    2060:	68 02 4a 00 00       	push   $0x4a02
+    2065:	68 6e 49 00 00       	push   $0x496e
+    206a:	e8 74 19 00 00       	call   39e3 <link>
+    206f:	83 c4 10             	add    $0x10,%esp
+    2072:	85 c0                	test   %eax,%eax
+    2074:	0f 84 55 02 00 00    	je     22cf <subdir+0x52f>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    207a:	83 ec 08             	sub    $0x8,%esp
+    207d:	68 02 4a 00 00       	push   $0x4a02
+    2082:	68 93 49 00 00       	push   $0x4993
+    2087:	e8 57 19 00 00       	call   39e3 <link>
+    208c:	83 c4 10             	add    $0x10,%esp
+    208f:	85 c0                	test   %eax,%eax
+    2091:	0f 84 25 02 00 00    	je     22bc <subdir+0x51c>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2097:	83 ec 08             	sub    $0x8,%esp
+    209a:	68 ba 48 00 00       	push   $0x48ba
+    209f:	68 59 48 00 00       	push   $0x4859
+    20a4:	e8 3a 19 00 00       	call   39e3 <link>
+    20a9:	83 c4 10             	add    $0x10,%esp
+    20ac:	85 c0                	test   %eax,%eax
+    20ae:	0f 84 a9 01 00 00    	je     225d <subdir+0x4bd>
+  if(mkdir("dd/ff/ff") == 0){
+    20b4:	83 ec 0c             	sub    $0xc,%esp
+    20b7:	68 6e 49 00 00       	push   $0x496e
+    20bc:	e8 2a 19 00 00       	call   39eb <mkdir>
+    20c1:	83 c4 10             	add    $0x10,%esp
+    20c4:	85 c0                	test   %eax,%eax
+    20c6:	0f 84 7e 01 00 00    	je     224a <subdir+0x4aa>
+  if(mkdir("dd/xx/ff") == 0){
+    20cc:	83 ec 0c             	sub    $0xc,%esp
+    20cf:	68 93 49 00 00       	push   $0x4993
+    20d4:	e8 12 19 00 00       	call   39eb <mkdir>
+    20d9:	83 c4 10             	add    $0x10,%esp
+    20dc:	85 c0                	test   %eax,%eax
+    20de:	0f 84 67 03 00 00    	je     244b <subdir+0x6ab>
+  if(mkdir("dd/dd/ffff") == 0){
+    20e4:	83 ec 0c             	sub    $0xc,%esp
+    20e7:	68 ba 48 00 00       	push   $0x48ba
+    20ec:	e8 fa 18 00 00       	call   39eb <mkdir>
+    20f1:	83 c4 10             	add    $0x10,%esp
+    20f4:	85 c0                	test   %eax,%eax
+    20f6:	0f 84 3c 03 00 00    	je     2438 <subdir+0x698>
+  if(unlink("dd/xx/ff") == 0){
+    20fc:	83 ec 0c             	sub    $0xc,%esp
+    20ff:	68 93 49 00 00       	push   $0x4993
+    2104:	e8 ca 18 00 00       	call   39d3 <unlink>
+    2109:	83 c4 10             	add    $0x10,%esp
+    210c:	85 c0                	test   %eax,%eax
+    210e:	0f 84 11 03 00 00    	je     2425 <subdir+0x685>
+  if(unlink("dd/ff/ff") == 0){
+    2114:	83 ec 0c             	sub    $0xc,%esp
+    2117:	68 6e 49 00 00       	push   $0x496e
+    211c:	e8 b2 18 00 00       	call   39d3 <unlink>
+    2121:	83 c4 10             	add    $0x10,%esp
+    2124:	85 c0                	test   %eax,%eax
+    2126:	0f 84 e6 02 00 00    	je     2412 <subdir+0x672>
+  if(chdir("dd/ff") == 0){
+    212c:	83 ec 0c             	sub    $0xc,%esp
+    212f:	68 59 48 00 00       	push   $0x4859
+    2134:	e8 ba 18 00 00       	call   39f3 <chdir>
+    2139:	83 c4 10             	add    $0x10,%esp
+    213c:	85 c0                	test   %eax,%eax
+    213e:	0f 84 bb 02 00 00    	je     23ff <subdir+0x65f>
+  if(chdir("dd/xx") == 0){
+    2144:	83 ec 0c             	sub    $0xc,%esp
+    2147:	68 05 4a 00 00       	push   $0x4a05
+    214c:	e8 a2 18 00 00       	call   39f3 <chdir>
+    2151:	83 c4 10             	add    $0x10,%esp
+    2154:	85 c0                	test   %eax,%eax
+    2156:	0f 84 90 02 00 00    	je     23ec <subdir+0x64c>
+  if(unlink("dd/dd/ffff") != 0){
+    215c:	83 ec 0c             	sub    $0xc,%esp
+    215f:	68 ba 48 00 00       	push   $0x48ba
+    2164:	e8 6a 18 00 00       	call   39d3 <unlink>
+    2169:	83 c4 10             	add    $0x10,%esp
+    216c:	85 c0                	test   %eax,%eax
+    216e:	0f 85 9d 00 00 00    	jne    2211 <subdir+0x471>
+  if(unlink("dd/ff") != 0){
+    2174:	83 ec 0c             	sub    $0xc,%esp
+    2177:	68 59 48 00 00       	push   $0x4859
+    217c:	e8 52 18 00 00       	call   39d3 <unlink>
+    2181:	83 c4 10             	add    $0x10,%esp
+    2184:	85 c0                	test   %eax,%eax
+    2186:	0f 85 4d 02 00 00    	jne    23d9 <subdir+0x639>
+  if(unlink("dd") == 0){
+    218c:	83 ec 0c             	sub    $0xc,%esp
+    218f:	68 20 49 00 00       	push   $0x4920
+    2194:	e8 3a 18 00 00       	call   39d3 <unlink>
+    2199:	83 c4 10             	add    $0x10,%esp
+    219c:	85 c0                	test   %eax,%eax
+    219e:	0f 84 22 02 00 00    	je     23c6 <subdir+0x626>
+  if(unlink("dd/dd") < 0){
+    21a4:	83 ec 0c             	sub    $0xc,%esp
+    21a7:	68 35 48 00 00       	push   $0x4835
+    21ac:	e8 22 18 00 00       	call   39d3 <unlink>
+    21b1:	83 c4 10             	add    $0x10,%esp
+    21b4:	85 c0                	test   %eax,%eax
+    21b6:	0f 88 f7 01 00 00    	js     23b3 <subdir+0x613>
+  if(unlink("dd") < 0){
+    21bc:	83 ec 0c             	sub    $0xc,%esp
+    21bf:	68 20 49 00 00       	push   $0x4920
+    21c4:	e8 0a 18 00 00       	call   39d3 <unlink>
+    21c9:	83 c4 10             	add    $0x10,%esp
+    21cc:	85 c0                	test   %eax,%eax
+    21ce:	0f 88 cc 01 00 00    	js     23a0 <subdir+0x600>
+  printf(1, "subdir ok\n");
+    21d4:	83 ec 08             	sub    $0x8,%esp
+    21d7:	68 02 4b 00 00       	push   $0x4b02
+    21dc:	6a 01                	push   $0x1
+    21de:	e8 2d 19 00 00       	call   3b10 <printf>
+}
+    21e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    21e6:	83 c4 10             	add    $0x10,%esp
+    21e9:	c9                   	leave  
+    21ea:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    21eb:	50                   	push   %eax
+    21ec:	50                   	push   %eax
+    21ed:	68 9f 48 00 00       	push   $0x489f
+    21f2:	6a 01                	push   $0x1
+    21f4:	e8 17 19 00 00       	call   3b10 <printf>
+    exit();
+    21f9:	e8 85 17 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    21fe:	50                   	push   %eax
+    21ff:	50                   	push   %eax
+    2200:	68 fa 48 00 00       	push   $0x48fa
+    2205:	6a 01                	push   $0x1
+    2207:	e8 04 19 00 00       	call   3b10 <printf>
+    exit();
+    220c:	e8 72 17 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    2211:	50                   	push   %eax
+    2212:	50                   	push   %eax
+    2213:	68 c5 48 00 00       	push   $0x48c5
+    2218:	6a 01                	push   $0x1
+    221a:	e8 f1 18 00 00       	call   3b10 <printf>
+    exit();
+    221f:	e8 5f 17 00 00       	call   3983 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2224:	51                   	push   %ecx
+    2225:	51                   	push   %ecx
+    2226:	68 77 49 00 00       	push   $0x4977
+    222b:	6a 01                	push   $0x1
+    222d:	e8 de 18 00 00       	call   3b10 <printf>
+    exit();
+    2232:	e8 4c 17 00 00       	call   3983 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    2237:	53                   	push   %ebx
+    2238:	53                   	push   %ebx
+    2239:	68 5c 53 00 00       	push   $0x535c
+    223e:	6a 01                	push   $0x1
+    2240:	e8 cb 18 00 00       	call   3b10 <printf>
+    exit();
+    2245:	e8 39 17 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    224a:	51                   	push   %ecx
+    224b:	51                   	push   %ecx
+    224c:	68 0b 4a 00 00       	push   $0x4a0b
+    2251:	6a 01                	push   $0x1
+    2253:	e8 b8 18 00 00       	call   3b10 <printf>
+    exit();
+    2258:	e8 26 17 00 00       	call   3983 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    225d:	53                   	push   %ebx
+    225e:	53                   	push   %ebx
+    225f:	68 cc 53 00 00       	push   $0x53cc
+    2264:	6a 01                	push   $0x1
+    2266:	e8 a5 18 00 00       	call   3b10 <printf>
+    exit();
+    226b:	e8 13 17 00 00       	call   3983 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    2270:	50                   	push   %eax
+    2271:	50                   	push   %eax
+    2272:	68 86 48 00 00       	push   $0x4886
+    2277:	6a 01                	push   $0x1
+    2279:	e8 92 18 00 00       	call   3b10 <printf>
+    exit();
+    227e:	e8 00 17 00 00       	call   3983 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    2283:	51                   	push   %ecx
+    2284:	51                   	push   %ecx
+    2285:	68 5f 48 00 00       	push   $0x485f
+    228a:	6a 01                	push   $0x1
+    228c:	e8 7f 18 00 00       	call   3b10 <printf>
+    exit();
+    2291:	e8 ed 16 00 00       	call   3983 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2296:	50                   	push   %eax
+    2297:	50                   	push   %eax
+    2298:	68 28 49 00 00       	push   $0x4928
+    229d:	6a 01                	push   $0x1
+    229f:	e8 6c 18 00 00       	call   3b10 <printf>
+    exit();
+    22a4:	e8 da 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    22a9:	52                   	push   %edx
+    22aa:	52                   	push   %edx
+    22ab:	68 14 53 00 00       	push   $0x5314
+    22b0:	6a 01                	push   $0x1
+    22b2:	e8 59 18 00 00       	call   3b10 <printf>
+    exit();
+    22b7:	e8 c7 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    22bc:	50                   	push   %eax
+    22bd:	50                   	push   %eax
+    22be:	68 a8 53 00 00       	push   $0x53a8
+    22c3:	6a 01                	push   $0x1
+    22c5:	e8 46 18 00 00       	call   3b10 <printf>
+    exit();
+    22ca:	e8 b4 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    22cf:	50                   	push   %eax
+    22d0:	50                   	push   %eax
+    22d1:	68 84 53 00 00       	push   $0x5384
+    22d6:	6a 01                	push   $0x1
+    22d8:	e8 33 18 00 00       	call   3b10 <printf>
+    exit();
+    22dd:	e8 a1 16 00 00       	call   3983 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    22e2:	50                   	push   %eax
+    22e3:	50                   	push   %eax
+    22e4:	68 e7 49 00 00       	push   $0x49e7
+    22e9:	6a 01                	push   $0x1
+    22eb:	e8 20 18 00 00       	call   3b10 <printf>
+    exit();
+    22f0:	e8 8e 16 00 00       	call   3983 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    22f5:	50                   	push   %eax
+    22f6:	50                   	push   %eax
+    22f7:	68 ce 49 00 00       	push   $0x49ce
+    22fc:	6a 01                	push   $0x1
+    22fe:	e8 0d 18 00 00       	call   3b10 <printf>
+    exit();
+    2303:	e8 7b 16 00 00       	call   3983 <exit>
+    printf(1, "create dd succeeded!\n");
+    2308:	50                   	push   %eax
+    2309:	50                   	push   %eax
+    230a:	68 b8 49 00 00       	push   $0x49b8
+    230f:	6a 01                	push   $0x1
+    2311:	e8 fa 17 00 00       	call   3b10 <printf>
+    exit();
+    2316:	e8 68 16 00 00       	call   3983 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    231b:	52                   	push   %edx
+    231c:	52                   	push   %edx
+    231d:	68 9c 49 00 00       	push   $0x499c
+    2322:	6a 01                	push   $0x1
+    2324:	e8 e7 17 00 00       	call   3b10 <printf>
+    exit();
+    2329:	e8 55 16 00 00       	call   3983 <exit>
+    printf(1, "chdir dd failed\n");
+    232e:	50                   	push   %eax
+    232f:	50                   	push   %eax
+    2330:	68 dd 48 00 00       	push   $0x48dd
+    2335:	6a 01                	push   $0x1
+    2337:	e8 d4 17 00 00       	call   3b10 <printf>
+    exit();
+    233c:	e8 42 16 00 00       	call   3983 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    2341:	50                   	push   %eax
+    2342:	50                   	push   %eax
+    2343:	68 38 53 00 00       	push   $0x5338
+    2348:	6a 01                	push   $0x1
+    234a:	e8 c1 17 00 00       	call   3b10 <printf>
+    exit();
+    234f:	e8 2f 16 00 00       	call   3983 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    2354:	53                   	push   %ebx
+    2355:	53                   	push   %ebx
+    2356:	68 3b 48 00 00       	push   $0x483b
+    235b:	6a 01                	push   $0x1
+    235d:	e8 ae 17 00 00       	call   3b10 <printf>
+    exit();
+    2362:	e8 1c 16 00 00       	call   3983 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    2367:	50                   	push   %eax
+    2368:	50                   	push   %eax
+    2369:	68 ec 52 00 00       	push   $0x52ec
+    236e:	6a 01                	push   $0x1
+    2370:	e8 9b 17 00 00       	call   3b10 <printf>
+    exit();
+    2375:	e8 09 16 00 00       	call   3983 <exit>
+    printf(1, "create dd/ff failed\n");
+    237a:	50                   	push   %eax
+    237b:	50                   	push   %eax
+    237c:	68 1f 48 00 00       	push   $0x481f
+    2381:	6a 01                	push   $0x1
+    2383:	e8 88 17 00 00       	call   3b10 <printf>
+    exit();
+    2388:	e8 f6 15 00 00       	call   3983 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    238d:	50                   	push   %eax
+    238e:	50                   	push   %eax
+    238f:	68 07 48 00 00       	push   $0x4807
+    2394:	6a 01                	push   $0x1
+    2396:	e8 75 17 00 00       	call   3b10 <printf>
+    exit();
+    239b:	e8 e3 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd failed\n");
+    23a0:	50                   	push   %eax
+    23a1:	50                   	push   %eax
+    23a2:	68 f0 4a 00 00       	push   $0x4af0
+    23a7:	6a 01                	push   $0x1
+    23a9:	e8 62 17 00 00       	call   3b10 <printf>
+    exit();
+    23ae:	e8 d0 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    23b3:	52                   	push   %edx
+    23b4:	52                   	push   %edx
+    23b5:	68 db 4a 00 00       	push   $0x4adb
+    23ba:	6a 01                	push   $0x1
+    23bc:	e8 4f 17 00 00       	call   3b10 <printf>
+    exit();
+    23c1:	e8 bd 15 00 00       	call   3983 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    23c6:	51                   	push   %ecx
+    23c7:	51                   	push   %ecx
+    23c8:	68 f0 53 00 00       	push   $0x53f0
+    23cd:	6a 01                	push   $0x1
+    23cf:	e8 3c 17 00 00       	call   3b10 <printf>
+    exit();
+    23d4:	e8 aa 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    23d9:	53                   	push   %ebx
+    23da:	53                   	push   %ebx
+    23db:	68 c6 4a 00 00       	push   $0x4ac6
+    23e0:	6a 01                	push   $0x1
+    23e2:	e8 29 17 00 00       	call   3b10 <printf>
+    exit();
+    23e7:	e8 97 15 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    23ec:	50                   	push   %eax
+    23ed:	50                   	push   %eax
+    23ee:	68 ae 4a 00 00       	push   $0x4aae
+    23f3:	6a 01                	push   $0x1
+    23f5:	e8 16 17 00 00       	call   3b10 <printf>
+    exit();
+    23fa:	e8 84 15 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    23ff:	50                   	push   %eax
+    2400:	50                   	push   %eax
+    2401:	68 96 4a 00 00       	push   $0x4a96
+    2406:	6a 01                	push   $0x1
+    2408:	e8 03 17 00 00       	call   3b10 <printf>
+    exit();
+    240d:	e8 71 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    2412:	50                   	push   %eax
+    2413:	50                   	push   %eax
+    2414:	68 7a 4a 00 00       	push   $0x4a7a
+    2419:	6a 01                	push   $0x1
+    241b:	e8 f0 16 00 00       	call   3b10 <printf>
+    exit();
+    2420:	e8 5e 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    2425:	50                   	push   %eax
+    2426:	50                   	push   %eax
+    2427:	68 5e 4a 00 00       	push   $0x4a5e
+    242c:	6a 01                	push   $0x1
+    242e:	e8 dd 16 00 00       	call   3b10 <printf>
+    exit();
+    2433:	e8 4b 15 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    2438:	50                   	push   %eax
+    2439:	50                   	push   %eax
+    243a:	68 41 4a 00 00       	push   $0x4a41
+    243f:	6a 01                	push   $0x1
+    2441:	e8 ca 16 00 00       	call   3b10 <printf>
+    exit();
+    2446:	e8 38 15 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    244b:	52                   	push   %edx
+    244c:	52                   	push   %edx
+    244d:	68 26 4a 00 00       	push   $0x4a26
+    2452:	6a 01                	push   $0x1
+    2454:	e8 b7 16 00 00       	call   3b10 <printf>
+    exit();
+    2459:	e8 25 15 00 00       	call   3983 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    245e:	51                   	push   %ecx
+    245f:	51                   	push   %ecx
+    2460:	68 53 49 00 00       	push   $0x4953
+    2465:	6a 01                	push   $0x1
+    2467:	e8 a4 16 00 00       	call   3b10 <printf>
+    exit();
+    246c:	e8 12 15 00 00       	call   3983 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    2471:	53                   	push   %ebx
+    2472:	53                   	push   %ebx
+    2473:	68 3b 49 00 00       	push   $0x493b
+    2478:	6a 01                	push   $0x1
+    247a:	e8 91 16 00 00       	call   3b10 <printf>
+    exit();
+    247f:	e8 ff 14 00 00       	call   3983 <exit>
+    2484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    248b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    248f:	90                   	nop
+
+00002490 <bigwrite>:
+{
+    2490:	f3 0f 1e fb          	endbr32 
+    2494:	55                   	push   %ebp
+    2495:	89 e5                	mov    %esp,%ebp
+    2497:	56                   	push   %esi
+    2498:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    2499:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    249e:	83 ec 08             	sub    $0x8,%esp
+    24a1:	68 0d 4b 00 00       	push   $0x4b0d
+    24a6:	6a 01                	push   $0x1
+    24a8:	e8 63 16 00 00       	call   3b10 <printf>
+  unlink("bigwrite");
+    24ad:	c7 04 24 1c 4b 00 00 	movl   $0x4b1c,(%esp)
+    24b4:	e8 1a 15 00 00       	call   39d3 <unlink>
+    24b9:	83 c4 10             	add    $0x10,%esp
+    24bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    24c0:	83 ec 08             	sub    $0x8,%esp
+    24c3:	68 02 02 00 00       	push   $0x202
+    24c8:	68 1c 4b 00 00       	push   $0x4b1c
+    24cd:	e8 f1 14 00 00       	call   39c3 <open>
+    if(fd < 0){
+    24d2:	83 c4 10             	add    $0x10,%esp
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    24d5:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    24d7:	85 c0                	test   %eax,%eax
+    24d9:	78 7e                	js     2559 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    24db:	83 ec 04             	sub    $0x4,%esp
+    24de:	53                   	push   %ebx
+    24df:	68 80 93 00 00       	push   $0x9380
+    24e4:	50                   	push   %eax
+    24e5:	e8 b9 14 00 00       	call   39a3 <write>
+      if(cc != sz){
+    24ea:	83 c4 10             	add    $0x10,%esp
+    24ed:	39 d8                	cmp    %ebx,%eax
+    24ef:	75 55                	jne    2546 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    24f1:	83 ec 04             	sub    $0x4,%esp
+    24f4:	53                   	push   %ebx
+    24f5:	68 80 93 00 00       	push   $0x9380
+    24fa:	56                   	push   %esi
+    24fb:	e8 a3 14 00 00       	call   39a3 <write>
+      if(cc != sz){
+    2500:	83 c4 10             	add    $0x10,%esp
+    2503:	39 d8                	cmp    %ebx,%eax
+    2505:	75 3f                	jne    2546 <bigwrite+0xb6>
+    close(fd);
+    2507:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    250a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2510:	56                   	push   %esi
+    2511:	e8 95 14 00 00       	call   39ab <close>
+    unlink("bigwrite");
+    2516:	c7 04 24 1c 4b 00 00 	movl   $0x4b1c,(%esp)
+    251d:	e8 b1 14 00 00       	call   39d3 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2522:	83 c4 10             	add    $0x10,%esp
+    2525:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    252b:	75 93                	jne    24c0 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    252d:	83 ec 08             	sub    $0x8,%esp
+    2530:	68 4f 4b 00 00       	push   $0x4b4f
+    2535:	6a 01                	push   $0x1
+    2537:	e8 d4 15 00 00       	call   3b10 <printf>
+}
+    253c:	83 c4 10             	add    $0x10,%esp
+    253f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    2542:	5b                   	pop    %ebx
+    2543:	5e                   	pop    %esi
+    2544:	5d                   	pop    %ebp
+    2545:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    2546:	50                   	push   %eax
+    2547:	53                   	push   %ebx
+    2548:	68 3d 4b 00 00       	push   $0x4b3d
+    254d:	6a 01                	push   $0x1
+    254f:	e8 bc 15 00 00       	call   3b10 <printf>
+        exit();
+    2554:	e8 2a 14 00 00       	call   3983 <exit>
+      printf(1, "cannot create bigwrite\n");
+    2559:	83 ec 08             	sub    $0x8,%esp
+    255c:	68 25 4b 00 00       	push   $0x4b25
+    2561:	6a 01                	push   $0x1
+    2563:	e8 a8 15 00 00       	call   3b10 <printf>
+      exit();
+    2568:	e8 16 14 00 00       	call   3983 <exit>
+    256d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00002570 <bigfile>:
+{
+    2570:	f3 0f 1e fb          	endbr32 
+    2574:	55                   	push   %ebp
+    2575:	89 e5                	mov    %esp,%ebp
+    2577:	57                   	push   %edi
+    2578:	56                   	push   %esi
+    2579:	53                   	push   %ebx
+    257a:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    257d:	68 5c 4b 00 00       	push   $0x4b5c
+    2582:	6a 01                	push   $0x1
+    2584:	e8 87 15 00 00       	call   3b10 <printf>
+  unlink("bigfile");
+    2589:	c7 04 24 78 4b 00 00 	movl   $0x4b78,(%esp)
+    2590:	e8 3e 14 00 00       	call   39d3 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    2595:	58                   	pop    %eax
+    2596:	5a                   	pop    %edx
+    2597:	68 02 02 00 00       	push   $0x202
+    259c:	68 78 4b 00 00       	push   $0x4b78
+    25a1:	e8 1d 14 00 00       	call   39c3 <open>
+  if(fd < 0){
+    25a6:	83 c4 10             	add    $0x10,%esp
+    25a9:	85 c0                	test   %eax,%eax
+    25ab:	0f 88 5a 01 00 00    	js     270b <bigfile+0x19b>
+    25b1:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    25b3:	31 db                	xor    %ebx,%ebx
+    25b5:	8d 76 00             	lea    0x0(%esi),%esi
+    memset(buf, i, 600);
+    25b8:	83 ec 04             	sub    $0x4,%esp
+    25bb:	68 58 02 00 00       	push   $0x258
+    25c0:	53                   	push   %ebx
+    25c1:	68 80 93 00 00       	push   $0x9380
+    25c6:	e8 15 12 00 00       	call   37e0 <memset>
+    if(write(fd, buf, 600) != 600){
+    25cb:	83 c4 0c             	add    $0xc,%esp
+    25ce:	68 58 02 00 00       	push   $0x258
+    25d3:	68 80 93 00 00       	push   $0x9380
+    25d8:	56                   	push   %esi
+    25d9:	e8 c5 13 00 00       	call   39a3 <write>
+    25de:	83 c4 10             	add    $0x10,%esp
+    25e1:	3d 58 02 00 00       	cmp    $0x258,%eax
+    25e6:	0f 85 f8 00 00 00    	jne    26e4 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    25ec:	83 c3 01             	add    $0x1,%ebx
+    25ef:	83 fb 14             	cmp    $0x14,%ebx
+    25f2:	75 c4                	jne    25b8 <bigfile+0x48>
+  close(fd);
+    25f4:	83 ec 0c             	sub    $0xc,%esp
+    25f7:	56                   	push   %esi
+    25f8:	e8 ae 13 00 00       	call   39ab <close>
+  fd = open("bigfile", 0);
+    25fd:	5e                   	pop    %esi
+    25fe:	5f                   	pop    %edi
+    25ff:	6a 00                	push   $0x0
+    2601:	68 78 4b 00 00       	push   $0x4b78
+    2606:	e8 b8 13 00 00       	call   39c3 <open>
+  if(fd < 0){
+    260b:	83 c4 10             	add    $0x10,%esp
+  fd = open("bigfile", 0);
+    260e:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2610:	85 c0                	test   %eax,%eax
+    2612:	0f 88 e0 00 00 00    	js     26f8 <bigfile+0x188>
+  total = 0;
+    2618:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    261a:	31 ff                	xor    %edi,%edi
+    261c:	eb 30                	jmp    264e <bigfile+0xde>
+    261e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2620:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2625:	0f 85 91 00 00 00    	jne    26bc <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    262b:	89 fa                	mov    %edi,%edx
+    262d:	0f be 05 80 93 00 00 	movsbl 0x9380,%eax
+    2634:	d1 fa                	sar    %edx
+    2636:	39 d0                	cmp    %edx,%eax
+    2638:	75 6e                	jne    26a8 <bigfile+0x138>
+    263a:	0f be 15 ab 94 00 00 	movsbl 0x94ab,%edx
+    2641:	39 d0                	cmp    %edx,%eax
+    2643:	75 63                	jne    26a8 <bigfile+0x138>
+    total += cc;
+    2645:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    264b:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    264e:	83 ec 04             	sub    $0x4,%esp
+    2651:	68 2c 01 00 00       	push   $0x12c
+    2656:	68 80 93 00 00       	push   $0x9380
+    265b:	56                   	push   %esi
+    265c:	e8 3a 13 00 00       	call   399b <read>
+    if(cc < 0){
+    2661:	83 c4 10             	add    $0x10,%esp
+    2664:	85 c0                	test   %eax,%eax
+    2666:	78 68                	js     26d0 <bigfile+0x160>
+    if(cc == 0)
+    2668:	75 b6                	jne    2620 <bigfile+0xb0>
+  close(fd);
+    266a:	83 ec 0c             	sub    $0xc,%esp
+    266d:	56                   	push   %esi
+    266e:	e8 38 13 00 00       	call   39ab <close>
+  if(total != 20*600){
+    2673:	83 c4 10             	add    $0x10,%esp
+    2676:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    267c:	0f 85 9c 00 00 00    	jne    271e <bigfile+0x1ae>
+  unlink("bigfile");
+    2682:	83 ec 0c             	sub    $0xc,%esp
+    2685:	68 78 4b 00 00       	push   $0x4b78
+    268a:	e8 44 13 00 00       	call   39d3 <unlink>
+  printf(1, "bigfile test ok\n");
+    268f:	58                   	pop    %eax
+    2690:	5a                   	pop    %edx
+    2691:	68 07 4c 00 00       	push   $0x4c07
+    2696:	6a 01                	push   $0x1
+    2698:	e8 73 14 00 00       	call   3b10 <printf>
+}
+    269d:	83 c4 10             	add    $0x10,%esp
+    26a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    26a3:	5b                   	pop    %ebx
+    26a4:	5e                   	pop    %esi
+    26a5:	5f                   	pop    %edi
+    26a6:	5d                   	pop    %ebp
+    26a7:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    26a8:	83 ec 08             	sub    $0x8,%esp
+    26ab:	68 d4 4b 00 00       	push   $0x4bd4
+    26b0:	6a 01                	push   $0x1
+    26b2:	e8 59 14 00 00       	call   3b10 <printf>
+      exit();
+    26b7:	e8 c7 12 00 00       	call   3983 <exit>
+      printf(1, "short read bigfile\n");
+    26bc:	83 ec 08             	sub    $0x8,%esp
+    26bf:	68 c0 4b 00 00       	push   $0x4bc0
+    26c4:	6a 01                	push   $0x1
+    26c6:	e8 45 14 00 00       	call   3b10 <printf>
+      exit();
+    26cb:	e8 b3 12 00 00       	call   3983 <exit>
+      printf(1, "read bigfile failed\n");
+    26d0:	83 ec 08             	sub    $0x8,%esp
+    26d3:	68 ab 4b 00 00       	push   $0x4bab
+    26d8:	6a 01                	push   $0x1
+    26da:	e8 31 14 00 00       	call   3b10 <printf>
+      exit();
+    26df:	e8 9f 12 00 00       	call   3983 <exit>
+      printf(1, "write bigfile failed\n");
+    26e4:	83 ec 08             	sub    $0x8,%esp
+    26e7:	68 80 4b 00 00       	push   $0x4b80
+    26ec:	6a 01                	push   $0x1
+    26ee:	e8 1d 14 00 00       	call   3b10 <printf>
+      exit();
+    26f3:	e8 8b 12 00 00       	call   3983 <exit>
+    printf(1, "cannot open bigfile\n");
+    26f8:	53                   	push   %ebx
+    26f9:	53                   	push   %ebx
+    26fa:	68 96 4b 00 00       	push   $0x4b96
+    26ff:	6a 01                	push   $0x1
+    2701:	e8 0a 14 00 00       	call   3b10 <printf>
+    exit();
+    2706:	e8 78 12 00 00       	call   3983 <exit>
+    printf(1, "cannot create bigfile");
+    270b:	50                   	push   %eax
+    270c:	50                   	push   %eax
+    270d:	68 6a 4b 00 00       	push   $0x4b6a
+    2712:	6a 01                	push   $0x1
+    2714:	e8 f7 13 00 00       	call   3b10 <printf>
+    exit();
+    2719:	e8 65 12 00 00       	call   3983 <exit>
+    printf(1, "read bigfile wrong total\n");
+    271e:	51                   	push   %ecx
+    271f:	51                   	push   %ecx
+    2720:	68 ed 4b 00 00       	push   $0x4bed
+    2725:	6a 01                	push   $0x1
+    2727:	e8 e4 13 00 00       	call   3b10 <printf>
+    exit();
+    272c:	e8 52 12 00 00       	call   3983 <exit>
+    2731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    273f:	90                   	nop
+
+00002740 <fourteen>:
+{
+    2740:	f3 0f 1e fb          	endbr32 
+    2744:	55                   	push   %ebp
+    2745:	89 e5                	mov    %esp,%ebp
+    2747:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    274a:	68 18 4c 00 00       	push   $0x4c18
+    274f:	6a 01                	push   $0x1
+    2751:	e8 ba 13 00 00       	call   3b10 <printf>
+  if(mkdir("12345678901234") != 0){
+    2756:	c7 04 24 53 4c 00 00 	movl   $0x4c53,(%esp)
+    275d:	e8 89 12 00 00       	call   39eb <mkdir>
+    2762:	83 c4 10             	add    $0x10,%esp
+    2765:	85 c0                	test   %eax,%eax
+    2767:	0f 85 97 00 00 00    	jne    2804 <fourteen+0xc4>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    276d:	83 ec 0c             	sub    $0xc,%esp
+    2770:	68 10 54 00 00       	push   $0x5410
+    2775:	e8 71 12 00 00       	call   39eb <mkdir>
+    277a:	83 c4 10             	add    $0x10,%esp
+    277d:	85 c0                	test   %eax,%eax
+    277f:	0f 85 de 00 00 00    	jne    2863 <fourteen+0x123>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    2785:	83 ec 08             	sub    $0x8,%esp
+    2788:	68 00 02 00 00       	push   $0x200
+    278d:	68 60 54 00 00       	push   $0x5460
+    2792:	e8 2c 12 00 00       	call   39c3 <open>
+  if(fd < 0){
+    2797:	83 c4 10             	add    $0x10,%esp
+    279a:	85 c0                	test   %eax,%eax
+    279c:	0f 88 ae 00 00 00    	js     2850 <fourteen+0x110>
+  close(fd);
+    27a2:	83 ec 0c             	sub    $0xc,%esp
+    27a5:	50                   	push   %eax
+    27a6:	e8 00 12 00 00       	call   39ab <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    27ab:	58                   	pop    %eax
+    27ac:	5a                   	pop    %edx
+    27ad:	6a 00                	push   $0x0
+    27af:	68 d0 54 00 00       	push   $0x54d0
+    27b4:	e8 0a 12 00 00       	call   39c3 <open>
+  if(fd < 0){
+    27b9:	83 c4 10             	add    $0x10,%esp
+    27bc:	85 c0                	test   %eax,%eax
+    27be:	78 7d                	js     283d <fourteen+0xfd>
+  close(fd);
+    27c0:	83 ec 0c             	sub    $0xc,%esp
+    27c3:	50                   	push   %eax
+    27c4:	e8 e2 11 00 00       	call   39ab <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    27c9:	c7 04 24 44 4c 00 00 	movl   $0x4c44,(%esp)
+    27d0:	e8 16 12 00 00       	call   39eb <mkdir>
+    27d5:	83 c4 10             	add    $0x10,%esp
+    27d8:	85 c0                	test   %eax,%eax
+    27da:	74 4e                	je     282a <fourteen+0xea>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    27dc:	83 ec 0c             	sub    $0xc,%esp
+    27df:	68 6c 55 00 00       	push   $0x556c
+    27e4:	e8 02 12 00 00       	call   39eb <mkdir>
+    27e9:	83 c4 10             	add    $0x10,%esp
+    27ec:	85 c0                	test   %eax,%eax
+    27ee:	74 27                	je     2817 <fourteen+0xd7>
+  printf(1, "fourteen ok\n");
+    27f0:	83 ec 08             	sub    $0x8,%esp
+    27f3:	68 62 4c 00 00       	push   $0x4c62
+    27f8:	6a 01                	push   $0x1
+    27fa:	e8 11 13 00 00       	call   3b10 <printf>
+}
+    27ff:	83 c4 10             	add    $0x10,%esp
+    2802:	c9                   	leave  
+    2803:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2804:	50                   	push   %eax
+    2805:	50                   	push   %eax
+    2806:	68 27 4c 00 00       	push   $0x4c27
+    280b:	6a 01                	push   $0x1
+    280d:	e8 fe 12 00 00       	call   3b10 <printf>
+    exit();
+    2812:	e8 6c 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2817:	50                   	push   %eax
+    2818:	50                   	push   %eax
+    2819:	68 8c 55 00 00       	push   $0x558c
+    281e:	6a 01                	push   $0x1
+    2820:	e8 eb 12 00 00       	call   3b10 <printf>
+    exit();
+    2825:	e8 59 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    282a:	52                   	push   %edx
+    282b:	52                   	push   %edx
+    282c:	68 3c 55 00 00       	push   $0x553c
+    2831:	6a 01                	push   $0x1
+    2833:	e8 d8 12 00 00       	call   3b10 <printf>
+    exit();
+    2838:	e8 46 11 00 00       	call   3983 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    283d:	51                   	push   %ecx
+    283e:	51                   	push   %ecx
+    283f:	68 00 55 00 00       	push   $0x5500
+    2844:	6a 01                	push   $0x1
+    2846:	e8 c5 12 00 00       	call   3b10 <printf>
+    exit();
+    284b:	e8 33 11 00 00       	call   3983 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    2850:	51                   	push   %ecx
+    2851:	51                   	push   %ecx
+    2852:	68 90 54 00 00       	push   $0x5490
+    2857:	6a 01                	push   $0x1
+    2859:	e8 b2 12 00 00       	call   3b10 <printf>
+    exit();
+    285e:	e8 20 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    2863:	50                   	push   %eax
+    2864:	50                   	push   %eax
+    2865:	68 30 54 00 00       	push   $0x5430
+    286a:	6a 01                	push   $0x1
+    286c:	e8 9f 12 00 00       	call   3b10 <printf>
+    exit();
+    2871:	e8 0d 11 00 00       	call   3983 <exit>
+    2876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    287d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00002880 <rmdot>:
+{
+    2880:	f3 0f 1e fb          	endbr32 
+    2884:	55                   	push   %ebp
+    2885:	89 e5                	mov    %esp,%ebp
+    2887:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    288a:	68 6f 4c 00 00       	push   $0x4c6f
+    288f:	6a 01                	push   $0x1
+    2891:	e8 7a 12 00 00       	call   3b10 <printf>
+  if(mkdir("dots") != 0){
+    2896:	c7 04 24 7b 4c 00 00 	movl   $0x4c7b,(%esp)
+    289d:	e8 49 11 00 00       	call   39eb <mkdir>
+    28a2:	83 c4 10             	add    $0x10,%esp
+    28a5:	85 c0                	test   %eax,%eax
+    28a7:	0f 85 b0 00 00 00    	jne    295d <rmdot+0xdd>
+  if(chdir("dots") != 0){
+    28ad:	83 ec 0c             	sub    $0xc,%esp
+    28b0:	68 7b 4c 00 00       	push   $0x4c7b
+    28b5:	e8 39 11 00 00       	call   39f3 <chdir>
+    28ba:	83 c4 10             	add    $0x10,%esp
+    28bd:	85 c0                	test   %eax,%eax
+    28bf:	0f 85 1d 01 00 00    	jne    29e2 <rmdot+0x162>
+  if(unlink(".") == 0){
+    28c5:	83 ec 0c             	sub    $0xc,%esp
+    28c8:	68 26 49 00 00       	push   $0x4926
+    28cd:	e8 01 11 00 00       	call   39d3 <unlink>
+    28d2:	83 c4 10             	add    $0x10,%esp
+    28d5:	85 c0                	test   %eax,%eax
+    28d7:	0f 84 f2 00 00 00    	je     29cf <rmdot+0x14f>
+  if(unlink("..") == 0){
+    28dd:	83 ec 0c             	sub    $0xc,%esp
+    28e0:	68 25 49 00 00       	push   $0x4925
+    28e5:	e8 e9 10 00 00       	call   39d3 <unlink>
+    28ea:	83 c4 10             	add    $0x10,%esp
+    28ed:	85 c0                	test   %eax,%eax
+    28ef:	0f 84 c7 00 00 00    	je     29bc <rmdot+0x13c>
+  if(chdir("/") != 0){
+    28f5:	83 ec 0c             	sub    $0xc,%esp
+    28f8:	68 f9 40 00 00       	push   $0x40f9
+    28fd:	e8 f1 10 00 00       	call   39f3 <chdir>
+    2902:	83 c4 10             	add    $0x10,%esp
+    2905:	85 c0                	test   %eax,%eax
+    2907:	0f 85 9c 00 00 00    	jne    29a9 <rmdot+0x129>
+  if(unlink("dots/.") == 0){
+    290d:	83 ec 0c             	sub    $0xc,%esp
+    2910:	68 c3 4c 00 00       	push   $0x4cc3
+    2915:	e8 b9 10 00 00       	call   39d3 <unlink>
+    291a:	83 c4 10             	add    $0x10,%esp
+    291d:	85 c0                	test   %eax,%eax
+    291f:	74 75                	je     2996 <rmdot+0x116>
+  if(unlink("dots/..") == 0){
+    2921:	83 ec 0c             	sub    $0xc,%esp
+    2924:	68 e1 4c 00 00       	push   $0x4ce1
+    2929:	e8 a5 10 00 00       	call   39d3 <unlink>
+    292e:	83 c4 10             	add    $0x10,%esp
+    2931:	85 c0                	test   %eax,%eax
+    2933:	74 4e                	je     2983 <rmdot+0x103>
+  if(unlink("dots") != 0){
+    2935:	83 ec 0c             	sub    $0xc,%esp
+    2938:	68 7b 4c 00 00       	push   $0x4c7b
+    293d:	e8 91 10 00 00       	call   39d3 <unlink>
+    2942:	83 c4 10             	add    $0x10,%esp
+    2945:	85 c0                	test   %eax,%eax
+    2947:	75 27                	jne    2970 <rmdot+0xf0>
+  printf(1, "rmdot ok\n");
+    2949:	83 ec 08             	sub    $0x8,%esp
+    294c:	68 16 4d 00 00       	push   $0x4d16
+    2951:	6a 01                	push   $0x1
+    2953:	e8 b8 11 00 00       	call   3b10 <printf>
+}
+    2958:	83 c4 10             	add    $0x10,%esp
+    295b:	c9                   	leave  
+    295c:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    295d:	50                   	push   %eax
+    295e:	50                   	push   %eax
+    295f:	68 80 4c 00 00       	push   $0x4c80
+    2964:	6a 01                	push   $0x1
+    2966:	e8 a5 11 00 00       	call   3b10 <printf>
+    exit();
+    296b:	e8 13 10 00 00       	call   3983 <exit>
+    printf(1, "unlink dots failed!\n");
+    2970:	50                   	push   %eax
+    2971:	50                   	push   %eax
+    2972:	68 01 4d 00 00       	push   $0x4d01
+    2977:	6a 01                	push   $0x1
+    2979:	e8 92 11 00 00       	call   3b10 <printf>
+    exit();
+    297e:	e8 00 10 00 00       	call   3983 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    2983:	52                   	push   %edx
+    2984:	52                   	push   %edx
+    2985:	68 e9 4c 00 00       	push   $0x4ce9
+    298a:	6a 01                	push   $0x1
+    298c:	e8 7f 11 00 00       	call   3b10 <printf>
+    exit();
+    2991:	e8 ed 0f 00 00       	call   3983 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    2996:	51                   	push   %ecx
+    2997:	51                   	push   %ecx
+    2998:	68 ca 4c 00 00       	push   $0x4cca
+    299d:	6a 01                	push   $0x1
+    299f:	e8 6c 11 00 00       	call   3b10 <printf>
+    exit();
+    29a4:	e8 da 0f 00 00       	call   3983 <exit>
+    printf(1, "chdir / failed\n");
+    29a9:	50                   	push   %eax
+    29aa:	50                   	push   %eax
+    29ab:	68 fb 40 00 00       	push   $0x40fb
+    29b0:	6a 01                	push   $0x1
+    29b2:	e8 59 11 00 00       	call   3b10 <printf>
+    exit();
+    29b7:	e8 c7 0f 00 00       	call   3983 <exit>
+    printf(1, "rm .. worked!\n");
+    29bc:	50                   	push   %eax
+    29bd:	50                   	push   %eax
+    29be:	68 b4 4c 00 00       	push   $0x4cb4
+    29c3:	6a 01                	push   $0x1
+    29c5:	e8 46 11 00 00       	call   3b10 <printf>
+    exit();
+    29ca:	e8 b4 0f 00 00       	call   3983 <exit>
+    printf(1, "rm . worked!\n");
+    29cf:	50                   	push   %eax
+    29d0:	50                   	push   %eax
+    29d1:	68 a6 4c 00 00       	push   $0x4ca6
+    29d6:	6a 01                	push   $0x1
+    29d8:	e8 33 11 00 00       	call   3b10 <printf>
+    exit();
+    29dd:	e8 a1 0f 00 00       	call   3983 <exit>
+    printf(1, "chdir dots failed\n");
+    29e2:	50                   	push   %eax
+    29e3:	50                   	push   %eax
+    29e4:	68 93 4c 00 00       	push   $0x4c93
+    29e9:	6a 01                	push   $0x1
+    29eb:	e8 20 11 00 00       	call   3b10 <printf>
+    exit();
+    29f0:	e8 8e 0f 00 00       	call   3983 <exit>
+    29f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    29fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00002a00 <dirfile>:
+{
+    2a00:	f3 0f 1e fb          	endbr32 
+    2a04:	55                   	push   %ebp
+    2a05:	89 e5                	mov    %esp,%ebp
+    2a07:	53                   	push   %ebx
+    2a08:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2a0b:	68 20 4d 00 00       	push   $0x4d20
+    2a10:	6a 01                	push   $0x1
+    2a12:	e8 f9 10 00 00       	call   3b10 <printf>
+  fd = open("dirfile", O_CREATE);
+    2a17:	5b                   	pop    %ebx
+    2a18:	58                   	pop    %eax
+    2a19:	68 00 02 00 00       	push   $0x200
+    2a1e:	68 2d 4d 00 00       	push   $0x4d2d
+    2a23:	e8 9b 0f 00 00       	call   39c3 <open>
+  if(fd < 0){
+    2a28:	83 c4 10             	add    $0x10,%esp
+    2a2b:	85 c0                	test   %eax,%eax
+    2a2d:	0f 88 43 01 00 00    	js     2b76 <dirfile+0x176>
+  close(fd);
+    2a33:	83 ec 0c             	sub    $0xc,%esp
+    2a36:	50                   	push   %eax
+    2a37:	e8 6f 0f 00 00       	call   39ab <close>
+  if(chdir("dirfile") == 0){
+    2a3c:	c7 04 24 2d 4d 00 00 	movl   $0x4d2d,(%esp)
+    2a43:	e8 ab 0f 00 00       	call   39f3 <chdir>
+    2a48:	83 c4 10             	add    $0x10,%esp
+    2a4b:	85 c0                	test   %eax,%eax
+    2a4d:	0f 84 10 01 00 00    	je     2b63 <dirfile+0x163>
+  fd = open("dirfile/xx", 0);
+    2a53:	83 ec 08             	sub    $0x8,%esp
+    2a56:	6a 00                	push   $0x0
+    2a58:	68 66 4d 00 00       	push   $0x4d66
+    2a5d:	e8 61 0f 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2a62:	83 c4 10             	add    $0x10,%esp
+    2a65:	85 c0                	test   %eax,%eax
+    2a67:	0f 89 e3 00 00 00    	jns    2b50 <dirfile+0x150>
+  fd = open("dirfile/xx", O_CREATE);
+    2a6d:	83 ec 08             	sub    $0x8,%esp
+    2a70:	68 00 02 00 00       	push   $0x200
+    2a75:	68 66 4d 00 00       	push   $0x4d66
+    2a7a:	e8 44 0f 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2a7f:	83 c4 10             	add    $0x10,%esp
+    2a82:	85 c0                	test   %eax,%eax
+    2a84:	0f 89 c6 00 00 00    	jns    2b50 <dirfile+0x150>
+  if(mkdir("dirfile/xx") == 0){
+    2a8a:	83 ec 0c             	sub    $0xc,%esp
+    2a8d:	68 66 4d 00 00       	push   $0x4d66
+    2a92:	e8 54 0f 00 00       	call   39eb <mkdir>
+    2a97:	83 c4 10             	add    $0x10,%esp
+    2a9a:	85 c0                	test   %eax,%eax
+    2a9c:	0f 84 46 01 00 00    	je     2be8 <dirfile+0x1e8>
+  if(unlink("dirfile/xx") == 0){
+    2aa2:	83 ec 0c             	sub    $0xc,%esp
+    2aa5:	68 66 4d 00 00       	push   $0x4d66
+    2aaa:	e8 24 0f 00 00       	call   39d3 <unlink>
+    2aaf:	83 c4 10             	add    $0x10,%esp
+    2ab2:	85 c0                	test   %eax,%eax
+    2ab4:	0f 84 1b 01 00 00    	je     2bd5 <dirfile+0x1d5>
+  if(link("README", "dirfile/xx") == 0){
+    2aba:	83 ec 08             	sub    $0x8,%esp
+    2abd:	68 66 4d 00 00       	push   $0x4d66
+    2ac2:	68 ca 4d 00 00       	push   $0x4dca
+    2ac7:	e8 17 0f 00 00       	call   39e3 <link>
+    2acc:	83 c4 10             	add    $0x10,%esp
+    2acf:	85 c0                	test   %eax,%eax
+    2ad1:	0f 84 eb 00 00 00    	je     2bc2 <dirfile+0x1c2>
+  if(unlink("dirfile") != 0){
+    2ad7:	83 ec 0c             	sub    $0xc,%esp
+    2ada:	68 2d 4d 00 00       	push   $0x4d2d
+    2adf:	e8 ef 0e 00 00       	call   39d3 <unlink>
+    2ae4:	83 c4 10             	add    $0x10,%esp
+    2ae7:	85 c0                	test   %eax,%eax
+    2ae9:	0f 85 c0 00 00 00    	jne    2baf <dirfile+0x1af>
+  fd = open(".", O_RDWR);
+    2aef:	83 ec 08             	sub    $0x8,%esp
+    2af2:	6a 02                	push   $0x2
+    2af4:	68 26 49 00 00       	push   $0x4926
+    2af9:	e8 c5 0e 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2afe:	83 c4 10             	add    $0x10,%esp
+    2b01:	85 c0                	test   %eax,%eax
+    2b03:	0f 89 93 00 00 00    	jns    2b9c <dirfile+0x19c>
+  fd = open(".", 0);
+    2b09:	83 ec 08             	sub    $0x8,%esp
+    2b0c:	6a 00                	push   $0x0
+    2b0e:	68 26 49 00 00       	push   $0x4926
+    2b13:	e8 ab 0e 00 00       	call   39c3 <open>
+  if(write(fd, "x", 1) > 0){
+    2b18:	83 c4 0c             	add    $0xc,%esp
+    2b1b:	6a 01                	push   $0x1
+  fd = open(".", 0);
+    2b1d:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2b1f:	68 09 4a 00 00       	push   $0x4a09
+    2b24:	50                   	push   %eax
+    2b25:	e8 79 0e 00 00       	call   39a3 <write>
+    2b2a:	83 c4 10             	add    $0x10,%esp
+    2b2d:	85 c0                	test   %eax,%eax
+    2b2f:	7f 58                	jg     2b89 <dirfile+0x189>
+  close(fd);
+    2b31:	83 ec 0c             	sub    $0xc,%esp
+    2b34:	53                   	push   %ebx
+    2b35:	e8 71 0e 00 00       	call   39ab <close>
+  printf(1, "dir vs file OK\n");
+    2b3a:	58                   	pop    %eax
+    2b3b:	5a                   	pop    %edx
+    2b3c:	68 fd 4d 00 00       	push   $0x4dfd
+    2b41:	6a 01                	push   $0x1
+    2b43:	e8 c8 0f 00 00       	call   3b10 <printf>
+}
+    2b48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2b4b:	83 c4 10             	add    $0x10,%esp
+    2b4e:	c9                   	leave  
+    2b4f:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2b50:	50                   	push   %eax
+    2b51:	50                   	push   %eax
+    2b52:	68 71 4d 00 00       	push   $0x4d71
+    2b57:	6a 01                	push   $0x1
+    2b59:	e8 b2 0f 00 00       	call   3b10 <printf>
+    exit();
+    2b5e:	e8 20 0e 00 00       	call   3983 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2b63:	52                   	push   %edx
+    2b64:	52                   	push   %edx
+    2b65:	68 4c 4d 00 00       	push   $0x4d4c
+    2b6a:	6a 01                	push   $0x1
+    2b6c:	e8 9f 0f 00 00       	call   3b10 <printf>
+    exit();
+    2b71:	e8 0d 0e 00 00       	call   3983 <exit>
+    printf(1, "create dirfile failed\n");
+    2b76:	51                   	push   %ecx
+    2b77:	51                   	push   %ecx
+    2b78:	68 35 4d 00 00       	push   $0x4d35
+    2b7d:	6a 01                	push   $0x1
+    2b7f:	e8 8c 0f 00 00       	call   3b10 <printf>
+    exit();
+    2b84:	e8 fa 0d 00 00       	call   3983 <exit>
+    printf(1, "write . succeeded!\n");
+    2b89:	51                   	push   %ecx
+    2b8a:	51                   	push   %ecx
+    2b8b:	68 e9 4d 00 00       	push   $0x4de9
+    2b90:	6a 01                	push   $0x1
+    2b92:	e8 79 0f 00 00       	call   3b10 <printf>
+    exit();
+    2b97:	e8 e7 0d 00 00       	call   3983 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2b9c:	53                   	push   %ebx
+    2b9d:	53                   	push   %ebx
+    2b9e:	68 e0 55 00 00       	push   $0x55e0
+    2ba3:	6a 01                	push   $0x1
+    2ba5:	e8 66 0f 00 00       	call   3b10 <printf>
+    exit();
+    2baa:	e8 d4 0d 00 00       	call   3983 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2baf:	50                   	push   %eax
+    2bb0:	50                   	push   %eax
+    2bb1:	68 d1 4d 00 00       	push   $0x4dd1
+    2bb6:	6a 01                	push   $0x1
+    2bb8:	e8 53 0f 00 00       	call   3b10 <printf>
+    exit();
+    2bbd:	e8 c1 0d 00 00       	call   3983 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2bc2:	50                   	push   %eax
+    2bc3:	50                   	push   %eax
+    2bc4:	68 c0 55 00 00       	push   $0x55c0
+    2bc9:	6a 01                	push   $0x1
+    2bcb:	e8 40 0f 00 00       	call   3b10 <printf>
+    exit();
+    2bd0:	e8 ae 0d 00 00       	call   3983 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2bd5:	50                   	push   %eax
+    2bd6:	50                   	push   %eax
+    2bd7:	68 ac 4d 00 00       	push   $0x4dac
+    2bdc:	6a 01                	push   $0x1
+    2bde:	e8 2d 0f 00 00       	call   3b10 <printf>
+    exit();
+    2be3:	e8 9b 0d 00 00       	call   3983 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2be8:	50                   	push   %eax
+    2be9:	50                   	push   %eax
+    2bea:	68 8f 4d 00 00       	push   $0x4d8f
+    2bef:	6a 01                	push   $0x1
+    2bf1:	e8 1a 0f 00 00       	call   3b10 <printf>
+    exit();
+    2bf6:	e8 88 0d 00 00       	call   3983 <exit>
+    2bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2bff:	90                   	nop
+
+00002c00 <iref>:
+{
+    2c00:	f3 0f 1e fb          	endbr32 
+    2c04:	55                   	push   %ebp
+    2c05:	89 e5                	mov    %esp,%ebp
+    2c07:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2c08:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2c0d:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2c10:	68 0d 4e 00 00       	push   $0x4e0d
+    2c15:	6a 01                	push   $0x1
+    2c17:	e8 f4 0e 00 00       	call   3b10 <printf>
+    2c1c:	83 c4 10             	add    $0x10,%esp
+    2c1f:	90                   	nop
+    if(mkdir("irefd") != 0){
+    2c20:	83 ec 0c             	sub    $0xc,%esp
+    2c23:	68 1e 4e 00 00       	push   $0x4e1e
+    2c28:	e8 be 0d 00 00       	call   39eb <mkdir>
+    2c2d:	83 c4 10             	add    $0x10,%esp
+    2c30:	85 c0                	test   %eax,%eax
+    2c32:	0f 85 bb 00 00 00    	jne    2cf3 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2c38:	83 ec 0c             	sub    $0xc,%esp
+    2c3b:	68 1e 4e 00 00       	push   $0x4e1e
+    2c40:	e8 ae 0d 00 00       	call   39f3 <chdir>
+    2c45:	83 c4 10             	add    $0x10,%esp
+    2c48:	85 c0                	test   %eax,%eax
+    2c4a:	0f 85 b7 00 00 00    	jne    2d07 <iref+0x107>
+    mkdir("");
+    2c50:	83 ec 0c             	sub    $0xc,%esp
+    2c53:	68 d3 44 00 00       	push   $0x44d3
+    2c58:	e8 8e 0d 00 00       	call   39eb <mkdir>
+    link("README", "");
+    2c5d:	59                   	pop    %ecx
+    2c5e:	58                   	pop    %eax
+    2c5f:	68 d3 44 00 00       	push   $0x44d3
+    2c64:	68 ca 4d 00 00       	push   $0x4dca
+    2c69:	e8 75 0d 00 00       	call   39e3 <link>
+    fd = open("", O_CREATE);
+    2c6e:	58                   	pop    %eax
+    2c6f:	5a                   	pop    %edx
+    2c70:	68 00 02 00 00       	push   $0x200
+    2c75:	68 d3 44 00 00       	push   $0x44d3
+    2c7a:	e8 44 0d 00 00       	call   39c3 <open>
+    if(fd >= 0)
+    2c7f:	83 c4 10             	add    $0x10,%esp
+    2c82:	85 c0                	test   %eax,%eax
+    2c84:	78 0c                	js     2c92 <iref+0x92>
+      close(fd);
+    2c86:	83 ec 0c             	sub    $0xc,%esp
+    2c89:	50                   	push   %eax
+    2c8a:	e8 1c 0d 00 00       	call   39ab <close>
+    2c8f:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2c92:	83 ec 08             	sub    $0x8,%esp
+    2c95:	68 00 02 00 00       	push   $0x200
+    2c9a:	68 08 4a 00 00       	push   $0x4a08
+    2c9f:	e8 1f 0d 00 00       	call   39c3 <open>
+    if(fd >= 0)
+    2ca4:	83 c4 10             	add    $0x10,%esp
+    2ca7:	85 c0                	test   %eax,%eax
+    2ca9:	78 0c                	js     2cb7 <iref+0xb7>
+      close(fd);
+    2cab:	83 ec 0c             	sub    $0xc,%esp
+    2cae:	50                   	push   %eax
+    2caf:	e8 f7 0c 00 00       	call   39ab <close>
+    2cb4:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2cb7:	83 ec 0c             	sub    $0xc,%esp
+    2cba:	68 08 4a 00 00       	push   $0x4a08
+    2cbf:	e8 0f 0d 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2cc4:	83 c4 10             	add    $0x10,%esp
+    2cc7:	83 eb 01             	sub    $0x1,%ebx
+    2cca:	0f 85 50 ff ff ff    	jne    2c20 <iref+0x20>
+  chdir("/");
+    2cd0:	83 ec 0c             	sub    $0xc,%esp
+    2cd3:	68 f9 40 00 00       	push   $0x40f9
+    2cd8:	e8 16 0d 00 00       	call   39f3 <chdir>
+  printf(1, "empty file name OK\n");
+    2cdd:	58                   	pop    %eax
+    2cde:	5a                   	pop    %edx
+    2cdf:	68 4c 4e 00 00       	push   $0x4e4c
+    2ce4:	6a 01                	push   $0x1
+    2ce6:	e8 25 0e 00 00       	call   3b10 <printf>
+}
+    2ceb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cee:	83 c4 10             	add    $0x10,%esp
+    2cf1:	c9                   	leave  
+    2cf2:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2cf3:	83 ec 08             	sub    $0x8,%esp
+    2cf6:	68 24 4e 00 00       	push   $0x4e24
+    2cfb:	6a 01                	push   $0x1
+    2cfd:	e8 0e 0e 00 00       	call   3b10 <printf>
+      exit();
+    2d02:	e8 7c 0c 00 00       	call   3983 <exit>
+      printf(1, "chdir irefd failed\n");
+    2d07:	83 ec 08             	sub    $0x8,%esp
+    2d0a:	68 38 4e 00 00       	push   $0x4e38
+    2d0f:	6a 01                	push   $0x1
+    2d11:	e8 fa 0d 00 00       	call   3b10 <printf>
+      exit();
+    2d16:	e8 68 0c 00 00       	call   3983 <exit>
+    2d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2d1f:	90                   	nop
+
+00002d20 <forktest>:
+{
+    2d20:	f3 0f 1e fb          	endbr32 
+    2d24:	55                   	push   %ebp
+    2d25:	89 e5                	mov    %esp,%ebp
+    2d27:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2d28:	31 db                	xor    %ebx,%ebx
+{
+    2d2a:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2d2d:	68 60 4e 00 00       	push   $0x4e60
+    2d32:	6a 01                	push   $0x1
+    2d34:	e8 d7 0d 00 00       	call   3b10 <printf>
+    2d39:	83 c4 10             	add    $0x10,%esp
+    2d3c:	eb 0f                	jmp    2d4d <forktest+0x2d>
+    2d3e:	66 90                	xchg   %ax,%ax
+    if(pid == 0)
+    2d40:	74 4a                	je     2d8c <forktest+0x6c>
+  for(n=0; n<1000; n++){
+    2d42:	83 c3 01             	add    $0x1,%ebx
+    2d45:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2d4b:	74 6b                	je     2db8 <forktest+0x98>
+    pid = fork();
+    2d4d:	e8 29 0c 00 00       	call   397b <fork>
+    if(pid < 0)
+    2d52:	85 c0                	test   %eax,%eax
+    2d54:	79 ea                	jns    2d40 <forktest+0x20>
+  for(; n > 0; n--){
+    2d56:	85 db                	test   %ebx,%ebx
+    2d58:	74 14                	je     2d6e <forktest+0x4e>
+    2d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2d60:	e8 26 0c 00 00       	call   398b <wait>
+    2d65:	85 c0                	test   %eax,%eax
+    2d67:	78 28                	js     2d91 <forktest+0x71>
+  for(; n > 0; n--){
+    2d69:	83 eb 01             	sub    $0x1,%ebx
+    2d6c:	75 f2                	jne    2d60 <forktest+0x40>
+  if(wait() != -1){
+    2d6e:	e8 18 0c 00 00       	call   398b <wait>
+    2d73:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2d76:	75 2d                	jne    2da5 <forktest+0x85>
+  printf(1, "fork test OK\n");
+    2d78:	83 ec 08             	sub    $0x8,%esp
+    2d7b:	68 92 4e 00 00       	push   $0x4e92
+    2d80:	6a 01                	push   $0x1
+    2d82:	e8 89 0d 00 00       	call   3b10 <printf>
+}
+    2d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2d8a:	c9                   	leave  
+    2d8b:	c3                   	ret    
+      exit();
+    2d8c:	e8 f2 0b 00 00       	call   3983 <exit>
+      printf(1, "wait stopped early\n");
+    2d91:	83 ec 08             	sub    $0x8,%esp
+    2d94:	68 6b 4e 00 00       	push   $0x4e6b
+    2d99:	6a 01                	push   $0x1
+    2d9b:	e8 70 0d 00 00       	call   3b10 <printf>
+      exit();
+    2da0:	e8 de 0b 00 00       	call   3983 <exit>
+    printf(1, "wait got too many\n");
+    2da5:	52                   	push   %edx
+    2da6:	52                   	push   %edx
+    2da7:	68 7f 4e 00 00       	push   $0x4e7f
+    2dac:	6a 01                	push   $0x1
+    2dae:	e8 5d 0d 00 00       	call   3b10 <printf>
+    exit();
+    2db3:	e8 cb 0b 00 00       	call   3983 <exit>
+    printf(1, "fork claimed to work 1000 times!\n");
+    2db8:	50                   	push   %eax
+    2db9:	50                   	push   %eax
+    2dba:	68 00 56 00 00       	push   $0x5600
+    2dbf:	6a 01                	push   $0x1
+    2dc1:	e8 4a 0d 00 00       	call   3b10 <printf>
+    exit();
+    2dc6:	e8 b8 0b 00 00       	call   3983 <exit>
+    2dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2dcf:	90                   	nop
+
+00002dd0 <sbrktest>:
+{
+    2dd0:	f3 0f 1e fb          	endbr32 
+    2dd4:	55                   	push   %ebp
+    2dd5:	89 e5                	mov    %esp,%ebp
+    2dd7:	57                   	push   %edi
+  for(i = 0; i < 5000; i++){
+    2dd8:	31 ff                	xor    %edi,%edi
+{
+    2dda:	56                   	push   %esi
+    2ddb:	53                   	push   %ebx
+    2ddc:	83 ec 54             	sub    $0x54,%esp
+  printf(stdout, "sbrk test\n");
+    2ddf:	68 a0 4e 00 00       	push   $0x4ea0
+    2de4:	ff 35 d8 61 00 00    	pushl  0x61d8
+    2dea:	e8 21 0d 00 00       	call   3b10 <printf>
+  oldbrk = sbrk(0);
+    2def:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2df6:	e8 10 0c 00 00       	call   3a0b <sbrk>
+  a = sbrk(0);
+    2dfb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2e02:	89 c3                	mov    %eax,%ebx
+  a = sbrk(0);
+    2e04:	e8 02 0c 00 00       	call   3a0b <sbrk>
+    2e09:	83 c4 10             	add    $0x10,%esp
+    2e0c:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 5000; i++){
+    2e0e:	eb 02                	jmp    2e12 <sbrktest+0x42>
+    a = b + 1;
+    2e10:	89 c6                	mov    %eax,%esi
+    b = sbrk(1);
+    2e12:	83 ec 0c             	sub    $0xc,%esp
+    2e15:	6a 01                	push   $0x1
+    2e17:	e8 ef 0b 00 00       	call   3a0b <sbrk>
+    if(b != a){
+    2e1c:	83 c4 10             	add    $0x10,%esp
+    2e1f:	39 f0                	cmp    %esi,%eax
+    2e21:	0f 85 84 02 00 00    	jne    30ab <sbrktest+0x2db>
+  for(i = 0; i < 5000; i++){
+    2e27:	83 c7 01             	add    $0x1,%edi
+    *b = 1;
+    2e2a:	c6 06 01             	movb   $0x1,(%esi)
+    a = b + 1;
+    2e2d:	8d 46 01             	lea    0x1(%esi),%eax
+  for(i = 0; i < 5000; i++){
+    2e30:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2e36:	75 d8                	jne    2e10 <sbrktest+0x40>
+  pid = fork();
+    2e38:	e8 3e 0b 00 00       	call   397b <fork>
+    2e3d:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2e3f:	85 c0                	test   %eax,%eax
+    2e41:	0f 88 91 03 00 00    	js     31d8 <sbrktest+0x408>
+  c = sbrk(1);
+    2e47:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2e4a:	83 c6 02             	add    $0x2,%esi
+  c = sbrk(1);
+    2e4d:	6a 01                	push   $0x1
+    2e4f:	e8 b7 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(1);
+    2e54:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e5b:	e8 ab 0b 00 00       	call   3a0b <sbrk>
+  if(c != a + 1){
+    2e60:	83 c4 10             	add    $0x10,%esp
+    2e63:	39 c6                	cmp    %eax,%esi
+    2e65:	0f 85 56 03 00 00    	jne    31c1 <sbrktest+0x3f1>
+  if(pid == 0)
+    2e6b:	85 ff                	test   %edi,%edi
+    2e6d:	0f 84 49 03 00 00    	je     31bc <sbrktest+0x3ec>
+  wait();
+    2e73:	e8 13 0b 00 00       	call   398b <wait>
+  a = sbrk(0);
+    2e78:	83 ec 0c             	sub    $0xc,%esp
+    2e7b:	6a 00                	push   $0x0
+    2e7d:	e8 89 0b 00 00       	call   3a0b <sbrk>
+    2e82:	89 c6                	mov    %eax,%esi
+  amt = (BIG) - (uint)a;
+    2e84:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2e89:	29 f0                	sub    %esi,%eax
+  p = sbrk(amt);
+    2e8b:	89 04 24             	mov    %eax,(%esp)
+    2e8e:	e8 78 0b 00 00       	call   3a0b <sbrk>
+  if (p != a) {
+    2e93:	83 c4 10             	add    $0x10,%esp
+    2e96:	39 c6                	cmp    %eax,%esi
+    2e98:	0f 85 07 03 00 00    	jne    31a5 <sbrktest+0x3d5>
+  a = sbrk(0);
+    2e9e:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2ea1:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2ea8:	6a 00                	push   $0x0
+    2eaa:	e8 5c 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(-4096);
+    2eaf:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2eb6:	89 c6                	mov    %eax,%esi
+  c = sbrk(-4096);
+    2eb8:	e8 4e 0b 00 00       	call   3a0b <sbrk>
+  if(c == (char*)0xffffffff){
+    2ebd:	83 c4 10             	add    $0x10,%esp
+    2ec0:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ec3:	0f 84 c5 02 00 00    	je     318e <sbrktest+0x3be>
+  c = sbrk(0);
+    2ec9:	83 ec 0c             	sub    $0xc,%esp
+    2ecc:	6a 00                	push   $0x0
+    2ece:	e8 38 0b 00 00       	call   3a0b <sbrk>
+  if(c != a - 4096){
+    2ed3:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
+    2ed9:	83 c4 10             	add    $0x10,%esp
+    2edc:	39 d0                	cmp    %edx,%eax
+    2ede:	0f 85 93 02 00 00    	jne    3177 <sbrktest+0x3a7>
+  a = sbrk(0);
+    2ee4:	83 ec 0c             	sub    $0xc,%esp
+    2ee7:	6a 00                	push   $0x0
+    2ee9:	e8 1d 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(4096);
+    2eee:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+  a = sbrk(0);
+    2ef5:	89 c6                	mov    %eax,%esi
+  c = sbrk(4096);
+    2ef7:	e8 0f 0b 00 00       	call   3a0b <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2efc:	83 c4 10             	add    $0x10,%esp
+  c = sbrk(4096);
+    2eff:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2f01:	39 c6                	cmp    %eax,%esi
+    2f03:	0f 85 57 02 00 00    	jne    3160 <sbrktest+0x390>
+    2f09:	83 ec 0c             	sub    $0xc,%esp
+    2f0c:	6a 00                	push   $0x0
+    2f0e:	e8 f8 0a 00 00       	call   3a0b <sbrk>
+    2f13:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    2f19:	83 c4 10             	add    $0x10,%esp
+    2f1c:	39 c2                	cmp    %eax,%edx
+    2f1e:	0f 85 3c 02 00 00    	jne    3160 <sbrktest+0x390>
+  if(*lastaddr == 99){
+    2f24:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2f2b:	0f 84 18 02 00 00    	je     3149 <sbrktest+0x379>
+  a = sbrk(0);
+    2f31:	83 ec 0c             	sub    $0xc,%esp
+    2f34:	6a 00                	push   $0x0
+    2f36:	e8 d0 0a 00 00       	call   3a0b <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2f3b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2f42:	89 c6                	mov    %eax,%esi
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2f44:	e8 c2 0a 00 00       	call   3a0b <sbrk>
+    2f49:	89 d9                	mov    %ebx,%ecx
+    2f4b:	29 c1                	sub    %eax,%ecx
+    2f4d:	89 0c 24             	mov    %ecx,(%esp)
+    2f50:	e8 b6 0a 00 00       	call   3a0b <sbrk>
+  if(c != a){
+    2f55:	83 c4 10             	add    $0x10,%esp
+    2f58:	39 c6                	cmp    %eax,%esi
+    2f5a:	0f 85 d2 01 00 00    	jne    3132 <sbrktest+0x362>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2f60:	be 00 00 00 80       	mov    $0x80000000,%esi
+    2f65:	8d 76 00             	lea    0x0(%esi),%esi
+    ppid = getpid();
+    2f68:	e8 96 0a 00 00       	call   3a03 <getpid>
+    2f6d:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2f6f:	e8 07 0a 00 00       	call   397b <fork>
+    if(pid < 0){
+    2f74:	85 c0                	test   %eax,%eax
+    2f76:	0f 88 9e 01 00 00    	js     311a <sbrktest+0x34a>
+    if(pid == 0){
+    2f7c:	0f 84 76 01 00 00    	je     30f8 <sbrktest+0x328>
+    wait();
+    2f82:	e8 04 0a 00 00       	call   398b <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2f87:	81 c6 50 c3 00 00    	add    $0xc350,%esi
+    2f8d:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
+    2f93:	75 d3                	jne    2f68 <sbrktest+0x198>
+  if(pipe(fds) != 0){
+    2f95:	83 ec 0c             	sub    $0xc,%esp
+    2f98:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2f9b:	50                   	push   %eax
+    2f9c:	e8 f2 09 00 00       	call   3993 <pipe>
+    2fa1:	83 c4 10             	add    $0x10,%esp
+    2fa4:	85 c0                	test   %eax,%eax
+    2fa6:	0f 85 34 01 00 00    	jne    30e0 <sbrktest+0x310>
+    2fac:	8d 75 c0             	lea    -0x40(%ebp),%esi
+    2faf:	89 f7                	mov    %esi,%edi
+    if((pids[i] = fork()) == 0){
+    2fb1:	e8 c5 09 00 00       	call   397b <fork>
+    2fb6:	89 07                	mov    %eax,(%edi)
+    2fb8:	85 c0                	test   %eax,%eax
+    2fba:	0f 84 8f 00 00 00    	je     304f <sbrktest+0x27f>
+    if(pids[i] != -1)
+    2fc0:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2fc3:	74 14                	je     2fd9 <sbrktest+0x209>
+      read(fds[0], &scratch, 1);
+    2fc5:	83 ec 04             	sub    $0x4,%esp
+    2fc8:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2fcb:	6a 01                	push   $0x1
+    2fcd:	50                   	push   %eax
+    2fce:	ff 75 b8             	pushl  -0x48(%ebp)
+    2fd1:	e8 c5 09 00 00       	call   399b <read>
+    2fd6:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2fd9:	83 c7 04             	add    $0x4,%edi
+    2fdc:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2fdf:	39 c7                	cmp    %eax,%edi
+    2fe1:	75 ce                	jne    2fb1 <sbrktest+0x1e1>
+  c = sbrk(4096);
+    2fe3:	83 ec 0c             	sub    $0xc,%esp
+    2fe6:	68 00 10 00 00       	push   $0x1000
+    2feb:	e8 1b 0a 00 00       	call   3a0b <sbrk>
+    2ff0:	83 c4 10             	add    $0x10,%esp
+    2ff3:	89 c7                	mov    %eax,%edi
+    if(pids[i] == -1)
+    2ff5:	8b 06                	mov    (%esi),%eax
+    2ff7:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ffa:	74 11                	je     300d <sbrktest+0x23d>
+    kill(pids[i]);
+    2ffc:	83 ec 0c             	sub    $0xc,%esp
+    2fff:	50                   	push   %eax
+    3000:	e8 ae 09 00 00       	call   39b3 <kill>
+    wait();
+    3005:	e8 81 09 00 00       	call   398b <wait>
+    300a:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    300d:	83 c6 04             	add    $0x4,%esi
+    3010:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    3013:	39 f0                	cmp    %esi,%eax
+    3015:	75 de                	jne    2ff5 <sbrktest+0x225>
+  if(c == (char*)0xffffffff){
+    3017:	83 ff ff             	cmp    $0xffffffff,%edi
+    301a:	0f 84 a9 00 00 00    	je     30c9 <sbrktest+0x2f9>
+  if(sbrk(0) > oldbrk)
+    3020:	83 ec 0c             	sub    $0xc,%esp
+    3023:	6a 00                	push   $0x0
+    3025:	e8 e1 09 00 00       	call   3a0b <sbrk>
+    302a:	83 c4 10             	add    $0x10,%esp
+    302d:	39 c3                	cmp    %eax,%ebx
+    302f:	72 61                	jb     3092 <sbrktest+0x2c2>
+  printf(stdout, "sbrk test OK\n");
+    3031:	83 ec 08             	sub    $0x8,%esp
+    3034:	68 48 4f 00 00       	push   $0x4f48
+    3039:	ff 35 d8 61 00 00    	pushl  0x61d8
+    303f:	e8 cc 0a 00 00       	call   3b10 <printf>
+}
+    3044:	83 c4 10             	add    $0x10,%esp
+    3047:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    304a:	5b                   	pop    %ebx
+    304b:	5e                   	pop    %esi
+    304c:	5f                   	pop    %edi
+    304d:	5d                   	pop    %ebp
+    304e:	c3                   	ret    
+      sbrk(BIG - (uint)sbrk(0));
+    304f:	83 ec 0c             	sub    $0xc,%esp
+    3052:	6a 00                	push   $0x0
+    3054:	e8 b2 09 00 00       	call   3a0b <sbrk>
+    3059:	89 c2                	mov    %eax,%edx
+    305b:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    3060:	29 d0                	sub    %edx,%eax
+    3062:	89 04 24             	mov    %eax,(%esp)
+    3065:	e8 a1 09 00 00       	call   3a0b <sbrk>
+      write(fds[1], "x", 1);
+    306a:	83 c4 0c             	add    $0xc,%esp
+    306d:	6a 01                	push   $0x1
+    306f:	68 09 4a 00 00       	push   $0x4a09
+    3074:	ff 75 bc             	pushl  -0x44(%ebp)
+    3077:	e8 27 09 00 00       	call   39a3 <write>
+    307c:	83 c4 10             	add    $0x10,%esp
+    307f:	90                   	nop
+      for(;;) sleep(1000);
+    3080:	83 ec 0c             	sub    $0xc,%esp
+    3083:	68 e8 03 00 00       	push   $0x3e8
+    3088:	e8 86 09 00 00       	call   3a13 <sleep>
+    308d:	83 c4 10             	add    $0x10,%esp
+    3090:	eb ee                	jmp    3080 <sbrktest+0x2b0>
+    sbrk(-(sbrk(0) - oldbrk));
+    3092:	83 ec 0c             	sub    $0xc,%esp
+    3095:	6a 00                	push   $0x0
+    3097:	e8 6f 09 00 00       	call   3a0b <sbrk>
+    309c:	29 c3                	sub    %eax,%ebx
+    309e:	89 1c 24             	mov    %ebx,(%esp)
+    30a1:	e8 65 09 00 00       	call   3a0b <sbrk>
+    30a6:	83 c4 10             	add    $0x10,%esp
+    30a9:	eb 86                	jmp    3031 <sbrktest+0x261>
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    30ab:	83 ec 0c             	sub    $0xc,%esp
+    30ae:	50                   	push   %eax
+    30af:	56                   	push   %esi
+    30b0:	57                   	push   %edi
+    30b1:	68 ab 4e 00 00       	push   $0x4eab
+    30b6:	ff 35 d8 61 00 00    	pushl  0x61d8
+    30bc:	e8 4f 0a 00 00       	call   3b10 <printf>
+      exit();
+    30c1:	83 c4 20             	add    $0x20,%esp
+    30c4:	e8 ba 08 00 00       	call   3983 <exit>
+    printf(stdout, "failed sbrk leaked memory\n");
+    30c9:	50                   	push   %eax
+    30ca:	50                   	push   %eax
+    30cb:	68 2d 4f 00 00       	push   $0x4f2d
+    30d0:	ff 35 d8 61 00 00    	pushl  0x61d8
+    30d6:	e8 35 0a 00 00       	call   3b10 <printf>
+    exit();
+    30db:	e8 a3 08 00 00       	call   3983 <exit>
+    printf(1, "pipe() failed\n");
+    30e0:	52                   	push   %edx
+    30e1:	52                   	push   %edx
+    30e2:	68 e9 43 00 00       	push   $0x43e9
+    30e7:	6a 01                	push   $0x1
+    30e9:	e8 22 0a 00 00       	call   3b10 <printf>
+    exit();
+    30ee:	e8 90 08 00 00       	call   3983 <exit>
+    30f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    30f7:	90                   	nop
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    30f8:	0f be 06             	movsbl (%esi),%eax
+    30fb:	50                   	push   %eax
+    30fc:	56                   	push   %esi
+    30fd:	68 14 4f 00 00       	push   $0x4f14
+    3102:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3108:	e8 03 0a 00 00       	call   3b10 <printf>
+      kill(ppid);
+    310d:	89 3c 24             	mov    %edi,(%esp)
+    3110:	e8 9e 08 00 00       	call   39b3 <kill>
+      exit();
+    3115:	e8 69 08 00 00       	call   3983 <exit>
+      printf(stdout, "fork failed\n");
+    311a:	83 ec 08             	sub    $0x8,%esp
+    311d:	68 f1 4f 00 00       	push   $0x4ff1
+    3122:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3128:	e8 e3 09 00 00       	call   3b10 <printf>
+      exit();
+    312d:	e8 51 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    3132:	50                   	push   %eax
+    3133:	56                   	push   %esi
+    3134:	68 f4 56 00 00       	push   $0x56f4
+    3139:	ff 35 d8 61 00 00    	pushl  0x61d8
+    313f:	e8 cc 09 00 00       	call   3b10 <printf>
+    exit();
+    3144:	e8 3a 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    3149:	51                   	push   %ecx
+    314a:	51                   	push   %ecx
+    314b:	68 c4 56 00 00       	push   $0x56c4
+    3150:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3156:	e8 b5 09 00 00       	call   3b10 <printf>
+    exit();
+    315b:	e8 23 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    3160:	57                   	push   %edi
+    3161:	56                   	push   %esi
+    3162:	68 9c 56 00 00       	push   $0x569c
+    3167:	ff 35 d8 61 00 00    	pushl  0x61d8
+    316d:	e8 9e 09 00 00       	call   3b10 <printf>
+    exit();
+    3172:	e8 0c 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    3177:	50                   	push   %eax
+    3178:	56                   	push   %esi
+    3179:	68 64 56 00 00       	push   $0x5664
+    317e:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3184:	e8 87 09 00 00       	call   3b10 <printf>
+    exit();
+    3189:	e8 f5 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    318e:	53                   	push   %ebx
+    318f:	53                   	push   %ebx
+    3190:	68 f9 4e 00 00       	push   $0x4ef9
+    3195:	ff 35 d8 61 00 00    	pushl  0x61d8
+    319b:	e8 70 09 00 00       	call   3b10 <printf>
+    exit();
+    31a0:	e8 de 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    31a5:	56                   	push   %esi
+    31a6:	56                   	push   %esi
+    31a7:	68 24 56 00 00       	push   $0x5624
+    31ac:	ff 35 d8 61 00 00    	pushl  0x61d8
+    31b2:	e8 59 09 00 00       	call   3b10 <printf>
+    exit();
+    31b7:	e8 c7 07 00 00       	call   3983 <exit>
+    exit();
+    31bc:	e8 c2 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    31c1:	57                   	push   %edi
+    31c2:	57                   	push   %edi
+    31c3:	68 dd 4e 00 00       	push   $0x4edd
+    31c8:	ff 35 d8 61 00 00    	pushl  0x61d8
+    31ce:	e8 3d 09 00 00       	call   3b10 <printf>
+    exit();
+    31d3:	e8 ab 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    31d8:	50                   	push   %eax
+    31d9:	50                   	push   %eax
+    31da:	68 c6 4e 00 00       	push   $0x4ec6
+    31df:	ff 35 d8 61 00 00    	pushl  0x61d8
+    31e5:	e8 26 09 00 00       	call   3b10 <printf>
+    exit();
+    31ea:	e8 94 07 00 00       	call   3983 <exit>
+    31ef:	90                   	nop
+
+000031f0 <validateint>:
+{
+    31f0:	f3 0f 1e fb          	endbr32 
+}
+    31f4:	c3                   	ret    
+    31f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    31fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003200 <validatetest>:
+{
+    3200:	f3 0f 1e fb          	endbr32 
+    3204:	55                   	push   %ebp
+    3205:	89 e5                	mov    %esp,%ebp
+    3207:	56                   	push   %esi
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3208:	31 f6                	xor    %esi,%esi
+{
+    320a:	53                   	push   %ebx
+  printf(stdout, "validate test\n");
+    320b:	83 ec 08             	sub    $0x8,%esp
+    320e:	68 56 4f 00 00       	push   $0x4f56
+    3213:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3219:	e8 f2 08 00 00       	call   3b10 <printf>
+    321e:	83 c4 10             	add    $0x10,%esp
+    3221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((pid = fork()) == 0){
+    3228:	e8 4e 07 00 00       	call   397b <fork>
+    322d:	89 c3                	mov    %eax,%ebx
+    322f:	85 c0                	test   %eax,%eax
+    3231:	74 63                	je     3296 <validatetest+0x96>
+    sleep(0);
+    3233:	83 ec 0c             	sub    $0xc,%esp
+    3236:	6a 00                	push   $0x0
+    3238:	e8 d6 07 00 00       	call   3a13 <sleep>
+    sleep(0);
+    323d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3244:	e8 ca 07 00 00       	call   3a13 <sleep>
+    kill(pid);
+    3249:	89 1c 24             	mov    %ebx,(%esp)
+    324c:	e8 62 07 00 00       	call   39b3 <kill>
+    wait();
+    3251:	e8 35 07 00 00       	call   398b <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    3256:	58                   	pop    %eax
+    3257:	5a                   	pop    %edx
+    3258:	56                   	push   %esi
+    3259:	68 65 4f 00 00       	push   $0x4f65
+    325e:	e8 80 07 00 00       	call   39e3 <link>
+    3263:	83 c4 10             	add    $0x10,%esp
+    3266:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3269:	75 30                	jne    329b <validatetest+0x9b>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    326b:	81 c6 00 10 00 00    	add    $0x1000,%esi
+    3271:	81 fe 00 40 11 00    	cmp    $0x114000,%esi
+    3277:	75 af                	jne    3228 <validatetest+0x28>
+  printf(stdout, "validate ok\n");
+    3279:	83 ec 08             	sub    $0x8,%esp
+    327c:	68 89 4f 00 00       	push   $0x4f89
+    3281:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3287:	e8 84 08 00 00       	call   3b10 <printf>
+}
+    328c:	83 c4 10             	add    $0x10,%esp
+    328f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3292:	5b                   	pop    %ebx
+    3293:	5e                   	pop    %esi
+    3294:	5d                   	pop    %ebp
+    3295:	c3                   	ret    
+      exit();
+    3296:	e8 e8 06 00 00       	call   3983 <exit>
+      printf(stdout, "link should not succeed\n");
+    329b:	83 ec 08             	sub    $0x8,%esp
+    329e:	68 70 4f 00 00       	push   $0x4f70
+    32a3:	ff 35 d8 61 00 00    	pushl  0x61d8
+    32a9:	e8 62 08 00 00       	call   3b10 <printf>
+      exit();
+    32ae:	e8 d0 06 00 00       	call   3983 <exit>
+    32b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    32ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000032c0 <bsstest>:
+{
+    32c0:	f3 0f 1e fb          	endbr32 
+    32c4:	55                   	push   %ebp
+    32c5:	89 e5                	mov    %esp,%ebp
+    32c7:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    32ca:	68 96 4f 00 00       	push   $0x4f96
+    32cf:	ff 35 d8 61 00 00    	pushl  0x61d8
+    32d5:	e8 36 08 00 00       	call   3b10 <printf>
+    32da:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(uninit); i++){
+    32dd:	31 c0                	xor    %eax,%eax
+    32df:	90                   	nop
+    if(uninit[i] != '\0'){
+    32e0:	80 b8 60 6c 00 00 00 	cmpb   $0x0,0x6c60(%eax)
+    32e7:	75 22                	jne    330b <bsstest+0x4b>
+  for(i = 0; i < sizeof(uninit); i++){
+    32e9:	83 c0 01             	add    $0x1,%eax
+    32ec:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    32f1:	75 ed                	jne    32e0 <bsstest+0x20>
+  printf(stdout, "bss test ok\n");
+    32f3:	83 ec 08             	sub    $0x8,%esp
+    32f6:	68 b1 4f 00 00       	push   $0x4fb1
+    32fb:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3301:	e8 0a 08 00 00       	call   3b10 <printf>
+}
+    3306:	83 c4 10             	add    $0x10,%esp
+    3309:	c9                   	leave  
+    330a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    330b:	83 ec 08             	sub    $0x8,%esp
+    330e:	68 a0 4f 00 00       	push   $0x4fa0
+    3313:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3319:	e8 f2 07 00 00       	call   3b10 <printf>
+      exit();
+    331e:	e8 60 06 00 00       	call   3983 <exit>
+    3323:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    332a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003330 <bigargtest>:
+{
+    3330:	f3 0f 1e fb          	endbr32 
+    3334:	55                   	push   %ebp
+    3335:	89 e5                	mov    %esp,%ebp
+    3337:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    333a:	68 be 4f 00 00       	push   $0x4fbe
+    333f:	e8 8f 06 00 00       	call   39d3 <unlink>
+  pid = fork();
+    3344:	e8 32 06 00 00       	call   397b <fork>
+  if(pid == 0){
+    3349:	83 c4 10             	add    $0x10,%esp
+    334c:	85 c0                	test   %eax,%eax
+    334e:	74 40                	je     3390 <bigargtest+0x60>
+  } else if(pid < 0){
+    3350:	0f 88 c1 00 00 00    	js     3417 <bigargtest+0xe7>
+  wait();
+    3356:	e8 30 06 00 00       	call   398b <wait>
+  fd = open("bigarg-ok", 0);
+    335b:	83 ec 08             	sub    $0x8,%esp
+    335e:	6a 00                	push   $0x0
+    3360:	68 be 4f 00 00       	push   $0x4fbe
+    3365:	e8 59 06 00 00       	call   39c3 <open>
+  if(fd < 0){
+    336a:	83 c4 10             	add    $0x10,%esp
+    336d:	85 c0                	test   %eax,%eax
+    336f:	0f 88 8b 00 00 00    	js     3400 <bigargtest+0xd0>
+  close(fd);
+    3375:	83 ec 0c             	sub    $0xc,%esp
+    3378:	50                   	push   %eax
+    3379:	e8 2d 06 00 00       	call   39ab <close>
+  unlink("bigarg-ok");
+    337e:	c7 04 24 be 4f 00 00 	movl   $0x4fbe,(%esp)
+    3385:	e8 49 06 00 00       	call   39d3 <unlink>
+}
+    338a:	83 c4 10             	add    $0x10,%esp
+    338d:	c9                   	leave  
+    338e:	c3                   	ret    
+    338f:	90                   	nop
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    3390:	c7 04 85 00 62 00 00 	movl   $0x5718,0x6200(,%eax,4)
+    3397:	18 57 00 00 
+    for(i = 0; i < MAXARG-1; i++)
+    339b:	83 c0 01             	add    $0x1,%eax
+    339e:	83 f8 1f             	cmp    $0x1f,%eax
+    33a1:	75 ed                	jne    3390 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    33a3:	51                   	push   %ecx
+    33a4:	51                   	push   %ecx
+    33a5:	68 c8 4f 00 00       	push   $0x4fc8
+    33aa:	ff 35 d8 61 00 00    	pushl  0x61d8
+    args[MAXARG-1] = 0;
+    33b0:	c7 05 7c 62 00 00 00 	movl   $0x0,0x627c
+    33b7:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    33ba:	e8 51 07 00 00       	call   3b10 <printf>
+    exec("echo", args);
+    33bf:	58                   	pop    %eax
+    33c0:	5a                   	pop    %edx
+    33c1:	68 00 62 00 00       	push   $0x6200
+    33c6:	68 95 41 00 00       	push   $0x4195
+    33cb:	e8 eb 05 00 00       	call   39bb <exec>
+    printf(stdout, "bigarg test ok\n");
+    33d0:	59                   	pop    %ecx
+    33d1:	58                   	pop    %eax
+    33d2:	68 d5 4f 00 00       	push   $0x4fd5
+    33d7:	ff 35 d8 61 00 00    	pushl  0x61d8
+    33dd:	e8 2e 07 00 00       	call   3b10 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    33e2:	58                   	pop    %eax
+    33e3:	5a                   	pop    %edx
+    33e4:	68 00 02 00 00       	push   $0x200
+    33e9:	68 be 4f 00 00       	push   $0x4fbe
+    33ee:	e8 d0 05 00 00       	call   39c3 <open>
+    close(fd);
+    33f3:	89 04 24             	mov    %eax,(%esp)
+    33f6:	e8 b0 05 00 00       	call   39ab <close>
+    exit();
+    33fb:	e8 83 05 00 00       	call   3983 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    3400:	50                   	push   %eax
+    3401:	50                   	push   %eax
+    3402:	68 fe 4f 00 00       	push   $0x4ffe
+    3407:	ff 35 d8 61 00 00    	pushl  0x61d8
+    340d:	e8 fe 06 00 00       	call   3b10 <printf>
+    exit();
+    3412:	e8 6c 05 00 00       	call   3983 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3417:	52                   	push   %edx
+    3418:	52                   	push   %edx
+    3419:	68 e5 4f 00 00       	push   $0x4fe5
+    341e:	ff 35 d8 61 00 00    	pushl  0x61d8
+    3424:	e8 e7 06 00 00       	call   3b10 <printf>
+    exit();
+    3429:	e8 55 05 00 00       	call   3983 <exit>
+    342e:	66 90                	xchg   %ax,%ax
+
+00003430 <fsfull>:
+{
+    3430:	f3 0f 1e fb          	endbr32 
+    3434:	55                   	push   %ebp
+    3435:	89 e5                	mov    %esp,%ebp
+    3437:	57                   	push   %edi
+    3438:	56                   	push   %esi
+  for(nfiles = 0; ; nfiles++){
+    3439:	31 f6                	xor    %esi,%esi
+{
+    343b:	53                   	push   %ebx
+    343c:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    343f:	68 13 50 00 00       	push   $0x5013
+    3444:	6a 01                	push   $0x1
+    3446:	e8 c5 06 00 00       	call   3b10 <printf>
+    344b:	83 c4 10             	add    $0x10,%esp
+    344e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + nfiles / 1000;
+    3450:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3455:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    345a:	83 ec 04             	sub    $0x4,%esp
+    name[0] = 'f';
+    345d:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3461:	f7 e6                	mul    %esi
+    name[5] = '\0';
+    3463:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3467:	c1 ea 06             	shr    $0x6,%edx
+    346a:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    346d:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    3473:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3476:	89 f0                	mov    %esi,%eax
+    3478:	29 d0                	sub    %edx,%eax
+    347a:	89 c2                	mov    %eax,%edx
+    347c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    3481:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    3483:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3488:	c1 ea 05             	shr    $0x5,%edx
+    348b:	83 c2 30             	add    $0x30,%edx
+    348e:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3491:	f7 e6                	mul    %esi
+    3493:	89 f0                	mov    %esi,%eax
+    3495:	c1 ea 05             	shr    $0x5,%edx
+    3498:	6b d2 64             	imul   $0x64,%edx,%edx
+    349b:	29 d0                	sub    %edx,%eax
+    349d:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    349f:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34a1:	c1 ea 03             	shr    $0x3,%edx
+    34a4:	83 c2 30             	add    $0x30,%edx
+    34a7:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    34aa:	f7 e1                	mul    %ecx
+    34ac:	89 f1                	mov    %esi,%ecx
+    34ae:	c1 ea 03             	shr    $0x3,%edx
+    34b1:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    34b4:	01 c0                	add    %eax,%eax
+    34b6:	29 c1                	sub    %eax,%ecx
+    34b8:	89 c8                	mov    %ecx,%eax
+    34ba:	83 c0 30             	add    $0x30,%eax
+    34bd:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    34c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34c3:	50                   	push   %eax
+    34c4:	68 20 50 00 00       	push   $0x5020
+    34c9:	6a 01                	push   $0x1
+    34cb:	e8 40 06 00 00       	call   3b10 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    34d0:	58                   	pop    %eax
+    34d1:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34d4:	5a                   	pop    %edx
+    34d5:	68 02 02 00 00       	push   $0x202
+    34da:	50                   	push   %eax
+    34db:	e8 e3 04 00 00       	call   39c3 <open>
+    if(fd < 0){
+    34e0:	83 c4 10             	add    $0x10,%esp
+    int fd = open(name, O_CREATE|O_RDWR);
+    34e3:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    34e5:	85 c0                	test   %eax,%eax
+    34e7:	78 4d                	js     3536 <fsfull+0x106>
+    int total = 0;
+    34e9:	31 db                	xor    %ebx,%ebx
+    34eb:	eb 05                	jmp    34f2 <fsfull+0xc2>
+    34ed:	8d 76 00             	lea    0x0(%esi),%esi
+      total += cc;
+    34f0:	01 c3                	add    %eax,%ebx
+      int cc = write(fd, buf, 512);
+    34f2:	83 ec 04             	sub    $0x4,%esp
+    34f5:	68 00 02 00 00       	push   $0x200
+    34fa:	68 80 93 00 00       	push   $0x9380
+    34ff:	57                   	push   %edi
+    3500:	e8 9e 04 00 00       	call   39a3 <write>
+      if(cc < 512)
+    3505:	83 c4 10             	add    $0x10,%esp
+    3508:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    350d:	7f e1                	jg     34f0 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    350f:	83 ec 04             	sub    $0x4,%esp
+    3512:	53                   	push   %ebx
+    3513:	68 3c 50 00 00       	push   $0x503c
+    3518:	6a 01                	push   $0x1
+    351a:	e8 f1 05 00 00       	call   3b10 <printf>
+    close(fd);
+    351f:	89 3c 24             	mov    %edi,(%esp)
+    3522:	e8 84 04 00 00       	call   39ab <close>
+    if(total == 0)
+    3527:	83 c4 10             	add    $0x10,%esp
+    352a:	85 db                	test   %ebx,%ebx
+    352c:	74 1e                	je     354c <fsfull+0x11c>
+  for(nfiles = 0; ; nfiles++){
+    352e:	83 c6 01             	add    $0x1,%esi
+    3531:	e9 1a ff ff ff       	jmp    3450 <fsfull+0x20>
+      printf(1, "open %s failed\n", name);
+    3536:	83 ec 04             	sub    $0x4,%esp
+    3539:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    353c:	50                   	push   %eax
+    353d:	68 2c 50 00 00       	push   $0x502c
+    3542:	6a 01                	push   $0x1
+    3544:	e8 c7 05 00 00       	call   3b10 <printf>
+      break;
+    3549:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    354c:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3551:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
+    3556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    355d:	8d 76 00             	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    3560:	89 f0                	mov    %esi,%eax
+    3562:	89 f1                	mov    %esi,%ecx
+    unlink(name);
+    3564:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'f';
+    3567:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    356b:	f7 ef                	imul   %edi
+    356d:	c1 f9 1f             	sar    $0x1f,%ecx
+    name[5] = '\0';
+    3570:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3574:	c1 fa 06             	sar    $0x6,%edx
+    3577:	29 ca                	sub    %ecx,%edx
+    3579:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    357c:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    3582:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3585:	89 f0                	mov    %esi,%eax
+    3587:	29 d0                	sub    %edx,%eax
+    3589:	f7 e3                	mul    %ebx
+    name[3] = '0' + (nfiles % 100) / 10;
+    358b:	89 f0                	mov    %esi,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    358d:	c1 ea 05             	shr    $0x5,%edx
+    3590:	83 c2 30             	add    $0x30,%edx
+    3593:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3596:	f7 eb                	imul   %ebx
+    3598:	89 f0                	mov    %esi,%eax
+    359a:	c1 fa 05             	sar    $0x5,%edx
+    359d:	29 ca                	sub    %ecx,%edx
+    359f:	6b d2 64             	imul   $0x64,%edx,%edx
+    35a2:	29 d0                	sub    %edx,%eax
+    35a4:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    35a9:	f7 e2                	mul    %edx
+    name[4] = '0' + (nfiles % 10);
+    35ab:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    35ad:	c1 ea 03             	shr    $0x3,%edx
+    35b0:	83 c2 30             	add    $0x30,%edx
+    35b3:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    35b6:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    35bb:	f7 ea                	imul   %edx
+    35bd:	c1 fa 02             	sar    $0x2,%edx
+    35c0:	29 ca                	sub    %ecx,%edx
+    35c2:	89 f1                	mov    %esi,%ecx
+    nfiles--;
+    35c4:	83 ee 01             	sub    $0x1,%esi
+    name[4] = '0' + (nfiles % 10);
+    35c7:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    35ca:	01 c0                	add    %eax,%eax
+    35cc:	29 c1                	sub    %eax,%ecx
+    35ce:	89 c8                	mov    %ecx,%eax
+    35d0:	83 c0 30             	add    $0x30,%eax
+    35d3:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    35d6:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    35d9:	50                   	push   %eax
+    35da:	e8 f4 03 00 00       	call   39d3 <unlink>
+  while(nfiles >= 0){
+    35df:	83 c4 10             	add    $0x10,%esp
+    35e2:	83 fe ff             	cmp    $0xffffffff,%esi
+    35e5:	0f 85 75 ff ff ff    	jne    3560 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    35eb:	83 ec 08             	sub    $0x8,%esp
+    35ee:	68 4c 50 00 00       	push   $0x504c
+    35f3:	6a 01                	push   $0x1
+    35f5:	e8 16 05 00 00       	call   3b10 <printf>
+}
+    35fa:	83 c4 10             	add    $0x10,%esp
+    35fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3600:	5b                   	pop    %ebx
+    3601:	5e                   	pop    %esi
+    3602:	5f                   	pop    %edi
+    3603:	5d                   	pop    %ebp
+    3604:	c3                   	ret    
+    3605:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    360c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003610 <uio>:
+{
+    3610:	f3 0f 1e fb          	endbr32 
+    3614:	55                   	push   %ebp
+    3615:	89 e5                	mov    %esp,%ebp
+    3617:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    361a:	68 62 50 00 00       	push   $0x5062
+    361f:	6a 01                	push   $0x1
+    3621:	e8 ea 04 00 00       	call   3b10 <printf>
+  pid = fork();
+    3626:	e8 50 03 00 00       	call   397b <fork>
+  if(pid == 0){
+    362b:	83 c4 10             	add    $0x10,%esp
+    362e:	85 c0                	test   %eax,%eax
+    3630:	74 1b                	je     364d <uio+0x3d>
+  } else if(pid < 0){
+    3632:	78 3d                	js     3671 <uio+0x61>
+  wait();
+    3634:	e8 52 03 00 00       	call   398b <wait>
+  printf(1, "uio test done\n");
+    3639:	83 ec 08             	sub    $0x8,%esp
+    363c:	68 6c 50 00 00       	push   $0x506c
+    3641:	6a 01                	push   $0x1
+    3643:	e8 c8 04 00 00       	call   3b10 <printf>
+}
+    3648:	83 c4 10             	add    $0x10,%esp
+    364b:	c9                   	leave  
+    364c:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    364d:	b8 09 00 00 00       	mov    $0x9,%eax
+    3652:	ba 70 00 00 00       	mov    $0x70,%edx
+    3657:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    3658:	ba 71 00 00 00       	mov    $0x71,%edx
+    365d:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    365e:	52                   	push   %edx
+    365f:	52                   	push   %edx
+    3660:	68 f8 57 00 00       	push   $0x57f8
+    3665:	6a 01                	push   $0x1
+    3667:	e8 a4 04 00 00       	call   3b10 <printf>
+    exit();
+    366c:	e8 12 03 00 00       	call   3983 <exit>
+    printf (1, "fork failed\n");
+    3671:	50                   	push   %eax
+    3672:	50                   	push   %eax
+    3673:	68 f1 4f 00 00       	push   $0x4ff1
+    3678:	6a 01                	push   $0x1
+    367a:	e8 91 04 00 00       	call   3b10 <printf>
+    exit();
+    367f:	e8 ff 02 00 00       	call   3983 <exit>
+    3684:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    368b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    368f:	90                   	nop
+
+00003690 <argptest>:
+{
+    3690:	f3 0f 1e fb          	endbr32 
+    3694:	55                   	push   %ebp
+    3695:	89 e5                	mov    %esp,%ebp
+    3697:	53                   	push   %ebx
+    3698:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    369b:	6a 00                	push   $0x0
+    369d:	68 7b 50 00 00       	push   $0x507b
+    36a2:	e8 1c 03 00 00       	call   39c3 <open>
+  if (fd < 0) {
+    36a7:	83 c4 10             	add    $0x10,%esp
+    36aa:	85 c0                	test   %eax,%eax
+    36ac:	78 39                	js     36e7 <argptest+0x57>
+  read(fd, sbrk(0) - 1, -1);
+    36ae:	83 ec 0c             	sub    $0xc,%esp
+    36b1:	89 c3                	mov    %eax,%ebx
+    36b3:	6a 00                	push   $0x0
+    36b5:	e8 51 03 00 00       	call   3a0b <sbrk>
+    36ba:	83 c4 0c             	add    $0xc,%esp
+    36bd:	83 e8 01             	sub    $0x1,%eax
+    36c0:	6a ff                	push   $0xffffffff
+    36c2:	50                   	push   %eax
+    36c3:	53                   	push   %ebx
+    36c4:	e8 d2 02 00 00       	call   399b <read>
+  close(fd);
+    36c9:	89 1c 24             	mov    %ebx,(%esp)
+    36cc:	e8 da 02 00 00       	call   39ab <close>
+  printf(1, "arg test passed\n");
+    36d1:	58                   	pop    %eax
+    36d2:	5a                   	pop    %edx
+    36d3:	68 8d 50 00 00       	push   $0x508d
+    36d8:	6a 01                	push   $0x1
+    36da:	e8 31 04 00 00       	call   3b10 <printf>
+}
+    36df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36e2:	83 c4 10             	add    $0x10,%esp
+    36e5:	c9                   	leave  
+    36e6:	c3                   	ret    
+    printf(2, "open failed\n");
+    36e7:	51                   	push   %ecx
+    36e8:	51                   	push   %ecx
+    36e9:	68 80 50 00 00       	push   $0x5080
+    36ee:	6a 02                	push   $0x2
+    36f0:	e8 1b 04 00 00       	call   3b10 <printf>
+    exit();
+    36f5:	e8 89 02 00 00       	call   3983 <exit>
+    36fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003700 <rand>:
+{
+    3700:	f3 0f 1e fb          	endbr32 
+  randstate = randstate * 1664525 + 1013904223;
+    3704:	69 05 d4 61 00 00 0d 	imul   $0x19660d,0x61d4,%eax
+    370b:	66 19 00 
+    370e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3713:	a3 d4 61 00 00       	mov    %eax,0x61d4
+}
+    3718:	c3                   	ret    
+    3719:	66 90                	xchg   %ax,%ax
+    371b:	66 90                	xchg   %ax,%ax
+    371d:	66 90                	xchg   %ax,%ax
+    371f:	90                   	nop
+
+00003720 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3720:	f3 0f 1e fb          	endbr32 
+    3724:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    3725:	31 c0                	xor    %eax,%eax
+{
+    3727:	89 e5                	mov    %esp,%ebp
+    3729:	53                   	push   %ebx
+    372a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    372d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+    3730:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+    3734:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+    3737:	83 c0 01             	add    $0x1,%eax
+    373a:	84 d2                	test   %dl,%dl
+    373c:	75 f2                	jne    3730 <strcpy+0x10>
+    ;
+  return os;
+}
+    373e:	89 c8                	mov    %ecx,%eax
+    3740:	5b                   	pop    %ebx
+    3741:	5d                   	pop    %ebp
+    3742:	c3                   	ret    
+    3743:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    374a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003750 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3750:	f3 0f 1e fb          	endbr32 
+    3754:	55                   	push   %ebp
+    3755:	89 e5                	mov    %esp,%ebp
+    3757:	53                   	push   %ebx
+    3758:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    375b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+    375e:	0f b6 01             	movzbl (%ecx),%eax
+    3761:	0f b6 1a             	movzbl (%edx),%ebx
+    3764:	84 c0                	test   %al,%al
+    3766:	75 19                	jne    3781 <strcmp+0x31>
+    3768:	eb 26                	jmp    3790 <strcmp+0x40>
+    376a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3770:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+    3774:	83 c1 01             	add    $0x1,%ecx
+    3777:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+    377a:	0f b6 1a             	movzbl (%edx),%ebx
+    377d:	84 c0                	test   %al,%al
+    377f:	74 0f                	je     3790 <strcmp+0x40>
+    3781:	38 d8                	cmp    %bl,%al
+    3783:	74 eb                	je     3770 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+    3785:	29 d8                	sub    %ebx,%eax
+}
+    3787:	5b                   	pop    %ebx
+    3788:	5d                   	pop    %ebp
+    3789:	c3                   	ret    
+    378a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3790:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+    3792:	29 d8                	sub    %ebx,%eax
+}
+    3794:	5b                   	pop    %ebx
+    3795:	5d                   	pop    %ebp
+    3796:	c3                   	ret    
+    3797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    379e:	66 90                	xchg   %ax,%ax
+
+000037a0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    37a0:	f3 0f 1e fb          	endbr32 
+    37a4:	55                   	push   %ebp
+    37a5:	89 e5                	mov    %esp,%ebp
+    37a7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    37aa:	80 3a 00             	cmpb   $0x0,(%edx)
+    37ad:	74 21                	je     37d0 <strlen+0x30>
+    37af:	31 c0                	xor    %eax,%eax
+    37b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37b8:	83 c0 01             	add    $0x1,%eax
+    37bb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+    37bf:	89 c1                	mov    %eax,%ecx
+    37c1:	75 f5                	jne    37b8 <strlen+0x18>
+    ;
+  return n;
+}
+    37c3:	89 c8                	mov    %ecx,%eax
+    37c5:	5d                   	pop    %ebp
+    37c6:	c3                   	ret    
+    37c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37ce:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+    37d0:	31 c9                	xor    %ecx,%ecx
+}
+    37d2:	5d                   	pop    %ebp
+    37d3:	89 c8                	mov    %ecx,%eax
+    37d5:	c3                   	ret    
+    37d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000037e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    37e0:	f3 0f 1e fb          	endbr32 
+    37e4:	55                   	push   %ebp
+    37e5:	89 e5                	mov    %esp,%ebp
+    37e7:	57                   	push   %edi
+    37e8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    37eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    37ee:	8b 45 0c             	mov    0xc(%ebp),%eax
+    37f1:	89 d7                	mov    %edx,%edi
+    37f3:	fc                   	cld    
+    37f4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    37f6:	89 d0                	mov    %edx,%eax
+    37f8:	5f                   	pop    %edi
+    37f9:	5d                   	pop    %ebp
+    37fa:	c3                   	ret    
+    37fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37ff:	90                   	nop
+
+00003800 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3800:	f3 0f 1e fb          	endbr32 
+    3804:	55                   	push   %ebp
+    3805:	89 e5                	mov    %esp,%ebp
+    3807:	8b 45 08             	mov    0x8(%ebp),%eax
+    380a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+    380e:	0f b6 10             	movzbl (%eax),%edx
+    3811:	84 d2                	test   %dl,%dl
+    3813:	75 16                	jne    382b <strchr+0x2b>
+    3815:	eb 21                	jmp    3838 <strchr+0x38>
+    3817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    381e:	66 90                	xchg   %ax,%ax
+    3820:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+    3824:	83 c0 01             	add    $0x1,%eax
+    3827:	84 d2                	test   %dl,%dl
+    3829:	74 0d                	je     3838 <strchr+0x38>
+    if(*s == c)
+    382b:	38 d1                	cmp    %dl,%cl
+    382d:	75 f1                	jne    3820 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+    382f:	5d                   	pop    %ebp
+    3830:	c3                   	ret    
+    3831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+    3838:	31 c0                	xor    %eax,%eax
+}
+    383a:	5d                   	pop    %ebp
+    383b:	c3                   	ret    
+    383c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003840 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3840:	f3 0f 1e fb          	endbr32 
+    3844:	55                   	push   %ebp
+    3845:	89 e5                	mov    %esp,%ebp
+    3847:	57                   	push   %edi
+    3848:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3849:	31 f6                	xor    %esi,%esi
+{
+    384b:	53                   	push   %ebx
+    384c:	89 f3                	mov    %esi,%ebx
+    384e:	83 ec 1c             	sub    $0x1c,%esp
+    3851:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+    3854:	eb 33                	jmp    3889 <gets+0x49>
+    3856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    385d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+    3860:	83 ec 04             	sub    $0x4,%esp
+    3863:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    3866:	6a 01                	push   $0x1
+    3868:	50                   	push   %eax
+    3869:	6a 00                	push   $0x0
+    386b:	e8 2b 01 00 00       	call   399b <read>
+    if(cc < 1)
+    3870:	83 c4 10             	add    $0x10,%esp
+    3873:	85 c0                	test   %eax,%eax
+    3875:	7e 1c                	jle    3893 <gets+0x53>
+      break;
+    buf[i++] = c;
+    3877:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    387b:	83 c7 01             	add    $0x1,%edi
+    387e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+    3881:	3c 0a                	cmp    $0xa,%al
+    3883:	74 23                	je     38a8 <gets+0x68>
+    3885:	3c 0d                	cmp    $0xd,%al
+    3887:	74 1f                	je     38a8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+    3889:	83 c3 01             	add    $0x1,%ebx
+    388c:	89 fe                	mov    %edi,%esi
+    388e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    3891:	7c cd                	jl     3860 <gets+0x20>
+    3893:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+    3895:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+    3898:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    389b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    389e:	5b                   	pop    %ebx
+    389f:	5e                   	pop    %esi
+    38a0:	5f                   	pop    %edi
+    38a1:	5d                   	pop    %ebp
+    38a2:	c3                   	ret    
+    38a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    38a7:	90                   	nop
+    38a8:	8b 75 08             	mov    0x8(%ebp),%esi
+    38ab:	8b 45 08             	mov    0x8(%ebp),%eax
+    38ae:	01 de                	add    %ebx,%esi
+    38b0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+    38b2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    38b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    38b8:	5b                   	pop    %ebx
+    38b9:	5e                   	pop    %esi
+    38ba:	5f                   	pop    %edi
+    38bb:	5d                   	pop    %ebp
+    38bc:	c3                   	ret    
+    38bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000038c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    38c0:	f3 0f 1e fb          	endbr32 
+    38c4:	55                   	push   %ebp
+    38c5:	89 e5                	mov    %esp,%ebp
+    38c7:	56                   	push   %esi
+    38c8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    38c9:	83 ec 08             	sub    $0x8,%esp
+    38cc:	6a 00                	push   $0x0
+    38ce:	ff 75 08             	pushl  0x8(%ebp)
+    38d1:	e8 ed 00 00 00       	call   39c3 <open>
+  if(fd < 0)
+    38d6:	83 c4 10             	add    $0x10,%esp
+    38d9:	85 c0                	test   %eax,%eax
+    38db:	78 2b                	js     3908 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+    38dd:	83 ec 08             	sub    $0x8,%esp
+    38e0:	ff 75 0c             	pushl  0xc(%ebp)
+    38e3:	89 c3                	mov    %eax,%ebx
+    38e5:	50                   	push   %eax
+    38e6:	e8 f0 00 00 00       	call   39db <fstat>
+  close(fd);
+    38eb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    38ee:	89 c6                	mov    %eax,%esi
+  close(fd);
+    38f0:	e8 b6 00 00 00       	call   39ab <close>
+  return r;
+    38f5:	83 c4 10             	add    $0x10,%esp
+}
+    38f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    38fb:	89 f0                	mov    %esi,%eax
+    38fd:	5b                   	pop    %ebx
+    38fe:	5e                   	pop    %esi
+    38ff:	5d                   	pop    %ebp
+    3900:	c3                   	ret    
+    3901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+    3908:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    390d:	eb e9                	jmp    38f8 <stat+0x38>
+    390f:	90                   	nop
+
+00003910 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3910:	f3 0f 1e fb          	endbr32 
+    3914:	55                   	push   %ebp
+    3915:	89 e5                	mov    %esp,%ebp
+    3917:	53                   	push   %ebx
+    3918:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    391b:	0f be 02             	movsbl (%edx),%eax
+    391e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+    3921:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+    3924:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+    3929:	77 1a                	ja     3945 <atoi+0x35>
+    392b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    392f:	90                   	nop
+    n = n*10 + *s++ - '0';
+    3930:	83 c2 01             	add    $0x1,%edx
+    3933:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+    3936:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+    393a:	0f be 02             	movsbl (%edx),%eax
+    393d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+    3940:	80 fb 09             	cmp    $0x9,%bl
+    3943:	76 eb                	jbe    3930 <atoi+0x20>
+  return n;
+}
+    3945:	89 c8                	mov    %ecx,%eax
+    3947:	5b                   	pop    %ebx
+    3948:	5d                   	pop    %ebp
+    3949:	c3                   	ret    
+    394a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003950 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    3950:	f3 0f 1e fb          	endbr32 
+    3954:	55                   	push   %ebp
+    3955:	89 e5                	mov    %esp,%ebp
+    3957:	57                   	push   %edi
+    3958:	8b 45 10             	mov    0x10(%ebp),%eax
+    395b:	8b 55 08             	mov    0x8(%ebp),%edx
+    395e:	56                   	push   %esi
+    395f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    3962:	85 c0                	test   %eax,%eax
+    3964:	7e 0f                	jle    3975 <memmove+0x25>
+    3966:	01 d0                	add    %edx,%eax
+  dst = vdst;
+    3968:	89 d7                	mov    %edx,%edi
+    396a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+    3970:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+    3971:	39 f8                	cmp    %edi,%eax
+    3973:	75 fb                	jne    3970 <memmove+0x20>
+  return vdst;
+}
+    3975:	5e                   	pop    %esi
+    3976:	89 d0                	mov    %edx,%eax
+    3978:	5f                   	pop    %edi
+    3979:	5d                   	pop    %ebp
+    397a:	c3                   	ret    
+
+0000397b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    397b:	b8 01 00 00 00       	mov    $0x1,%eax
+    3980:	cd 40                	int    $0x40
+    3982:	c3                   	ret    
+
+00003983 <exit>:
+SYSCALL(exit)
+    3983:	b8 02 00 00 00       	mov    $0x2,%eax
+    3988:	cd 40                	int    $0x40
+    398a:	c3                   	ret    
+
+0000398b <wait>:
+SYSCALL(wait)
+    398b:	b8 03 00 00 00       	mov    $0x3,%eax
+    3990:	cd 40                	int    $0x40
+    3992:	c3                   	ret    
+
+00003993 <pipe>:
+SYSCALL(pipe)
+    3993:	b8 04 00 00 00       	mov    $0x4,%eax
+    3998:	cd 40                	int    $0x40
+    399a:	c3                   	ret    
+
+0000399b <read>:
+SYSCALL(read)
+    399b:	b8 05 00 00 00       	mov    $0x5,%eax
+    39a0:	cd 40                	int    $0x40
+    39a2:	c3                   	ret    
+
+000039a3 <write>:
+SYSCALL(write)
+    39a3:	b8 10 00 00 00       	mov    $0x10,%eax
+    39a8:	cd 40                	int    $0x40
+    39aa:	c3                   	ret    
+
+000039ab <close>:
+SYSCALL(close)
+    39ab:	b8 15 00 00 00       	mov    $0x15,%eax
+    39b0:	cd 40                	int    $0x40
+    39b2:	c3                   	ret    
+
+000039b3 <kill>:
+SYSCALL(kill)
+    39b3:	b8 06 00 00 00       	mov    $0x6,%eax
+    39b8:	cd 40                	int    $0x40
+    39ba:	c3                   	ret    
+
+000039bb <exec>:
+SYSCALL(exec)
+    39bb:	b8 07 00 00 00       	mov    $0x7,%eax
+    39c0:	cd 40                	int    $0x40
+    39c2:	c3                   	ret    
+
+000039c3 <open>:
+SYSCALL(open)
+    39c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+    39c8:	cd 40                	int    $0x40
+    39ca:	c3                   	ret    
+
+000039cb <mknod>:
+SYSCALL(mknod)
+    39cb:	b8 11 00 00 00       	mov    $0x11,%eax
+    39d0:	cd 40                	int    $0x40
+    39d2:	c3                   	ret    
+
+000039d3 <unlink>:
+SYSCALL(unlink)
+    39d3:	b8 12 00 00 00       	mov    $0x12,%eax
+    39d8:	cd 40                	int    $0x40
+    39da:	c3                   	ret    
+
+000039db <fstat>:
+SYSCALL(fstat)
+    39db:	b8 08 00 00 00       	mov    $0x8,%eax
+    39e0:	cd 40                	int    $0x40
+    39e2:	c3                   	ret    
+
+000039e3 <link>:
+SYSCALL(link)
+    39e3:	b8 13 00 00 00       	mov    $0x13,%eax
+    39e8:	cd 40                	int    $0x40
+    39ea:	c3                   	ret    
+
+000039eb <mkdir>:
+SYSCALL(mkdir)
+    39eb:	b8 14 00 00 00       	mov    $0x14,%eax
+    39f0:	cd 40                	int    $0x40
+    39f2:	c3                   	ret    
+
+000039f3 <chdir>:
+SYSCALL(chdir)
+    39f3:	b8 09 00 00 00       	mov    $0x9,%eax
+    39f8:	cd 40                	int    $0x40
+    39fa:	c3                   	ret    
+
+000039fb <dup>:
+SYSCALL(dup)
+    39fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+    3a00:	cd 40                	int    $0x40
+    3a02:	c3                   	ret    
+
+00003a03 <getpid>:
+SYSCALL(getpid)
+    3a03:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3a08:	cd 40                	int    $0x40
+    3a0a:	c3                   	ret    
+
+00003a0b <sbrk>:
+SYSCALL(sbrk)
+    3a0b:	b8 0c 00 00 00       	mov    $0xc,%eax
+    3a10:	cd 40                	int    $0x40
+    3a12:	c3                   	ret    
+
+00003a13 <sleep>:
+SYSCALL(sleep)
+    3a13:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3a18:	cd 40                	int    $0x40
+    3a1a:	c3                   	ret    
+
+00003a1b <uptime>:
+SYSCALL(uptime)
+    3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
+    3a20:	cd 40                	int    $0x40
+    3a22:	c3                   	ret    
+
+00003a23 <getNumProc>:
+SYSCALL(getNumProc)
+    3a23:	b8 16 00 00 00       	mov    $0x16,%eax
+    3a28:	cd 40                	int    $0x40
+    3a2a:	c3                   	ret    
+
+00003a2b <getMaxPID>:
+SYSCALL(getMaxPID)
+    3a2b:	b8 17 00 00 00       	mov    $0x17,%eax
+    3a30:	cd 40                	int    $0x40
+    3a32:	c3                   	ret    
+
+00003a33 <getProcInfo>:
+SYSCALL(getProcInfo)
+    3a33:	b8 18 00 00 00       	mov    $0x18,%eax
+    3a38:	cd 40                	int    $0x40
+    3a3a:	c3                   	ret    
+
+00003a3b <set_burst_time>:
+SYSCALL(set_burst_time)
+    3a3b:	b8 19 00 00 00       	mov    $0x19,%eax
+    3a40:	cd 40                	int    $0x40
+    3a42:	c3                   	ret    
+
+00003a43 <get_burst_time>:
+SYSCALL(get_burst_time)
+    3a43:	b8 1a 00 00 00       	mov    $0x1a,%eax
+    3a48:	cd 40                	int    $0x40
+    3a4a:	c3                   	ret    
+
+00003a4b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+    3a4b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+    3a50:	cd 40                	int    $0x40
+    3a52:	c3                   	ret    
+
+00003a53 <getCurrentPID>:
+    3a53:	b8 1d 00 00 00       	mov    $0x1d,%eax
+    3a58:	cd 40                	int    $0x40
+    3a5a:	c3                   	ret    
+    3a5b:	66 90                	xchg   %ax,%ax
+    3a5d:	66 90                	xchg   %ax,%ax
+    3a5f:	90                   	nop
+
+00003a60 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3a60:	55                   	push   %ebp
+    3a61:	89 e5                	mov    %esp,%ebp
+    3a63:	57                   	push   %edi
+    3a64:	56                   	push   %esi
+    3a65:	53                   	push   %ebx
+    3a66:	83 ec 3c             	sub    $0x3c,%esp
+    3a69:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+    3a6c:	89 d1                	mov    %edx,%ecx
+{
+    3a6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+    3a71:	85 d2                	test   %edx,%edx
+    3a73:	0f 89 7f 00 00 00    	jns    3af8 <printint+0x98>
+    3a79:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    3a7d:	74 79                	je     3af8 <printint+0x98>
+    neg = 1;
+    3a7f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+    3a86:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    3a88:	31 db                	xor    %ebx,%ebx
+    3a8a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    3a8d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+    3a90:	89 c8                	mov    %ecx,%eax
+    3a92:	31 d2                	xor    %edx,%edx
+    3a94:	89 cf                	mov    %ecx,%edi
+    3a96:	f7 75 c4             	divl   -0x3c(%ebp)
+    3a99:	0f b6 92 50 58 00 00 	movzbl 0x5850(%edx),%edx
+    3aa0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    3aa3:	89 d8                	mov    %ebx,%eax
+    3aa5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+    3aa8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+    3aab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+    3aae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+    3ab1:	76 dd                	jbe    3a90 <printint+0x30>
+  if(neg)
+    3ab3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+    3ab6:	85 c9                	test   %ecx,%ecx
+    3ab8:	74 0c                	je     3ac6 <printint+0x66>
+    buf[i++] = '-';
+    3aba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+    3abf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+    3ac1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+    3ac6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+    3ac9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    3acd:	eb 07                	jmp    3ad6 <printint+0x76>
+    3acf:	90                   	nop
+    3ad0:	0f b6 13             	movzbl (%ebx),%edx
+    3ad3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+    3ad6:	83 ec 04             	sub    $0x4,%esp
+    3ad9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    3adc:	6a 01                	push   $0x1
+    3ade:	56                   	push   %esi
+    3adf:	57                   	push   %edi
+    3ae0:	e8 be fe ff ff       	call   39a3 <write>
+  while(--i >= 0)
+    3ae5:	83 c4 10             	add    $0x10,%esp
+    3ae8:	39 de                	cmp    %ebx,%esi
+    3aea:	75 e4                	jne    3ad0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+    3aec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3aef:	5b                   	pop    %ebx
+    3af0:	5e                   	pop    %esi
+    3af1:	5f                   	pop    %edi
+    3af2:	5d                   	pop    %ebp
+    3af3:	c3                   	ret    
+    3af4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    3af8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+    3aff:	eb 87                	jmp    3a88 <printint+0x28>
+    3b01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3b0f:	90                   	nop
+
+00003b10 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3b10:	f3 0f 1e fb          	endbr32 
+    3b14:	55                   	push   %ebp
+    3b15:	89 e5                	mov    %esp,%ebp
+    3b17:	57                   	push   %edi
+    3b18:	56                   	push   %esi
+    3b19:	53                   	push   %ebx
+    3b1a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3b1d:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3b20:	0f b6 1e             	movzbl (%esi),%ebx
+    3b23:	84 db                	test   %bl,%bl
+    3b25:	0f 84 b4 00 00 00    	je     3bdf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+    3b2b:	8d 45 10             	lea    0x10(%ebp),%eax
+    3b2e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+    3b31:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+    3b34:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+    3b36:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3b39:	eb 33                	jmp    3b6e <printf+0x5e>
+    3b3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3b3f:	90                   	nop
+    3b40:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    3b43:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+    3b48:	83 f8 25             	cmp    $0x25,%eax
+    3b4b:	74 17                	je     3b64 <printf+0x54>
+  write(fd, &c, 1);
+    3b4d:	83 ec 04             	sub    $0x4,%esp
+    3b50:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3b53:	6a 01                	push   $0x1
+    3b55:	57                   	push   %edi
+    3b56:	ff 75 08             	pushl  0x8(%ebp)
+    3b59:	e8 45 fe ff ff       	call   39a3 <write>
+    3b5e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+    3b61:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3b64:	0f b6 1e             	movzbl (%esi),%ebx
+    3b67:	83 c6 01             	add    $0x1,%esi
+    3b6a:	84 db                	test   %bl,%bl
+    3b6c:	74 71                	je     3bdf <printf+0xcf>
+    c = fmt[i] & 0xff;
+    3b6e:	0f be cb             	movsbl %bl,%ecx
+    3b71:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3b74:	85 d2                	test   %edx,%edx
+    3b76:	74 c8                	je     3b40 <printf+0x30>
+      }
+    } else if(state == '%'){
+    3b78:	83 fa 25             	cmp    $0x25,%edx
+    3b7b:	75 e7                	jne    3b64 <printf+0x54>
+      if(c == 'd'){
+    3b7d:	83 f8 64             	cmp    $0x64,%eax
+    3b80:	0f 84 9a 00 00 00    	je     3c20 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3b86:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3b8c:	83 f9 70             	cmp    $0x70,%ecx
+    3b8f:	74 5f                	je     3bf0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3b91:	83 f8 73             	cmp    $0x73,%eax
+    3b94:	0f 84 d6 00 00 00    	je     3c70 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3b9a:	83 f8 63             	cmp    $0x63,%eax
+    3b9d:	0f 84 8d 00 00 00    	je     3c30 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3ba3:	83 f8 25             	cmp    $0x25,%eax
+    3ba6:	0f 84 b4 00 00 00    	je     3c60 <printf+0x150>
+  write(fd, &c, 1);
+    3bac:	83 ec 04             	sub    $0x4,%esp
+    3baf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3bb3:	6a 01                	push   $0x1
+    3bb5:	57                   	push   %edi
+    3bb6:	ff 75 08             	pushl  0x8(%ebp)
+    3bb9:	e8 e5 fd ff ff       	call   39a3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+    3bbe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3bc1:	83 c4 0c             	add    $0xc,%esp
+    3bc4:	6a 01                	push   $0x1
+    3bc6:	83 c6 01             	add    $0x1,%esi
+    3bc9:	57                   	push   %edi
+    3bca:	ff 75 08             	pushl  0x8(%ebp)
+    3bcd:	e8 d1 fd ff ff       	call   39a3 <write>
+  for(i = 0; fmt[i]; i++){
+    3bd2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+    3bd6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    3bd9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+    3bdb:	84 db                	test   %bl,%bl
+    3bdd:	75 8f                	jne    3b6e <printf+0x5e>
+    }
+  }
+}
+    3bdf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3be2:	5b                   	pop    %ebx
+    3be3:	5e                   	pop    %esi
+    3be4:	5f                   	pop    %edi
+    3be5:	5d                   	pop    %ebp
+    3be6:	c3                   	ret    
+    3be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3bee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+    3bf0:	83 ec 0c             	sub    $0xc,%esp
+    3bf3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3bf8:	6a 00                	push   $0x0
+    3bfa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3bfd:	8b 45 08             	mov    0x8(%ebp),%eax
+    3c00:	8b 13                	mov    (%ebx),%edx
+    3c02:	e8 59 fe ff ff       	call   3a60 <printint>
+        ap++;
+    3c07:	89 d8                	mov    %ebx,%eax
+    3c09:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3c0c:	31 d2                	xor    %edx,%edx
+        ap++;
+    3c0e:	83 c0 04             	add    $0x4,%eax
+    3c11:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3c14:	e9 4b ff ff ff       	jmp    3b64 <printf+0x54>
+    3c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    3c20:	83 ec 0c             	sub    $0xc,%esp
+    3c23:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3c28:	6a 01                	push   $0x1
+    3c2a:	eb ce                	jmp    3bfa <printf+0xea>
+    3c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    3c30:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    3c33:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3c36:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    3c38:	6a 01                	push   $0x1
+        ap++;
+    3c3a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    3c3d:	57                   	push   %edi
+    3c3e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    3c41:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c44:	e8 5a fd ff ff       	call   39a3 <write>
+        ap++;
+    3c49:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    3c4c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3c4f:	31 d2                	xor    %edx,%edx
+    3c51:	e9 0e ff ff ff       	jmp    3b64 <printf+0x54>
+    3c56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c5d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    3c60:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c63:	83 ec 04             	sub    $0x4,%esp
+    3c66:	e9 59 ff ff ff       	jmp    3bc4 <printf+0xb4>
+    3c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c6f:	90                   	nop
+        s = (char*)*ap;
+    3c70:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3c73:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    3c75:	83 c0 04             	add    $0x4,%eax
+    3c78:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    3c7b:	85 db                	test   %ebx,%ebx
+    3c7d:	74 17                	je     3c96 <printf+0x186>
+        while(*s != 0){
+    3c7f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    3c82:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    3c84:	84 c0                	test   %al,%al
+    3c86:	0f 84 d8 fe ff ff    	je     3b64 <printf+0x54>
+    3c8c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c8f:	89 de                	mov    %ebx,%esi
+    3c91:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c94:	eb 1a                	jmp    3cb0 <printf+0x1a0>
+          s = "(null)";
+    3c96:	bb 46 58 00 00       	mov    $0x5846,%ebx
+        while(*s != 0){
+    3c9b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c9e:	b8 28 00 00 00       	mov    $0x28,%eax
+    3ca3:	89 de                	mov    %ebx,%esi
+    3ca5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3ca8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3caf:	90                   	nop
+  write(fd, &c, 1);
+    3cb0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3cb3:	83 c6 01             	add    $0x1,%esi
+    3cb6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3cb9:	6a 01                	push   $0x1
+    3cbb:	57                   	push   %edi
+    3cbc:	53                   	push   %ebx
+    3cbd:	e8 e1 fc ff ff       	call   39a3 <write>
+        while(*s != 0){
+    3cc2:	0f b6 06             	movzbl (%esi),%eax
+    3cc5:	83 c4 10             	add    $0x10,%esp
+    3cc8:	84 c0                	test   %al,%al
+    3cca:	75 e4                	jne    3cb0 <printf+0x1a0>
+    3ccc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    3ccf:	31 d2                	xor    %edx,%edx
+    3cd1:	e9 8e fe ff ff       	jmp    3b64 <printf+0x54>
+    3cd6:	66 90                	xchg   %ax,%ax
+    3cd8:	66 90                	xchg   %ax,%ax
+    3cda:	66 90                	xchg   %ax,%ax
+    3cdc:	66 90                	xchg   %ax,%ax
+    3cde:	66 90                	xchg   %ax,%ax
+
+00003ce0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3ce0:	f3 0f 1e fb          	endbr32 
+    3ce4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3ce5:	a1 80 62 00 00       	mov    0x6280,%eax
+{
+    3cea:	89 e5                	mov    %esp,%ebp
+    3cec:	57                   	push   %edi
+    3ced:	56                   	push   %esi
+    3cee:	53                   	push   %ebx
+    3cef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3cf2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    3cf4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3cf7:	39 c8                	cmp    %ecx,%eax
+    3cf9:	73 15                	jae    3d10 <free+0x30>
+    3cfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3cff:	90                   	nop
+    3d00:	39 d1                	cmp    %edx,%ecx
+    3d02:	72 14                	jb     3d18 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3d04:	39 d0                	cmp    %edx,%eax
+    3d06:	73 10                	jae    3d18 <free+0x38>
+{
+    3d08:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3d0a:	8b 10                	mov    (%eax),%edx
+    3d0c:	39 c8                	cmp    %ecx,%eax
+    3d0e:	72 f0                	jb     3d00 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3d10:	39 d0                	cmp    %edx,%eax
+    3d12:	72 f4                	jb     3d08 <free+0x28>
+    3d14:	39 d1                	cmp    %edx,%ecx
+    3d16:	73 f0                	jae    3d08 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3d18:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3d1b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3d1e:	39 fa                	cmp    %edi,%edx
+    3d20:	74 1e                	je     3d40 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3d22:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3d25:	8b 50 04             	mov    0x4(%eax),%edx
+    3d28:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d2b:	39 f1                	cmp    %esi,%ecx
+    3d2d:	74 28                	je     3d57 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3d2f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    3d31:	5b                   	pop    %ebx
+  freep = p;
+    3d32:	a3 80 62 00 00       	mov    %eax,0x6280
+}
+    3d37:	5e                   	pop    %esi
+    3d38:	5f                   	pop    %edi
+    3d39:	5d                   	pop    %ebp
+    3d3a:	c3                   	ret    
+    3d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d3f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    3d40:	03 72 04             	add    0x4(%edx),%esi
+    3d43:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3d46:	8b 10                	mov    (%eax),%edx
+    3d48:	8b 12                	mov    (%edx),%edx
+    3d4a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3d4d:	8b 50 04             	mov    0x4(%eax),%edx
+    3d50:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d53:	39 f1                	cmp    %esi,%ecx
+    3d55:	75 d8                	jne    3d2f <free+0x4f>
+    p->s.size += bp->s.size;
+    3d57:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    3d5a:	a3 80 62 00 00       	mov    %eax,0x6280
+    p->s.size += bp->s.size;
+    3d5f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3d62:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3d65:	89 10                	mov    %edx,(%eax)
+}
+    3d67:	5b                   	pop    %ebx
+    3d68:	5e                   	pop    %esi
+    3d69:	5f                   	pop    %edi
+    3d6a:	5d                   	pop    %ebp
+    3d6b:	c3                   	ret    
+    3d6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003d70 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3d70:	f3 0f 1e fb          	endbr32 
+    3d74:	55                   	push   %ebp
+    3d75:	89 e5                	mov    %esp,%ebp
+    3d77:	57                   	push   %edi
+    3d78:	56                   	push   %esi
+    3d79:	53                   	push   %ebx
+    3d7a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3d7d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3d80:	8b 3d 80 62 00 00    	mov    0x6280,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3d86:	8d 70 07             	lea    0x7(%eax),%esi
+    3d89:	c1 ee 03             	shr    $0x3,%esi
+    3d8c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    3d8f:	85 ff                	test   %edi,%edi
+    3d91:	0f 84 a9 00 00 00    	je     3e40 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3d97:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+    3d99:	8b 48 04             	mov    0x4(%eax),%ecx
+    3d9c:	39 f1                	cmp    %esi,%ecx
+    3d9e:	73 6d                	jae    3e0d <malloc+0x9d>
+    3da0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    3da6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3dab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3dae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    3db5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    3db8:	eb 17                	jmp    3dd1 <malloc+0x61>
+    3dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3dc0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+    3dc2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3dc5:	39 f1                	cmp    %esi,%ecx
+    3dc7:	73 4f                	jae    3e18 <malloc+0xa8>
+    3dc9:	8b 3d 80 62 00 00    	mov    0x6280,%edi
+    3dcf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3dd1:	39 c7                	cmp    %eax,%edi
+    3dd3:	75 eb                	jne    3dc0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    3dd5:	83 ec 0c             	sub    $0xc,%esp
+    3dd8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    3ddb:	e8 2b fc ff ff       	call   3a0b <sbrk>
+  if(p == (char*)-1)
+    3de0:	83 c4 10             	add    $0x10,%esp
+    3de3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3de6:	74 1b                	je     3e03 <malloc+0x93>
+  hp->s.size = nu;
+    3de8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3deb:	83 ec 0c             	sub    $0xc,%esp
+    3dee:	83 c0 08             	add    $0x8,%eax
+    3df1:	50                   	push   %eax
+    3df2:	e8 e9 fe ff ff       	call   3ce0 <free>
+  return freep;
+    3df7:	a1 80 62 00 00       	mov    0x6280,%eax
+      if((p = morecore(nunits)) == 0)
+    3dfc:	83 c4 10             	add    $0x10,%esp
+    3dff:	85 c0                	test   %eax,%eax
+    3e01:	75 bd                	jne    3dc0 <malloc+0x50>
+        return 0;
+  }
+}
+    3e03:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3e06:	31 c0                	xor    %eax,%eax
+}
+    3e08:	5b                   	pop    %ebx
+    3e09:	5e                   	pop    %esi
+    3e0a:	5f                   	pop    %edi
+    3e0b:	5d                   	pop    %ebp
+    3e0c:	c3                   	ret    
+    if(p->s.size >= nunits){
+    3e0d:	89 c2                	mov    %eax,%edx
+    3e0f:	89 f8                	mov    %edi,%eax
+    3e11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+    3e18:	39 ce                	cmp    %ecx,%esi
+    3e1a:	74 54                	je     3e70 <malloc+0x100>
+        p->s.size -= nunits;
+    3e1c:	29 f1                	sub    %esi,%ecx
+    3e1e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+    3e21:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+    3e24:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+    3e27:	a3 80 62 00 00       	mov    %eax,0x6280
+}
+    3e2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3e2f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+    3e32:	5b                   	pop    %ebx
+    3e33:	5e                   	pop    %esi
+    3e34:	5f                   	pop    %edi
+    3e35:	5d                   	pop    %ebp
+    3e36:	c3                   	ret    
+    3e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e3e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+    3e40:	c7 05 80 62 00 00 84 	movl   $0x6284,0x6280
+    3e47:	62 00 00 
+    base.s.size = 0;
+    3e4a:	bf 84 62 00 00       	mov    $0x6284,%edi
+    base.s.ptr = freep = prevp = &base;
+    3e4f:	c7 05 84 62 00 00 84 	movl   $0x6284,0x6284
+    3e56:	62 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3e59:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+    3e5b:	c7 05 88 62 00 00 00 	movl   $0x0,0x6288
+    3e62:	00 00 00 
+    if(p->s.size >= nunits){
+    3e65:	e9 36 ff ff ff       	jmp    3da0 <malloc+0x30>
+    3e6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    3e70:	8b 0a                	mov    (%edx),%ecx
+    3e72:	89 08                	mov    %ecx,(%eax)
+    3e74:	eb b1                	jmp    3e27 <malloc+0xb7>
+    3e76:	66 90                	xchg   %ax,%ax
+    3e78:	66 90                	xchg   %ax,%ax
+    3e7a:	66 90                	xchg   %ax,%ax
+    3e7c:	66 90                	xchg   %ax,%ax
+    3e7e:	66 90                	xchg   %ax,%ax
+
+00003e80 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    3e80:	f3 0f 1e fb          	endbr32 
+    3e84:	55                   	push   %ebp
+    3e85:	b8 a4 62 00 00       	mov    $0x62a4,%eax
+    3e8a:	89 e5                	mov    %esp,%ebp
+    3e8c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    3e8f:	89 15 a0 62 00 00    	mov    %edx,0x62a0
+    for (mti=1; mti<N; mti++)
+    3e95:	eb 0c                	jmp    3ea3 <sgenrand+0x23>
+    3e97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e9e:	66 90                	xchg   %ax,%ax
+    3ea0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    3ea3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    3ea9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    3eab:	3d 5c 6c 00 00       	cmp    $0x6c5c,%eax
+    3eb0:	75 ee                	jne    3ea0 <sgenrand+0x20>
+    3eb2:	c7 05 f0 61 00 00 70 	movl   $0x270,0x61f0
+    3eb9:	02 00 00 
+}
+    3ebc:	5d                   	pop    %ebp
+    3ebd:	c3                   	ret    
+    3ebe:	66 90                	xchg   %ax,%ax
+
+00003ec0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+    3ec0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+    3ec4:	a1 f0 61 00 00       	mov    0x61f0,%eax
+    3ec9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    3ece:	7f 3c                	jg     3f0c <genrand+0x4c>
+    3ed0:	8d 50 01             	lea    0x1(%eax),%edx
+    3ed3:	8b 04 85 a0 62 00 00 	mov    0x62a0(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    3eda:	89 15 f0 61 00 00    	mov    %edx,0x61f0
+    y ^= TEMPERING_SHIFT_U(y);
+    3ee0:	89 c2                	mov    %eax,%edx
+    3ee2:	c1 ea 0b             	shr    $0xb,%edx
+    3ee5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    3ee7:	89 d0                	mov    %edx,%eax
+    3ee9:	c1 e0 07             	shl    $0x7,%eax
+    3eec:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+    3ef1:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    3ef3:	89 d0                	mov    %edx,%eax
+    3ef5:	c1 e0 0f             	shl    $0xf,%eax
+    3ef8:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+    3efd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+    3eff:	89 c2                	mov    %eax,%edx
+    3f01:	c1 ea 12             	shr    $0x12,%edx
+    3f04:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+    3f06:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+    3f0b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+    3f0c:	3d 71 02 00 00       	cmp    $0x271,%eax
+    3f11:	0f 84 d2 00 00 00    	je     3fe9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+    3f17:	31 c0                	xor    %eax,%eax
+    3f19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    3f20:	8b 0c 85 a0 62 00 00 	mov    0x62a0(,%eax,4),%ecx
+    3f27:	83 c0 01             	add    $0x1,%eax
+    3f2a:	8b 14 85 a0 62 00 00 	mov    0x62a0(,%eax,4),%edx
+    3f31:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    3f37:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    3f3d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+    3f3f:	89 d1                	mov    %edx,%ecx
+    3f41:	83 e2 01             	and    $0x1,%edx
+    3f44:	d1 e9                	shr    %ecx
+    3f46:	33 0c 85 d0 68 00 00 	xor    0x68d0(,%eax,4),%ecx
+    3f4d:	33 0c 95 64 58 00 00 	xor    0x5864(,%edx,4),%ecx
+    3f54:	89 0c 85 9c 62 00 00 	mov    %ecx,0x629c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+    3f5b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+    3f60:	75 be                	jne    3f20 <genrand+0x60>
+    3f62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    3f68:	8b 0c 85 a0 62 00 00 	mov    0x62a0(,%eax,4),%ecx
+    3f6f:	83 c0 01             	add    $0x1,%eax
+    3f72:	8b 14 85 a0 62 00 00 	mov    0x62a0(,%eax,4),%edx
+    3f79:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    3f7f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    3f85:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+    3f87:	89 d1                	mov    %edx,%ecx
+    3f89:	83 e2 01             	and    $0x1,%edx
+    3f8c:	d1 e9                	shr    %ecx
+    3f8e:	33 0c 85 10 5f 00 00 	xor    0x5f10(,%eax,4),%ecx
+    3f95:	33 0c 95 64 58 00 00 	xor    0x5864(,%edx,4),%ecx
+    3f9c:	89 0c 85 9c 62 00 00 	mov    %ecx,0x629c(,%eax,4)
+        for (;kk<N-1;kk++) {
+    3fa3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    3fa8:	75 be                	jne    3f68 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+    3faa:	a1 a0 62 00 00       	mov    0x62a0,%eax
+    3faf:	8b 0d 5c 6c 00 00    	mov    0x6c5c,%ecx
+    3fb5:	89 c2                	mov    %eax,%edx
+    3fb7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    3fbd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    3fc3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+    3fc5:	89 ca                	mov    %ecx,%edx
+    3fc7:	83 e1 01             	and    $0x1,%ecx
+    3fca:	d1 ea                	shr    %edx
+    3fcc:	33 15 d0 68 00 00    	xor    0x68d0,%edx
+    3fd2:	33 14 8d 64 58 00 00 	xor    0x5864(,%ecx,4),%edx
+    3fd9:	89 15 5c 6c 00 00    	mov    %edx,0x6c5c
+    3fdf:	ba 01 00 00 00       	mov    $0x1,%edx
+    3fe4:	e9 f1 fe ff ff       	jmp    3eda <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+    3fe9:	b8 a4 62 00 00       	mov    $0x62a4,%eax
+    3fee:	b9 5c 6c 00 00       	mov    $0x6c5c,%ecx
+    3ff3:	ba 05 11 00 00       	mov    $0x1105,%edx
+    3ff8:	c7 05 a0 62 00 00 05 	movl   $0x1105,0x62a0
+    3fff:	11 00 00 
+    for (mti=1; mti<N; mti++)
+    4002:	eb 07                	jmp    400b <genrand+0x14b>
+    4004:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    4008:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    400b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    4011:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    4013:	39 c1                	cmp    %eax,%ecx
+    4015:	75 f1                	jne    4008 <genrand+0x148>
+    4017:	e9 fb fe ff ff       	jmp    3f17 <genrand+0x57>
+    401c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00004020 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+    4020:	f3 0f 1e fb          	endbr32 
+    4024:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    4025:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+    4027:	89 e5                	mov    %esp,%ebp
+    4029:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+    402a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+    402d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+    402e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+    4033:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    4036:	89 d8                	mov    %ebx,%eax
+    4038:	f7 f1                	div    %ecx
+    403a:	89 c6                	mov    %eax,%esi
+    403c:	29 d3                	sub    %edx,%ebx
+    403e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+    4040:	e8 7b fe ff ff       	call   3ec0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+    4045:	39 d8                	cmp    %ebx,%eax
+    4047:	73 f7                	jae    4040 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+    4049:	31 d2                	xor    %edx,%edx
+}
+    404b:	5b                   	pop    %ebx
+  return x/bin_size;
+    404c:	f7 f6                	div    %esi
+}
+    404e:	5e                   	pop    %esi
+    404f:	5d                   	pop    %ebp
+    4050:	c3                   	ret    
+    4051:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    4058:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    405f:	90                   	nop
+
+00004060 <randomrange>:
+
+int randomrange(int low, int high){
+    4060:	f3 0f 1e fb          	endbr32 
+    4064:	55                   	push   %ebp
+    4065:	89 e5                	mov    %esp,%ebp
+    4067:	57                   	push   %edi
+    4068:	56                   	push   %esi
+    4069:	53                   	push   %ebx
+    406a:	83 ec 0c             	sub    $0xc,%esp
+    406d:	8b 75 08             	mov    0x8(%ebp),%esi
+    4070:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+    4073:	39 f0                	cmp    %esi,%eax
+    4075:	7d 06                	jge    407d <randomrange+0x1d>
+    4077:	89 f2                	mov    %esi,%edx
+    4079:	89 c6                	mov    %eax,%esi
+    407b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+    407d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+    407f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    4084:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+    4086:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    4089:	89 d8                	mov    %ebx,%eax
+    408b:	f7 f1                	div    %ecx
+    408d:	89 c7                	mov    %eax,%edi
+    408f:	29 d3                	sub    %edx,%ebx
+    4091:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+    4098:	e8 23 fe ff ff       	call   3ec0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+    409d:	39 d8                	cmp    %ebx,%eax
+    409f:	73 f7                	jae    4098 <randomrange+0x38>
+  return x/bin_size;
+    40a1:	31 d2                	xor    %edx,%edx
+  return val;
+    40a3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+    40a6:	f7 f7                	div    %edi
+    40a8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+    40a9:	01 f0                	add    %esi,%eax
+    40ab:	5e                   	pop    %esi
+    40ac:	5f                   	pop    %edi
+    40ad:	5d                   	pop    %ebp
+    40ae:	c3                   	ret    
diff -ruN xv6-public/usertests.d xv6-public-partB_sjf/usertests.d
--- xv6-public/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/usertests.d	2022-10-07 20:27:44.971124000 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h processInfo.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6-public/usertests.o and xv6-public-partB_sjf/usertests.o differ
diff -ruN xv6-public/usertests.sym xv6-public-partB_sjf/usertests.sym
--- xv6-public/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/usertests.sym	2022-10-07 20:27:45.023124000 +0530
@@ -0,0 +1,118 @@
+00000000 .text
+000040b0 .rodata
+0000586c .eh_frame
+000061d4 .data
+00006200 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00006200 args.1469
+00000000 ulib.c
+00000000 printf.c
+00003a60 printint
+00005850 digits.1105
+00000000 umalloc.c
+00006280 freep
+00006284 base
+00000000 random.c
+000062a0 mt
+000061f0 mti
+00005864 mag01.989
+00003720 strcpy
+00000d60 exitwait
+00003e80 sgenrand
+00003b10 printf
+000061d8 stdout
+00003330 bigargtest
+00003950 memmove
+00000310 openiputtest
+000039cb mknod
+00003840 gets
+00003a03 getpid
+00000a60 pipe1
+00002c00 iref
+00003d70 malloc
+00003a13 sleep
+00003a43 get_burst_time
+00000210 exitiputtest
+00003430 fsfull
+00001c60 bigdir
+00004020 random_at_most
+00002d20 forktest
+00000690 writetest1
+00002490 bigwrite
+00003a4b getCurrentInfo
+00000eb0 sharedfd
+000061d4 randstate
+00003993 pipe
+00006c60 uninit
+00002a00 dirfile
+000039a3 write
+000032c0 bsstest
+000061dc echoargv
+000039db fstat
+000039b3 kill
+00003200 validatetest
+00002880 rmdot
+000039f3 chdir
+00000a10 exectest
+000039bb exec
+0000398b wait
+00003700 rand
+0000399b read
+00000c00 preempt
+000039d3 unlink
+00003690 argptest
+00000de0 mem
+0000397b fork
+00003a0b sbrk
+00003a1b uptime
+000061f4 __bss_start
+000037e0 memset
+00000860 createtest
+00000000 main
+00003a3b set_burst_time
+00001270 createdelete
+00003750 strcmp
+000004b0 writetest
+000039fb dup
+00002dd0 sbrktest
+00000410 opentest
+00001da0 subdir
+00003610 uio
+00001630 linktest
+00009380 buf
+00000920 dirtest
+00003ec0 genrand
+00000120 iputtest
+00003a23 getNumProc
+00003a33 getProcInfo
+000038c0 stat
+00002570 bigfile
+000061f4 _edata
+0000b384 _end
+000014a0 unlinkread
+000039e3 link
+00003983 exit
+00003a2b getMaxPID
+00003910 atoi
+00001b50 linkunlink
+0000b380 name
+000037a0 strlen
+000039c3 open
+00003800 strchr
+00001850 concreate
+00003a53 getCurrentPID
+00004060 randomrange
+00002740 fourteen
+000031f0 validateint
+00001070 fourfiles
+000039eb mkdir
+000039ab close
+00003ce0 free
Binary files xv6-public/usys.o and xv6-public-partB_sjf/usys.o differ
diff -ruN xv6-public/usys.S xv6-public-partB_sjf/usys.S
--- xv6-public/usys.S	2022-10-06 22:50:49.453046000 +0530
+++ xv6-public-partB_sjf/usys.S	2022-10-07 18:03:37.299864000 +0530
@@ -29,3 +29,10 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPID)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
+SYSCALL(getCurrentInfo)
+SYSCALL(getCurrentPID)
\ No newline at end of file
Binary files xv6-public/vectors.o and xv6-public-partB_sjf/vectors.o differ
diff -ruN xv6-public/vectors.S xv6-public-partB_sjf/vectors.S
--- xv6-public/vectors.S	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/vectors.S	2022-10-07 20:27:36.995054000 +0530
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
diff -ruN xv6-public/vm.d xv6-public-partB_sjf/vm.d
--- xv6-public/vm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/vm.d	2022-10-07 20:27:37.171056000 +0530
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Binary files xv6-public/vm.o and xv6-public-partB_sjf/vm.o differ
diff -ruN xv6-public/.vscode/settings.json xv6-public-partB_sjf/.vscode/settings.json
--- xv6-public/.vscode/settings.json	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/.vscode/settings.json	2022-10-07 17:58:21.409122000 +0530
@@ -0,0 +1,15 @@
+{
+    "files.associations": {
+        "spinlock.h": "c",
+        "traps.h": "c",
+        "x86.h": "c",
+        "proc.h": "c",
+        "mmu.h": "c",
+        "param.h": "c",
+        "types.h": "c",
+        "defs.h": "c",
+        "chrono": "c",
+        "random": "c",
+        "limits": "c"
+    }
+}
\ No newline at end of file
Binary files xv6-public/_wc and xv6-public-partB_sjf/_wc differ
diff -ruN xv6-public/wc.asm xv6-public-partB_sjf/wc.asm
--- xv6-public/wc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/wc.asm	2022-10-07 20:27:45.103125000 +0530
@@ -0,0 +1,1648 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	be 01 00 00 00       	mov    $0x1,%esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 18             	sub    $0x18,%esp
+  1d:	8b 01                	mov    (%ecx),%eax
+  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
+  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  25:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  28:	83 f8 01             	cmp    $0x1,%eax
+  2b:	7e 52                	jle    7f <main+0x7f>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 f7 03 00 00       	call   433 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	pushl  (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+  4d:	83 c3 04             	add    $0x4,%ebx
+    wc(fd, argv[i]);
+  50:	50                   	push   %eax
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 bd 03 00 00       	call   41b <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 88 03 00 00       	call   3f3 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	pushl  (%ebx)
+  6e:	68 43 0b 00 00       	push   $0xb43
+  73:	6a 01                	push   $0x1
+  75:	e8 06 05 00 00       	call   580 <printf>
+      exit();
+  7a:	e8 74 03 00 00       	call   3f3 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 35 0b 00 00       	push   $0xb35
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 61 03 00 00       	call   3f3 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	57                   	push   %edi
+  a8:	56                   	push   %esi
+  a9:	53                   	push   %ebx
+  l = w = c = 0;
+  aa:	31 db                	xor    %ebx,%ebx
+{
+  ac:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c8:	83 ec 04             	sub    $0x4,%esp
+  cb:	68 00 02 00 00       	push   $0x200
+  d0:	68 c0 18 00 00       	push   $0x18c0
+  d5:	ff 75 08             	pushl  0x8(%ebp)
+  d8:	e8 2e 03 00 00       	call   40b <read>
+  dd:	83 c4 10             	add    $0x10,%esp
+  e0:	89 c6                	mov    %eax,%esi
+  e2:	85 c0                	test   %eax,%eax
+  e4:	7e 62                	jle    148 <wc+0xa8>
+    for(i=0; i<n; i++){
+  e6:	31 ff                	xor    %edi,%edi
+  e8:	eb 14                	jmp    fe <wc+0x5e>
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        inword = 0;
+  f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  f7:	83 c7 01             	add    $0x1,%edi
+  fa:	39 fe                	cmp    %edi,%esi
+  fc:	74 42                	je     140 <wc+0xa0>
+      if(buf[i] == '\n')
+  fe:	0f be 87 c0 18 00 00 	movsbl 0x18c0(%edi),%eax
+        l++;
+ 105:	31 c9                	xor    %ecx,%ecx
+ 107:	3c 0a                	cmp    $0xa,%al
+ 109:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10c:	83 ec 08             	sub    $0x8,%esp
+ 10f:	50                   	push   %eax
+        l++;
+ 110:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 112:	68 20 0b 00 00       	push   $0xb20
+ 117:	e8 54 01 00 00       	call   270 <strchr>
+ 11c:	83 c4 10             	add    $0x10,%esp
+ 11f:	85 c0                	test   %eax,%eax
+ 121:	75 cd                	jne    f0 <wc+0x50>
+      else if(!inword){
+ 123:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 126:	85 d2                	test   %edx,%edx
+ 128:	75 cd                	jne    f7 <wc+0x57>
+    for(i=0; i<n; i++){
+ 12a:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 12d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+        inword = 1;
+ 131:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 138:	39 fe                	cmp    %edi,%esi
+ 13a:	75 c2                	jne    fe <wc+0x5e>
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 140:	01 75 dc             	add    %esi,-0x24(%ebp)
+ 143:	eb 83                	jmp    c8 <wc+0x28>
+ 145:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 148:	75 24                	jne    16e <wc+0xce>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 14a:	83 ec 08             	sub    $0x8,%esp
+ 14d:	ff 75 0c             	pushl  0xc(%ebp)
+ 150:	ff 75 dc             	pushl  -0x24(%ebp)
+ 153:	ff 75 e0             	pushl  -0x20(%ebp)
+ 156:	53                   	push   %ebx
+ 157:	68 36 0b 00 00       	push   $0xb36
+ 15c:	6a 01                	push   $0x1
+ 15e:	e8 1d 04 00 00       	call   580 <printf>
+}
+ 163:	83 c4 20             	add    $0x20,%esp
+ 166:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 169:	5b                   	pop    %ebx
+ 16a:	5e                   	pop    %esi
+ 16b:	5f                   	pop    %edi
+ 16c:	5d                   	pop    %ebp
+ 16d:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 16e:	50                   	push   %eax
+ 16f:	50                   	push   %eax
+ 170:	68 26 0b 00 00       	push   $0xb26
+ 175:	6a 01                	push   $0x1
+ 177:	e8 04 04 00 00       	call   580 <printf>
+    exit();
+ 17c:	e8 72 02 00 00       	call   3f3 <exit>
+ 181:	66 90                	xchg   %ax,%ax
+ 183:	66 90                	xchg   %ax,%ax
+ 185:	66 90                	xchg   %ax,%ax
+ 187:	66 90                	xchg   %ax,%ax
+ 189:	66 90                	xchg   %ax,%ax
+ 18b:	66 90                	xchg   %ax,%ax
+ 18d:	66 90                	xchg   %ax,%ax
+ 18f:	90                   	nop
+
+00000190 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 195:	31 c0                	xor    %eax,%eax
+{
+ 197:	89 e5                	mov    %esp,%ebp
+ 199:	53                   	push   %ebx
+ 19a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 19d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 1a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 1a7:	83 c0 01             	add    $0x1,%eax
+ 1aa:	84 d2                	test   %dl,%dl
+ 1ac:	75 f2                	jne    1a0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1ae:	89 c8                	mov    %ecx,%eax
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000001c0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	53                   	push   %ebx
+ 1c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1cb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 1ce:	0f b6 01             	movzbl (%ecx),%eax
+ 1d1:	0f b6 1a             	movzbl (%edx),%ebx
+ 1d4:	84 c0                	test   %al,%al
+ 1d6:	75 19                	jne    1f1 <strcmp+0x31>
+ 1d8:	eb 26                	jmp    200 <strcmp+0x40>
+ 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1e0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1e4:	83 c1 01             	add    $0x1,%ecx
+ 1e7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1ea:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ed:	84 c0                	test   %al,%al
+ 1ef:	74 0f                	je     200 <strcmp+0x40>
+ 1f1:	38 d8                	cmp    %bl,%al
+ 1f3:	74 eb                	je     1e0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1f5:	29 d8                	sub    %ebx,%eax
+}
+ 1f7:	5b                   	pop    %ebx
+ 1f8:	5d                   	pop    %ebp
+ 1f9:	c3                   	ret    
+ 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 200:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 202:	29 d8                	sub    %ebx,%eax
+}
+ 204:	5b                   	pop    %ebx
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 21a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 21d:	74 21                	je     240 <strlen+0x30>
+ 21f:	31 c0                	xor    %eax,%eax
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	83 c0 01             	add    $0x1,%eax
+ 22b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 22f:	89 c1                	mov    %eax,%ecx
+ 231:	75 f5                	jne    228 <strlen+0x18>
+    ;
+  return n;
+}
+ 233:	89 c8                	mov    %ecx,%eax
+ 235:	5d                   	pop    %ebp
+ 236:	c3                   	ret    
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 240:	31 c9                	xor    %ecx,%ecx
+}
+ 242:	5d                   	pop    %ebp
+ 243:	89 c8                	mov    %ecx,%eax
+ 245:	c3                   	ret    
+ 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000250 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	57                   	push   %edi
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 25b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 25e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 261:	89 d7                	mov    %edx,%edi
+ 263:	fc                   	cld    
+ 264:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 266:	89 d0                	mov    %edx,%eax
+ 268:	5f                   	pop    %edi
+ 269:	5d                   	pop    %ebp
+ 26a:	c3                   	ret    
+ 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 26f:	90                   	nop
+
+00000270 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 27e:	0f b6 10             	movzbl (%eax),%edx
+ 281:	84 d2                	test   %dl,%dl
+ 283:	75 16                	jne    29b <strchr+0x2b>
+ 285:	eb 21                	jmp    2a8 <strchr+0x38>
+ 287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28e:	66 90                	xchg   %ax,%ax
+ 290:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 294:	83 c0 01             	add    $0x1,%eax
+ 297:	84 d2                	test   %dl,%dl
+ 299:	74 0d                	je     2a8 <strchr+0x38>
+    if(*s == c)
+ 29b:	38 d1                	cmp    %dl,%cl
+ 29d:	75 f1                	jne    290 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 29f:	5d                   	pop    %ebp
+ 2a0:	c3                   	ret    
+ 2a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 2a8:	31 c0                	xor    %eax,%eax
+}
+ 2aa:	5d                   	pop    %ebp
+ 2ab:	c3                   	ret    
+ 2ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002b0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2b9:	31 f6                	xor    %esi,%esi
+{
+ 2bb:	53                   	push   %ebx
+ 2bc:	89 f3                	mov    %esi,%ebx
+ 2be:	83 ec 1c             	sub    $0x1c,%esp
+ 2c1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 2c4:	eb 33                	jmp    2f9 <gets+0x49>
+ 2c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 2d0:	83 ec 04             	sub    $0x4,%esp
+ 2d3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 2d6:	6a 01                	push   $0x1
+ 2d8:	50                   	push   %eax
+ 2d9:	6a 00                	push   $0x0
+ 2db:	e8 2b 01 00 00       	call   40b <read>
+    if(cc < 1)
+ 2e0:	83 c4 10             	add    $0x10,%esp
+ 2e3:	85 c0                	test   %eax,%eax
+ 2e5:	7e 1c                	jle    303 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2e7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2eb:	83 c7 01             	add    $0x1,%edi
+ 2ee:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2f1:	3c 0a                	cmp    $0xa,%al
+ 2f3:	74 23                	je     318 <gets+0x68>
+ 2f5:	3c 0d                	cmp    $0xd,%al
+ 2f7:	74 1f                	je     318 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2f9:	83 c3 01             	add    $0x1,%ebx
+ 2fc:	89 fe                	mov    %edi,%esi
+ 2fe:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 301:	7c cd                	jl     2d0 <gets+0x20>
+ 303:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 305:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 308:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 30b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 30e:	5b                   	pop    %ebx
+ 30f:	5e                   	pop    %esi
+ 310:	5f                   	pop    %edi
+ 311:	5d                   	pop    %ebp
+ 312:	c3                   	ret    
+ 313:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 317:	90                   	nop
+ 318:	8b 75 08             	mov    0x8(%ebp),%esi
+ 31b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31e:	01 de                	add    %ebx,%esi
+ 320:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 322:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 325:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 328:	5b                   	pop    %ebx
+ 329:	5e                   	pop    %esi
+ 32a:	5f                   	pop    %edi
+ 32b:	5d                   	pop    %ebp
+ 32c:	c3                   	ret    
+ 32d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000330 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	56                   	push   %esi
+ 338:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 339:	83 ec 08             	sub    $0x8,%esp
+ 33c:	6a 00                	push   $0x0
+ 33e:	ff 75 08             	pushl  0x8(%ebp)
+ 341:	e8 ed 00 00 00       	call   433 <open>
+  if(fd < 0)
+ 346:	83 c4 10             	add    $0x10,%esp
+ 349:	85 c0                	test   %eax,%eax
+ 34b:	78 2b                	js     378 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 34d:	83 ec 08             	sub    $0x8,%esp
+ 350:	ff 75 0c             	pushl  0xc(%ebp)
+ 353:	89 c3                	mov    %eax,%ebx
+ 355:	50                   	push   %eax
+ 356:	e8 f0 00 00 00       	call   44b <fstat>
+  close(fd);
+ 35b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 35e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 360:	e8 b6 00 00 00       	call   41b <close>
+  return r;
+ 365:	83 c4 10             	add    $0x10,%esp
+}
+ 368:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 36b:	89 f0                	mov    %esi,%eax
+ 36d:	5b                   	pop    %ebx
+ 36e:	5e                   	pop    %esi
+ 36f:	5d                   	pop    %ebp
+ 370:	c3                   	ret    
+ 371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 378:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 37d:	eb e9                	jmp    368 <stat+0x38>
+ 37f:	90                   	nop
+
+00000380 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	53                   	push   %ebx
+ 388:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 38b:	0f be 02             	movsbl (%edx),%eax
+ 38e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 391:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 394:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 399:	77 1a                	ja     3b5 <atoi+0x35>
+ 39b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 39f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 3a0:	83 c2 01             	add    $0x1,%edx
+ 3a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 3a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 3aa:	0f be 02             	movsbl (%edx),%eax
+ 3ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 3b0:	80 fb 09             	cmp    $0x9,%bl
+ 3b3:	76 eb                	jbe    3a0 <atoi+0x20>
+  return n;
+}
+ 3b5:	89 c8                	mov    %ecx,%eax
+ 3b7:	5b                   	pop    %ebx
+ 3b8:	5d                   	pop    %ebp
+ 3b9:	c3                   	ret    
+ 3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003c0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	57                   	push   %edi
+ 3c8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3cb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3ce:	56                   	push   %esi
+ 3cf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3d2:	85 c0                	test   %eax,%eax
+ 3d4:	7e 0f                	jle    3e5 <memmove+0x25>
+ 3d6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3d8:	89 d7                	mov    %edx,%edi
+ 3da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3e1:	39 f8                	cmp    %edi,%eax
+ 3e3:	75 fb                	jne    3e0 <memmove+0x20>
+  return vdst;
+}
+ 3e5:	5e                   	pop    %esi
+ 3e6:	89 d0                	mov    %edx,%eax
+ 3e8:	5f                   	pop    %edi
+ 3e9:	5d                   	pop    %ebp
+ 3ea:	c3                   	ret    
+
+000003eb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <exit>:
+SYSCALL(exit)
+ 3f3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <wait>:
+SYSCALL(wait)
+ 3fb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <pipe>:
+SYSCALL(pipe)
+ 403:	b8 04 00 00 00       	mov    $0x4,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <read>:
+SYSCALL(read)
+ 40b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <write>:
+SYSCALL(write)
+ 413:	b8 10 00 00 00       	mov    $0x10,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <close>:
+SYSCALL(close)
+ 41b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <kill>:
+SYSCALL(kill)
+ 423:	b8 06 00 00 00       	mov    $0x6,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <exec>:
+SYSCALL(exec)
+ 42b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <open>:
+SYSCALL(open)
+ 433:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <mknod>:
+SYSCALL(mknod)
+ 43b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <unlink>:
+SYSCALL(unlink)
+ 443:	b8 12 00 00 00       	mov    $0x12,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <fstat>:
+SYSCALL(fstat)
+ 44b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <link>:
+SYSCALL(link)
+ 453:	b8 13 00 00 00       	mov    $0x13,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <mkdir>:
+SYSCALL(mkdir)
+ 45b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <chdir>:
+SYSCALL(chdir)
+ 463:	b8 09 00 00 00       	mov    $0x9,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <dup>:
+SYSCALL(dup)
+ 46b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <getpid>:
+SYSCALL(getpid)
+ 473:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <sbrk>:
+SYSCALL(sbrk)
+ 47b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <sleep>:
+SYSCALL(sleep)
+ 483:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <uptime>:
+SYSCALL(uptime)
+ 48b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <getNumProc>:
+SYSCALL(getNumProc)
+ 493:	b8 16 00 00 00       	mov    $0x16,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 49b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 4a3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <set_burst_time>:
+SYSCALL(set_burst_time)
+ 4ab:	b8 19 00 00 00       	mov    $0x19,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 4b3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 4bb:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+
+000004c3 <getCurrentPID>:
+ 4c3:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 4c8:	cd 40                	int    $0x40
+ 4ca:	c3                   	ret    
+ 4cb:	66 90                	xchg   %ax,%ax
+ 4cd:	66 90                	xchg   %ax,%ax
+ 4cf:	90                   	nop
+
+000004d0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	57                   	push   %edi
+ 4d4:	56                   	push   %esi
+ 4d5:	53                   	push   %ebx
+ 4d6:	83 ec 3c             	sub    $0x3c,%esp
+ 4d9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 4dc:	89 d1                	mov    %edx,%ecx
+{
+ 4de:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 4e1:	85 d2                	test   %edx,%edx
+ 4e3:	0f 89 7f 00 00 00    	jns    568 <printint+0x98>
+ 4e9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4ed:	74 79                	je     568 <printint+0x98>
+    neg = 1;
+ 4ef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 4f6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4f8:	31 db                	xor    %ebx,%ebx
+ 4fa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 500:	89 c8                	mov    %ecx,%eax
+ 502:	31 d2                	xor    %edx,%edx
+ 504:	89 cf                	mov    %ecx,%edi
+ 506:	f7 75 c4             	divl   -0x3c(%ebp)
+ 509:	0f b6 92 60 0b 00 00 	movzbl 0xb60(%edx),%edx
+ 510:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 513:	89 d8                	mov    %ebx,%eax
+ 515:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 518:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 51b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 51e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 521:	76 dd                	jbe    500 <printint+0x30>
+  if(neg)
+ 523:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 526:	85 c9                	test   %ecx,%ecx
+ 528:	74 0c                	je     536 <printint+0x66>
+    buf[i++] = '-';
+ 52a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 52f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 531:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 536:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 539:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 53d:	eb 07                	jmp    546 <printint+0x76>
+ 53f:	90                   	nop
+ 540:	0f b6 13             	movzbl (%ebx),%edx
+ 543:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 546:	83 ec 04             	sub    $0x4,%esp
+ 549:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 54c:	6a 01                	push   $0x1
+ 54e:	56                   	push   %esi
+ 54f:	57                   	push   %edi
+ 550:	e8 be fe ff ff       	call   413 <write>
+  while(--i >= 0)
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	39 de                	cmp    %ebx,%esi
+ 55a:	75 e4                	jne    540 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 55c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 55f:	5b                   	pop    %ebx
+ 560:	5e                   	pop    %esi
+ 561:	5f                   	pop    %edi
+ 562:	5d                   	pop    %ebp
+ 563:	c3                   	ret    
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 568:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 56f:	eb 87                	jmp    4f8 <printint+0x28>
+ 571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 578:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+
+00000580 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 580:	f3 0f 1e fb          	endbr32 
+ 584:	55                   	push   %ebp
+ 585:	89 e5                	mov    %esp,%ebp
+ 587:	57                   	push   %edi
+ 588:	56                   	push   %esi
+ 589:	53                   	push   %ebx
+ 58a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 58d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 590:	0f b6 1e             	movzbl (%esi),%ebx
+ 593:	84 db                	test   %bl,%bl
+ 595:	0f 84 b4 00 00 00    	je     64f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 59b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 59e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 5a1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 5a4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 5a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5a9:	eb 33                	jmp    5de <printf+0x5e>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+ 5b0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 5b3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 5b8:	83 f8 25             	cmp    $0x25,%eax
+ 5bb:	74 17                	je     5d4 <printf+0x54>
+  write(fd, &c, 1);
+ 5bd:	83 ec 04             	sub    $0x4,%esp
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5c3:	6a 01                	push   $0x1
+ 5c5:	57                   	push   %edi
+ 5c6:	ff 75 08             	pushl  0x8(%ebp)
+ 5c9:	e8 45 fe ff ff       	call   413 <write>
+ 5ce:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 5d1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5d4:	0f b6 1e             	movzbl (%esi),%ebx
+ 5d7:	83 c6 01             	add    $0x1,%esi
+ 5da:	84 db                	test   %bl,%bl
+ 5dc:	74 71                	je     64f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 5de:	0f be cb             	movsbl %bl,%ecx
+ 5e1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 5e4:	85 d2                	test   %edx,%edx
+ 5e6:	74 c8                	je     5b0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 5e8:	83 fa 25             	cmp    $0x25,%edx
+ 5eb:	75 e7                	jne    5d4 <printf+0x54>
+      if(c == 'd'){
+ 5ed:	83 f8 64             	cmp    $0x64,%eax
+ 5f0:	0f 84 9a 00 00 00    	je     690 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 5f6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5fc:	83 f9 70             	cmp    $0x70,%ecx
+ 5ff:	74 5f                	je     660 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 601:	83 f8 73             	cmp    $0x73,%eax
+ 604:	0f 84 d6 00 00 00    	je     6e0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 60a:	83 f8 63             	cmp    $0x63,%eax
+ 60d:	0f 84 8d 00 00 00    	je     6a0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 613:	83 f8 25             	cmp    $0x25,%eax
+ 616:	0f 84 b4 00 00 00    	je     6d0 <printf+0x150>
+  write(fd, &c, 1);
+ 61c:	83 ec 04             	sub    $0x4,%esp
+ 61f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 623:	6a 01                	push   $0x1
+ 625:	57                   	push   %edi
+ 626:	ff 75 08             	pushl  0x8(%ebp)
+ 629:	e8 e5 fd ff ff       	call   413 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 62e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 631:	83 c4 0c             	add    $0xc,%esp
+ 634:	6a 01                	push   $0x1
+ 636:	83 c6 01             	add    $0x1,%esi
+ 639:	57                   	push   %edi
+ 63a:	ff 75 08             	pushl  0x8(%ebp)
+ 63d:	e8 d1 fd ff ff       	call   413 <write>
+  for(i = 0; fmt[i]; i++){
+ 642:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 646:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 649:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 64b:	84 db                	test   %bl,%bl
+ 64d:	75 8f                	jne    5de <printf+0x5e>
+    }
+  }
+}
+ 64f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 652:	5b                   	pop    %ebx
+ 653:	5e                   	pop    %esi
+ 654:	5f                   	pop    %edi
+ 655:	5d                   	pop    %ebp
+ 656:	c3                   	ret    
+ 657:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 660:	83 ec 0c             	sub    $0xc,%esp
+ 663:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 668:	6a 00                	push   $0x0
+ 66a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 66d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 670:	8b 13                	mov    (%ebx),%edx
+ 672:	e8 59 fe ff ff       	call   4d0 <printint>
+        ap++;
+ 677:	89 d8                	mov    %ebx,%eax
+ 679:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 67c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 67e:	83 c0 04             	add    $0x4,%eax
+ 681:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 684:	e9 4b ff ff ff       	jmp    5d4 <printf+0x54>
+ 689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 690:	83 ec 0c             	sub    $0xc,%esp
+ 693:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 698:	6a 01                	push   $0x1
+ 69a:	eb ce                	jmp    66a <printf+0xea>
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 6a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 6a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6a6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 6a8:	6a 01                	push   $0x1
+        ap++;
+ 6aa:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 6ad:	57                   	push   %edi
+ 6ae:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 6b1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6b4:	e8 5a fd ff ff       	call   413 <write>
+        ap++;
+ 6b9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 6bc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6bf:	31 d2                	xor    %edx,%edx
+ 6c1:	e9 0e ff ff ff       	jmp    5d4 <printf+0x54>
+ 6c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 6d0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6d3:	83 ec 04             	sub    $0x4,%esp
+ 6d6:	e9 59 ff ff ff       	jmp    634 <printf+0xb4>
+ 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
+        s = (char*)*ap;
+ 6e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6e3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 6e5:	83 c0 04             	add    $0x4,%eax
+ 6e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 6eb:	85 db                	test   %ebx,%ebx
+ 6ed:	74 17                	je     706 <printf+0x186>
+        while(*s != 0){
+ 6ef:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 6f2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 6f4:	84 c0                	test   %al,%al
+ 6f6:	0f 84 d8 fe ff ff    	je     5d4 <printf+0x54>
+ 6fc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ff:	89 de                	mov    %ebx,%esi
+ 701:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 704:	eb 1a                	jmp    720 <printf+0x1a0>
+          s = "(null)";
+ 706:	bb 57 0b 00 00       	mov    $0xb57,%ebx
+        while(*s != 0){
+ 70b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 70e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 713:	89 de                	mov    %ebx,%esi
+ 715:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+  write(fd, &c, 1);
+ 720:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 723:	83 c6 01             	add    $0x1,%esi
+ 726:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 729:	6a 01                	push   $0x1
+ 72b:	57                   	push   %edi
+ 72c:	53                   	push   %ebx
+ 72d:	e8 e1 fc ff ff       	call   413 <write>
+        while(*s != 0){
+ 732:	0f b6 06             	movzbl (%esi),%eax
+ 735:	83 c4 10             	add    $0x10,%esp
+ 738:	84 c0                	test   %al,%al
+ 73a:	75 e4                	jne    720 <printf+0x1a0>
+ 73c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 73f:	31 d2                	xor    %edx,%edx
+ 741:	e9 8e fe ff ff       	jmp    5d4 <printf+0x54>
+ 746:	66 90                	xchg   %ax,%ax
+ 748:	66 90                	xchg   %ax,%ax
+ 74a:	66 90                	xchg   %ax,%ax
+ 74c:	66 90                	xchg   %ax,%ax
+ 74e:	66 90                	xchg   %ax,%ax
+
+00000750 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 750:	f3 0f 1e fb          	endbr32 
+ 754:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 755:	a1 e0 0e 00 00       	mov    0xee0,%eax
+{
+ 75a:	89 e5                	mov    %esp,%ebp
+ 75c:	57                   	push   %edi
+ 75d:	56                   	push   %esi
+ 75e:	53                   	push   %ebx
+ 75f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 762:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 764:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 767:	39 c8                	cmp    %ecx,%eax
+ 769:	73 15                	jae    780 <free+0x30>
+ 76b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 76f:	90                   	nop
+ 770:	39 d1                	cmp    %edx,%ecx
+ 772:	72 14                	jb     788 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 774:	39 d0                	cmp    %edx,%eax
+ 776:	73 10                	jae    788 <free+0x38>
+{
+ 778:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 77a:	8b 10                	mov    (%eax),%edx
+ 77c:	39 c8                	cmp    %ecx,%eax
+ 77e:	72 f0                	jb     770 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 780:	39 d0                	cmp    %edx,%eax
+ 782:	72 f4                	jb     778 <free+0x28>
+ 784:	39 d1                	cmp    %edx,%ecx
+ 786:	73 f0                	jae    778 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 788:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 78b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 78e:	39 fa                	cmp    %edi,%edx
+ 790:	74 1e                	je     7b0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 792:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 795:	8b 50 04             	mov    0x4(%eax),%edx
+ 798:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 79b:	39 f1                	cmp    %esi,%ecx
+ 79d:	74 28                	je     7c7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 79f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 7a1:	5b                   	pop    %ebx
+  freep = p;
+ 7a2:	a3 e0 0e 00 00       	mov    %eax,0xee0
+}
+ 7a7:	5e                   	pop    %esi
+ 7a8:	5f                   	pop    %edi
+ 7a9:	5d                   	pop    %ebp
+ 7aa:	c3                   	ret    
+ 7ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7af:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 7b0:	03 72 04             	add    0x4(%edx),%esi
+ 7b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7b6:	8b 10                	mov    (%eax),%edx
+ 7b8:	8b 12                	mov    (%edx),%edx
+ 7ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7bd:	8b 50 04             	mov    0x4(%eax),%edx
+ 7c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7c3:	39 f1                	cmp    %esi,%ecx
+ 7c5:	75 d8                	jne    79f <free+0x4f>
+    p->s.size += bp->s.size;
+ 7c7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 7ca:	a3 e0 0e 00 00       	mov    %eax,0xee0
+    p->s.size += bp->s.size;
+ 7cf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 7d2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 7d5:	89 10                	mov    %edx,(%eax)
+}
+ 7d7:	5b                   	pop    %ebx
+ 7d8:	5e                   	pop    %esi
+ 7d9:	5f                   	pop    %edi
+ 7da:	5d                   	pop    %ebp
+ 7db:	c3                   	ret    
+ 7dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000007e0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7e0:	f3 0f 1e fb          	endbr32 
+ 7e4:	55                   	push   %ebp
+ 7e5:	89 e5                	mov    %esp,%ebp
+ 7e7:	57                   	push   %edi
+ 7e8:	56                   	push   %esi
+ 7e9:	53                   	push   %ebx
+ 7ea:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7ed:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7f0:	8b 3d e0 0e 00 00    	mov    0xee0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7f6:	8d 70 07             	lea    0x7(%eax),%esi
+ 7f9:	c1 ee 03             	shr    $0x3,%esi
+ 7fc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 7ff:	85 ff                	test   %edi,%edi
+ 801:	0f 84 a9 00 00 00    	je     8b0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 807:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 809:	8b 48 04             	mov    0x4(%eax),%ecx
+ 80c:	39 f1                	cmp    %esi,%ecx
+ 80e:	73 6d                	jae    87d <malloc+0x9d>
+ 810:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 816:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 81b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 81e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 825:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 828:	eb 17                	jmp    841 <malloc+0x61>
+ 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 830:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 832:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 835:	39 f1                	cmp    %esi,%ecx
+ 837:	73 4f                	jae    888 <malloc+0xa8>
+ 839:	8b 3d e0 0e 00 00    	mov    0xee0,%edi
+ 83f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 841:	39 c7                	cmp    %eax,%edi
+ 843:	75 eb                	jne    830 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 845:	83 ec 0c             	sub    $0xc,%esp
+ 848:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 84b:	e8 2b fc ff ff       	call   47b <sbrk>
+  if(p == (char*)-1)
+ 850:	83 c4 10             	add    $0x10,%esp
+ 853:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 856:	74 1b                	je     873 <malloc+0x93>
+  hp->s.size = nu;
+ 858:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 85b:	83 ec 0c             	sub    $0xc,%esp
+ 85e:	83 c0 08             	add    $0x8,%eax
+ 861:	50                   	push   %eax
+ 862:	e8 e9 fe ff ff       	call   750 <free>
+  return freep;
+ 867:	a1 e0 0e 00 00       	mov    0xee0,%eax
+      if((p = morecore(nunits)) == 0)
+ 86c:	83 c4 10             	add    $0x10,%esp
+ 86f:	85 c0                	test   %eax,%eax
+ 871:	75 bd                	jne    830 <malloc+0x50>
+        return 0;
+  }
+}
+ 873:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 876:	31 c0                	xor    %eax,%eax
+}
+ 878:	5b                   	pop    %ebx
+ 879:	5e                   	pop    %esi
+ 87a:	5f                   	pop    %edi
+ 87b:	5d                   	pop    %ebp
+ 87c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 87d:	89 c2                	mov    %eax,%edx
+ 87f:	89 f8                	mov    %edi,%eax
+ 881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 888:	39 ce                	cmp    %ecx,%esi
+ 88a:	74 54                	je     8e0 <malloc+0x100>
+        p->s.size -= nunits;
+ 88c:	29 f1                	sub    %esi,%ecx
+ 88e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 891:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 894:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 897:	a3 e0 0e 00 00       	mov    %eax,0xee0
+}
+ 89c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 89f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 8a2:	5b                   	pop    %ebx
+ 8a3:	5e                   	pop    %esi
+ 8a4:	5f                   	pop    %edi
+ 8a5:	5d                   	pop    %ebp
+ 8a6:	c3                   	ret    
+ 8a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ae:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 8b0:	c7 05 e0 0e 00 00 e4 	movl   $0xee4,0xee0
+ 8b7:	0e 00 00 
+    base.s.size = 0;
+ 8ba:	bf e4 0e 00 00       	mov    $0xee4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 8bf:	c7 05 e4 0e 00 00 e4 	movl   $0xee4,0xee4
+ 8c6:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8c9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 8cb:	c7 05 e8 0e 00 00 00 	movl   $0x0,0xee8
+ 8d2:	00 00 00 
+    if(p->s.size >= nunits){
+ 8d5:	e9 36 ff ff ff       	jmp    810 <malloc+0x30>
+ 8da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 8e0:	8b 0a                	mov    (%edx),%ecx
+ 8e2:	89 08                	mov    %ecx,(%eax)
+ 8e4:	eb b1                	jmp    897 <malloc+0xb7>
+ 8e6:	66 90                	xchg   %ax,%ax
+ 8e8:	66 90                	xchg   %ax,%ax
+ 8ea:	66 90                	xchg   %ax,%ax
+ 8ec:	66 90                	xchg   %ax,%ax
+ 8ee:	66 90                	xchg   %ax,%ax
+
+000008f0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 8f0:	f3 0f 1e fb          	endbr32 
+ 8f4:	55                   	push   %ebp
+ 8f5:	b8 04 0f 00 00       	mov    $0xf04,%eax
+ 8fa:	89 e5                	mov    %esp,%ebp
+ 8fc:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 8ff:	89 15 00 0f 00 00    	mov    %edx,0xf00
+    for (mti=1; mti<N; mti++)
+ 905:	eb 0c                	jmp    913 <sgenrand+0x23>
+ 907:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 90e:	66 90                	xchg   %ax,%ax
+ 910:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 913:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 919:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 91b:	3d bc 18 00 00       	cmp    $0x18bc,%eax
+ 920:	75 ee                	jne    910 <sgenrand+0x20>
+ 922:	c7 05 d8 0e 00 00 70 	movl   $0x270,0xed8
+ 929:	02 00 00 
+}
+ 92c:	5d                   	pop    %ebp
+ 92d:	c3                   	ret    
+ 92e:	66 90                	xchg   %ax,%ax
+
+00000930 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 930:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 934:	a1 d8 0e 00 00       	mov    0xed8,%eax
+ 939:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 93e:	7f 3c                	jg     97c <genrand+0x4c>
+ 940:	8d 50 01             	lea    0x1(%eax),%edx
+ 943:	8b 04 85 00 0f 00 00 	mov    0xf00(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 94a:	89 15 d8 0e 00 00    	mov    %edx,0xed8
+    y ^= TEMPERING_SHIFT_U(y);
+ 950:	89 c2                	mov    %eax,%edx
+ 952:	c1 ea 0b             	shr    $0xb,%edx
+ 955:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 957:	89 d0                	mov    %edx,%eax
+ 959:	c1 e0 07             	shl    $0x7,%eax
+ 95c:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 961:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 963:	89 d0                	mov    %edx,%eax
+ 965:	c1 e0 0f             	shl    $0xf,%eax
+ 968:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 96d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 96f:	89 c2                	mov    %eax,%edx
+ 971:	c1 ea 12             	shr    $0x12,%edx
+ 974:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 976:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 97b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 97c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 981:	0f 84 d2 00 00 00    	je     a59 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 987:	31 c0                	xor    %eax,%eax
+ 989:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 990:	8b 0c 85 00 0f 00 00 	mov    0xf00(,%eax,4),%ecx
+ 997:	83 c0 01             	add    $0x1,%eax
+ 99a:	8b 14 85 00 0f 00 00 	mov    0xf00(,%eax,4),%edx
+ 9a1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9a7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9ad:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9af:	89 d1                	mov    %edx,%ecx
+ 9b1:	83 e2 01             	and    $0x1,%edx
+ 9b4:	d1 e9                	shr    %ecx
+ 9b6:	33 0c 85 30 15 00 00 	xor    0x1530(,%eax,4),%ecx
+ 9bd:	33 0c 95 74 0b 00 00 	xor    0xb74(,%edx,4),%ecx
+ 9c4:	89 0c 85 fc 0e 00 00 	mov    %ecx,0xefc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 9cb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 9d0:	75 be                	jne    990 <genrand+0x60>
+ 9d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 9d8:	8b 0c 85 00 0f 00 00 	mov    0xf00(,%eax,4),%ecx
+ 9df:	83 c0 01             	add    $0x1,%eax
+ 9e2:	8b 14 85 00 0f 00 00 	mov    0xf00(,%eax,4),%edx
+ 9e9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9ef:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9f5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9f7:	89 d1                	mov    %edx,%ecx
+ 9f9:	83 e2 01             	and    $0x1,%edx
+ 9fc:	d1 e9                	shr    %ecx
+ 9fe:	33 0c 85 70 0b 00 00 	xor    0xb70(,%eax,4),%ecx
+ a05:	33 0c 95 74 0b 00 00 	xor    0xb74(,%edx,4),%ecx
+ a0c:	89 0c 85 fc 0e 00 00 	mov    %ecx,0xefc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ a13:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ a18:	75 be                	jne    9d8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ a1a:	a1 00 0f 00 00       	mov    0xf00,%eax
+ a1f:	8b 0d bc 18 00 00    	mov    0x18bc,%ecx
+ a25:	89 c2                	mov    %eax,%edx
+ a27:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a2d:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a33:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ a35:	89 ca                	mov    %ecx,%edx
+ a37:	83 e1 01             	and    $0x1,%ecx
+ a3a:	d1 ea                	shr    %edx
+ a3c:	33 15 30 15 00 00    	xor    0x1530,%edx
+ a42:	33 14 8d 74 0b 00 00 	xor    0xb74(,%ecx,4),%edx
+ a49:	89 15 bc 18 00 00    	mov    %edx,0x18bc
+ a4f:	ba 01 00 00 00       	mov    $0x1,%edx
+ a54:	e9 f1 fe ff ff       	jmp    94a <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ a59:	b8 04 0f 00 00       	mov    $0xf04,%eax
+ a5e:	b9 bc 18 00 00       	mov    $0x18bc,%ecx
+ a63:	ba 05 11 00 00       	mov    $0x1105,%edx
+ a68:	c7 05 00 0f 00 00 05 	movl   $0x1105,0xf00
+ a6f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ a72:	eb 07                	jmp    a7b <genrand+0x14b>
+ a74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a78:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a7b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a81:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a83:	39 c1                	cmp    %eax,%ecx
+ a85:	75 f1                	jne    a78 <genrand+0x148>
+ a87:	e9 fb fe ff ff       	jmp    987 <genrand+0x57>
+ a8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a90 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a90:	f3 0f 1e fb          	endbr32 
+ a94:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a95:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a97:	89 e5                	mov    %esp,%ebp
+ a99:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a9a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a9d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a9e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ aa3:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ aa6:	89 d8                	mov    %ebx,%eax
+ aa8:	f7 f1                	div    %ecx
+ aaa:	89 c6                	mov    %eax,%esi
+ aac:	29 d3                	sub    %edx,%ebx
+ aae:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ ab0:	e8 7b fe ff ff       	call   930 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ ab5:	39 d8                	cmp    %ebx,%eax
+ ab7:	73 f7                	jae    ab0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ ab9:	31 d2                	xor    %edx,%edx
+}
+ abb:	5b                   	pop    %ebx
+  return x/bin_size;
+ abc:	f7 f6                	div    %esi
+}
+ abe:	5e                   	pop    %esi
+ abf:	5d                   	pop    %ebp
+ ac0:	c3                   	ret    
+ ac1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ ac8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ acf:	90                   	nop
+
+00000ad0 <randomrange>:
+
+int randomrange(int low, int high){
+ ad0:	f3 0f 1e fb          	endbr32 
+ ad4:	55                   	push   %ebp
+ ad5:	89 e5                	mov    %esp,%ebp
+ ad7:	57                   	push   %edi
+ ad8:	56                   	push   %esi
+ ad9:	53                   	push   %ebx
+ ada:	83 ec 0c             	sub    $0xc,%esp
+ add:	8b 75 08             	mov    0x8(%ebp),%esi
+ ae0:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ ae3:	39 f0                	cmp    %esi,%eax
+ ae5:	7d 06                	jge    aed <randomrange+0x1d>
+ ae7:	89 f2                	mov    %esi,%edx
+ ae9:	89 c6                	mov    %eax,%esi
+ aeb:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ aed:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ aef:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ af4:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ af6:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ af9:	89 d8                	mov    %ebx,%eax
+ afb:	f7 f1                	div    %ecx
+ afd:	89 c7                	mov    %eax,%edi
+ aff:	29 d3                	sub    %edx,%ebx
+ b01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ b08:	e8 23 fe ff ff       	call   930 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ b0d:	39 d8                	cmp    %ebx,%eax
+ b0f:	73 f7                	jae    b08 <randomrange+0x38>
+  return x/bin_size;
+ b11:	31 d2                	xor    %edx,%edx
+  return val;
+ b13:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ b16:	f7 f7                	div    %edi
+ b18:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ b19:	01 f0                	add    %esi,%eax
+ b1b:	5e                   	pop    %esi
+ b1c:	5f                   	pop    %edi
+ b1d:	5d                   	pop    %ebp
+ b1e:	c3                   	ret    
diff -ruN xv6-public/wc.d xv6-public-partB_sjf/wc.d
--- xv6-public/wc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/wc.d	2022-10-07 20:27:45.079125000 +0530
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/wc.o and xv6-public-partB_sjf/wc.o differ
diff -ruN xv6-public/wc.sym xv6-public-partB_sjf/wc.sym
--- xv6-public/wc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/wc.sym	2022-10-07 20:27:45.107125000 +0530
@@ -0,0 +1,75 @@
+00000000 .text
+00000b20 .rodata
+00000b7c .eh_frame
+00000ed8 .data
+00000ee0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+000004d0 printint
+00000b60 digits.1105
+00000000 umalloc.c
+00000ee0 freep
+00000ee4 base
+00000000 random.c
+00000f00 mt
+00000ed8 mti
+00000b74 mag01.989
+00000190 strcpy
+000008f0 sgenrand
+00000580 printf
+000003c0 memmove
+0000043b mknod
+000002b0 gets
+00000473 getpid
+000007e0 malloc
+00000483 sleep
+000004b3 get_burst_time
+00000a90 random_at_most
+000004bb getCurrentInfo
+00000403 pipe
+00000413 write
+0000044b fstat
+00000423 kill
+00000463 chdir
+0000042b exec
+000003fb wait
+0000040b read
+00000443 unlink
+000000a0 wc
+000003eb fork
+0000047b sbrk
+0000048b uptime
+00000edc __bss_start
+00000250 memset
+00000000 main
+000004ab set_burst_time
+000001c0 strcmp
+0000046b dup
+000018c0 buf
+00000930 genrand
+00000493 getNumProc
+000004a3 getProcInfo
+00000330 stat
+00000edc _edata
+00001ac0 _end
+00000453 link
+000003f3 exit
+0000049b getMaxPID
+00000380 atoi
+00000210 strlen
+00000433 open
+00000270 strchr
+000004c3 getCurrentPID
+00000ad0 randomrange
+0000045b mkdir
+0000041b close
+00000750 free
Binary files xv6-public/xv6.img and xv6-public-partB_sjf/xv6.img differ
Binary files xv6-public/_zombie and xv6-public-partB_sjf/_zombie differ
diff -ruN xv6-public/zombie.asm xv6-public-partB_sjf/zombie.asm
--- xv6-public/zombie.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/zombie.asm	2022-10-07 20:27:45.151125000 +0530
@@ -0,0 +1,1478 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  15:	e8 71 02 00 00       	call   28b <fork>
+  1a:	85 c0                	test   %eax,%eax
+  1c:	7e 0d                	jle    2b <main+0x2b>
+    sleep(5);  // Let child exit before parent.
+  1e:	83 ec 0c             	sub    $0xc,%esp
+  21:	6a 05                	push   $0x5
+  23:	e8 fb 02 00 00       	call   323 <sleep>
+  28:	83 c4 10             	add    $0x10,%esp
+  exit();
+  2b:	e8 63 02 00 00       	call   293 <exit>
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	f3 0f 1e fb          	endbr32 
+  34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  35:	31 c0                	xor    %eax,%eax
+{
+  37:	89 e5                	mov    %esp,%ebp
+  39:	53                   	push   %ebx
+  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	89 c8                	mov    %ecx,%eax
+  50:	5b                   	pop    %ebx
+  51:	5d                   	pop    %ebp
+  52:	c3                   	ret    
+  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	53                   	push   %ebx
+  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  6e:	0f b6 01             	movzbl (%ecx),%eax
+  71:	0f b6 1a             	movzbl (%edx),%ebx
+  74:	84 c0                	test   %al,%al
+  76:	75 19                	jne    91 <strcmp+0x31>
+  78:	eb 26                	jmp    a0 <strcmp+0x40>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  84:	83 c1 01             	add    $0x1,%ecx
+  87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  8a:	0f b6 1a             	movzbl (%edx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	38 d8                	cmp    %bl,%al
+  93:	74 eb                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  95:	29 d8                	sub    %ebx,%eax
+}
+  97:	5b                   	pop    %ebx
+  98:	5d                   	pop    %ebp
+  99:	c3                   	ret    
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ae:	66 90                	xchg   %ax,%ax
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ba:	80 3a 00             	cmpb   $0x0,(%edx)
+  bd:	74 21                	je     e0 <strlen+0x30>
+  bf:	31 c0                	xor    %eax,%eax
+  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c8:	83 c0 01             	add    $0x1,%eax
+  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  cf:	89 c1                	mov    %eax,%ecx
+  d1:	75 f5                	jne    c8 <strlen+0x18>
+    ;
+  return n;
+}
+  d3:	89 c8                	mov    %ecx,%eax
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	57                   	push   %edi
+  f8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 101:	89 d7                	mov    %edx,%edi
+ 103:	fc                   	cld    
+ 104:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 106:	89 d0                	mov    %edx,%eax
+ 108:	5f                   	pop    %edi
+ 109:	5d                   	pop    %ebp
+ 10a:	c3                   	ret    
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11e:	0f b6 10             	movzbl (%eax),%edx
+ 121:	84 d2                	test   %dl,%dl
+ 123:	75 16                	jne    13b <strchr+0x2b>
+ 125:	eb 21                	jmp    148 <strchr+0x38>
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+ 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 134:	83 c0 01             	add    $0x1,%eax
+ 137:	84 d2                	test   %dl,%dl
+ 139:	74 0d                	je     148 <strchr+0x38>
+    if(*s == c)
+ 13b:	38 d1                	cmp    %dl,%cl
+ 13d:	75 f1                	jne    130 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 13f:	5d                   	pop    %ebp
+ 140:	c3                   	ret    
+ 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 148:	31 c0                	xor    %eax,%eax
+}
+ 14a:	5d                   	pop    %ebp
+ 14b:	c3                   	ret    
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	57                   	push   %edi
+ 158:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 159:	31 f6                	xor    %esi,%esi
+{
+ 15b:	53                   	push   %ebx
+ 15c:	89 f3                	mov    %esi,%ebx
+ 15e:	83 ec 1c             	sub    $0x1c,%esp
+ 161:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 164:	eb 33                	jmp    199 <gets+0x49>
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 176:	6a 01                	push   $0x1
+ 178:	50                   	push   %eax
+ 179:	6a 00                	push   $0x0
+ 17b:	e8 2b 01 00 00       	call   2ab <read>
+    if(cc < 1)
+ 180:	83 c4 10             	add    $0x10,%esp
+ 183:	85 c0                	test   %eax,%eax
+ 185:	7e 1c                	jle    1a3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 18b:	83 c7 01             	add    $0x1,%edi
+ 18e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 191:	3c 0a                	cmp    $0xa,%al
+ 193:	74 23                	je     1b8 <gets+0x68>
+ 195:	3c 0d                	cmp    $0xd,%al
+ 197:	74 1f                	je     1b8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 199:	83 c3 01             	add    $0x1,%ebx
+ 19c:	89 fe                	mov    %edi,%esi
+ 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a1:	7c cd                	jl     170 <gets+0x20>
+ 1a3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1a8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ae:	5b                   	pop    %ebx
+ 1af:	5e                   	pop    %esi
+ 1b0:	5f                   	pop    %edi
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b7:	90                   	nop
+ 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1be:	01 de                	add    %ebx,%esi
+ 1c0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1c2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c8:	5b                   	pop    %ebx
+ 1c9:	5e                   	pop    %esi
+ 1ca:	5f                   	pop    %edi
+ 1cb:	5d                   	pop    %ebp
+ 1cc:	c3                   	ret    
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	56                   	push   %esi
+ 1d8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	6a 00                	push   $0x0
+ 1de:	ff 75 08             	pushl  0x8(%ebp)
+ 1e1:	e8 ed 00 00 00       	call   2d3 <open>
+  if(fd < 0)
+ 1e6:	83 c4 10             	add    $0x10,%esp
+ 1e9:	85 c0                	test   %eax,%eax
+ 1eb:	78 2b                	js     218 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 1ed:	83 ec 08             	sub    $0x8,%esp
+ 1f0:	ff 75 0c             	pushl  0xc(%ebp)
+ 1f3:	89 c3                	mov    %eax,%ebx
+ 1f5:	50                   	push   %eax
+ 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
+  close(fd);
+ 1fb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1fe:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 200:	e8 b6 00 00 00       	call   2bb <close>
+  return r;
+ 205:	83 c4 10             	add    $0x10,%esp
+}
+ 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20b:	89 f0                	mov    %esi,%eax
+ 20d:	5b                   	pop    %ebx
+ 20e:	5e                   	pop    %esi
+ 20f:	5d                   	pop    %ebp
+ 210:	c3                   	ret    
+ 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 21d:	eb e9                	jmp    208 <stat+0x38>
+ 21f:	90                   	nop
+
+00000220 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	53                   	push   %ebx
+ 228:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22b:	0f be 02             	movsbl (%edx),%eax
+ 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 231:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 234:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 239:	77 1a                	ja     255 <atoi+0x35>
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 240:	83 c2 01             	add    $0x1,%edx
+ 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 24a:	0f be 02             	movsbl (%edx),%eax
+ 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 250:	80 fb 09             	cmp    $0x9,%bl
+ 253:	76 eb                	jbe    240 <atoi+0x20>
+  return n;
+}
+ 255:	89 c8                	mov    %ecx,%eax
+ 257:	5b                   	pop    %ebx
+ 258:	5d                   	pop    %ebp
+ 259:	c3                   	ret    
+ 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000260 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	8b 45 10             	mov    0x10(%ebp),%eax
+ 26b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26e:	56                   	push   %esi
+ 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 272:	85 c0                	test   %eax,%eax
+ 274:	7e 0f                	jle    285 <memmove+0x25>
+ 276:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 278:	89 d7                	mov    %edx,%edi
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 281:	39 f8                	cmp    %edi,%eax
+ 283:	75 fb                	jne    280 <memmove+0x20>
+  return vdst;
+}
+ 285:	5e                   	pop    %esi
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+
+0000028b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <exit>:
+SYSCALL(exit)
+ 293:	b8 02 00 00 00       	mov    $0x2,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <wait>:
+SYSCALL(wait)
+ 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <pipe>:
+SYSCALL(pipe)
+ 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <read>:
+SYSCALL(read)
+ 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <write>:
+SYSCALL(write)
+ 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <close>:
+SYSCALL(close)
+ 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <kill>:
+SYSCALL(kill)
+ 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exec>:
+SYSCALL(exec)
+ 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <open>:
+SYSCALL(open)
+ 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <mknod>:
+SYSCALL(mknod)
+ 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <unlink>:
+SYSCALL(unlink)
+ 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <fstat>:
+SYSCALL(fstat)
+ 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <link>:
+SYSCALL(link)
+ 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mkdir>:
+SYSCALL(mkdir)
+ 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <chdir>:
+SYSCALL(chdir)
+ 303:	b8 09 00 00 00       	mov    $0x9,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <dup>:
+SYSCALL(dup)
+ 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <getpid>:
+SYSCALL(getpid)
+ 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <sbrk>:
+SYSCALL(sbrk)
+ 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <sleep>:
+SYSCALL(sleep)
+ 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <uptime>:
+SYSCALL(uptime)
+ 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getNumProc>:
+SYSCALL(getNumProc)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <getMaxPID>:
+SYSCALL(getMaxPID)
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 343:	b8 18 00 00 00       	mov    $0x18,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 34b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 353:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 35b:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getCurrentPID>:
+ 363:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	83 ec 3c             	sub    $0x3c,%esp
+ 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 37c:	89 d1                	mov    %edx,%ecx
+{
+ 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 381:	85 d2                	test   %edx,%edx
+ 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
+ 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 38d:	74 79                	je     408 <printint+0x98>
+    neg = 1;
+ 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 396:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 398:	31 db                	xor    %ebx,%ebx
+ 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 39d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a0:	89 c8                	mov    %ecx,%eax
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	89 cf                	mov    %ecx,%edi
+ 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3a9:	0f b6 92 c8 09 00 00 	movzbl 0x9c8(%edx),%edx
+ 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3b3:	89 d8                	mov    %ebx,%eax
+ 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3c1:	76 dd                	jbe    3a0 <printint+0x30>
+  if(neg)
+ 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3c6:	85 c9                	test   %ecx,%ecx
+ 3c8:	74 0c                	je     3d6 <printint+0x66>
+    buf[i++] = '-';
+ 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3dd:	eb 07                	jmp    3e6 <printint+0x76>
+ 3df:	90                   	nop
+ 3e0:	0f b6 13             	movzbl (%ebx),%edx
+ 3e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3e6:	83 ec 04             	sub    $0x4,%esp
+ 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3ec:	6a 01                	push   $0x1
+ 3ee:	56                   	push   %esi
+ 3ef:	57                   	push   %edi
+ 3f0:	e8 be fe ff ff       	call   2b3 <write>
+  while(--i >= 0)
+ 3f5:	83 c4 10             	add    $0x10,%esp
+ 3f8:	39 de                	cmp    %ebx,%esi
+ 3fa:	75 e4                	jne    3e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ff:	5b                   	pop    %ebx
+ 400:	5e                   	pop    %esi
+ 401:	5f                   	pop    %edi
+ 402:	5d                   	pop    %ebp
+ 403:	c3                   	ret    
+ 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 40f:	eb 87                	jmp    398 <printint+0x28>
+ 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	57                   	push   %edi
+ 428:	56                   	push   %esi
+ 429:	53                   	push   %ebx
+ 42a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 42d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 430:	0f b6 1e             	movzbl (%esi),%ebx
+ 433:	84 db                	test   %bl,%bl
+ 435:	0f 84 b4 00 00 00    	je     4ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 43b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 43e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 441:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 444:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 449:	eb 33                	jmp    47e <printf+0x5e>
+ 44b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+ 450:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 453:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 458:	83 f8 25             	cmp    $0x25,%eax
+ 45b:	74 17                	je     474 <printf+0x54>
+  write(fd, &c, 1);
+ 45d:	83 ec 04             	sub    $0x4,%esp
+ 460:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	ff 75 08             	pushl  0x8(%ebp)
+ 469:	e8 45 fe ff ff       	call   2b3 <write>
+ 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 471:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 474:	0f b6 1e             	movzbl (%esi),%ebx
+ 477:	83 c6 01             	add    $0x1,%esi
+ 47a:	84 db                	test   %bl,%bl
+ 47c:	74 71                	je     4ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 47e:	0f be cb             	movsbl %bl,%ecx
+ 481:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 484:	85 d2                	test   %edx,%edx
+ 486:	74 c8                	je     450 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 488:	83 fa 25             	cmp    $0x25,%edx
+ 48b:	75 e7                	jne    474 <printf+0x54>
+      if(c == 'd'){
+ 48d:	83 f8 64             	cmp    $0x64,%eax
+ 490:	0f 84 9a 00 00 00    	je     530 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 496:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49c:	83 f9 70             	cmp    $0x70,%ecx
+ 49f:	74 5f                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a1:	83 f8 73             	cmp    $0x73,%eax
+ 4a4:	0f 84 d6 00 00 00    	je     580 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4aa:	83 f8 63             	cmp    $0x63,%eax
+ 4ad:	0f 84 8d 00 00 00    	je     540 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b3:	83 f8 25             	cmp    $0x25,%eax
+ 4b6:	0f 84 b4 00 00 00    	je     570 <printf+0x150>
+  write(fd, &c, 1);
+ 4bc:	83 ec 04             	sub    $0x4,%esp
+ 4bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c3:	6a 01                	push   $0x1
+ 4c5:	57                   	push   %edi
+ 4c6:	ff 75 08             	pushl  0x8(%ebp)
+ 4c9:	e8 e5 fd ff ff       	call   2b3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4d1:	83 c4 0c             	add    $0xc,%esp
+ 4d4:	6a 01                	push   $0x1
+ 4d6:	83 c6 01             	add    $0x1,%esi
+ 4d9:	57                   	push   %edi
+ 4da:	ff 75 08             	pushl  0x8(%ebp)
+ 4dd:	e8 d1 fd ff ff       	call   2b3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4eb:	84 db                	test   %bl,%bl
+ 4ed:	75 8f                	jne    47e <printf+0x5e>
+    }
+  }
+}
+ 4ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f2:	5b                   	pop    %ebx
+ 4f3:	5e                   	pop    %esi
+ 4f4:	5f                   	pop    %edi
+ 4f5:	5d                   	pop    %ebp
+ 4f6:	c3                   	ret    
+ 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 510:	8b 13                	mov    (%ebx),%edx
+ 512:	e8 59 fe ff ff       	call   370 <printint>
+        ap++;
+ 517:	89 d8                	mov    %ebx,%eax
+ 519:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 51c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 51e:	83 c0 04             	add    $0x4,%eax
+ 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 524:	e9 4b ff ff ff       	jmp    474 <printf+0x54>
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 538:	6a 01                	push   $0x1
+ 53a:	eb ce                	jmp    50a <printf+0xea>
+ 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 543:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 546:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 548:	6a 01                	push   $0x1
+        ap++;
+ 54a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 54d:	57                   	push   %edi
+ 54e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 551:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 554:	e8 5a fd ff ff       	call   2b3 <write>
+        ap++;
+ 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 55c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55f:	31 d2                	xor    %edx,%edx
+ 561:	e9 0e ff ff ff       	jmp    474 <printf+0x54>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 570:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+ 576:	e9 59 ff ff ff       	jmp    4d4 <printf+0xb4>
+ 57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
+        s = (char*)*ap;
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 583:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 585:	83 c0 04             	add    $0x4,%eax
+ 588:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 58b:	85 db                	test   %ebx,%ebx
+ 58d:	74 17                	je     5a6 <printf+0x186>
+        while(*s != 0){
+ 58f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 592:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 594:	84 c0                	test   %al,%al
+ 596:	0f 84 d8 fe ff ff    	je     474 <printf+0x54>
+ 59c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59f:	89 de                	mov    %ebx,%esi
+ 5a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a4:	eb 1a                	jmp    5c0 <printf+0x1a0>
+          s = "(null)";
+ 5a6:	bb c0 09 00 00       	mov    $0x9c0,%ebx
+        while(*s != 0){
+ 5ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5b3:	89 de                	mov    %ebx,%esi
+ 5b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+  write(fd, &c, 1);
+ 5c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5c3:	83 c6 01             	add    $0x1,%esi
+ 5c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c9:	6a 01                	push   $0x1
+ 5cb:	57                   	push   %edi
+ 5cc:	53                   	push   %ebx
+ 5cd:	e8 e1 fc ff ff       	call   2b3 <write>
+        while(*s != 0){
+ 5d2:	0f b6 06             	movzbl (%esi),%eax
+ 5d5:	83 c4 10             	add    $0x10,%esp
+ 5d8:	84 c0                	test   %al,%al
+ 5da:	75 e4                	jne    5c0 <printf+0x1a0>
+ 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 8e fe ff ff       	jmp    474 <printf+0x54>
+ 5e6:	66 90                	xchg   %ax,%ax
+ 5e8:	66 90                	xchg   %ax,%ax
+ 5ea:	66 90                	xchg   %ax,%ax
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	f3 0f 1e fb          	endbr32 
+ 5f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f5:	a1 20 0d 00 00       	mov    0xd20,%eax
+{
+ 5fa:	89 e5                	mov    %esp,%ebp
+ 5fc:	57                   	push   %edi
+ 5fd:	56                   	push   %esi
+ 5fe:	53                   	push   %ebx
+ 5ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 602:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 604:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 607:	39 c8                	cmp    %ecx,%eax
+ 609:	73 15                	jae    620 <free+0x30>
+ 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+ 610:	39 d1                	cmp    %edx,%ecx
+ 612:	72 14                	jb     628 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 d0                	cmp    %edx,%eax
+ 616:	73 10                	jae    628 <free+0x38>
+{
+ 618:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 61a:	8b 10                	mov    (%eax),%edx
+ 61c:	39 c8                	cmp    %ecx,%eax
+ 61e:	72 f0                	jb     610 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 d0                	cmp    %edx,%eax
+ 622:	72 f4                	jb     618 <free+0x28>
+ 624:	39 d1                	cmp    %edx,%ecx
+ 626:	73 f0                	jae    618 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 fa                	cmp    %edi,%edx
+ 630:	74 1e                	je     650 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 632:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 635:	8b 50 04             	mov    0x4(%eax),%edx
+ 638:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 28                	je     667 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 63f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 641:	5b                   	pop    %ebx
+  freep = p;
+ 642:	a3 20 0d 00 00       	mov    %eax,0xd20
+}
+ 647:	5e                   	pop    %esi
+ 648:	5f                   	pop    %edi
+ 649:	5d                   	pop    %ebp
+ 64a:	c3                   	ret    
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 650:	03 72 04             	add    0x4(%edx),%esi
+ 653:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 656:	8b 10                	mov    (%eax),%edx
+ 658:	8b 12                	mov    (%edx),%edx
+ 65a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65d:	8b 50 04             	mov    0x4(%eax),%edx
+ 660:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 663:	39 f1                	cmp    %esi,%ecx
+ 665:	75 d8                	jne    63f <free+0x4f>
+    p->s.size += bp->s.size;
+ 667:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 66a:	a3 20 0d 00 00       	mov    %eax,0xd20
+    p->s.size += bp->s.size;
+ 66f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 672:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 675:	89 10                	mov    %edx,(%eax)
+}
+ 677:	5b                   	pop    %ebx
+ 678:	5e                   	pop    %esi
+ 679:	5f                   	pop    %edi
+ 67a:	5d                   	pop    %ebp
+ 67b:	c3                   	ret    
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	f3 0f 1e fb          	endbr32 
+ 684:	55                   	push   %ebp
+ 685:	89 e5                	mov    %esp,%ebp
+ 687:	57                   	push   %edi
+ 688:	56                   	push   %esi
+ 689:	53                   	push   %ebx
+ 68a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 68d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 690:	8b 3d 20 0d 00 00    	mov    0xd20,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 696:	8d 70 07             	lea    0x7(%eax),%esi
+ 699:	c1 ee 03             	shr    $0x3,%esi
+ 69c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69f:	85 ff                	test   %edi,%edi
+ 6a1:	0f 84 a9 00 00 00    	je     750 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ac:	39 f1                	cmp    %esi,%ecx
+ 6ae:	73 6d                	jae    71d <malloc+0x9d>
+ 6b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6c8:	eb 17                	jmp    6e1 <malloc+0x61>
+ 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	73 4f                	jae    728 <malloc+0xa8>
+ 6d9:	8b 3d 20 0d 00 00    	mov    0xd20,%edi
+ 6df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6e1:	39 c7                	cmp    %eax,%edi
+ 6e3:	75 eb                	jne    6d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6e5:	83 ec 0c             	sub    $0xc,%esp
+ 6e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6eb:	e8 2b fc ff ff       	call   31b <sbrk>
+  if(p == (char*)-1)
+ 6f0:	83 c4 10             	add    $0x10,%esp
+ 6f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6f6:	74 1b                	je     713 <malloc+0x93>
+  hp->s.size = nu;
+ 6f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6fb:	83 ec 0c             	sub    $0xc,%esp
+ 6fe:	83 c0 08             	add    $0x8,%eax
+ 701:	50                   	push   %eax
+ 702:	e8 e9 fe ff ff       	call   5f0 <free>
+  return freep;
+ 707:	a1 20 0d 00 00       	mov    0xd20,%eax
+      if((p = morecore(nunits)) == 0)
+ 70c:	83 c4 10             	add    $0x10,%esp
+ 70f:	85 c0                	test   %eax,%eax
+ 711:	75 bd                	jne    6d0 <malloc+0x50>
+        return 0;
+  }
+}
+ 713:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 716:	31 c0                	xor    %eax,%eax
+}
+ 718:	5b                   	pop    %ebx
+ 719:	5e                   	pop    %esi
+ 71a:	5f                   	pop    %edi
+ 71b:	5d                   	pop    %ebp
+ 71c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 71d:	89 c2                	mov    %eax,%edx
+ 71f:	89 f8                	mov    %edi,%eax
+ 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 728:	39 ce                	cmp    %ecx,%esi
+ 72a:	74 54                	je     780 <malloc+0x100>
+        p->s.size -= nunits;
+ 72c:	29 f1                	sub    %esi,%ecx
+ 72e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 731:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 734:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 737:	a3 20 0d 00 00       	mov    %eax,0xd20
+}
+ 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 73f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 742:	5b                   	pop    %ebx
+ 743:	5e                   	pop    %esi
+ 744:	5f                   	pop    %edi
+ 745:	5d                   	pop    %ebp
+ 746:	c3                   	ret    
+ 747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 750:	c7 05 20 0d 00 00 24 	movl   $0xd24,0xd20
+ 757:	0d 00 00 
+    base.s.size = 0;
+ 75a:	bf 24 0d 00 00       	mov    $0xd24,%edi
+    base.s.ptr = freep = prevp = &base;
+ 75f:	c7 05 24 0d 00 00 24 	movl   $0xd24,0xd24
+ 766:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 769:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 76b:	c7 05 28 0d 00 00 00 	movl   $0x0,0xd28
+ 772:	00 00 00 
+    if(p->s.size >= nunits){
+ 775:	e9 36 ff ff ff       	jmp    6b0 <malloc+0x30>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 0a                	mov    (%edx),%ecx
+ 782:	89 08                	mov    %ecx,(%eax)
+ 784:	eb b1                	jmp    737 <malloc+0xb7>
+ 786:	66 90                	xchg   %ax,%ax
+ 788:	66 90                	xchg   %ax,%ax
+ 78a:	66 90                	xchg   %ax,%ax
+ 78c:	66 90                	xchg   %ax,%ax
+ 78e:	66 90                	xchg   %ax,%ax
+
+00000790 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 790:	f3 0f 1e fb          	endbr32 
+ 794:	55                   	push   %ebp
+ 795:	b8 44 0d 00 00       	mov    $0xd44,%eax
+ 79a:	89 e5                	mov    %esp,%ebp
+ 79c:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 79f:	89 15 40 0d 00 00    	mov    %edx,0xd40
+    for (mti=1; mti<N; mti++)
+ 7a5:	eb 0c                	jmp    7b3 <sgenrand+0x23>
+ 7a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ae:	66 90                	xchg   %ax,%ax
+ 7b0:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7b3:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7b9:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7bb:	3d fc 16 00 00       	cmp    $0x16fc,%eax
+ 7c0:	75 ee                	jne    7b0 <sgenrand+0x20>
+ 7c2:	c7 05 00 0d 00 00 70 	movl   $0x270,0xd00
+ 7c9:	02 00 00 
+}
+ 7cc:	5d                   	pop    %ebp
+ 7cd:	c3                   	ret    
+ 7ce:	66 90                	xchg   %ax,%ax
+
+000007d0 <genrand>:
+
+long /* for integer generation */
+genrand()
+{
+ 7d0:	f3 0f 1e fb          	endbr32 
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7d4:	a1 00 0d 00 00       	mov    0xd00,%eax
+ 7d9:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7de:	7f 3c                	jg     81c <genrand+0x4c>
+ 7e0:	8d 50 01             	lea    0x1(%eax),%edx
+ 7e3:	8b 04 85 40 0d 00 00 	mov    0xd40(,%eax,4),%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ea:	89 15 00 0d 00 00    	mov    %edx,0xd00
+    y ^= TEMPERING_SHIFT_U(y);
+ 7f0:	89 c2                	mov    %eax,%edx
+ 7f2:	c1 ea 0b             	shr    $0xb,%edx
+ 7f5:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7f7:	89 d0                	mov    %edx,%eax
+ 7f9:	c1 e0 07             	shl    $0x7,%eax
+ 7fc:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 801:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 803:	89 d0                	mov    %edx,%eax
+ 805:	c1 e0 0f             	shl    $0xf,%eax
+ 808:	25 00 00 c6 ef       	and    $0xefc60000,%eax
+ 80d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_L(y);
+ 80f:	89 c2                	mov    %eax,%edx
+ 811:	c1 ea 12             	shr    $0x12,%edx
+ 814:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 816:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 81b:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 81c:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 821:	0f 84 d2 00 00 00    	je     8f9 <genrand+0x129>
+    mt[0]= seed & 0xffffffff;
+ 827:	31 c0                	xor    %eax,%eax
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 830:	8b 0c 85 40 0d 00 00 	mov    0xd40(,%eax,4),%ecx
+ 837:	83 c0 01             	add    $0x1,%eax
+ 83a:	8b 14 85 40 0d 00 00 	mov    0xd40(,%eax,4),%edx
+ 841:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 847:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 84d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 84f:	89 d1                	mov    %edx,%ecx
+ 851:	83 e2 01             	and    $0x1,%edx
+ 854:	d1 e9                	shr    %ecx
+ 856:	33 0c 85 70 13 00 00 	xor    0x1370(,%eax,4),%ecx
+ 85d:	33 0c 95 dc 09 00 00 	xor    0x9dc(,%edx,4),%ecx
+ 864:	89 0c 85 3c 0d 00 00 	mov    %ecx,0xd3c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 86b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 870:	75 be                	jne    830 <genrand+0x60>
+ 872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 878:	8b 0c 85 40 0d 00 00 	mov    0xd40(,%eax,4),%ecx
+ 87f:	83 c0 01             	add    $0x1,%eax
+ 882:	8b 14 85 40 0d 00 00 	mov    0xd40(,%eax,4),%edx
+ 889:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 88f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 895:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 897:	89 d1                	mov    %edx,%ecx
+ 899:	83 e2 01             	and    $0x1,%edx
+ 89c:	d1 e9                	shr    %ecx
+ 89e:	33 0c 85 b0 09 00 00 	xor    0x9b0(,%eax,4),%ecx
+ 8a5:	33 0c 95 dc 09 00 00 	xor    0x9dc(,%edx,4),%ecx
+ 8ac:	89 0c 85 3c 0d 00 00 	mov    %ecx,0xd3c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8b3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8b8:	75 be                	jne    878 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ba:	a1 40 0d 00 00       	mov    0xd40,%eax
+ 8bf:	8b 0d fc 16 00 00    	mov    0x16fc,%ecx
+ 8c5:	89 c2                	mov    %eax,%edx
+ 8c7:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8cd:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8d3:	09 d1                	or     %edx,%ecx
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8d5:	89 ca                	mov    %ecx,%edx
+ 8d7:	83 e1 01             	and    $0x1,%ecx
+ 8da:	d1 ea                	shr    %edx
+ 8dc:	33 15 70 13 00 00    	xor    0x1370,%edx
+ 8e2:	33 14 8d dc 09 00 00 	xor    0x9dc(,%ecx,4),%edx
+ 8e9:	89 15 fc 16 00 00    	mov    %edx,0x16fc
+ 8ef:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8f4:	e9 f1 fe ff ff       	jmp    7ea <genrand+0x1a>
+    mt[0]= seed & 0xffffffff;
+ 8f9:	b8 44 0d 00 00       	mov    $0xd44,%eax
+ 8fe:	b9 fc 16 00 00       	mov    $0x16fc,%ecx
+ 903:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 908:	c7 05 40 0d 00 00 05 	movl   $0x1105,0xd40
+ 90f:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 912:	eb 07                	jmp    91b <genrand+0x14b>
+ 914:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 918:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 91b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 921:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 923:	39 c1                	cmp    %eax,%ecx
+ 925:	75 f1                	jne    918 <genrand+0x148>
+ 927:	e9 fb fe ff ff       	jmp    827 <genrand+0x57>
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000930 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 930:	f3 0f 1e fb          	endbr32 
+ 934:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 935:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 937:	89 e5                	mov    %esp,%ebp
+ 939:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 93a:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 93d:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 93e:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 943:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 946:	89 d8                	mov    %ebx,%eax
+ 948:	f7 f1                	div    %ecx
+ 94a:	89 c6                	mov    %eax,%esi
+ 94c:	29 d3                	sub    %edx,%ebx
+ 94e:	66 90                	xchg   %ax,%ax
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+ 950:	e8 7b fe ff ff       	call   7d0 <genrand>
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 955:	39 d8                	cmp    %ebx,%eax
+ 957:	73 f7                	jae    950 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 959:	31 d2                	xor    %edx,%edx
+}
+ 95b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 95c:	f7 f6                	div    %esi
+}
+ 95e:	5e                   	pop    %esi
+ 95f:	5d                   	pop    %ebp
+ 960:	c3                   	ret    
+ 961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 96f:	90                   	nop
+
+00000970 <randomrange>:
+
+int randomrange(int low, int high){
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	57                   	push   %edi
+ 978:	56                   	push   %esi
+ 979:	53                   	push   %ebx
+ 97a:	83 ec 0c             	sub    $0xc,%esp
+ 97d:	8b 75 08             	mov    0x8(%ebp),%esi
+ 980:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 983:	39 f0                	cmp    %esi,%eax
+ 985:	7d 06                	jge    98d <randomrange+0x1d>
+ 987:	89 f2                	mov    %esi,%edx
+ 989:	89 c6                	mov    %eax,%esi
+ 98b:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 98d:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 98f:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 994:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 996:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 999:	89 d8                	mov    %ebx,%eax
+ 99b:	f7 f1                	div    %ecx
+ 99d:	89 c7                	mov    %eax,%edi
+ 99f:	29 d3                	sub    %edx,%ebx
+ 9a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+   x = genrand();
+ 9a8:	e8 23 fe ff ff       	call   7d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9ad:	39 d8                	cmp    %ebx,%eax
+ 9af:	73 f7                	jae    9a8 <randomrange+0x38>
+  return x/bin_size;
+ 9b1:	31 d2                	xor    %edx,%edx
+  return val;
+ 9b3:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9b6:	f7 f7                	div    %edi
+ 9b8:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9b9:	01 f0                	add    %esi,%eax
+ 9bb:	5e                   	pop    %esi
+ 9bc:	5f                   	pop    %edi
+ 9bd:	5d                   	pop    %ebp
+ 9be:	c3                   	ret    
diff -ruN xv6-public/zombie.d xv6-public-partB_sjf/zombie.d
--- xv6-public/zombie.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/zombie.d	2022-10-07 20:27:45.131125000 +0530
@@ -0,0 +1,2 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/zombie.o and xv6-public-partB_sjf/zombie.o differ
diff -ruN xv6-public/zombie.sym xv6-public-partB_sjf/zombie.sym
--- xv6-public/zombie.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-partB_sjf/zombie.sym	2022-10-07 20:27:45.155125000 +0530
@@ -0,0 +1,73 @@
+00000000 .text
+000009c0 .rodata
+000009e4 .eh_frame
+00000d00 .data
+00000d20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+000009c8 digits.1105
+00000000 umalloc.c
+00000d20 freep
+00000d24 base
+00000000 random.c
+00000d40 mt
+00000d00 mti
+000009dc mag01.989
+00000030 strcpy
+00000790 sgenrand
+00000420 printf
+00000260 memmove
+000002db mknod
+00000150 gets
+00000313 getpid
+00000680 malloc
+00000323 sleep
+00000353 get_burst_time
+00000930 random_at_most
+0000035b getCurrentInfo
+000002a3 pipe
+000002b3 write
+000002eb fstat
+000002c3 kill
+00000303 chdir
+000002cb exec
+0000029b wait
+000002ab read
+000002e3 unlink
+0000028b fork
+0000031b sbrk
+0000032b uptime
+00000d04 __bss_start
+000000f0 memset
+00000000 main
+0000034b set_burst_time
+00000060 strcmp
+0000030b dup
+000007d0 genrand
+00000333 getNumProc
+00000343 getProcInfo
+000001d0 stat
+00000d04 _edata
+00001700 _end
+000002f3 link
+00000293 exit
+0000033b getMaxPID
+00000220 atoi
+000000b0 strlen
+000002d3 open
+00000110 strchr
+00000363 getCurrentPID
+00000970 randomrange
+000002fb mkdir
+000002bb close
+000005f0 free
